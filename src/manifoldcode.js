(function webpackUniversalModuleDefinition(root, factory) {
  if(typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if(typeof define === 'function' && define.amd)
    define([], factory);
  else if(typeof exports === 'object')
    exports["connect"] = factory();
  else
    root["connect"] = factory();
})((typeof self !== 'undefined' ? self : this), function() {
  return /******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
      /******/
      /******/ 		// Check if module is in cache
      /******/ 		if(installedModules[moduleId]) {
        /******/ 			return installedModules[moduleId].exports;
        /******/ 		}
      /******/ 		// Create a new module (and put it into the cache)
      /******/ 		var module = installedModules[moduleId] = {
        /******/ 			i: moduleId,
        /******/ 			l: false,
        /******/ 			exports: {}
        /******/ 		};
      /******/
      /******/ 		// Execute the module function
      /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
      /******/
      /******/ 		// Flag the module as loaded
      /******/ 		module.l = true;
      /******/
      /******/ 		// Return the exports of the module
      /******/ 		return module.exports;
      /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
      /******/ 		if(!__webpack_require__.o(exports, name)) {
        /******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
        /******/ 		}
      /******/ 	};
    /******/
    /******/ 	// define __esModule on exports
    /******/ 	__webpack_require__.r = function(exports) {
      /******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        /******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
        /******/ 		}
      /******/ 		Object.defineProperty(exports, '__esModule', { value: true });
      /******/ 	};
    /******/
    /******/ 	// create a fake namespace object
    /******/ 	// mode & 1: value is a module id, require it
    /******/ 	// mode & 2: merge all properties of value into the ns
    /******/ 	// mode & 4: return value when already ns object
    /******/ 	// mode & 8|1: behave like require
    /******/ 	__webpack_require__.t = function(value, mode) {
      /******/ 		if(mode & 1) value = __webpack_require__(value);
      /******/ 		if(mode & 8) return value;
      /******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
      /******/ 		var ns = Object.create(null);
      /******/ 		__webpack_require__.r(ns);
      /******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
      /******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
      /******/ 		return ns;
      /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
      /******/ 		var getter = module && module.__esModule ?
        /******/ 			function getDefault() { return module['default']; } :
        /******/ 			function getModuleExports() { return module; };
      /******/ 		__webpack_require__.d(getter, 'a', getter);
      /******/ 		return getter;
      /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = "fb15");
    /******/ })
    /************************************************************************/
    /******/ ({

      /***/ 0:
      /***/ (function(module, exports) {

        /* (ignored) */

        /***/ }),

      /***/ "00ee":
      /***/ (function(module, exports, __webpack_require__) {

        var wellKnownSymbol = __webpack_require__("b622");

        var TO_STRING_TAG = wellKnownSymbol('toStringTag');
        var test = {};

        test[TO_STRING_TAG] = 'z';

        module.exports = String(test) === '[object z]';


        /***/ }),

      /***/ "0366":
      /***/ (function(module, exports, __webpack_require__) {

        var aCallable = __webpack_require__("59ed");

// optional / simple context binding
        module.exports = function (fn, that, length) {
          aCallable(fn);
          if (that === undefined) return fn;
          switch (length) {
            case 0: return function () {
              return fn.call(that);
            };
            case 1: return function (a) {
              return fn.call(that, a);
            };
            case 2: return function (a, b) {
              return fn.call(that, a, b);
            };
            case 3: return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
          }
          return function (/* ...args */) {
            return fn.apply(that, arguments);
          };
        };


        /***/ }),

      /***/ "0538":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var aCallable = __webpack_require__("59ed");
        var isObject = __webpack_require__("861d");

        var slice = [].slice;
        var factories = {};

        var construct = function (C, argsLength, args) {
          if (!(argsLength in factories)) {
            for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
            // eslint-disable-next-line no-new-func -- we have no proper alternatives, IE8- only
            factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
          } return factories[argsLength](C, args);
        };

// `Function.prototype.bind` method implementation
// https://tc39.es/ecma262/#sec-function.prototype.bind
        module.exports = Function.bind || function bind(that /* , ...args */) {
          var fn = aCallable(this);
          var partArgs = slice.call(arguments, 1);
          var boundFunction = function bound(/* args... */) {
            var args = partArgs.concat(slice.call(arguments));
            return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
          };
          if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
          return boundFunction;
        };


        /***/ }),

      /***/ "057f":
      /***/ (function(module, exports, __webpack_require__) {

        /* eslint-disable es/no-object-getownpropertynames -- safe */
        var toIndexedObject = __webpack_require__("fc6a");
        var $getOwnPropertyNames = __webpack_require__("241c").f;

        var toString = {}.toString;

        var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
          ? Object.getOwnPropertyNames(window) : [];

        var getWindowNames = function (it) {
          try {
            return $getOwnPropertyNames(it);
          } catch (error) {
            return windowNames.slice();
          }
        };

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
        module.exports.f = function getOwnPropertyNames(it) {
          return windowNames && toString.call(it) == '[object Window]'
            ? getWindowNames(it)
            : $getOwnPropertyNames(toIndexedObject(it));
        };


        /***/ }),

      /***/ "06cf":
      /***/ (function(module, exports, __webpack_require__) {

        var DESCRIPTORS = __webpack_require__("83ab");
        var propertyIsEnumerableModule = __webpack_require__("d1e7");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        var toIndexedObject = __webpack_require__("fc6a");
        var toPropertyKey = __webpack_require__("a04b");
        var has = __webpack_require__("5135");
        var IE8_DOM_DEFINE = __webpack_require__("0cfb");

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
        exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
          O = toIndexedObject(O);
          P = toPropertyKey(P);
          if (IE8_DOM_DEFINE) try {
            return $getOwnPropertyDescriptor(O, P);
          } catch (error) { /* empty */ }
          if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
        };


        /***/ }),

      /***/ "07f2":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__("c3c0");
        var SHA256 = __webpack_require__("6eed");

        function SHA224() {
          if (!(this instanceof SHA224))
            return new SHA224();

          SHA256.call(this);
          this.h = [
            0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
            0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
        }
        utils.inherits(SHA224, SHA256);
        module.exports = SHA224;

        SHA224.blockSize = 512;
        SHA224.outSize = 224;
        SHA224.hmacStrength = 192;
        SHA224.padLength = 64;

        SHA224.prototype._digest = function digest(enc) {
          // Just truncate output
          if (enc === 'hex')
            return utils.toHex32(this.h.slice(0, 7), 'big');
          else
            return utils.split32(this.h.slice(0, 7), 'big');
        };



        /***/ }),

      /***/ "0b42":
      /***/ (function(module, exports, __webpack_require__) {

        var isArray = __webpack_require__("e8b5");
        var isConstructor = __webpack_require__("68ee");
        var isObject = __webpack_require__("861d");
        var wellKnownSymbol = __webpack_require__("b622");

        var SPECIES = wellKnownSymbol('species');

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
        module.exports = function (originalArray) {
          var C;
          if (isArray(originalArray)) {
            C = originalArray.constructor;
            // cross-realm fallback
            if (isConstructor(C) && (C === Array || isArray(C.prototype))) C = undefined;
            else if (isObject(C)) {
              C = C[SPECIES];
              if (C === null) C = undefined;
            }
          } return C === undefined ? Array : C;
        };


        /***/ }),

      /***/ "0bc1":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_MInstallWallet_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a4d7");
        /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_MInstallWallet_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_MInstallWallet_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
        /* unused harmony reexport * */


        /***/ }),

      /***/ "0cfb":
      /***/ (function(module, exports, __webpack_require__) {

        var DESCRIPTORS = __webpack_require__("83ab");
        var fails = __webpack_require__("d039");
        var createElement = __webpack_require__("cc12");

// Thank's IE8 for his funny defineProperty
        module.exports = !DESCRIPTORS && !fails(function () {
          // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
          return Object.defineProperty(createElement('div'), 'a', {
            get: function () { return 7; }
          }).a != 7;
        });


        /***/ }),

      /***/ "0d51":
      /***/ (function(module, exports) {

        module.exports = function (argument) {
          try {
            return String(argument);
          } catch (error) {
            return 'Object';
          }
        };


        /***/ }),

      /***/ "107c":
      /***/ (function(module, exports, __webpack_require__) {

        var fails = __webpack_require__("d039");
        var global = __webpack_require__("da84");

// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
        var $RegExp = global.RegExp;

        module.exports = fails(function () {
          var re = $RegExp('(?<a>b)', 'g');
          return re.exec('b').groups.a !== 'b' ||
            'b'.replace(re, '$<a>c') !== 'bc';
        });


        /***/ }),

      /***/ "1276":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
        var isRegExp = __webpack_require__("44e7");
        var anObject = __webpack_require__("825a");
        var requireObjectCoercible = __webpack_require__("1d80");
        var speciesConstructor = __webpack_require__("4840");
        var advanceStringIndex = __webpack_require__("8aa5");
        var toLength = __webpack_require__("50c4");
        var toString = __webpack_require__("577e");
        var getMethod = __webpack_require__("dc4a");
        var callRegExpExec = __webpack_require__("14c3");
        var regexpExec = __webpack_require__("9263");
        var stickyHelpers = __webpack_require__("9f7f");
        var fails = __webpack_require__("d039");

        var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
        var arrayPush = [].push;
        var min = Math.min;
        var MAX_UINT32 = 0xFFFFFFFF;

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
        var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
          // eslint-disable-next-line regexp/no-empty-group -- required for testing
          var re = /(?:)/;
          var originalExec = re.exec;
          re.exec = function () { return originalExec.apply(this, arguments); };
          var result = 'ab'.split(re);
          return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
        });

// @@split logic
        fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
          var internalSplit;
          if (
            'abbc'.split(/(b)*/)[1] == 'c' ||
            // eslint-disable-next-line regexp/no-empty-group -- required for testing
            'test'.split(/(?:)/, -1).length != 4 ||
            'ab'.split(/(?:ab)*/).length != 2 ||
            '.'.split(/(.?)(.?)/).length != 4 ||
            // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
            '.'.split(/()()/).length > 1 ||
            ''.split(/.?/).length
          ) {
            // based on es5-shim implementation, need to rework it
            internalSplit = function (separator, limit) {
              var string = toString(requireObjectCoercible(this));
              var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
              if (lim === 0) return [];
              if (separator === undefined) return [string];
              // If `separator` is not a regex, use native split
              if (!isRegExp(separator)) {
                return nativeSplit.call(string, separator, lim);
              }
              var output = [];
              var flags = (separator.ignoreCase ? 'i' : '') +
                (separator.multiline ? 'm' : '') +
                (separator.unicode ? 'u' : '') +
                (separator.sticky ? 'y' : '');
              var lastLastIndex = 0;
              // Make `global` and avoid `lastIndex` issues by working with a copy
              var separatorCopy = new RegExp(separator.source, flags + 'g');
              var match, lastIndex, lastLength;
              while (match = regexpExec.call(separatorCopy, string)) {
                lastIndex = separatorCopy.lastIndex;
                if (lastIndex > lastLastIndex) {
                  output.push(string.slice(lastLastIndex, match.index));
                  if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
                  lastLength = match[0].length;
                  lastLastIndex = lastIndex;
                  if (output.length >= lim) break;
                }
                if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
              }
              if (lastLastIndex === string.length) {
                if (lastLength || !separatorCopy.test('')) output.push('');
              } else output.push(string.slice(lastLastIndex));
              return output.length > lim ? output.slice(0, lim) : output;
            };
            // Chakra, V8
          } else if ('0'.split(undefined, 0).length) {
            internalSplit = function (separator, limit) {
              return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
            };
          } else internalSplit = nativeSplit;

          return [
            // `String.prototype.split` method
            // https://tc39.es/ecma262/#sec-string.prototype.split
            function split(separator, limit) {
              var O = requireObjectCoercible(this);
              var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);
              return splitter
                ? splitter.call(separator, O, limit)
                : internalSplit.call(toString(O), separator, limit);
            },
            // `RegExp.prototype[@@split]` method
            // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
            //
            // NOTE: This cannot be properly polyfilled in engines that don't support
            // the 'y' flag.
            function (string, limit) {
              var rx = anObject(this);
              var S = toString(string);
              var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

              if (res.done) return res.value;

              var C = speciesConstructor(rx, RegExp);

              var unicodeMatching = rx.unicode;
              var flags = (rx.ignoreCase ? 'i' : '') +
                (rx.multiline ? 'm' : '') +
                (rx.unicode ? 'u' : '') +
                (UNSUPPORTED_Y ? 'g' : 'y');

              // ^(? + rx + ) is needed, in combination with some S slicing, to
              // simulate the 'y' flag.
              var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
              var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
              if (lim === 0) return [];
              if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
              var p = 0;
              var q = 0;
              var A = [];
              while (q < S.length) {
                splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
                var z = callRegExpExec(splitter, UNSUPPORTED_Y ? S.slice(q) : S);
                var e;
                if (
                  z === null ||
                  (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
                ) {
                  q = advanceStringIndex(S, q, unicodeMatching);
                } else {
                  A.push(S.slice(p, q));
                  if (A.length === lim) return A;
                  for (var i = 1; i <= z.length - 1; i++) {
                    A.push(z[i]);
                    if (A.length === lim) return A;
                  }
                  q = p = e;
                }
              }
              A.push(S.slice(p));
              return A;
            }
          ];
        }, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);


        /***/ }),

      /***/ "13e2":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__("c3c0");
        var common = __webpack_require__("edc9");
        var shaCommon = __webpack_require__("aa56");

        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_5 = utils.sum32_5;
        var ft_1 = shaCommon.ft_1;
        var BlockHash = common.BlockHash;

        var sha1_K = [
          0x5A827999, 0x6ED9EBA1,
          0x8F1BBCDC, 0xCA62C1D6
        ];

        function SHA1() {
          if (!(this instanceof SHA1))
            return new SHA1();

          BlockHash.call(this);
          this.h = [
            0x67452301, 0xefcdab89, 0x98badcfe,
            0x10325476, 0xc3d2e1f0 ];
          this.W = new Array(80);
        }

        utils.inherits(SHA1, BlockHash);
        module.exports = SHA1;

        SHA1.blockSize = 512;
        SHA1.outSize = 160;
        SHA1.hmacStrength = 80;
        SHA1.padLength = 64;

        SHA1.prototype._update = function _update(msg, start) {
          var W = this.W;

          for (var i = 0; i < 16; i++)
            W[i] = msg[start + i];

          for(; i < W.length; i++)
            W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

          var a = this.h[0];
          var b = this.h[1];
          var c = this.h[2];
          var d = this.h[3];
          var e = this.h[4];

          for (i = 0; i < W.length; i++) {
            var s = ~~(i / 20);
            var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
            e = d;
            d = c;
            c = rotl32(b, 30);
            b = a;
            a = t;
          }

          this.h[0] = sum32(this.h[0], a);
          this.h[1] = sum32(this.h[1], b);
          this.h[2] = sum32(this.h[2], c);
          this.h[3] = sum32(this.h[3], d);
          this.h[4] = sum32(this.h[4], e);
        };

        SHA1.prototype._digest = function digest(enc) {
          if (enc === 'hex')
            return utils.toHex32(this.h, 'big');
          else
            return utils.split32(this.h, 'big');
        };


        /***/ }),

      /***/ "14c3":
      /***/ (function(module, exports, __webpack_require__) {

        var anObject = __webpack_require__("825a");
        var isCallable = __webpack_require__("1626");
        var classof = __webpack_require__("c6b6");
        var regexpExec = __webpack_require__("9263");

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
        module.exports = function (R, S) {
          var exec = R.exec;
          if (isCallable(exec)) {
            var result = exec.call(R, S);
            if (result !== null) anObject(result);
            return result;
          }
          if (classof(R) === 'RegExp') return regexpExec.call(R, S);
          throw TypeError('RegExp#exec called on incompatible receiver');
        };


        /***/ }),

      /***/ "159b":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var DOMIterables = __webpack_require__("fdbc");
        var DOMTokenListPrototype = __webpack_require__("785a");
        var forEach = __webpack_require__("17c2");
        var createNonEnumerableProperty = __webpack_require__("9112");

        var handlePrototype = function (CollectionPrototype) {
          // some Chrome versions have non-configurable methods on DOMTokenList
          if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
            createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
          } catch (error) {
            CollectionPrototype.forEach = forEach;
          }
        };

        for (var COLLECTION_NAME in DOMIterables) {
          if (DOMIterables[COLLECTION_NAME]) {
            handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype);
          }
        }

        handlePrototype(DOMTokenListPrototype);


        /***/ }),

      /***/ "1626":
      /***/ (function(module, exports) {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
        module.exports = function (argument) {
          return typeof argument === 'function';
        };


        /***/ }),

      /***/ "17c2":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $forEach = __webpack_require__("b727").forEach;
        var arrayMethodIsStrict = __webpack_require__("a640");

        var STRICT_METHOD = arrayMethodIsStrict('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
        module.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
          return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
// eslint-disable-next-line es/no-array-prototype-foreach -- safe
        } : [].forEach;


        /***/ }),

      /***/ "19aa":
      /***/ (function(module, exports) {

        module.exports = function (it, Constructor, name) {
          if (it instanceof Constructor) return it;
          throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
        };


        /***/ }),

      /***/ "1be4":
      /***/ (function(module, exports, __webpack_require__) {

        var getBuiltIn = __webpack_require__("d066");

        module.exports = getBuiltIn('document', 'documentElement');


        /***/ }),

      /***/ "1c55":
      /***/ (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */(function(process, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
         * [js-sha3]{@link https://github.com/emn178/js-sha3}
         *
         * @version 0.8.0
         * @author Chen, Yi-Cyuan [emn178@gmail.com]
         * @copyright Chen, Yi-Cyuan 2015-2018
         * @license MIT
         */
          /*jslint bitwise: true */
          (function () {
            'use strict';

            var INPUT_ERROR = 'input is invalid type';
            var FINALIZE_ERROR = 'finalize already called';
            var WINDOW = typeof window === 'object';
            var root = WINDOW ? window : {};
            if (root.JS_SHA3_NO_WINDOW) {
              WINDOW = false;
            }
            var WEB_WORKER = !WINDOW && typeof self === 'object';
            var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
            if (NODE_JS) {
              root = global;
            } else if (WEB_WORKER) {
              root = self;
            }
            var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
            var AMD =  true && __webpack_require__("3c35");
            var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
            var HEX_CHARS = '0123456789abcdef'.split('');
            var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
            var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
            var KECCAK_PADDING = [1, 256, 65536, 16777216];
            var PADDING = [6, 1536, 393216, 100663296];
            var SHIFT = [0, 8, 16, 24];
            var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
              0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
              2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
              2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
              2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
            var BITS = [224, 256, 384, 512];
            var SHAKE_BITS = [128, 256];
            var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
            var CSHAKE_BYTEPAD = {
              '128': 168,
              '256': 136
            };

            if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
              Array.isArray = function (obj) {
                return Object.prototype.toString.call(obj) === '[object Array]';
              };
            }

            if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
              ArrayBuffer.isView = function (obj) {
                return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
              };
            }

            var createOutputMethod = function (bits, padding, outputType) {
              return function (message) {
                return new Keccak(bits, padding, bits).update(message)[outputType]();
              };
            };

            var createShakeOutputMethod = function (bits, padding, outputType) {
              return function (message, outputBits) {
                return new Keccak(bits, padding, outputBits).update(message)[outputType]();
              };
            };

            var createCshakeOutputMethod = function (bits, padding, outputType) {
              return function (message, outputBits, n, s) {
                return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
              };
            };

            var createKmacOutputMethod = function (bits, padding, outputType) {
              return function (key, message, outputBits, s) {
                return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
              };
            };

            var createOutputMethods = function (method, createMethod, bits, padding) {
              for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
                var type = OUTPUT_TYPES[i];
                method[type] = createMethod(bits, padding, type);
              }
              return method;
            };

            var createMethod = function (bits, padding) {
              var method = createOutputMethod(bits, padding, 'hex');
              method.create = function () {
                return new Keccak(bits, padding, bits);
              };
              method.update = function (message) {
                return method.create().update(message);
              };
              return createOutputMethods(method, createOutputMethod, bits, padding);
            };

            var createShakeMethod = function (bits, padding) {
              var method = createShakeOutputMethod(bits, padding, 'hex');
              method.create = function (outputBits) {
                return new Keccak(bits, padding, outputBits);
              };
              method.update = function (message, outputBits) {
                return method.create(outputBits).update(message);
              };
              return createOutputMethods(method, createShakeOutputMethod, bits, padding);
            };

            var createCshakeMethod = function (bits, padding) {
              var w = CSHAKE_BYTEPAD[bits];
              var method = createCshakeOutputMethod(bits, padding, 'hex');
              method.create = function (outputBits, n, s) {
                if (!n && !s) {
                  return methods['shake' + bits].create(outputBits);
                } else {
                  return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
                }
              };
              method.update = function (message, outputBits, n, s) {
                return method.create(outputBits, n, s).update(message);
              };
              return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
            };

            var createKmacMethod = function (bits, padding) {
              var w = CSHAKE_BYTEPAD[bits];
              var method = createKmacOutputMethod(bits, padding, 'hex');
              method.create = function (key, outputBits, s) {
                return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
              };
              method.update = function (key, message, outputBits, s) {
                return method.create(key, outputBits, s).update(message);
              };
              return createOutputMethods(method, createKmacOutputMethod, bits, padding);
            };

            var algorithms = [
              { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
              { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
              { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
              { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
              { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
            ];

            var methods = {}, methodNames = [];

            for (var i = 0; i < algorithms.length; ++i) {
              var algorithm = algorithms[i];
              var bits = algorithm.bits;
              for (var j = 0; j < bits.length; ++j) {
                var methodName = algorithm.name + '_' + bits[j];
                methodNames.push(methodName);
                methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
                if (algorithm.name !== 'sha3') {
                  var newMethodName = algorithm.name + bits[j];
                  methodNames.push(newMethodName);
                  methods[newMethodName] = methods[methodName];
                }
              }
            }

            function Keccak(bits, padding, outputBits) {
              this.blocks = [];
              this.s = [];
              this.padding = padding;
              this.outputBits = outputBits;
              this.reset = true;
              this.finalized = false;
              this.block = 0;
              this.start = 0;
              this.blockCount = (1600 - (bits << 1)) >> 5;
              this.byteCount = this.blockCount << 2;
              this.outputBlocks = outputBits >> 5;
              this.extraBytes = (outputBits & 31) >> 3;

              for (var i = 0; i < 50; ++i) {
                this.s[i] = 0;
              }
            }

            Keccak.prototype.update = function (message) {
              if (this.finalized) {
                throw new Error(FINALIZE_ERROR);
              }
              var notString, type = typeof message;
              if (type !== 'string') {
                if (type === 'object') {
                  if (message === null) {
                    throw new Error(INPUT_ERROR);
                  } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
                    message = new Uint8Array(message);
                  } else if (!Array.isArray(message)) {
                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                      throw new Error(INPUT_ERROR);
                    }
                  }
                } else {
                  throw new Error(INPUT_ERROR);
                }
                notString = true;
              }
              var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
                blockCount = this.blockCount, index = 0, s = this.s, i, code;

              while (index < length) {
                if (this.reset) {
                  this.reset = false;
                  blocks[0] = this.block;
                  for (i = 1; i < blockCount + 1; ++i) {
                    blocks[i] = 0;
                  }
                }
                if (notString) {
                  for (i = this.start; index < length && i < byteCount; ++index) {
                    blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
                  }
                } else {
                  for (i = this.start; index < length && i < byteCount; ++index) {
                    code = message.charCodeAt(index);
                    if (code < 0x80) {
                      blocks[i >> 2] |= code << SHIFT[i++ & 3];
                    } else if (code < 0x800) {
                      blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                    } else if (code < 0xd800 || code >= 0xe000) {
                      blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                    } else {
                      code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                      blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                      blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                    }
                  }
                }
                this.lastByteIndex = i;
                if (i >= byteCount) {
                  this.start = i - byteCount;
                  this.block = blocks[blockCount];
                  for (i = 0; i < blockCount; ++i) {
                    s[i] ^= blocks[i];
                  }
                  f(s);
                  this.reset = true;
                } else {
                  this.start = i;
                }
              }
              return this;
            };

            Keccak.prototype.encode = function (x, right) {
              var o = x & 255, n = 1;
              var bytes = [o];
              x = x >> 8;
              o = x & 255;
              while (o > 0) {
                bytes.unshift(o);
                x = x >> 8;
                o = x & 255;
                ++n;
              }
              if (right) {
                bytes.push(n);
              } else {
                bytes.unshift(n);
              }
              this.update(bytes);
              return bytes.length;
            };

            Keccak.prototype.encodeString = function (str) {
              var notString, type = typeof str;
              if (type !== 'string') {
                if (type === 'object') {
                  if (str === null) {
                    throw new Error(INPUT_ERROR);
                  } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
                    str = new Uint8Array(str);
                  } else if (!Array.isArray(str)) {
                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                      throw new Error(INPUT_ERROR);
                    }
                  }
                } else {
                  throw new Error(INPUT_ERROR);
                }
                notString = true;
              }
              var bytes = 0, length = str.length;
              if (notString) {
                bytes = length;
              } else {
                for (var i = 0; i < str.length; ++i) {
                  var code = str.charCodeAt(i);
                  if (code < 0x80) {
                    bytes += 1;
                  } else if (code < 0x800) {
                    bytes += 2;
                  } else if (code < 0xd800 || code >= 0xe000) {
                    bytes += 3;
                  } else {
                    code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
                    bytes += 4;
                  }
                }
              }
              bytes += this.encode(bytes * 8);
              this.update(str);
              return bytes;
            };

            Keccak.prototype.bytepad = function (strs, w) {
              var bytes = this.encode(w);
              for (var i = 0; i < strs.length; ++i) {
                bytes += this.encodeString(strs[i]);
              }
              var paddingBytes = w - bytes % w;
              var zeros = [];
              zeros.length = paddingBytes;
              this.update(zeros);
              return this;
            };

            Keccak.prototype.finalize = function () {
              if (this.finalized) {
                return;
              }
              this.finalized = true;
              var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
              blocks[i >> 2] |= this.padding[i & 3];
              if (this.lastByteIndex === this.byteCount) {
                blocks[0] = blocks[blockCount];
                for (i = 1; i < blockCount + 1; ++i) {
                  blocks[i] = 0;
                }
              }
              blocks[blockCount - 1] |= 0x80000000;
              for (i = 0; i < blockCount; ++i) {
                s[i] ^= blocks[i];
              }
              f(s);
            };

            Keccak.prototype.toString = Keccak.prototype.hex = function () {
              this.finalize();

              var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
                extraBytes = this.extraBytes, i = 0, j = 0;
              var hex = '', block;
              while (j < outputBlocks) {
                for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                  block = s[i];
                  hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
                    HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
                    HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
                    HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
                }
                if (j % blockCount === 0) {
                  f(s);
                  i = 0;
                }
              }
              if (extraBytes) {
                block = s[i];
                hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
                if (extraBytes > 1) {
                  hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
                }
                if (extraBytes > 2) {
                  hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
                }
              }
              return hex;
            };

            Keccak.prototype.arrayBuffer = function () {
              this.finalize();

              var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
                extraBytes = this.extraBytes, i = 0, j = 0;
              var bytes = this.outputBits >> 3;
              var buffer;
              if (extraBytes) {
                buffer = new ArrayBuffer((outputBlocks + 1) << 2);
              } else {
                buffer = new ArrayBuffer(bytes);
              }
              var array = new Uint32Array(buffer);
              while (j < outputBlocks) {
                for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                  array[j] = s[i];
                }
                if (j % blockCount === 0) {
                  f(s);
                }
              }
              if (extraBytes) {
                array[i] = s[i];
                buffer = buffer.slice(0, bytes);
              }
              return buffer;
            };

            Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

            Keccak.prototype.digest = Keccak.prototype.array = function () {
              this.finalize();

              var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
                extraBytes = this.extraBytes, i = 0, j = 0;
              var array = [], offset, block;
              while (j < outputBlocks) {
                for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                  offset = j << 2;
                  block = s[i];
                  array[offset] = block & 0xFF;
                  array[offset + 1] = (block >> 8) & 0xFF;
                  array[offset + 2] = (block >> 16) & 0xFF;
                  array[offset + 3] = (block >> 24) & 0xFF;
                }
                if (j % blockCount === 0) {
                  f(s);
                }
              }
              if (extraBytes) {
                offset = j << 2;
                block = s[i];
                array[offset] = block & 0xFF;
                if (extraBytes > 1) {
                  array[offset + 1] = (block >> 8) & 0xFF;
                }
                if (extraBytes > 2) {
                  array[offset + 2] = (block >> 16) & 0xFF;
                }
              }
              return array;
            };

            function Kmac(bits, padding, outputBits) {
              Keccak.call(this, bits, padding, outputBits);
            }

            Kmac.prototype = new Keccak();

            Kmac.prototype.finalize = function () {
              this.encode(this.outputBits, true);
              return Keccak.prototype.finalize.call(this);
            };

            var f = function (s) {
              var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
                b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
                b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
                b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
              for (n = 0; n < 48; n += 2) {
                c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
                c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
                c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
                c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
                c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
                c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
                c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
                c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
                c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
                c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

                h = c8 ^ ((c2 << 1) | (c3 >>> 31));
                l = c9 ^ ((c3 << 1) | (c2 >>> 31));
                s[0] ^= h;
                s[1] ^= l;
                s[10] ^= h;
                s[11] ^= l;
                s[20] ^= h;
                s[21] ^= l;
                s[30] ^= h;
                s[31] ^= l;
                s[40] ^= h;
                s[41] ^= l;
                h = c0 ^ ((c4 << 1) | (c5 >>> 31));
                l = c1 ^ ((c5 << 1) | (c4 >>> 31));
                s[2] ^= h;
                s[3] ^= l;
                s[12] ^= h;
                s[13] ^= l;
                s[22] ^= h;
                s[23] ^= l;
                s[32] ^= h;
                s[33] ^= l;
                s[42] ^= h;
                s[43] ^= l;
                h = c2 ^ ((c6 << 1) | (c7 >>> 31));
                l = c3 ^ ((c7 << 1) | (c6 >>> 31));
                s[4] ^= h;
                s[5] ^= l;
                s[14] ^= h;
                s[15] ^= l;
                s[24] ^= h;
                s[25] ^= l;
                s[34] ^= h;
                s[35] ^= l;
                s[44] ^= h;
                s[45] ^= l;
                h = c4 ^ ((c8 << 1) | (c9 >>> 31));
                l = c5 ^ ((c9 << 1) | (c8 >>> 31));
                s[6] ^= h;
                s[7] ^= l;
                s[16] ^= h;
                s[17] ^= l;
                s[26] ^= h;
                s[27] ^= l;
                s[36] ^= h;
                s[37] ^= l;
                s[46] ^= h;
                s[47] ^= l;
                h = c6 ^ ((c0 << 1) | (c1 >>> 31));
                l = c7 ^ ((c1 << 1) | (c0 >>> 31));
                s[8] ^= h;
                s[9] ^= l;
                s[18] ^= h;
                s[19] ^= l;
                s[28] ^= h;
                s[29] ^= l;
                s[38] ^= h;
                s[39] ^= l;
                s[48] ^= h;
                s[49] ^= l;

                b0 = s[0];
                b1 = s[1];
                b32 = (s[11] << 4) | (s[10] >>> 28);
                b33 = (s[10] << 4) | (s[11] >>> 28);
                b14 = (s[20] << 3) | (s[21] >>> 29);
                b15 = (s[21] << 3) | (s[20] >>> 29);
                b46 = (s[31] << 9) | (s[30] >>> 23);
                b47 = (s[30] << 9) | (s[31] >>> 23);
                b28 = (s[40] << 18) | (s[41] >>> 14);
                b29 = (s[41] << 18) | (s[40] >>> 14);
                b20 = (s[2] << 1) | (s[3] >>> 31);
                b21 = (s[3] << 1) | (s[2] >>> 31);
                b2 = (s[13] << 12) | (s[12] >>> 20);
                b3 = (s[12] << 12) | (s[13] >>> 20);
                b34 = (s[22] << 10) | (s[23] >>> 22);
                b35 = (s[23] << 10) | (s[22] >>> 22);
                b16 = (s[33] << 13) | (s[32] >>> 19);
                b17 = (s[32] << 13) | (s[33] >>> 19);
                b48 = (s[42] << 2) | (s[43] >>> 30);
                b49 = (s[43] << 2) | (s[42] >>> 30);
                b40 = (s[5] << 30) | (s[4] >>> 2);
                b41 = (s[4] << 30) | (s[5] >>> 2);
                b22 = (s[14] << 6) | (s[15] >>> 26);
                b23 = (s[15] << 6) | (s[14] >>> 26);
                b4 = (s[25] << 11) | (s[24] >>> 21);
                b5 = (s[24] << 11) | (s[25] >>> 21);
                b36 = (s[34] << 15) | (s[35] >>> 17);
                b37 = (s[35] << 15) | (s[34] >>> 17);
                b18 = (s[45] << 29) | (s[44] >>> 3);
                b19 = (s[44] << 29) | (s[45] >>> 3);
                b10 = (s[6] << 28) | (s[7] >>> 4);
                b11 = (s[7] << 28) | (s[6] >>> 4);
                b42 = (s[17] << 23) | (s[16] >>> 9);
                b43 = (s[16] << 23) | (s[17] >>> 9);
                b24 = (s[26] << 25) | (s[27] >>> 7);
                b25 = (s[27] << 25) | (s[26] >>> 7);
                b6 = (s[36] << 21) | (s[37] >>> 11);
                b7 = (s[37] << 21) | (s[36] >>> 11);
                b38 = (s[47] << 24) | (s[46] >>> 8);
                b39 = (s[46] << 24) | (s[47] >>> 8);
                b30 = (s[8] << 27) | (s[9] >>> 5);
                b31 = (s[9] << 27) | (s[8] >>> 5);
                b12 = (s[18] << 20) | (s[19] >>> 12);
                b13 = (s[19] << 20) | (s[18] >>> 12);
                b44 = (s[29] << 7) | (s[28] >>> 25);
                b45 = (s[28] << 7) | (s[29] >>> 25);
                b26 = (s[38] << 8) | (s[39] >>> 24);
                b27 = (s[39] << 8) | (s[38] >>> 24);
                b8 = (s[48] << 14) | (s[49] >>> 18);
                b9 = (s[49] << 14) | (s[48] >>> 18);

                s[0] = b0 ^ (~b2 & b4);
                s[1] = b1 ^ (~b3 & b5);
                s[10] = b10 ^ (~b12 & b14);
                s[11] = b11 ^ (~b13 & b15);
                s[20] = b20 ^ (~b22 & b24);
                s[21] = b21 ^ (~b23 & b25);
                s[30] = b30 ^ (~b32 & b34);
                s[31] = b31 ^ (~b33 & b35);
                s[40] = b40 ^ (~b42 & b44);
                s[41] = b41 ^ (~b43 & b45);
                s[2] = b2 ^ (~b4 & b6);
                s[3] = b3 ^ (~b5 & b7);
                s[12] = b12 ^ (~b14 & b16);
                s[13] = b13 ^ (~b15 & b17);
                s[22] = b22 ^ (~b24 & b26);
                s[23] = b23 ^ (~b25 & b27);
                s[32] = b32 ^ (~b34 & b36);
                s[33] = b33 ^ (~b35 & b37);
                s[42] = b42 ^ (~b44 & b46);
                s[43] = b43 ^ (~b45 & b47);
                s[4] = b4 ^ (~b6 & b8);
                s[5] = b5 ^ (~b7 & b9);
                s[14] = b14 ^ (~b16 & b18);
                s[15] = b15 ^ (~b17 & b19);
                s[24] = b24 ^ (~b26 & b28);
                s[25] = b25 ^ (~b27 & b29);
                s[34] = b34 ^ (~b36 & b38);
                s[35] = b35 ^ (~b37 & b39);
                s[44] = b44 ^ (~b46 & b48);
                s[45] = b45 ^ (~b47 & b49);
                s[6] = b6 ^ (~b8 & b0);
                s[7] = b7 ^ (~b9 & b1);
                s[16] = b16 ^ (~b18 & b10);
                s[17] = b17 ^ (~b19 & b11);
                s[26] = b26 ^ (~b28 & b20);
                s[27] = b27 ^ (~b29 & b21);
                s[36] = b36 ^ (~b38 & b30);
                s[37] = b37 ^ (~b39 & b31);
                s[46] = b46 ^ (~b48 & b40);
                s[47] = b47 ^ (~b49 & b41);
                s[8] = b8 ^ (~b0 & b2);
                s[9] = b9 ^ (~b1 & b3);
                s[18] = b18 ^ (~b10 & b12);
                s[19] = b19 ^ (~b11 & b13);
                s[28] = b28 ^ (~b20 & b22);
                s[29] = b29 ^ (~b21 & b23);
                s[38] = b38 ^ (~b30 & b32);
                s[39] = b39 ^ (~b31 & b33);
                s[48] = b48 ^ (~b40 & b42);
                s[49] = b49 ^ (~b41 & b43);

                s[0] ^= RC[n];
                s[1] ^= RC[n + 1];
              }
            };

            if (COMMON_JS) {
              module.exports = methods;
            } else {
              for (i = 0; i < methodNames.length; ++i) {
                root[methodNames[i]] = methods[methodNames[i]];
              }
              if (AMD) {
                !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                  return methods;
                }).call(exports, __webpack_require__, exports, module),
                __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              }
            }
          })();

          /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362"), __webpack_require__("c8ba")))

        /***/ }),

      /***/ "1c7e":
      /***/ (function(module, exports, __webpack_require__) {

        var wellKnownSymbol = __webpack_require__("b622");

        var ITERATOR = wellKnownSymbol('iterator');
        var SAFE_CLOSING = false;

        try {
          var called = 0;
          var iteratorWithReturn = {
            next: function () {
              return { done: !!called++ };
            },
            'return': function () {
              SAFE_CLOSING = true;
            }
          };
          iteratorWithReturn[ITERATOR] = function () {
            return this;
          };
          // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
          Array.from(iteratorWithReturn, function () { throw 2; });
        } catch (error) { /* empty */ }

        module.exports = function (exec, SKIP_CLOSING) {
          if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
          var ITERATION_SUPPORT = false;
          try {
            var object = {};
            object[ITERATOR] = function () {
              return {
                next: function () {
                  return { done: ITERATION_SUPPORT = true };
                }
              };
            };
            exec(object);
          } catch (error) { /* empty */ }
          return ITERATION_SUPPORT;
        };


        /***/ }),

      /***/ "1cdc":
      /***/ (function(module, exports, __webpack_require__) {

        var userAgent = __webpack_require__("342f");

        module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);


        /***/ }),

      /***/ "1d80":
      /***/ (function(module, exports) {

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
        module.exports = function (it) {
          if (it == undefined) throw TypeError("Can't call method on " + it);
          return it;
        };


        /***/ }),

      /***/ "1dde":
      /***/ (function(module, exports, __webpack_require__) {

        var fails = __webpack_require__("d039");
        var wellKnownSymbol = __webpack_require__("b622");
        var V8_VERSION = __webpack_require__("2d00");

        var SPECIES = wellKnownSymbol('species');

        module.exports = function (METHOD_NAME) {
          // We can't use this feature detection in V8 since it causes
          // deoptimization and serious performance degradation
          // https://github.com/zloirock/core-js/issues/677
          return V8_VERSION >= 51 || !fails(function () {
            var array = [];
            var constructor = array.constructor = {};
            constructor[SPECIES] = function () {
              return { foo: 1 };
            };
            return array[METHOD_NAME](Boolean).foo !== 1;
          });
        };


        /***/ }),

      /***/ "2137":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__("c3c0");
        var assert = __webpack_require__("da3e");

        function Hmac(hash, key, enc) {
          if (!(this instanceof Hmac))
            return new Hmac(hash, key, enc);
          this.Hash = hash;
          this.blockSize = hash.blockSize / 8;
          this.outSize = hash.outSize / 8;
          this.inner = null;
          this.outer = null;

          this._init(utils.toArray(key, enc));
        }
        module.exports = Hmac;

        Hmac.prototype._init = function init(key) {
          // Shorten key, if needed
          if (key.length > this.blockSize)
            key = new this.Hash().update(key).digest();
          assert(key.length <= this.blockSize);

          // Add padding to key
          for (var i = key.length; i < this.blockSize; i++)
            key.push(0);

          for (i = 0; i < key.length; i++)
            key[i] ^= 0x36;
          this.inner = new this.Hash().update(key);

          // 0x36 ^ 0x5c = 0x6a
          for (i = 0; i < key.length; i++)
            key[i] ^= 0x6a;
          this.outer = new this.Hash().update(key);
        };

        Hmac.prototype.update = function update(msg, enc) {
          this.inner.update(msg, enc);
          return this;
        };

        Hmac.prototype.digest = function digest(enc) {
          this.outer.update(this.inner.digest());
          return this.outer.digest(enc);
        };


        /***/ }),

      /***/ "2266":
      /***/ (function(module, exports, __webpack_require__) {

        var anObject = __webpack_require__("825a");
        var isArrayIteratorMethod = __webpack_require__("e95a");
        var toLength = __webpack_require__("50c4");
        var bind = __webpack_require__("0366");
        var getIterator = __webpack_require__("9a1f");
        var getIteratorMethod = __webpack_require__("35a1");
        var iteratorClose = __webpack_require__("2a62");

        var Result = function (stopped, result) {
          this.stopped = stopped;
          this.result = result;
        };

        module.exports = function (iterable, unboundFunction, options) {
          var that = options && options.that;
          var AS_ENTRIES = !!(options && options.AS_ENTRIES);
          var IS_ITERATOR = !!(options && options.IS_ITERATOR);
          var INTERRUPTED = !!(options && options.INTERRUPTED);
          var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
          var iterator, iterFn, index, length, result, next, step;

          var stop = function (condition) {
            if (iterator) iteratorClose(iterator, 'normal', condition);
            return new Result(true, condition);
          };

          var callFn = function (value) {
            if (AS_ENTRIES) {
              anObject(value);
              return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
            } return INTERRUPTED ? fn(value, stop) : fn(value);
          };

          if (IS_ITERATOR) {
            iterator = iterable;
          } else {
            iterFn = getIteratorMethod(iterable);
            if (!iterFn) throw TypeError(String(iterable) + ' is not iterable');
            // optimisation for array iterators
            if (isArrayIteratorMethod(iterFn)) {
              for (index = 0, length = toLength(iterable.length); length > index; index++) {
                result = callFn(iterable[index]);
                if (result && result instanceof Result) return result;
              } return new Result(false);
            }
            iterator = getIterator(iterable, iterFn);
          }

          next = iterator.next;
          while (!(step = next.call(iterator)).done) {
            try {
              result = callFn(step.value);
            } catch (error) {
              iteratorClose(iterator, 'throw', error);
            }
            if (typeof result == 'object' && result && result instanceof Result) return result;
          } return new Result(false);
        };


        /***/ }),

      /***/ "23cb":
      /***/ (function(module, exports, __webpack_require__) {

        var toInteger = __webpack_require__("a691");

        var max = Math.max;
        var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
        module.exports = function (index, length) {
          var integer = toInteger(index);
          return integer < 0 ? max(integer + length, 0) : min(integer, length);
        };


        /***/ }),

      /***/ "23e7":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
        var createNonEnumerableProperty = __webpack_require__("9112");
        var redefine = __webpack_require__("6eeb");
        var setGlobal = __webpack_require__("ce4e");
        var copyConstructorProperties = __webpack_require__("e893");
        var isForced = __webpack_require__("94ca");

        /*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/
        module.exports = function (options, source) {
          var TARGET = options.target;
          var GLOBAL = options.global;
          var STATIC = options.stat;
          var FORCED, target, key, targetProperty, sourceProperty, descriptor;
          if (GLOBAL) {
            target = global;
          } else if (STATIC) {
            target = global[TARGET] || setGlobal(TARGET, {});
          } else {
            target = (global[TARGET] || {}).prototype;
          }
          if (target) for (key in source) {
            sourceProperty = source[key];
            if (options.noTargetGet) {
              descriptor = getOwnPropertyDescriptor(target, key);
              targetProperty = descriptor && descriptor.value;
            } else targetProperty = target[key];
            FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
            // contained in target
            if (!FORCED && targetProperty !== undefined) {
              if (typeof sourceProperty === typeof targetProperty) continue;
              copyConstructorProperties(sourceProperty, targetProperty);
            }
            // add a flag to not completely full polyfills
            if (options.sham || (targetProperty && targetProperty.sham)) {
              createNonEnumerableProperty(sourceProperty, 'sham', true);
            }
            // extend global
            redefine(target, key, sourceProperty, options);
          }
        };


        /***/ }),

      /***/ "241c":
      /***/ (function(module, exports, __webpack_require__) {

        var internalObjectKeys = __webpack_require__("ca84");
        var enumBugKeys = __webpack_require__("7839");

        var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
        exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
          return internalObjectKeys(O, hiddenKeys);
        };


        /***/ }),

      /***/ "2532":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $ = __webpack_require__("23e7");
        var notARegExp = __webpack_require__("5a34");
        var requireObjectCoercible = __webpack_require__("1d80");
        var toString = __webpack_require__("577e");
        var correctIsRegExpLogic = __webpack_require__("ab13");

// `String.prototype.includes` method
// https://tc39.es/ecma262/#sec-string.prototype.includes
        $({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
          includes: function includes(searchString /* , position = 0 */) {
            return !!~toString(requireObjectCoercible(this))
              .indexOf(toString(notARegExp(searchString)), arguments.length > 1 ? arguments[1] : undefined);
          }
        });


        /***/ }),

      /***/ "25f0":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var PROPER_FUNCTION_NAME = __webpack_require__("5e77").PROPER;
        var redefine = __webpack_require__("6eeb");
        var anObject = __webpack_require__("825a");
        var $toString = __webpack_require__("577e");
        var fails = __webpack_require__("d039");
        var flags = __webpack_require__("ad6d");

        var TO_STRING = 'toString';
        var RegExpPrototype = RegExp.prototype;
        var nativeToString = RegExpPrototype[TO_STRING];

        var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
        var INCORRECT_NAME = PROPER_FUNCTION_NAME && nativeToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
        if (NOT_GENERIC || INCORRECT_NAME) {
          redefine(RegExp.prototype, TO_STRING, function toString() {
            var R = anObject(this);
            var p = $toString(R.source);
            var rf = R.flags;
            var f = $toString(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
            return '/' + p + '/' + f;
          }, { unsafe: true });
        }


        /***/ }),

      /***/ "2626":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var getBuiltIn = __webpack_require__("d066");
        var definePropertyModule = __webpack_require__("9bf2");
        var wellKnownSymbol = __webpack_require__("b622");
        var DESCRIPTORS = __webpack_require__("83ab");

        var SPECIES = wellKnownSymbol('species');

        module.exports = function (CONSTRUCTOR_NAME) {
          var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
          var defineProperty = definePropertyModule.f;

          if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
            defineProperty(Constructor, SPECIES, {
              configurable: true,
              get: function () { return this; }
            });
          }
        };


        /***/ }),

      /***/ "2a62":
      /***/ (function(module, exports, __webpack_require__) {

        var anObject = __webpack_require__("825a");
        var getMethod = __webpack_require__("dc4a");

        module.exports = function (iterator, kind, value) {
          var innerResult, innerError;
          anObject(iterator);
          try {
            innerResult = getMethod(iterator, 'return');
            if (!innerResult) {
              if (kind === 'throw') throw value;
              return value;
            }
            innerResult = innerResult.call(iterator);
          } catch (error) {
            innerError = true;
            innerResult = error;
          }
          if (kind === 'throw') throw value;
          if (innerError) throw innerResult;
          anObject(innerResult);
          return value;
        };


        /***/ }),

      /***/ "2cf4":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var isCallable = __webpack_require__("1626");
        var fails = __webpack_require__("d039");
        var bind = __webpack_require__("0366");
        var html = __webpack_require__("1be4");
        var createElement = __webpack_require__("cc12");
        var IS_IOS = __webpack_require__("1cdc");
        var IS_NODE = __webpack_require__("605d");

        var set = global.setImmediate;
        var clear = global.clearImmediate;
        var process = global.process;
        var MessageChannel = global.MessageChannel;
        var Dispatch = global.Dispatch;
        var counter = 0;
        var queue = {};
        var ONREADYSTATECHANGE = 'onreadystatechange';
        var location, defer, channel, port;

        try {
          // Deno throws a ReferenceError on `location` access without `--location` flag
          location = global.location;
        } catch (error) { /* empty */ }

        var run = function (id) {
          // eslint-disable-next-line no-prototype-builtins -- safe
          if (queue.hasOwnProperty(id)) {
            var fn = queue[id];
            delete queue[id];
            fn();
          }
        };

        var runner = function (id) {
          return function () {
            run(id);
          };
        };

        var listener = function (event) {
          run(event.data);
        };

        var post = function (id) {
          // old engines have not location.origin
          global.postMessage(String(id), location.protocol + '//' + location.host);
        };

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
        if (!set || !clear) {
          set = function setImmediate(fn) {
            var args = [];
            var argumentsLength = arguments.length;
            var i = 1;
            while (argumentsLength > i) args.push(arguments[i++]);
            queue[++counter] = function () {
              // eslint-disable-next-line no-new-func -- spec requirement
              (isCallable(fn) ? fn : Function(fn)).apply(undefined, args);
            };
            defer(counter);
            return counter;
          };
          clear = function clearImmediate(id) {
            delete queue[id];
          };
          // Node.js 0.8-
          if (IS_NODE) {
            defer = function (id) {
              process.nextTick(runner(id));
            };
            // Sphere (JS game engine) Dispatch API
          } else if (Dispatch && Dispatch.now) {
            defer = function (id) {
              Dispatch.now(runner(id));
            };
            // Browsers with MessageChannel, includes WebWorkers
            // except iOS - https://github.com/zloirock/core-js/issues/624
          } else if (MessageChannel && !IS_IOS) {
            channel = new MessageChannel();
            port = channel.port2;
            channel.port1.onmessage = listener;
            defer = bind(port.postMessage, port, 1);
            // Browsers with postMessage, skip WebWorkers
            // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
          } else if (
            global.addEventListener &&
            isCallable(global.postMessage) &&
            !global.importScripts &&
            location && location.protocol !== 'file:' &&
            !fails(post)
          ) {
            defer = post;
            global.addEventListener('message', listener, false);
            // IE8-
          } else if (ONREADYSTATECHANGE in createElement('script')) {
            defer = function (id) {
              html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
                html.removeChild(this);
                run(id);
              };
            };
            // Rest old browsers
          } else {
            defer = function (id) {
              setTimeout(runner(id), 0);
            };
          }
        }

        module.exports = {
          set: set,
          clear: clear
        };


        /***/ }),

      /***/ "2d00":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var userAgent = __webpack_require__("342f");

        var process = global.process;
        var Deno = global.Deno;
        var versions = process && process.versions || Deno && Deno.version;
        var v8 = versions && versions.v8;
        var match, version;

        if (v8) {
          match = v8.split('.');
          version = match[0] < 4 ? 1 : match[0] + match[1];
        } else if (userAgent) {
          match = userAgent.match(/Edge\/(\d+)/);
          if (!match || match[1] >= 74) {
            match = userAgent.match(/Chrome\/(\d+)/);
            if (match) version = match[1];
          }
        }

        module.exports = version && +version;


        /***/ }),

      /***/ "3410":
      /***/ (function(module, exports, __webpack_require__) {

        var $ = __webpack_require__("23e7");
        var fails = __webpack_require__("d039");
        var toObject = __webpack_require__("7b0b");
        var nativeGetPrototypeOf = __webpack_require__("e163");
        var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

        var FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
        $({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
          getPrototypeOf: function getPrototypeOf(it) {
            return nativeGetPrototypeOf(toObject(it));
          }
        });



        /***/ }),

      /***/ "342f":
      /***/ (function(module, exports, __webpack_require__) {

        var getBuiltIn = __webpack_require__("d066");

        module.exports = getBuiltIn('navigator', 'userAgent') || '';


        /***/ }),

      /***/ "35a1":
      /***/ (function(module, exports, __webpack_require__) {

        var classof = __webpack_require__("f5df");
        var getMethod = __webpack_require__("dc4a");
        var Iterators = __webpack_require__("3f8c");
        var wellKnownSymbol = __webpack_require__("b622");

        var ITERATOR = wellKnownSymbol('iterator');

        module.exports = function (it) {
          if (it != undefined) return getMethod(it, ITERATOR)
            || getMethod(it, '@@iterator')
            || Iterators[classof(it)];
        };


        /***/ }),

      /***/ "37e8":
      /***/ (function(module, exports, __webpack_require__) {

        var DESCRIPTORS = __webpack_require__("83ab");
        var definePropertyModule = __webpack_require__("9bf2");
        var anObject = __webpack_require__("825a");
        var objectKeys = __webpack_require__("df75");

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
        module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
          anObject(O);
          var keys = objectKeys(Properties);
          var length = keys.length;
          var index = 0;
          var key;
          while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
          return O;
        };


        /***/ }),

      /***/ "399f":
      /***/ (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
          'use strict';

          // Utils
          function assert (val, msg) {
            if (!val) throw new Error(msg || 'Assertion failed');
          }

          // Could use `inherits` module, but don't want to move from single file
          // architecture yet.
          function inherits (ctor, superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }

          // BN

          function BN (number, base, endian) {
            if (BN.isBN(number)) {
              return number;
            }

            this.negative = 0;
            this.words = null;
            this.length = 0;

            // Reduction context
            this.red = null;

            if (number !== null) {
              if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
              }

              this._init(number || 0, base || 10, endian || 'be');
            }
          }
          if (typeof module === 'object') {
            module.exports = BN;
          } else {
            exports.BN = BN;
          }

          BN.BN = BN;
          BN.wordSize = 26;

          var Buffer;
          try {
            if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
              Buffer = window.Buffer;
            } else {
              Buffer = __webpack_require__(0).Buffer;
            }
          } catch (e) {
          }

          BN.isBN = function isBN (num) {
            if (num instanceof BN) {
              return true;
            }

            return num !== null && typeof num === 'object' &&
              num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
          };

          BN.max = function max (left, right) {
            if (left.cmp(right) > 0) return left;
            return right;
          };

          BN.min = function min (left, right) {
            if (left.cmp(right) < 0) return left;
            return right;
          };

          BN.prototype._init = function init (number, base, endian) {
            if (typeof number === 'number') {
              return this._initNumber(number, base, endian);
            }

            if (typeof number === 'object') {
              return this._initArray(number, base, endian);
            }

            if (base === 'hex') {
              base = 16;
            }
            assert(base === (base | 0) && base >= 2 && base <= 36);

            number = number.toString().replace(/\s+/g, '');
            var start = 0;
            if (number[0] === '-') {
              start++;
              this.negative = 1;
            }

            if (start < number.length) {
              if (base === 16) {
                this._parseHex(number, start, endian);
              } else {
                this._parseBase(number, base, start);
                if (endian === 'le') {
                  this._initArray(this.toArray(), base, endian);
                }
              }
            }
          };

          BN.prototype._initNumber = function _initNumber (number, base, endian) {
            if (number < 0) {
              this.negative = 1;
              number = -number;
            }
            if (number < 0x4000000) {
              this.words = [ number & 0x3ffffff ];
              this.length = 1;
            } else if (number < 0x10000000000000) {
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff
              ];
              this.length = 2;
            } else {
              assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
              this.words = [
                number & 0x3ffffff,
                (number / 0x4000000) & 0x3ffffff,
                1
              ];
              this.length = 3;
            }

            if (endian !== 'le') return;

            // Reverse the bytes
            this._initArray(this.toArray(), base, endian);
          };

          BN.prototype._initArray = function _initArray (number, base, endian) {
            // Perhaps a Uint8Array
            assert(typeof number.length === 'number');
            if (number.length <= 0) {
              this.words = [ 0 ];
              this.length = 1;
              return this;
            }

            this.length = Math.ceil(number.length / 3);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            var j, w;
            var off = 0;
            if (endian === 'be') {
              for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            } else if (endian === 'le') {
              for (i = 0, j = 0; i < number.length; i += 3) {
                w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                this.words[j] |= (w << off) & 0x3ffffff;
                this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                off += 24;
                if (off >= 26) {
                  off -= 26;
                  j++;
                }
              }
            }
            return this.strip();
          };

          function parseHex4Bits (string, index) {
            var c = string.charCodeAt(index);
            // 'A' - 'F'
            if (c >= 65 && c <= 70) {
              return c - 55;
              // 'a' - 'f'
            } else if (c >= 97 && c <= 102) {
              return c - 87;
              // '0' - '9'
            } else {
              return (c - 48) & 0xf;
            }
          }

          function parseHexByte (string, lowerBound, index) {
            var r = parseHex4Bits(string, index);
            if (index - 1 >= lowerBound) {
              r |= parseHex4Bits(string, index - 1) << 4;
            }
            return r;
          }

          BN.prototype._parseHex = function _parseHex (number, start, endian) {
            // Create possibly bigger array to ensure that it fits the number
            this.length = Math.ceil((number.length - start) / 6);
            this.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              this.words[i] = 0;
            }

            // 24-bits chunks
            var off = 0;
            var j = 0;

            var w;
            if (endian === 'be') {
              for (i = number.length - 1; i >= start; i -= 2) {
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                  off -= 18;
                  j += 1;
                  this.words[j] |= w >>> 26;
                } else {
                  off += 8;
                }
              }
            } else {
              var parseLength = number.length - start;
              for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                  off -= 18;
                  j += 1;
                  this.words[j] |= w >>> 26;
                } else {
                  off += 8;
                }
              }
            }

            this.strip();
          };

          function parseBase (str, start, end, mul) {
            var r = 0;
            var len = Math.min(str.length, end);
            for (var i = start; i < len; i++) {
              var c = str.charCodeAt(i) - 48;

              r *= mul;

              // 'a'
              if (c >= 49) {
                r += c - 49 + 0xa;

                // 'A'
              } else if (c >= 17) {
                r += c - 17 + 0xa;

                // '0' - '9'
              } else {
                r += c;
              }
            }
            return r;
          }

          BN.prototype._parseBase = function _parseBase (number, base, start) {
            // Initialize as zero
            this.words = [ 0 ];
            this.length = 1;

            // Find length of limb in base
            for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
              limbLen++;
            }
            limbLen--;
            limbPow = (limbPow / base) | 0;

            var total = number.length - start;
            var mod = total % limbLen;
            var end = Math.min(total, total - mod) + start;

            var word = 0;
            for (var i = start; i < end; i += limbLen) {
              word = parseBase(number, i, i + limbLen, base);

              this.imuln(limbPow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }

            if (mod !== 0) {
              var pow = 1;
              word = parseBase(number, i, number.length, base);

              for (i = 0; i < mod; i++) {
                pow *= base;
              }

              this.imuln(pow);
              if (this.words[0] + word < 0x4000000) {
                this.words[0] += word;
              } else {
                this._iaddn(word);
              }
            }

            this.strip();
          };

          BN.prototype.copy = function copy (dest) {
            dest.words = new Array(this.length);
            for (var i = 0; i < this.length; i++) {
              dest.words[i] = this.words[i];
            }
            dest.length = this.length;
            dest.negative = this.negative;
            dest.red = this.red;
          };

          BN.prototype.clone = function clone () {
            var r = new BN(null);
            this.copy(r);
            return r;
          };

          BN.prototype._expand = function _expand (size) {
            while (this.length < size) {
              this.words[this.length++] = 0;
            }
            return this;
          };

          // Remove leading `0` from `this`
          BN.prototype.strip = function strip () {
            while (this.length > 1 && this.words[this.length - 1] === 0) {
              this.length--;
            }
            return this._normSign();
          };

          BN.prototype._normSign = function _normSign () {
            // -0 = 0
            if (this.length === 1 && this.words[0] === 0) {
              this.negative = 0;
            }
            return this;
          };

          BN.prototype.inspect = function inspect () {
            return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
          };

          /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

          var zeros = [
            '',
            '0',
            '00',
            '000',
            '0000',
            '00000',
            '000000',
            '0000000',
            '00000000',
            '000000000',
            '0000000000',
            '00000000000',
            '000000000000',
            '0000000000000',
            '00000000000000',
            '000000000000000',
            '0000000000000000',
            '00000000000000000',
            '000000000000000000',
            '0000000000000000000',
            '00000000000000000000',
            '000000000000000000000',
            '0000000000000000000000',
            '00000000000000000000000',
            '000000000000000000000000',
            '0000000000000000000000000'
          ];

          var groupSizes = [
            0, 0,
            25, 16, 12, 11, 10, 9, 8,
            8, 7, 7, 7, 7, 6, 6,
            6, 6, 6, 6, 6, 5, 5,
            5, 5, 5, 5, 5, 5, 5,
            5, 5, 5, 5, 5, 5, 5
          ];

          var groupBases = [
            0, 0,
            33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
            43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
            16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
            6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
            24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
          ];

          BN.prototype.toString = function toString (base, padding) {
            base = base || 10;
            padding = padding | 0 || 1;

            var out;
            if (base === 16 || base === 'hex') {
              out = '';
              var off = 0;
              var carry = 0;
              for (var i = 0; i < this.length; i++) {
                var w = this.words[i];
                var word = (((w << off) | carry) & 0xffffff).toString(16);
                carry = (w >>> (24 - off)) & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) {
                  out = zeros[6 - word.length] + word + out;
                } else {
                  out = word + out;
                }
                off += 2;
                if (off >= 26) {
                  off -= 26;
                  i--;
                }
              }
              if (carry !== 0) {
                out = carry.toString(16) + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            if (base === (base | 0) && base >= 2 && base <= 36) {
              // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
              var groupSize = groupSizes[base];
              // var groupBase = Math.pow(base, groupSize);
              var groupBase = groupBases[base];
              out = '';
              var c = this.clone();
              c.negative = 0;
              while (!c.isZero()) {
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);

                if (!c.isZero()) {
                  out = zeros[groupSize - r.length] + r + out;
                } else {
                  out = r + out;
                }
              }
              if (this.isZero()) {
                out = '0' + out;
              }
              while (out.length % padding !== 0) {
                out = '0' + out;
              }
              if (this.negative !== 0) {
                out = '-' + out;
              }
              return out;
            }

            assert(false, 'Base should be between 2 and 36');
          };

          BN.prototype.toNumber = function toNumber () {
            var ret = this.words[0];
            if (this.length === 2) {
              ret += this.words[1] * 0x4000000;
            } else if (this.length === 3 && this.words[2] === 0x01) {
              // NOTE: at this stage it is known that the top bit is set
              ret += 0x10000000000000 + (this.words[1] * 0x4000000);
            } else if (this.length > 2) {
              assert(false, 'Number can only safely store up to 53 bits');
            }
            return (this.negative !== 0) ? -ret : ret;
          };

          BN.prototype.toJSON = function toJSON () {
            return this.toString(16);
          };

          BN.prototype.toBuffer = function toBuffer (endian, length) {
            assert(typeof Buffer !== 'undefined');
            return this.toArrayLike(Buffer, endian, length);
          };

          BN.prototype.toArray = function toArray (endian, length) {
            return this.toArrayLike(Array, endian, length);
          };

          BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
            var byteLength = this.byteLength();
            var reqLength = length || Math.max(1, byteLength);
            assert(byteLength <= reqLength, 'byte array longer than desired length');
            assert(reqLength > 0, 'Requested array length <= 0');

            this.strip();
            var littleEndian = endian === 'le';
            var res = new ArrayType(reqLength);

            var b, i;
            var q = this.clone();
            if (!littleEndian) {
              // Assume big-endian
              for (i = 0; i < reqLength - byteLength; i++) {
                res[i] = 0;
              }

              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[reqLength - i - 1] = b;
              }
            } else {
              for (i = 0; !q.isZero(); i++) {
                b = q.andln(0xff);
                q.iushrn(8);

                res[i] = b;
              }

              for (; i < reqLength; i++) {
                res[i] = 0;
              }
            }

            return res;
          };

          if (Math.clz32) {
            BN.prototype._countBits = function _countBits (w) {
              return 32 - Math.clz32(w);
            };
          } else {
            BN.prototype._countBits = function _countBits (w) {
              var t = w;
              var r = 0;
              if (t >= 0x1000) {
                r += 13;
                t >>>= 13;
              }
              if (t >= 0x40) {
                r += 7;
                t >>>= 7;
              }
              if (t >= 0x8) {
                r += 4;
                t >>>= 4;
              }
              if (t >= 0x02) {
                r += 2;
                t >>>= 2;
              }
              return r + t;
            };
          }

          BN.prototype._zeroBits = function _zeroBits (w) {
            // Short-cut
            if (w === 0) return 26;

            var t = w;
            var r = 0;
            if ((t & 0x1fff) === 0) {
              r += 13;
              t >>>= 13;
            }
            if ((t & 0x7f) === 0) {
              r += 7;
              t >>>= 7;
            }
            if ((t & 0xf) === 0) {
              r += 4;
              t >>>= 4;
            }
            if ((t & 0x3) === 0) {
              r += 2;
              t >>>= 2;
            }
            if ((t & 0x1) === 0) {
              r++;
            }
            return r;
          };

          // Return number of used bits in a BN
          BN.prototype.bitLength = function bitLength () {
            var w = this.words[this.length - 1];
            var hi = this._countBits(w);
            return (this.length - 1) * 26 + hi;
          };

          function toBitArray (num) {
            var w = new Array(num.bitLength());

            for (var bit = 0; bit < w.length; bit++) {
              var off = (bit / 26) | 0;
              var wbit = bit % 26;

              w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
            }

            return w;
          }

          // Number of trailing zero bits
          BN.prototype.zeroBits = function zeroBits () {
            if (this.isZero()) return 0;

            var r = 0;
            for (var i = 0; i < this.length; i++) {
              var b = this._zeroBits(this.words[i]);
              r += b;
              if (b !== 26) break;
            }
            return r;
          };

          BN.prototype.byteLength = function byteLength () {
            return Math.ceil(this.bitLength() / 8);
          };

          BN.prototype.toTwos = function toTwos (width) {
            if (this.negative !== 0) {
              return this.abs().inotn(width).iaddn(1);
            }
            return this.clone();
          };

          BN.prototype.fromTwos = function fromTwos (width) {
            if (this.testn(width - 1)) {
              return this.notn(width).iaddn(1).ineg();
            }
            return this.clone();
          };

          BN.prototype.isNeg = function isNeg () {
            return this.negative !== 0;
          };

          // Return negative clone of `this`
          BN.prototype.neg = function neg () {
            return this.clone().ineg();
          };

          BN.prototype.ineg = function ineg () {
            if (!this.isZero()) {
              this.negative ^= 1;
            }

            return this;
          };

          // Or `num` with `this` in-place
          BN.prototype.iuor = function iuor (num) {
            while (this.length < num.length) {
              this.words[this.length++] = 0;
            }

            for (var i = 0; i < num.length; i++) {
              this.words[i] = this.words[i] | num.words[i];
            }

            return this.strip();
          };

          BN.prototype.ior = function ior (num) {
            assert((this.negative | num.negative) === 0);
            return this.iuor(num);
          };

          // Or `num` with `this`
          BN.prototype.or = function or (num) {
            if (this.length > num.length) return this.clone().ior(num);
            return num.clone().ior(this);
          };

          BN.prototype.uor = function uor (num) {
            if (this.length > num.length) return this.clone().iuor(num);
            return num.clone().iuor(this);
          };

          // And `num` with `this` in-place
          BN.prototype.iuand = function iuand (num) {
            // b = min-length(num, this)
            var b;
            if (this.length > num.length) {
              b = num;
            } else {
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = this.words[i] & num.words[i];
            }

            this.length = b.length;

            return this.strip();
          };

          BN.prototype.iand = function iand (num) {
            assert((this.negative | num.negative) === 0);
            return this.iuand(num);
          };

          // And `num` with `this`
          BN.prototype.and = function and (num) {
            if (this.length > num.length) return this.clone().iand(num);
            return num.clone().iand(this);
          };

          BN.prototype.uand = function uand (num) {
            if (this.length > num.length) return this.clone().iuand(num);
            return num.clone().iuand(this);
          };

          // Xor `num` with `this` in-place
          BN.prototype.iuxor = function iuxor (num) {
            // a.length > b.length
            var a;
            var b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            for (var i = 0; i < b.length; i++) {
              this.words[i] = a.words[i] ^ b.words[i];
            }

            if (this !== a) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = a.length;

            return this.strip();
          };

          BN.prototype.ixor = function ixor (num) {
            assert((this.negative | num.negative) === 0);
            return this.iuxor(num);
          };

          // Xor `num` with `this`
          BN.prototype.xor = function xor (num) {
            if (this.length > num.length) return this.clone().ixor(num);
            return num.clone().ixor(this);
          };

          BN.prototype.uxor = function uxor (num) {
            if (this.length > num.length) return this.clone().iuxor(num);
            return num.clone().iuxor(this);
          };

          // Not ``this`` with ``width`` bitwidth
          BN.prototype.inotn = function inotn (width) {
            assert(typeof width === 'number' && width >= 0);

            var bytesNeeded = Math.ceil(width / 26) | 0;
            var bitsLeft = width % 26;

            // Extend the buffer with leading zeroes
            this._expand(bytesNeeded);

            if (bitsLeft > 0) {
              bytesNeeded--;
            }

            // Handle complete words
            for (var i = 0; i < bytesNeeded; i++) {
              this.words[i] = ~this.words[i] & 0x3ffffff;
            }

            // Handle the residue
            if (bitsLeft > 0) {
              this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
            }

            // And remove leading zeroes
            return this.strip();
          };

          BN.prototype.notn = function notn (width) {
            return this.clone().inotn(width);
          };

          // Set `bit` of `this`
          BN.prototype.setn = function setn (bit, val) {
            assert(typeof bit === 'number' && bit >= 0);

            var off = (bit / 26) | 0;
            var wbit = bit % 26;

            this._expand(off + 1);

            if (val) {
              this.words[off] = this.words[off] | (1 << wbit);
            } else {
              this.words[off] = this.words[off] & ~(1 << wbit);
            }

            return this.strip();
          };

          // Add `num` to `this` in-place
          BN.prototype.iadd = function iadd (num) {
            var r;

            // negative + positive
            if (this.negative !== 0 && num.negative === 0) {
              this.negative = 0;
              r = this.isub(num);
              this.negative ^= 1;
              return this._normSign();

              // positive + negative
            } else if (this.negative === 0 && num.negative !== 0) {
              num.negative = 0;
              r = this.isub(num);
              num.negative = 1;
              return r._normSign();
            }

            // a.length > b.length
            var a, b;
            if (this.length > num.length) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              this.words[i] = r & 0x3ffffff;
              carry = r >>> 26;
            }

            this.length = a.length;
            if (carry !== 0) {
              this.words[this.length] = carry;
              this.length++;
              // Copy the rest of the words
            } else if (a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            return this;
          };

          // Add `num` to `this`
          BN.prototype.add = function add (num) {
            var res;
            if (num.negative !== 0 && this.negative === 0) {
              num.negative = 0;
              res = this.sub(num);
              num.negative ^= 1;
              return res;
            } else if (num.negative === 0 && this.negative !== 0) {
              this.negative = 0;
              res = num.sub(this);
              this.negative = 1;
              return res;
            }

            if (this.length > num.length) return this.clone().iadd(num);

            return num.clone().iadd(this);
          };

          // Subtract `num` from `this` in-place
          BN.prototype.isub = function isub (num) {
            // this - (-num) = this + num
            if (num.negative !== 0) {
              num.negative = 0;
              var r = this.iadd(num);
              num.negative = 1;
              return r._normSign();

              // -this - num = -(this + num)
            } else if (this.negative !== 0) {
              this.negative = 0;
              this.iadd(num);
              this.negative = 1;
              return this._normSign();
            }

            // At this point both numbers are positive
            var cmp = this.cmp(num);

            // Optimization - zeroify
            if (cmp === 0) {
              this.negative = 0;
              this.length = 1;
              this.words[0] = 0;
              return this;
            }

            // a > b
            var a, b;
            if (cmp > 0) {
              a = this;
              b = num;
            } else {
              a = num;
              b = this;
            }

            var carry = 0;
            for (var i = 0; i < b.length; i++) {
              r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }
            for (; carry !== 0 && i < a.length; i++) {
              r = (a.words[i] | 0) + carry;
              carry = r >> 26;
              this.words[i] = r & 0x3ffffff;
            }

            // Copy rest of the words
            if (carry === 0 && i < a.length && a !== this) {
              for (; i < a.length; i++) {
                this.words[i] = a.words[i];
              }
            }

            this.length = Math.max(this.length, i);

            if (a !== this) {
              this.negative = 1;
            }

            return this.strip();
          };

          // Subtract `num` from `this`
          BN.prototype.sub = function sub (num) {
            return this.clone().isub(num);
          };

          function smallMulTo (self, num, out) {
            out.negative = num.negative ^ self.negative;
            var len = (self.length + num.length) | 0;
            out.length = len;
            len = (len - 1) | 0;

            // Peel one iteration (compiler can't do it, because of code complexity)
            var a = self.words[0] | 0;
            var b = num.words[0] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            var carry = (r / 0x4000000) | 0;
            out.words[0] = lo;

            for (var k = 1; k < len; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = carry >>> 26;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = (k - j) | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += (r / 0x4000000) | 0;
                rword = r & 0x3ffffff;
              }
              out.words[k] = rword | 0;
              carry = ncarry | 0;
            }
            if (carry !== 0) {
              out.words[k] = carry | 0;
            } else {
              out.length--;
            }

            return out.strip();
          }

          // TODO(indutny): it may be reasonable to omit it for users who don't need
          // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
          // multiplication (like elliptic secp256k1).
          var comb10MulTo = function comb10MulTo (self, num, out) {
            var a = self.words;
            var b = num.words;
            var o = out.words;
            var c = 0;
            var lo;
            var mid;
            var hi;
            var a0 = a[0] | 0;
            var al0 = a0 & 0x1fff;
            var ah0 = a0 >>> 13;
            var a1 = a[1] | 0;
            var al1 = a1 & 0x1fff;
            var ah1 = a1 >>> 13;
            var a2 = a[2] | 0;
            var al2 = a2 & 0x1fff;
            var ah2 = a2 >>> 13;
            var a3 = a[3] | 0;
            var al3 = a3 & 0x1fff;
            var ah3 = a3 >>> 13;
            var a4 = a[4] | 0;
            var al4 = a4 & 0x1fff;
            var ah4 = a4 >>> 13;
            var a5 = a[5] | 0;
            var al5 = a5 & 0x1fff;
            var ah5 = a5 >>> 13;
            var a6 = a[6] | 0;
            var al6 = a6 & 0x1fff;
            var ah6 = a6 >>> 13;
            var a7 = a[7] | 0;
            var al7 = a7 & 0x1fff;
            var ah7 = a7 >>> 13;
            var a8 = a[8] | 0;
            var al8 = a8 & 0x1fff;
            var ah8 = a8 >>> 13;
            var a9 = a[9] | 0;
            var al9 = a9 & 0x1fff;
            var ah9 = a9 >>> 13;
            var b0 = b[0] | 0;
            var bl0 = b0 & 0x1fff;
            var bh0 = b0 >>> 13;
            var b1 = b[1] | 0;
            var bl1 = b1 & 0x1fff;
            var bh1 = b1 >>> 13;
            var b2 = b[2] | 0;
            var bl2 = b2 & 0x1fff;
            var bh2 = b2 >>> 13;
            var b3 = b[3] | 0;
            var bl3 = b3 & 0x1fff;
            var bh3 = b3 >>> 13;
            var b4 = b[4] | 0;
            var bl4 = b4 & 0x1fff;
            var bh4 = b4 >>> 13;
            var b5 = b[5] | 0;
            var bl5 = b5 & 0x1fff;
            var bh5 = b5 >>> 13;
            var b6 = b[6] | 0;
            var bl6 = b6 & 0x1fff;
            var bh6 = b6 >>> 13;
            var b7 = b[7] | 0;
            var bl7 = b7 & 0x1fff;
            var bh7 = b7 >>> 13;
            var b8 = b[8] | 0;
            var bl8 = b8 & 0x1fff;
            var bh8 = b8 >>> 13;
            var b9 = b[9] | 0;
            var bl9 = b9 & 0x1fff;
            var bh9 = b9 >>> 13;

            out.negative = self.negative ^ num.negative;
            out.length = 19;
            /* k = 0 */
            lo = Math.imul(al0, bl0);
            mid = Math.imul(al0, bh0);
            mid = (mid + Math.imul(ah0, bl0)) | 0;
            hi = Math.imul(ah0, bh0);
            var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
            w0 &= 0x3ffffff;
            /* k = 1 */
            lo = Math.imul(al1, bl0);
            mid = Math.imul(al1, bh0);
            mid = (mid + Math.imul(ah1, bl0)) | 0;
            hi = Math.imul(ah1, bh0);
            lo = (lo + Math.imul(al0, bl1)) | 0;
            mid = (mid + Math.imul(al0, bh1)) | 0;
            mid = (mid + Math.imul(ah0, bl1)) | 0;
            hi = (hi + Math.imul(ah0, bh1)) | 0;
            var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
            w1 &= 0x3ffffff;
            /* k = 2 */
            lo = Math.imul(al2, bl0);
            mid = Math.imul(al2, bh0);
            mid = (mid + Math.imul(ah2, bl0)) | 0;
            hi = Math.imul(ah2, bh0);
            lo = (lo + Math.imul(al1, bl1)) | 0;
            mid = (mid + Math.imul(al1, bh1)) | 0;
            mid = (mid + Math.imul(ah1, bl1)) | 0;
            hi = (hi + Math.imul(ah1, bh1)) | 0;
            lo = (lo + Math.imul(al0, bl2)) | 0;
            mid = (mid + Math.imul(al0, bh2)) | 0;
            mid = (mid + Math.imul(ah0, bl2)) | 0;
            hi = (hi + Math.imul(ah0, bh2)) | 0;
            var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
            w2 &= 0x3ffffff;
            /* k = 3 */
            lo = Math.imul(al3, bl0);
            mid = Math.imul(al3, bh0);
            mid = (mid + Math.imul(ah3, bl0)) | 0;
            hi = Math.imul(ah3, bh0);
            lo = (lo + Math.imul(al2, bl1)) | 0;
            mid = (mid + Math.imul(al2, bh1)) | 0;
            mid = (mid + Math.imul(ah2, bl1)) | 0;
            hi = (hi + Math.imul(ah2, bh1)) | 0;
            lo = (lo + Math.imul(al1, bl2)) | 0;
            mid = (mid + Math.imul(al1, bh2)) | 0;
            mid = (mid + Math.imul(ah1, bl2)) | 0;
            hi = (hi + Math.imul(ah1, bh2)) | 0;
            lo = (lo + Math.imul(al0, bl3)) | 0;
            mid = (mid + Math.imul(al0, bh3)) | 0;
            mid = (mid + Math.imul(ah0, bl3)) | 0;
            hi = (hi + Math.imul(ah0, bh3)) | 0;
            var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
            w3 &= 0x3ffffff;
            /* k = 4 */
            lo = Math.imul(al4, bl0);
            mid = Math.imul(al4, bh0);
            mid = (mid + Math.imul(ah4, bl0)) | 0;
            hi = Math.imul(ah4, bh0);
            lo = (lo + Math.imul(al3, bl1)) | 0;
            mid = (mid + Math.imul(al3, bh1)) | 0;
            mid = (mid + Math.imul(ah3, bl1)) | 0;
            hi = (hi + Math.imul(ah3, bh1)) | 0;
            lo = (lo + Math.imul(al2, bl2)) | 0;
            mid = (mid + Math.imul(al2, bh2)) | 0;
            mid = (mid + Math.imul(ah2, bl2)) | 0;
            hi = (hi + Math.imul(ah2, bh2)) | 0;
            lo = (lo + Math.imul(al1, bl3)) | 0;
            mid = (mid + Math.imul(al1, bh3)) | 0;
            mid = (mid + Math.imul(ah1, bl3)) | 0;
            hi = (hi + Math.imul(ah1, bh3)) | 0;
            lo = (lo + Math.imul(al0, bl4)) | 0;
            mid = (mid + Math.imul(al0, bh4)) | 0;
            mid = (mid + Math.imul(ah0, bl4)) | 0;
            hi = (hi + Math.imul(ah0, bh4)) | 0;
            var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
            w4 &= 0x3ffffff;
            /* k = 5 */
            lo = Math.imul(al5, bl0);
            mid = Math.imul(al5, bh0);
            mid = (mid + Math.imul(ah5, bl0)) | 0;
            hi = Math.imul(ah5, bh0);
            lo = (lo + Math.imul(al4, bl1)) | 0;
            mid = (mid + Math.imul(al4, bh1)) | 0;
            mid = (mid + Math.imul(ah4, bl1)) | 0;
            hi = (hi + Math.imul(ah4, bh1)) | 0;
            lo = (lo + Math.imul(al3, bl2)) | 0;
            mid = (mid + Math.imul(al3, bh2)) | 0;
            mid = (mid + Math.imul(ah3, bl2)) | 0;
            hi = (hi + Math.imul(ah3, bh2)) | 0;
            lo = (lo + Math.imul(al2, bl3)) | 0;
            mid = (mid + Math.imul(al2, bh3)) | 0;
            mid = (mid + Math.imul(ah2, bl3)) | 0;
            hi = (hi + Math.imul(ah2, bh3)) | 0;
            lo = (lo + Math.imul(al1, bl4)) | 0;
            mid = (mid + Math.imul(al1, bh4)) | 0;
            mid = (mid + Math.imul(ah1, bl4)) | 0;
            hi = (hi + Math.imul(ah1, bh4)) | 0;
            lo = (lo + Math.imul(al0, bl5)) | 0;
            mid = (mid + Math.imul(al0, bh5)) | 0;
            mid = (mid + Math.imul(ah0, bl5)) | 0;
            hi = (hi + Math.imul(ah0, bh5)) | 0;
            var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
            w5 &= 0x3ffffff;
            /* k = 6 */
            lo = Math.imul(al6, bl0);
            mid = Math.imul(al6, bh0);
            mid = (mid + Math.imul(ah6, bl0)) | 0;
            hi = Math.imul(ah6, bh0);
            lo = (lo + Math.imul(al5, bl1)) | 0;
            mid = (mid + Math.imul(al5, bh1)) | 0;
            mid = (mid + Math.imul(ah5, bl1)) | 0;
            hi = (hi + Math.imul(ah5, bh1)) | 0;
            lo = (lo + Math.imul(al4, bl2)) | 0;
            mid = (mid + Math.imul(al4, bh2)) | 0;
            mid = (mid + Math.imul(ah4, bl2)) | 0;
            hi = (hi + Math.imul(ah4, bh2)) | 0;
            lo = (lo + Math.imul(al3, bl3)) | 0;
            mid = (mid + Math.imul(al3, bh3)) | 0;
            mid = (mid + Math.imul(ah3, bl3)) | 0;
            hi = (hi + Math.imul(ah3, bh3)) | 0;
            lo = (lo + Math.imul(al2, bl4)) | 0;
            mid = (mid + Math.imul(al2, bh4)) | 0;
            mid = (mid + Math.imul(ah2, bl4)) | 0;
            hi = (hi + Math.imul(ah2, bh4)) | 0;
            lo = (lo + Math.imul(al1, bl5)) | 0;
            mid = (mid + Math.imul(al1, bh5)) | 0;
            mid = (mid + Math.imul(ah1, bl5)) | 0;
            hi = (hi + Math.imul(ah1, bh5)) | 0;
            lo = (lo + Math.imul(al0, bl6)) | 0;
            mid = (mid + Math.imul(al0, bh6)) | 0;
            mid = (mid + Math.imul(ah0, bl6)) | 0;
            hi = (hi + Math.imul(ah0, bh6)) | 0;
            var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
            w6 &= 0x3ffffff;
            /* k = 7 */
            lo = Math.imul(al7, bl0);
            mid = Math.imul(al7, bh0);
            mid = (mid + Math.imul(ah7, bl0)) | 0;
            hi = Math.imul(ah7, bh0);
            lo = (lo + Math.imul(al6, bl1)) | 0;
            mid = (mid + Math.imul(al6, bh1)) | 0;
            mid = (mid + Math.imul(ah6, bl1)) | 0;
            hi = (hi + Math.imul(ah6, bh1)) | 0;
            lo = (lo + Math.imul(al5, bl2)) | 0;
            mid = (mid + Math.imul(al5, bh2)) | 0;
            mid = (mid + Math.imul(ah5, bl2)) | 0;
            hi = (hi + Math.imul(ah5, bh2)) | 0;
            lo = (lo + Math.imul(al4, bl3)) | 0;
            mid = (mid + Math.imul(al4, bh3)) | 0;
            mid = (mid + Math.imul(ah4, bl3)) | 0;
            hi = (hi + Math.imul(ah4, bh3)) | 0;
            lo = (lo + Math.imul(al3, bl4)) | 0;
            mid = (mid + Math.imul(al3, bh4)) | 0;
            mid = (mid + Math.imul(ah3, bl4)) | 0;
            hi = (hi + Math.imul(ah3, bh4)) | 0;
            lo = (lo + Math.imul(al2, bl5)) | 0;
            mid = (mid + Math.imul(al2, bh5)) | 0;
            mid = (mid + Math.imul(ah2, bl5)) | 0;
            hi = (hi + Math.imul(ah2, bh5)) | 0;
            lo = (lo + Math.imul(al1, bl6)) | 0;
            mid = (mid + Math.imul(al1, bh6)) | 0;
            mid = (mid + Math.imul(ah1, bl6)) | 0;
            hi = (hi + Math.imul(ah1, bh6)) | 0;
            lo = (lo + Math.imul(al0, bl7)) | 0;
            mid = (mid + Math.imul(al0, bh7)) | 0;
            mid = (mid + Math.imul(ah0, bl7)) | 0;
            hi = (hi + Math.imul(ah0, bh7)) | 0;
            var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
            w7 &= 0x3ffffff;
            /* k = 8 */
            lo = Math.imul(al8, bl0);
            mid = Math.imul(al8, bh0);
            mid = (mid + Math.imul(ah8, bl0)) | 0;
            hi = Math.imul(ah8, bh0);
            lo = (lo + Math.imul(al7, bl1)) | 0;
            mid = (mid + Math.imul(al7, bh1)) | 0;
            mid = (mid + Math.imul(ah7, bl1)) | 0;
            hi = (hi + Math.imul(ah7, bh1)) | 0;
            lo = (lo + Math.imul(al6, bl2)) | 0;
            mid = (mid + Math.imul(al6, bh2)) | 0;
            mid = (mid + Math.imul(ah6, bl2)) | 0;
            hi = (hi + Math.imul(ah6, bh2)) | 0;
            lo = (lo + Math.imul(al5, bl3)) | 0;
            mid = (mid + Math.imul(al5, bh3)) | 0;
            mid = (mid + Math.imul(ah5, bl3)) | 0;
            hi = (hi + Math.imul(ah5, bh3)) | 0;
            lo = (lo + Math.imul(al4, bl4)) | 0;
            mid = (mid + Math.imul(al4, bh4)) | 0;
            mid = (mid + Math.imul(ah4, bl4)) | 0;
            hi = (hi + Math.imul(ah4, bh4)) | 0;
            lo = (lo + Math.imul(al3, bl5)) | 0;
            mid = (mid + Math.imul(al3, bh5)) | 0;
            mid = (mid + Math.imul(ah3, bl5)) | 0;
            hi = (hi + Math.imul(ah3, bh5)) | 0;
            lo = (lo + Math.imul(al2, bl6)) | 0;
            mid = (mid + Math.imul(al2, bh6)) | 0;
            mid = (mid + Math.imul(ah2, bl6)) | 0;
            hi = (hi + Math.imul(ah2, bh6)) | 0;
            lo = (lo + Math.imul(al1, bl7)) | 0;
            mid = (mid + Math.imul(al1, bh7)) | 0;
            mid = (mid + Math.imul(ah1, bl7)) | 0;
            hi = (hi + Math.imul(ah1, bh7)) | 0;
            lo = (lo + Math.imul(al0, bl8)) | 0;
            mid = (mid + Math.imul(al0, bh8)) | 0;
            mid = (mid + Math.imul(ah0, bl8)) | 0;
            hi = (hi + Math.imul(ah0, bh8)) | 0;
            var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
            w8 &= 0x3ffffff;
            /* k = 9 */
            lo = Math.imul(al9, bl0);
            mid = Math.imul(al9, bh0);
            mid = (mid + Math.imul(ah9, bl0)) | 0;
            hi = Math.imul(ah9, bh0);
            lo = (lo + Math.imul(al8, bl1)) | 0;
            mid = (mid + Math.imul(al8, bh1)) | 0;
            mid = (mid + Math.imul(ah8, bl1)) | 0;
            hi = (hi + Math.imul(ah8, bh1)) | 0;
            lo = (lo + Math.imul(al7, bl2)) | 0;
            mid = (mid + Math.imul(al7, bh2)) | 0;
            mid = (mid + Math.imul(ah7, bl2)) | 0;
            hi = (hi + Math.imul(ah7, bh2)) | 0;
            lo = (lo + Math.imul(al6, bl3)) | 0;
            mid = (mid + Math.imul(al6, bh3)) | 0;
            mid = (mid + Math.imul(ah6, bl3)) | 0;
            hi = (hi + Math.imul(ah6, bh3)) | 0;
            lo = (lo + Math.imul(al5, bl4)) | 0;
            mid = (mid + Math.imul(al5, bh4)) | 0;
            mid = (mid + Math.imul(ah5, bl4)) | 0;
            hi = (hi + Math.imul(ah5, bh4)) | 0;
            lo = (lo + Math.imul(al4, bl5)) | 0;
            mid = (mid + Math.imul(al4, bh5)) | 0;
            mid = (mid + Math.imul(ah4, bl5)) | 0;
            hi = (hi + Math.imul(ah4, bh5)) | 0;
            lo = (lo + Math.imul(al3, bl6)) | 0;
            mid = (mid + Math.imul(al3, bh6)) | 0;
            mid = (mid + Math.imul(ah3, bl6)) | 0;
            hi = (hi + Math.imul(ah3, bh6)) | 0;
            lo = (lo + Math.imul(al2, bl7)) | 0;
            mid = (mid + Math.imul(al2, bh7)) | 0;
            mid = (mid + Math.imul(ah2, bl7)) | 0;
            hi = (hi + Math.imul(ah2, bh7)) | 0;
            lo = (lo + Math.imul(al1, bl8)) | 0;
            mid = (mid + Math.imul(al1, bh8)) | 0;
            mid = (mid + Math.imul(ah1, bl8)) | 0;
            hi = (hi + Math.imul(ah1, bh8)) | 0;
            lo = (lo + Math.imul(al0, bl9)) | 0;
            mid = (mid + Math.imul(al0, bh9)) | 0;
            mid = (mid + Math.imul(ah0, bl9)) | 0;
            hi = (hi + Math.imul(ah0, bh9)) | 0;
            var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
            w9 &= 0x3ffffff;
            /* k = 10 */
            lo = Math.imul(al9, bl1);
            mid = Math.imul(al9, bh1);
            mid = (mid + Math.imul(ah9, bl1)) | 0;
            hi = Math.imul(ah9, bh1);
            lo = (lo + Math.imul(al8, bl2)) | 0;
            mid = (mid + Math.imul(al8, bh2)) | 0;
            mid = (mid + Math.imul(ah8, bl2)) | 0;
            hi = (hi + Math.imul(ah8, bh2)) | 0;
            lo = (lo + Math.imul(al7, bl3)) | 0;
            mid = (mid + Math.imul(al7, bh3)) | 0;
            mid = (mid + Math.imul(ah7, bl3)) | 0;
            hi = (hi + Math.imul(ah7, bh3)) | 0;
            lo = (lo + Math.imul(al6, bl4)) | 0;
            mid = (mid + Math.imul(al6, bh4)) | 0;
            mid = (mid + Math.imul(ah6, bl4)) | 0;
            hi = (hi + Math.imul(ah6, bh4)) | 0;
            lo = (lo + Math.imul(al5, bl5)) | 0;
            mid = (mid + Math.imul(al5, bh5)) | 0;
            mid = (mid + Math.imul(ah5, bl5)) | 0;
            hi = (hi + Math.imul(ah5, bh5)) | 0;
            lo = (lo + Math.imul(al4, bl6)) | 0;
            mid = (mid + Math.imul(al4, bh6)) | 0;
            mid = (mid + Math.imul(ah4, bl6)) | 0;
            hi = (hi + Math.imul(ah4, bh6)) | 0;
            lo = (lo + Math.imul(al3, bl7)) | 0;
            mid = (mid + Math.imul(al3, bh7)) | 0;
            mid = (mid + Math.imul(ah3, bl7)) | 0;
            hi = (hi + Math.imul(ah3, bh7)) | 0;
            lo = (lo + Math.imul(al2, bl8)) | 0;
            mid = (mid + Math.imul(al2, bh8)) | 0;
            mid = (mid + Math.imul(ah2, bl8)) | 0;
            hi = (hi + Math.imul(ah2, bh8)) | 0;
            lo = (lo + Math.imul(al1, bl9)) | 0;
            mid = (mid + Math.imul(al1, bh9)) | 0;
            mid = (mid + Math.imul(ah1, bl9)) | 0;
            hi = (hi + Math.imul(ah1, bh9)) | 0;
            var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
            w10 &= 0x3ffffff;
            /* k = 11 */
            lo = Math.imul(al9, bl2);
            mid = Math.imul(al9, bh2);
            mid = (mid + Math.imul(ah9, bl2)) | 0;
            hi = Math.imul(ah9, bh2);
            lo = (lo + Math.imul(al8, bl3)) | 0;
            mid = (mid + Math.imul(al8, bh3)) | 0;
            mid = (mid + Math.imul(ah8, bl3)) | 0;
            hi = (hi + Math.imul(ah8, bh3)) | 0;
            lo = (lo + Math.imul(al7, bl4)) | 0;
            mid = (mid + Math.imul(al7, bh4)) | 0;
            mid = (mid + Math.imul(ah7, bl4)) | 0;
            hi = (hi + Math.imul(ah7, bh4)) | 0;
            lo = (lo + Math.imul(al6, bl5)) | 0;
            mid = (mid + Math.imul(al6, bh5)) | 0;
            mid = (mid + Math.imul(ah6, bl5)) | 0;
            hi = (hi + Math.imul(ah6, bh5)) | 0;
            lo = (lo + Math.imul(al5, bl6)) | 0;
            mid = (mid + Math.imul(al5, bh6)) | 0;
            mid = (mid + Math.imul(ah5, bl6)) | 0;
            hi = (hi + Math.imul(ah5, bh6)) | 0;
            lo = (lo + Math.imul(al4, bl7)) | 0;
            mid = (mid + Math.imul(al4, bh7)) | 0;
            mid = (mid + Math.imul(ah4, bl7)) | 0;
            hi = (hi + Math.imul(ah4, bh7)) | 0;
            lo = (lo + Math.imul(al3, bl8)) | 0;
            mid = (mid + Math.imul(al3, bh8)) | 0;
            mid = (mid + Math.imul(ah3, bl8)) | 0;
            hi = (hi + Math.imul(ah3, bh8)) | 0;
            lo = (lo + Math.imul(al2, bl9)) | 0;
            mid = (mid + Math.imul(al2, bh9)) | 0;
            mid = (mid + Math.imul(ah2, bl9)) | 0;
            hi = (hi + Math.imul(ah2, bh9)) | 0;
            var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
            w11 &= 0x3ffffff;
            /* k = 12 */
            lo = Math.imul(al9, bl3);
            mid = Math.imul(al9, bh3);
            mid = (mid + Math.imul(ah9, bl3)) | 0;
            hi = Math.imul(ah9, bh3);
            lo = (lo + Math.imul(al8, bl4)) | 0;
            mid = (mid + Math.imul(al8, bh4)) | 0;
            mid = (mid + Math.imul(ah8, bl4)) | 0;
            hi = (hi + Math.imul(ah8, bh4)) | 0;
            lo = (lo + Math.imul(al7, bl5)) | 0;
            mid = (mid + Math.imul(al7, bh5)) | 0;
            mid = (mid + Math.imul(ah7, bl5)) | 0;
            hi = (hi + Math.imul(ah7, bh5)) | 0;
            lo = (lo + Math.imul(al6, bl6)) | 0;
            mid = (mid + Math.imul(al6, bh6)) | 0;
            mid = (mid + Math.imul(ah6, bl6)) | 0;
            hi = (hi + Math.imul(ah6, bh6)) | 0;
            lo = (lo + Math.imul(al5, bl7)) | 0;
            mid = (mid + Math.imul(al5, bh7)) | 0;
            mid = (mid + Math.imul(ah5, bl7)) | 0;
            hi = (hi + Math.imul(ah5, bh7)) | 0;
            lo = (lo + Math.imul(al4, bl8)) | 0;
            mid = (mid + Math.imul(al4, bh8)) | 0;
            mid = (mid + Math.imul(ah4, bl8)) | 0;
            hi = (hi + Math.imul(ah4, bh8)) | 0;
            lo = (lo + Math.imul(al3, bl9)) | 0;
            mid = (mid + Math.imul(al3, bh9)) | 0;
            mid = (mid + Math.imul(ah3, bl9)) | 0;
            hi = (hi + Math.imul(ah3, bh9)) | 0;
            var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
            w12 &= 0x3ffffff;
            /* k = 13 */
            lo = Math.imul(al9, bl4);
            mid = Math.imul(al9, bh4);
            mid = (mid + Math.imul(ah9, bl4)) | 0;
            hi = Math.imul(ah9, bh4);
            lo = (lo + Math.imul(al8, bl5)) | 0;
            mid = (mid + Math.imul(al8, bh5)) | 0;
            mid = (mid + Math.imul(ah8, bl5)) | 0;
            hi = (hi + Math.imul(ah8, bh5)) | 0;
            lo = (lo + Math.imul(al7, bl6)) | 0;
            mid = (mid + Math.imul(al7, bh6)) | 0;
            mid = (mid + Math.imul(ah7, bl6)) | 0;
            hi = (hi + Math.imul(ah7, bh6)) | 0;
            lo = (lo + Math.imul(al6, bl7)) | 0;
            mid = (mid + Math.imul(al6, bh7)) | 0;
            mid = (mid + Math.imul(ah6, bl7)) | 0;
            hi = (hi + Math.imul(ah6, bh7)) | 0;
            lo = (lo + Math.imul(al5, bl8)) | 0;
            mid = (mid + Math.imul(al5, bh8)) | 0;
            mid = (mid + Math.imul(ah5, bl8)) | 0;
            hi = (hi + Math.imul(ah5, bh8)) | 0;
            lo = (lo + Math.imul(al4, bl9)) | 0;
            mid = (mid + Math.imul(al4, bh9)) | 0;
            mid = (mid + Math.imul(ah4, bl9)) | 0;
            hi = (hi + Math.imul(ah4, bh9)) | 0;
            var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
            w13 &= 0x3ffffff;
            /* k = 14 */
            lo = Math.imul(al9, bl5);
            mid = Math.imul(al9, bh5);
            mid = (mid + Math.imul(ah9, bl5)) | 0;
            hi = Math.imul(ah9, bh5);
            lo = (lo + Math.imul(al8, bl6)) | 0;
            mid = (mid + Math.imul(al8, bh6)) | 0;
            mid = (mid + Math.imul(ah8, bl6)) | 0;
            hi = (hi + Math.imul(ah8, bh6)) | 0;
            lo = (lo + Math.imul(al7, bl7)) | 0;
            mid = (mid + Math.imul(al7, bh7)) | 0;
            mid = (mid + Math.imul(ah7, bl7)) | 0;
            hi = (hi + Math.imul(ah7, bh7)) | 0;
            lo = (lo + Math.imul(al6, bl8)) | 0;
            mid = (mid + Math.imul(al6, bh8)) | 0;
            mid = (mid + Math.imul(ah6, bl8)) | 0;
            hi = (hi + Math.imul(ah6, bh8)) | 0;
            lo = (lo + Math.imul(al5, bl9)) | 0;
            mid = (mid + Math.imul(al5, bh9)) | 0;
            mid = (mid + Math.imul(ah5, bl9)) | 0;
            hi = (hi + Math.imul(ah5, bh9)) | 0;
            var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
            w14 &= 0x3ffffff;
            /* k = 15 */
            lo = Math.imul(al9, bl6);
            mid = Math.imul(al9, bh6);
            mid = (mid + Math.imul(ah9, bl6)) | 0;
            hi = Math.imul(ah9, bh6);
            lo = (lo + Math.imul(al8, bl7)) | 0;
            mid = (mid + Math.imul(al8, bh7)) | 0;
            mid = (mid + Math.imul(ah8, bl7)) | 0;
            hi = (hi + Math.imul(ah8, bh7)) | 0;
            lo = (lo + Math.imul(al7, bl8)) | 0;
            mid = (mid + Math.imul(al7, bh8)) | 0;
            mid = (mid + Math.imul(ah7, bl8)) | 0;
            hi = (hi + Math.imul(ah7, bh8)) | 0;
            lo = (lo + Math.imul(al6, bl9)) | 0;
            mid = (mid + Math.imul(al6, bh9)) | 0;
            mid = (mid + Math.imul(ah6, bl9)) | 0;
            hi = (hi + Math.imul(ah6, bh9)) | 0;
            var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
            w15 &= 0x3ffffff;
            /* k = 16 */
            lo = Math.imul(al9, bl7);
            mid = Math.imul(al9, bh7);
            mid = (mid + Math.imul(ah9, bl7)) | 0;
            hi = Math.imul(ah9, bh7);
            lo = (lo + Math.imul(al8, bl8)) | 0;
            mid = (mid + Math.imul(al8, bh8)) | 0;
            mid = (mid + Math.imul(ah8, bl8)) | 0;
            hi = (hi + Math.imul(ah8, bh8)) | 0;
            lo = (lo + Math.imul(al7, bl9)) | 0;
            mid = (mid + Math.imul(al7, bh9)) | 0;
            mid = (mid + Math.imul(ah7, bl9)) | 0;
            hi = (hi + Math.imul(ah7, bh9)) | 0;
            var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
            w16 &= 0x3ffffff;
            /* k = 17 */
            lo = Math.imul(al9, bl8);
            mid = Math.imul(al9, bh8);
            mid = (mid + Math.imul(ah9, bl8)) | 0;
            hi = Math.imul(ah9, bh8);
            lo = (lo + Math.imul(al8, bl9)) | 0;
            mid = (mid + Math.imul(al8, bh9)) | 0;
            mid = (mid + Math.imul(ah8, bl9)) | 0;
            hi = (hi + Math.imul(ah8, bh9)) | 0;
            var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
            w17 &= 0x3ffffff;
            /* k = 18 */
            lo = Math.imul(al9, bl9);
            mid = Math.imul(al9, bh9);
            mid = (mid + Math.imul(ah9, bl9)) | 0;
            hi = Math.imul(ah9, bh9);
            var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
            c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
            w18 &= 0x3ffffff;
            o[0] = w0;
            o[1] = w1;
            o[2] = w2;
            o[3] = w3;
            o[4] = w4;
            o[5] = w5;
            o[6] = w6;
            o[7] = w7;
            o[8] = w8;
            o[9] = w9;
            o[10] = w10;
            o[11] = w11;
            o[12] = w12;
            o[13] = w13;
            o[14] = w14;
            o[15] = w15;
            o[16] = w16;
            o[17] = w17;
            o[18] = w18;
            if (c !== 0) {
              o[19] = c;
              out.length++;
            }
            return out;
          };

          // Polyfill comb
          if (!Math.imul) {
            comb10MulTo = smallMulTo;
          }

          function bigMulTo (self, num, out) {
            out.negative = num.negative ^ self.negative;
            out.length = self.length + num.length;

            var carry = 0;
            var hncarry = 0;
            for (var k = 0; k < out.length - 1; k++) {
              // Sum all words with the same `i + j = k` and accumulate `ncarry`,
              // note that ncarry could be >= 0x3ffffff
              var ncarry = hncarry;
              hncarry = 0;
              var rword = carry & 0x3ffffff;
              var maxJ = Math.min(k, num.length - 1);
              for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;

                var lo = r & 0x3ffffff;
                ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                lo = (lo + rword) | 0;
                rword = lo & 0x3ffffff;
                ncarry = (ncarry + (lo >>> 26)) | 0;

                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
              }
              out.words[k] = rword;
              carry = ncarry;
              ncarry = hncarry;
            }
            if (carry !== 0) {
              out.words[k] = carry;
            } else {
              out.length--;
            }

            return out.strip();
          }

          function jumboMulTo (self, num, out) {
            var fftm = new FFTM();
            return fftm.mulp(self, num, out);
          }

          BN.prototype.mulTo = function mulTo (num, out) {
            var res;
            var len = this.length + num.length;
            if (this.length === 10 && num.length === 10) {
              res = comb10MulTo(this, num, out);
            } else if (len < 63) {
              res = smallMulTo(this, num, out);
            } else if (len < 1024) {
              res = bigMulTo(this, num, out);
            } else {
              res = jumboMulTo(this, num, out);
            }

            return res;
          };

          // Cooley-Tukey algorithm for FFT
          // slightly revisited to rely on looping instead of recursion

          function FFTM (x, y) {
            this.x = x;
            this.y = y;
          }

          FFTM.prototype.makeRBT = function makeRBT (N) {
            var t = new Array(N);
            var l = BN.prototype._countBits(N) - 1;
            for (var i = 0; i < N; i++) {
              t[i] = this.revBin(i, l, N);
            }

            return t;
          };

          // Returns binary-reversed representation of `x`
          FFTM.prototype.revBin = function revBin (x, l, N) {
            if (x === 0 || x === N - 1) return x;

            var rb = 0;
            for (var i = 0; i < l; i++) {
              rb |= (x & 1) << (l - i - 1);
              x >>= 1;
            }

            return rb;
          };

          // Performs "tweedling" phase, therefore 'emulating'
          // behaviour of the recursive algorithm
          FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
            for (var i = 0; i < N; i++) {
              rtws[i] = rws[rbt[i]];
              itws[i] = iws[rbt[i]];
            }
          };

          FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
            this.permute(rbt, rws, iws, rtws, itws, N);

            for (var s = 1; s < N; s <<= 1) {
              var l = s << 1;

              var rtwdf = Math.cos(2 * Math.PI / l);
              var itwdf = Math.sin(2 * Math.PI / l);

              for (var p = 0; p < N; p += l) {
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;

                for (var j = 0; j < s; j++) {
                  var re = rtws[p + j];
                  var ie = itws[p + j];

                  var ro = rtws[p + j + s];
                  var io = itws[p + j + s];

                  var rx = rtwdf_ * ro - itwdf_ * io;

                  io = rtwdf_ * io + itwdf_ * ro;
                  ro = rx;

                  rtws[p + j] = re + ro;
                  itws[p + j] = ie + io;

                  rtws[p + j + s] = re - ro;
                  itws[p + j + s] = ie - io;

                  /* jshint maxdepth : false */
                  if (j !== l) {
                    rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                    itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                    rtwdf_ = rx;
                  }
                }
              }
            }
          };

          FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
            var N = Math.max(m, n) | 1;
            var odd = N & 1;
            var i = 0;
            for (N = N / 2 | 0; N; N = N >>> 1) {
              i++;
            }

            return 1 << i + 1 + odd;
          };

          FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
            if (N <= 1) return;

            for (var i = 0; i < N / 2; i++) {
              var t = rws[i];

              rws[i] = rws[N - i - 1];
              rws[N - i - 1] = t;

              t = iws[i];

              iws[i] = -iws[N - i - 1];
              iws[N - i - 1] = -t;
            }
          };

          FFTM.prototype.normalize13b = function normalize13b (ws, N) {
            var carry = 0;
            for (var i = 0; i < N / 2; i++) {
              var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                Math.round(ws[2 * i] / N) +
                carry;

              ws[i] = w & 0x3ffffff;

              if (w < 0x4000000) {
                carry = 0;
              } else {
                carry = w / 0x4000000 | 0;
              }
            }

            return ws;
          };

          FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
            var carry = 0;
            for (var i = 0; i < len; i++) {
              carry = carry + (ws[i] | 0);

              rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
              rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
            }

            // Pad with zeroes
            for (i = 2 * len; i < N; ++i) {
              rws[i] = 0;
            }

            assert(carry === 0);
            assert((carry & ~0x1fff) === 0);
          };

          FFTM.prototype.stub = function stub (N) {
            var ph = new Array(N);
            for (var i = 0; i < N; i++) {
              ph[i] = 0;
            }

            return ph;
          };

          FFTM.prototype.mulp = function mulp (x, y, out) {
            var N = 2 * this.guessLen13b(x.length, y.length);

            var rbt = this.makeRBT(N);

            var _ = this.stub(N);

            var rws = new Array(N);
            var rwst = new Array(N);
            var iwst = new Array(N);

            var nrws = new Array(N);
            var nrwst = new Array(N);
            var niwst = new Array(N);

            var rmws = out.words;
            rmws.length = N;

            this.convert13b(x.words, x.length, rws, N);
            this.convert13b(y.words, y.length, nrws, N);

            this.transform(rws, _, rwst, iwst, N, rbt);
            this.transform(nrws, _, nrwst, niwst, N, rbt);

            for (var i = 0; i < N; i++) {
              var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
              iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
              rwst[i] = rx;
            }

            this.conjugate(rwst, iwst, N);
            this.transform(rwst, iwst, rmws, _, N, rbt);
            this.conjugate(rmws, _, N);
            this.normalize13b(rmws, N);

            out.negative = x.negative ^ y.negative;
            out.length = x.length + y.length;
            return out.strip();
          };

          // Multiply `this` by `num`
          BN.prototype.mul = function mul (num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return this.mulTo(num, out);
          };

          // Multiply employing FFT
          BN.prototype.mulf = function mulf (num) {
            var out = new BN(null);
            out.words = new Array(this.length + num.length);
            return jumboMulTo(this, num, out);
          };

          // In-place Multiplication
          BN.prototype.imul = function imul (num) {
            return this.clone().mulTo(num, this);
          };

          BN.prototype.imuln = function imuln (num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);

            // Carry
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = (this.words[i] | 0) * num;
              var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
              carry >>= 26;
              carry += (w / 0x4000000) | 0;
              // NOTE: lo is 27bit maximum
              carry += lo >>> 26;
              this.words[i] = lo & 0x3ffffff;
            }

            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }

            return this;
          };

          BN.prototype.muln = function muln (num) {
            return this.clone().imuln(num);
          };

          // `this` * `this`
          BN.prototype.sqr = function sqr () {
            return this.mul(this);
          };

          // `this` * `this` in-place
          BN.prototype.isqr = function isqr () {
            return this.imul(this.clone());
          };

          // Math.pow(`this`, `num`)
          BN.prototype.pow = function pow (num) {
            var w = toBitArray(num);
            if (w.length === 0) return new BN(1);

            // Skip leading zeroes
            var res = this;
            for (var i = 0; i < w.length; i++, res = res.sqr()) {
              if (w[i] !== 0) break;
            }

            if (++i < w.length) {
              for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                if (w[i] === 0) continue;

                res = res.mul(q);
              }
            }

            return res;
          };

          // Shift-left in-place
          BN.prototype.iushln = function iushln (bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;
            var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
            var i;

            if (r !== 0) {
              var carry = 0;

              for (i = 0; i < this.length; i++) {
                var newCarry = this.words[i] & carryMask;
                var c = ((this.words[i] | 0) - newCarry) << r;
                this.words[i] = c | carry;
                carry = newCarry >>> (26 - r);
              }

              if (carry) {
                this.words[i] = carry;
                this.length++;
              }
            }

            if (s !== 0) {
              for (i = this.length - 1; i >= 0; i--) {
                this.words[i + s] = this.words[i];
              }

              for (i = 0; i < s; i++) {
                this.words[i] = 0;
              }

              this.length += s;
            }

            return this.strip();
          };

          BN.prototype.ishln = function ishln (bits) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushln(bits);
          };

          // Shift-right in-place
          // NOTE: `hint` is a lowest bit before trailing zeroes
          // NOTE: if `extended` is present - it will be filled with destroyed bits
          BN.prototype.iushrn = function iushrn (bits, hint, extended) {
            assert(typeof bits === 'number' && bits >= 0);
            var h;
            if (hint) {
              h = (hint - (hint % 26)) / 26;
            } else {
              h = 0;
            }

            var r = bits % 26;
            var s = Math.min((bits - r) / 26, this.length);
            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
            var maskedWords = extended;

            h -= s;
            h = Math.max(0, h);

            // Extended mode, copy masked part
            if (maskedWords) {
              for (var i = 0; i < s; i++) {
                maskedWords.words[i] = this.words[i];
              }
              maskedWords.length = s;
            }

            if (s === 0) {
              // No-op, we should not move anything at all
            } else if (this.length > s) {
              this.length -= s;
              for (i = 0; i < this.length; i++) {
                this.words[i] = this.words[i + s];
              }
            } else {
              this.words[0] = 0;
              this.length = 1;
            }

            var carry = 0;
            for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
              var word = this.words[i] | 0;
              this.words[i] = (carry << (26 - r)) | (word >>> r);
              carry = word & mask;
            }

            // Push carried bits as a mask
            if (maskedWords && carry !== 0) {
              maskedWords.words[maskedWords.length++] = carry;
            }

            if (this.length === 0) {
              this.words[0] = 0;
              this.length = 1;
            }

            return this.strip();
          };

          BN.prototype.ishrn = function ishrn (bits, hint, extended) {
            // TODO(indutny): implement me
            assert(this.negative === 0);
            return this.iushrn(bits, hint, extended);
          };

          // Shift-left
          BN.prototype.shln = function shln (bits) {
            return this.clone().ishln(bits);
          };

          BN.prototype.ushln = function ushln (bits) {
            return this.clone().iushln(bits);
          };

          // Shift-right
          BN.prototype.shrn = function shrn (bits) {
            return this.clone().ishrn(bits);
          };

          BN.prototype.ushrn = function ushrn (bits) {
            return this.clone().iushrn(bits);
          };

          // Test if n bit is set
          BN.prototype.testn = function testn (bit) {
            assert(typeof bit === 'number' && bit >= 0);
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) return false;

            // Check bit and return
            var w = this.words[s];

            return !!(w & q);
          };

          // Return only lowers bits of number (in-place)
          BN.prototype.imaskn = function imaskn (bits) {
            assert(typeof bits === 'number' && bits >= 0);
            var r = bits % 26;
            var s = (bits - r) / 26;

            assert(this.negative === 0, 'imaskn works only with positive numbers');

            if (this.length <= s) {
              return this;
            }

            if (r !== 0) {
              s++;
            }
            this.length = Math.min(s, this.length);

            if (r !== 0) {
              var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
              this.words[this.length - 1] &= mask;
            }

            return this.strip();
          };

          // Return only lowers bits of number
          BN.prototype.maskn = function maskn (bits) {
            return this.clone().imaskn(bits);
          };

          // Add plain number `num` to `this`
          BN.prototype.iaddn = function iaddn (num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.isubn(-num);

            // Possible sign change
            if (this.negative !== 0) {
              if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
              }

              this.negative = 0;
              this.isubn(num);
              this.negative = 1;
              return this;
            }

            // Add without checks
            return this._iaddn(num);
          };

          BN.prototype._iaddn = function _iaddn (num) {
            this.words[0] += num;

            // Carry
            for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
              this.words[i] -= 0x4000000;
              if (i === this.length - 1) {
                this.words[i + 1] = 1;
              } else {
                this.words[i + 1]++;
              }
            }
            this.length = Math.max(this.length, i + 1);

            return this;
          };

          // Subtract plain number `num` from `this`
          BN.prototype.isubn = function isubn (num) {
            assert(typeof num === 'number');
            assert(num < 0x4000000);
            if (num < 0) return this.iaddn(-num);

            if (this.negative !== 0) {
              this.negative = 0;
              this.iaddn(num);
              this.negative = 1;
              return this;
            }

            this.words[0] -= num;

            if (this.length === 1 && this.words[0] < 0) {
              this.words[0] = -this.words[0];
              this.negative = 1;
            } else {
              // Carry
              for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                this.words[i] += 0x4000000;
                this.words[i + 1] -= 1;
              }
            }

            return this.strip();
          };

          BN.prototype.addn = function addn (num) {
            return this.clone().iaddn(num);
          };

          BN.prototype.subn = function subn (num) {
            return this.clone().isubn(num);
          };

          BN.prototype.iabs = function iabs () {
            this.negative = 0;

            return this;
          };

          BN.prototype.abs = function abs () {
            return this.clone().iabs();
          };

          BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
            var len = num.length + shift;
            var i;

            this._expand(len);

            var w;
            var carry = 0;
            for (i = 0; i < num.length; i++) {
              w = (this.words[i + shift] | 0) + carry;
              var right = (num.words[i] | 0) * mul;
              w -= right & 0x3ffffff;
              carry = (w >> 26) - ((right / 0x4000000) | 0);
              this.words[i + shift] = w & 0x3ffffff;
            }
            for (; i < this.length - shift; i++) {
              w = (this.words[i + shift] | 0) + carry;
              carry = w >> 26;
              this.words[i + shift] = w & 0x3ffffff;
            }

            if (carry === 0) return this.strip();

            // Subtraction overflow
            assert(carry === -1);
            carry = 0;
            for (i = 0; i < this.length; i++) {
              w = -(this.words[i] | 0) + carry;
              carry = w >> 26;
              this.words[i] = w & 0x3ffffff;
            }
            this.negative = 1;

            return this.strip();
          };

          BN.prototype._wordDiv = function _wordDiv (num, mode) {
            var shift = this.length - num.length;

            var a = this.clone();
            var b = num;

            // Normalize
            var bhi = b.words[b.length - 1] | 0;
            var bhiBits = this._countBits(bhi);
            shift = 26 - bhiBits;
            if (shift !== 0) {
              b = b.ushln(shift);
              a.iushln(shift);
              bhi = b.words[b.length - 1] | 0;
            }

            // Initialize quotient
            var m = a.length - b.length;
            var q;

            if (mode !== 'mod') {
              q = new BN(null);
              q.length = m + 1;
              q.words = new Array(q.length);
              for (var i = 0; i < q.length; i++) {
                q.words[i] = 0;
              }
            }

            var diff = a.clone()._ishlnsubmul(b, 1, m);
            if (diff.negative === 0) {
              a = diff;
              if (q) {
                q.words[m] = 1;
              }
            }

            for (var j = m - 1; j >= 0; j--) {
              var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                (a.words[b.length + j - 1] | 0);

              // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
              // (0x7ffffff)
              qj = Math.min((qj / bhi) | 0, 0x3ffffff);

              a._ishlnsubmul(b, qj, j);
              while (a.negative !== 0) {
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) {
                  a.negative ^= 1;
                }
              }
              if (q) {
                q.words[j] = qj;
              }
            }
            if (q) {
              q.strip();
            }
            a.strip();

            // Denormalize
            if (mode !== 'div' && shift !== 0) {
              a.iushrn(shift);
            }

            return {
              div: q || null,
              mod: a
            };
          };

          // NOTE: 1) `mode` can be set to `mod` to request mod only,
          //       to `div` to request div only, or be absent to
          //       request both div & mod
          //       2) `positive` is true if unsigned mod is requested
          BN.prototype.divmod = function divmod (num, mode, positive) {
            assert(!num.isZero());

            if (this.isZero()) {
              return {
                div: new BN(0),
                mod: new BN(0)
              };
            }

            var div, mod, res;
            if (this.negative !== 0 && num.negative === 0) {
              res = this.neg().divmod(num, mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.iadd(num);
                }
              }

              return {
                div: div,
                mod: mod
              };
            }

            if (this.negative === 0 && num.negative !== 0) {
              res = this.divmod(num.neg(), mode);

              if (mode !== 'mod') {
                div = res.div.neg();
              }

              return {
                div: div,
                mod: res.mod
              };
            }

            if ((this.negative & num.negative) !== 0) {
              res = this.neg().divmod(num.neg(), mode);

              if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) {
                  mod.isub(num);
                }
              }

              return {
                div: res.div,
                mod: mod
              };
            }

            // Both numbers are positive at this point

            // Strip both numbers to approximate shift value
            if (num.length > this.length || this.cmp(num) < 0) {
              return {
                div: new BN(0),
                mod: this
              };
            }

            // Very short reduction
            if (num.length === 1) {
              if (mode === 'div') {
                return {
                  div: this.divn(num.words[0]),
                  mod: null
                };
              }

              if (mode === 'mod') {
                return {
                  div: null,
                  mod: new BN(this.modn(num.words[0]))
                };
              }

              return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
              };
            }

            return this._wordDiv(num, mode);
          };

          // Find `this` / `num`
          BN.prototype.div = function div (num) {
            return this.divmod(num, 'div', false).div;
          };

          // Find `this` % `num`
          BN.prototype.mod = function mod (num) {
            return this.divmod(num, 'mod', false).mod;
          };

          BN.prototype.umod = function umod (num) {
            return this.divmod(num, 'mod', true).mod;
          };

          // Find Round(`this` / `num`)
          BN.prototype.divRound = function divRound (num) {
            var dm = this.divmod(num);

            // Fast case - exact division
            if (dm.mod.isZero()) return dm.div;

            var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

            var half = num.ushrn(1);
            var r2 = num.andln(1);
            var cmp = mod.cmp(half);

            // Round down
            if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

            // Round up
            return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
          };

          BN.prototype.modn = function modn (num) {
            assert(num <= 0x3ffffff);
            var p = (1 << 26) % num;

            var acc = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              acc = (p * acc + (this.words[i] | 0)) % num;
            }

            return acc;
          };

          // In-place division by number
          BN.prototype.idivn = function idivn (num) {
            assert(num <= 0x3ffffff);

            var carry = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var w = (this.words[i] | 0) + carry * 0x4000000;
              this.words[i] = (w / num) | 0;
              carry = w % num;
            }

            return this.strip();
          };

          BN.prototype.divn = function divn (num) {
            return this.clone().idivn(num);
          };

          BN.prototype.egcd = function egcd (p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var x = this;
            var y = p.clone();

            if (x.negative !== 0) {
              x = x.umod(p);
            } else {
              x = x.clone();
            }

            // A * x + B * y = x
            var A = new BN(1);
            var B = new BN(0);

            // C * x + D * y = y
            var C = new BN(0);
            var D = new BN(1);

            var g = 0;

            while (x.isEven() && y.isEven()) {
              x.iushrn(1);
              y.iushrn(1);
              ++g;
            }

            var yp = y.clone();
            var xp = x.clone();

            while (!x.isZero()) {
              for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                x.iushrn(i);
                while (i-- > 0) {
                  if (A.isOdd() || B.isOdd()) {
                    A.iadd(yp);
                    B.isub(xp);
                  }

                  A.iushrn(1);
                  B.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                y.iushrn(j);
                while (j-- > 0) {
                  if (C.isOdd() || D.isOdd()) {
                    C.iadd(yp);
                    D.isub(xp);
                  }

                  C.iushrn(1);
                  D.iushrn(1);
                }
              }

              if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
              } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
              }
            }

            return {
              a: C,
              b: D,
              gcd: y.iushln(g)
            };
          };

          // This is reduced incarnation of the binary EEA
          // above, designated to invert members of the
          // _prime_ fields F(p) at a maximal speed
          BN.prototype._invmp = function _invmp (p) {
            assert(p.negative === 0);
            assert(!p.isZero());

            var a = this;
            var b = p.clone();

            if (a.negative !== 0) {
              a = a.umod(p);
            } else {
              a = a.clone();
            }

            var x1 = new BN(1);
            var x2 = new BN(0);

            var delta = b.clone();

            while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
              for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
              if (i > 0) {
                a.iushrn(i);
                while (i-- > 0) {
                  if (x1.isOdd()) {
                    x1.iadd(delta);
                  }

                  x1.iushrn(1);
                }
              }

              for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
              if (j > 0) {
                b.iushrn(j);
                while (j-- > 0) {
                  if (x2.isOdd()) {
                    x2.iadd(delta);
                  }

                  x2.iushrn(1);
                }
              }

              if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
              } else {
                b.isub(a);
                x2.isub(x1);
              }
            }

            var res;
            if (a.cmpn(1) === 0) {
              res = x1;
            } else {
              res = x2;
            }

            if (res.cmpn(0) < 0) {
              res.iadd(p);
            }

            return res;
          };

          BN.prototype.gcd = function gcd (num) {
            if (this.isZero()) return num.abs();
            if (num.isZero()) return this.abs();

            var a = this.clone();
            var b = num.clone();
            a.negative = 0;
            b.negative = 0;

            // Remove common factor of two
            for (var shift = 0; a.isEven() && b.isEven(); shift++) {
              a.iushrn(1);
              b.iushrn(1);
            }

            do {
              while (a.isEven()) {
                a.iushrn(1);
              }
              while (b.isEven()) {
                b.iushrn(1);
              }

              var r = a.cmp(b);
              if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
              } else if (r === 0 || b.cmpn(1) === 0) {
                break;
              }

              a.isub(b);
            } while (true);

            return b.iushln(shift);
          };

          // Invert number in the field F(num)
          BN.prototype.invm = function invm (num) {
            return this.egcd(num).a.umod(num);
          };

          BN.prototype.isEven = function isEven () {
            return (this.words[0] & 1) === 0;
          };

          BN.prototype.isOdd = function isOdd () {
            return (this.words[0] & 1) === 1;
          };

          // And first word and num
          BN.prototype.andln = function andln (num) {
            return this.words[0] & num;
          };

          // Increment at the bit position in-line
          BN.prototype.bincn = function bincn (bit) {
            assert(typeof bit === 'number');
            var r = bit % 26;
            var s = (bit - r) / 26;
            var q = 1 << r;

            // Fast case: bit is much higher than all existing words
            if (this.length <= s) {
              this._expand(s + 1);
              this.words[s] |= q;
              return this;
            }

            // Add bit and propagate, if needed
            var carry = q;
            for (var i = s; carry !== 0 && i < this.length; i++) {
              var w = this.words[i] | 0;
              w += carry;
              carry = w >>> 26;
              w &= 0x3ffffff;
              this.words[i] = w;
            }
            if (carry !== 0) {
              this.words[i] = carry;
              this.length++;
            }
            return this;
          };

          BN.prototype.isZero = function isZero () {
            return this.length === 1 && this.words[0] === 0;
          };

          BN.prototype.cmpn = function cmpn (num) {
            var negative = num < 0;

            if (this.negative !== 0 && !negative) return -1;
            if (this.negative === 0 && negative) return 1;

            this.strip();

            var res;
            if (this.length > 1) {
              res = 1;
            } else {
              if (negative) {
                num = -num;
              }

              assert(num <= 0x3ffffff, 'Number is too big');

              var w = this.words[0] | 0;
              res = w === num ? 0 : w < num ? -1 : 1;
            }
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Compare two numbers and return:
          // 1 - if `this` > `num`
          // 0 - if `this` == `num`
          // -1 - if `this` < `num`
          BN.prototype.cmp = function cmp (num) {
            if (this.negative !== 0 && num.negative === 0) return -1;
            if (this.negative === 0 && num.negative !== 0) return 1;

            var res = this.ucmp(num);
            if (this.negative !== 0) return -res | 0;
            return res;
          };

          // Unsigned comparison
          BN.prototype.ucmp = function ucmp (num) {
            // At this point both numbers have the same sign
            if (this.length > num.length) return 1;
            if (this.length < num.length) return -1;

            var res = 0;
            for (var i = this.length - 1; i >= 0; i--) {
              var a = this.words[i] | 0;
              var b = num.words[i] | 0;

              if (a === b) continue;
              if (a < b) {
                res = -1;
              } else if (a > b) {
                res = 1;
              }
              break;
            }
            return res;
          };

          BN.prototype.gtn = function gtn (num) {
            return this.cmpn(num) === 1;
          };

          BN.prototype.gt = function gt (num) {
            return this.cmp(num) === 1;
          };

          BN.prototype.gten = function gten (num) {
            return this.cmpn(num) >= 0;
          };

          BN.prototype.gte = function gte (num) {
            return this.cmp(num) >= 0;
          };

          BN.prototype.ltn = function ltn (num) {
            return this.cmpn(num) === -1;
          };

          BN.prototype.lt = function lt (num) {
            return this.cmp(num) === -1;
          };

          BN.prototype.lten = function lten (num) {
            return this.cmpn(num) <= 0;
          };

          BN.prototype.lte = function lte (num) {
            return this.cmp(num) <= 0;
          };

          BN.prototype.eqn = function eqn (num) {
            return this.cmpn(num) === 0;
          };

          BN.prototype.eq = function eq (num) {
            return this.cmp(num) === 0;
          };

          //
          // A reduce context, could be using montgomery or something better, depending
          // on the `m` itself.
          //
          BN.red = function red (num) {
            return new Red(num);
          };

          BN.prototype.toRed = function toRed (ctx) {
            assert(!this.red, 'Already a number in reduction context');
            assert(this.negative === 0, 'red works only with positives');
            return ctx.convertTo(this)._forceRed(ctx);
          };

          BN.prototype.fromRed = function fromRed () {
            assert(this.red, 'fromRed works only with numbers in reduction context');
            return this.red.convertFrom(this);
          };

          BN.prototype._forceRed = function _forceRed (ctx) {
            this.red = ctx;
            return this;
          };

          BN.prototype.forceRed = function forceRed (ctx) {
            assert(!this.red, 'Already a number in reduction context');
            return this._forceRed(ctx);
          };

          BN.prototype.redAdd = function redAdd (num) {
            assert(this.red, 'redAdd works only with red numbers');
            return this.red.add(this, num);
          };

          BN.prototype.redIAdd = function redIAdd (num) {
            assert(this.red, 'redIAdd works only with red numbers');
            return this.red.iadd(this, num);
          };

          BN.prototype.redSub = function redSub (num) {
            assert(this.red, 'redSub works only with red numbers');
            return this.red.sub(this, num);
          };

          BN.prototype.redISub = function redISub (num) {
            assert(this.red, 'redISub works only with red numbers');
            return this.red.isub(this, num);
          };

          BN.prototype.redShl = function redShl (num) {
            assert(this.red, 'redShl works only with red numbers');
            return this.red.shl(this, num);
          };

          BN.prototype.redMul = function redMul (num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.mul(this, num);
          };

          BN.prototype.redIMul = function redIMul (num) {
            assert(this.red, 'redMul works only with red numbers');
            this.red._verify2(this, num);
            return this.red.imul(this, num);
          };

          BN.prototype.redSqr = function redSqr () {
            assert(this.red, 'redSqr works only with red numbers');
            this.red._verify1(this);
            return this.red.sqr(this);
          };

          BN.prototype.redISqr = function redISqr () {
            assert(this.red, 'redISqr works only with red numbers');
            this.red._verify1(this);
            return this.red.isqr(this);
          };

          // Square root over p
          BN.prototype.redSqrt = function redSqrt () {
            assert(this.red, 'redSqrt works only with red numbers');
            this.red._verify1(this);
            return this.red.sqrt(this);
          };

          BN.prototype.redInvm = function redInvm () {
            assert(this.red, 'redInvm works only with red numbers');
            this.red._verify1(this);
            return this.red.invm(this);
          };

          // Return negative clone of `this` % `red modulo`
          BN.prototype.redNeg = function redNeg () {
            assert(this.red, 'redNeg works only with red numbers');
            this.red._verify1(this);
            return this.red.neg(this);
          };

          BN.prototype.redPow = function redPow (num) {
            assert(this.red && !num.red, 'redPow(normalNum)');
            this.red._verify1(this);
            return this.red.pow(this, num);
          };

          // Prime numbers with efficient reduction
          var primes = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
          };

          // Pseudo-Mersenne prime
          function MPrime (name, p) {
            // P = 2 ^ N - K
            this.name = name;
            this.p = new BN(p, 16);
            this.n = this.p.bitLength();
            this.k = new BN(1).iushln(this.n).isub(this.p);

            this.tmp = this._tmp();
          }

          MPrime.prototype._tmp = function _tmp () {
            var tmp = new BN(null);
            tmp.words = new Array(Math.ceil(this.n / 13));
            return tmp;
          };

          MPrime.prototype.ireduce = function ireduce (num) {
            // Assumes that `num` is less than `P^2`
            // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
            var r = num;
            var rlen;

            do {
              this.split(r, this.tmp);
              r = this.imulK(r);
              r = r.iadd(this.tmp);
              rlen = r.bitLength();
            } while (rlen > this.n);

            var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
            if (cmp === 0) {
              r.words[0] = 0;
              r.length = 1;
            } else if (cmp > 0) {
              r.isub(this.p);
            } else {
              if (r.strip !== undefined) {
                // r is BN v4 instance
                r.strip();
              } else {
                // r is BN v5 instance
                r._strip();
              }
            }

            return r;
          };

          MPrime.prototype.split = function split (input, out) {
            input.iushrn(this.n, 0, out);
          };

          MPrime.prototype.imulK = function imulK (num) {
            return num.imul(this.k);
          };

          function K256 () {
            MPrime.call(
              this,
              'k256',
              'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
          }
          inherits(K256, MPrime);

          K256.prototype.split = function split (input, output) {
            // 256 = 9 * 26 + 22
            var mask = 0x3fffff;

            var outLen = Math.min(input.length, 9);
            for (var i = 0; i < outLen; i++) {
              output.words[i] = input.words[i];
            }
            output.length = outLen;

            if (input.length <= 9) {
              input.words[0] = 0;
              input.length = 1;
              return;
            }

            // Shift by 9 limbs
            var prev = input.words[9];
            output.words[output.length++] = prev & mask;

            for (i = 10; i < input.length; i++) {
              var next = input.words[i] | 0;
              input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
              prev = next;
            }
            prev >>>= 22;
            input.words[i - 10] = prev;
            if (prev === 0 && input.length > 10) {
              input.length -= 10;
            } else {
              input.length -= 9;
            }
          };

          K256.prototype.imulK = function imulK (num) {
            // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
            num.words[num.length] = 0;
            num.words[num.length + 1] = 0;
            num.length += 2;

            // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
            var lo = 0;
            for (var i = 0; i < num.length; i++) {
              var w = num.words[i] | 0;
              lo += w * 0x3d1;
              num.words[i] = lo & 0x3ffffff;
              lo = w * 0x40 + ((lo / 0x4000000) | 0);
            }

            // Fast length reduction
            if (num.words[num.length - 1] === 0) {
              num.length--;
              if (num.words[num.length - 1] === 0) {
                num.length--;
              }
            }
            return num;
          };

          function P224 () {
            MPrime.call(
              this,
              'p224',
              'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
          }
          inherits(P224, MPrime);

          function P192 () {
            MPrime.call(
              this,
              'p192',
              'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
          }
          inherits(P192, MPrime);

          function P25519 () {
            // 2 ^ 255 - 19
            MPrime.call(
              this,
              '25519',
              '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
          }
          inherits(P25519, MPrime);

          P25519.prototype.imulK = function imulK (num) {
            // K = 0x13
            var carry = 0;
            for (var i = 0; i < num.length; i++) {
              var hi = (num.words[i] | 0) * 0x13 + carry;
              var lo = hi & 0x3ffffff;
              hi >>>= 26;

              num.words[i] = lo;
              carry = hi;
            }
            if (carry !== 0) {
              num.words[num.length++] = carry;
            }
            return num;
          };

          // Exported mostly for testing purposes, use plain name instead
          BN._prime = function prime (name) {
            // Cached version of prime
            if (primes[name]) return primes[name];

            var prime;
            if (name === 'k256') {
              prime = new K256();
            } else if (name === 'p224') {
              prime = new P224();
            } else if (name === 'p192') {
              prime = new P192();
            } else if (name === 'p25519') {
              prime = new P25519();
            } else {
              throw new Error('Unknown prime ' + name);
            }
            primes[name] = prime;

            return prime;
          };

          //
          // Base reduction engine
          //
          function Red (m) {
            if (typeof m === 'string') {
              var prime = BN._prime(m);
              this.m = prime.p;
              this.prime = prime;
            } else {
              assert(m.gtn(1), 'modulus must be greater than 1');
              this.m = m;
              this.prime = null;
            }
          }

          Red.prototype._verify1 = function _verify1 (a) {
            assert(a.negative === 0, 'red works only with positives');
            assert(a.red, 'red works only with red numbers');
          };

          Red.prototype._verify2 = function _verify2 (a, b) {
            assert((a.negative | b.negative) === 0, 'red works only with positives');
            assert(a.red && a.red === b.red,
              'red works only with red numbers');
          };

          Red.prototype.imod = function imod (a) {
            if (this.prime) return this.prime.ireduce(a)._forceRed(this);
            return a.umod(this.m)._forceRed(this);
          };

          Red.prototype.neg = function neg (a) {
            if (a.isZero()) {
              return a.clone();
            }

            return this.m.sub(a)._forceRed(this);
          };

          Red.prototype.add = function add (a, b) {
            this._verify2(a, b);

            var res = a.add(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.iadd = function iadd (a, b) {
            this._verify2(a, b);

            var res = a.iadd(b);
            if (res.cmp(this.m) >= 0) {
              res.isub(this.m);
            }
            return res;
          };

          Red.prototype.sub = function sub (a, b) {
            this._verify2(a, b);

            var res = a.sub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res._forceRed(this);
          };

          Red.prototype.isub = function isub (a, b) {
            this._verify2(a, b);

            var res = a.isub(b);
            if (res.cmpn(0) < 0) {
              res.iadd(this.m);
            }
            return res;
          };

          Red.prototype.shl = function shl (a, num) {
            this._verify1(a);
            return this.imod(a.ushln(num));
          };

          Red.prototype.imul = function imul (a, b) {
            this._verify2(a, b);
            return this.imod(a.imul(b));
          };

          Red.prototype.mul = function mul (a, b) {
            this._verify2(a, b);
            return this.imod(a.mul(b));
          };

          Red.prototype.isqr = function isqr (a) {
            return this.imul(a, a.clone());
          };

          Red.prototype.sqr = function sqr (a) {
            return this.mul(a, a);
          };

          Red.prototype.sqrt = function sqrt (a) {
            if (a.isZero()) return a.clone();

            var mod3 = this.m.andln(3);
            assert(mod3 % 2 === 1);

            // Fast case
            if (mod3 === 3) {
              var pow = this.m.add(new BN(1)).iushrn(2);
              return this.pow(a, pow);
            }

            // Tonelli-Shanks algorithm (Totally unoptimized and slow)
            //
            // Find Q and S, that Q * 2 ^ S = (P - 1)
            var q = this.m.subn(1);
            var s = 0;
            while (!q.isZero() && q.andln(1) === 0) {
              s++;
              q.iushrn(1);
            }
            assert(!q.isZero());

            var one = new BN(1).toRed(this);
            var nOne = one.redNeg();

            // Find quadratic non-residue
            // NOTE: Max is such because of generalized Riemann hypothesis.
            var lpow = this.m.subn(1).iushrn(1);
            var z = this.m.bitLength();
            z = new BN(2 * z * z).toRed(this);

            while (this.pow(z, lpow).cmp(nOne) !== 0) {
              z.redIAdd(nOne);
            }

            var c = this.pow(z, q);
            var r = this.pow(a, q.addn(1).iushrn(1));
            var t = this.pow(a, q);
            var m = s;
            while (t.cmp(one) !== 0) {
              var tmp = t;
              for (var i = 0; tmp.cmp(one) !== 0; i++) {
                tmp = tmp.redSqr();
              }
              assert(i < m);
              var b = this.pow(c, new BN(1).iushln(m - i - 1));

              r = r.redMul(b);
              c = b.redSqr();
              t = t.redMul(c);
              m = i;
            }

            return r;
          };

          Red.prototype.invm = function invm (a) {
            var inv = a._invmp(this.m);
            if (inv.negative !== 0) {
              inv.negative = 0;
              return this.imod(inv).redNeg();
            } else {
              return this.imod(inv);
            }
          };

          Red.prototype.pow = function pow (a, num) {
            if (num.isZero()) return new BN(1).toRed(this);
            if (num.cmpn(1) === 0) return a.clone();

            var windowSize = 4;
            var wnd = new Array(1 << windowSize);
            wnd[0] = new BN(1).toRed(this);
            wnd[1] = a;
            for (var i = 2; i < wnd.length; i++) {
              wnd[i] = this.mul(wnd[i - 1], a);
            }

            var res = wnd[0];
            var current = 0;
            var currentLen = 0;
            var start = num.bitLength() % 26;
            if (start === 0) {
              start = 26;
            }

            for (i = num.length - 1; i >= 0; i--) {
              var word = num.words[i];
              for (var j = start - 1; j >= 0; j--) {
                var bit = (word >> j) & 1;
                if (res !== wnd[0]) {
                  res = this.sqr(res);
                }

                if (bit === 0 && current === 0) {
                  currentLen = 0;
                  continue;
                }

                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
              }
              start = 26;
            }

            return res;
          };

          Red.prototype.convertTo = function convertTo (num) {
            var r = num.umod(this.m);

            return r === num ? r.clone() : r;
          };

          Red.prototype.convertFrom = function convertFrom (num) {
            var res = num.clone();
            res.red = null;
            return res;
          };

          //
          // Montgomery method engine
          //

          BN.mont = function mont (num) {
            return new Mont(num);
          };

          function Mont (m) {
            Red.call(this, m);

            this.shift = this.m.bitLength();
            if (this.shift % 26 !== 0) {
              this.shift += 26 - (this.shift % 26);
            }

            this.r = new BN(1).iushln(this.shift);
            this.r2 = this.imod(this.r.sqr());
            this.rinv = this.r._invmp(this.m);

            this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
            this.minv = this.minv.umod(this.r);
            this.minv = this.r.sub(this.minv);
          }
          inherits(Mont, Red);

          Mont.prototype.convertTo = function convertTo (num) {
            return this.imod(num.ushln(this.shift));
          };

          Mont.prototype.convertFrom = function convertFrom (num) {
            var r = this.imod(num.mul(this.rinv));
            r.red = null;
            return r;
          };

          Mont.prototype.imul = function imul (a, b) {
            if (a.isZero() || b.isZero()) {
              a.words[0] = 0;
              a.length = 1;
              return a;
            }

            var t = a.imul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;

            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.mul = function mul (a, b) {
            if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

            var t = a.mul(b);
            var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
            var u = t.isub(c).iushrn(this.shift);
            var res = u;
            if (u.cmp(this.m) >= 0) {
              res = u.isub(this.m);
            } else if (u.cmpn(0) < 0) {
              res = u.iadd(this.m);
            }

            return res._forceRed(this);
          };

          Mont.prototype.invm = function invm (a) {
            // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
            var res = this.imod(a._invmp(this.m).mul(this.r2));
            return res._forceRed(this);
          };
        })( false || module, this);

          /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("62e4")(module)))

        /***/ }),

      /***/ "3bbe":
      /***/ (function(module, exports, __webpack_require__) {

        var isCallable = __webpack_require__("1626");

        module.exports = function (argument) {
          if (typeof argument === 'object' || isCallable(argument)) return argument;
          throw TypeError("Can't set " + String(argument) + ' as a prototype');
        };


        /***/ }),

      /***/ "3c35":
      /***/ (function(module, exports) {

        /* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
          module.exports = __webpack_amd_options__;

          /* WEBPACK VAR INJECTION */}.call(this, {}))

        /***/ }),

      /***/ "3ca3":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var charAt = __webpack_require__("6547").charAt;
        var toString = __webpack_require__("577e");
        var InternalStateModule = __webpack_require__("69f3");
        var defineIterator = __webpack_require__("7dd0");

        var STRING_ITERATOR = 'String Iterator';
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
        defineIterator(String, 'String', function (iterated) {
          setInternalState(this, {
            type: STRING_ITERATOR,
            string: toString(iterated),
            index: 0
          });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
        }, function next() {
          var state = getInternalState(this);
          var string = state.string;
          var index = state.index;
          var point;
          if (index >= string.length) return { value: undefined, done: true };
          point = charAt(string, index);
          state.index += point.length;
          return { value: point, done: false };
        });


        /***/ }),

      /***/ "3f8c":
      /***/ (function(module, exports) {

        module.exports = {};


        /***/ }),

      /***/ "3fb5":
      /***/ (function(module, exports) {

        if (typeof Object.create === 'function') {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              })
            }
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor
              var TempCtor = function () {}
              TempCtor.prototype = superCtor.prototype
              ctor.prototype = new TempCtor()
              ctor.prototype.constructor = ctor
            }
          }
        }


        /***/ }),

      /***/ "428f":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");

        module.exports = global;


        /***/ }),

      /***/ "4362":
      /***/ (function(module, exports, __webpack_require__) {

        exports.nextTick = function nextTick(fn) {
          var args = Array.prototype.slice.call(arguments);
          args.shift();
          setTimeout(function () {
            fn.apply(null, args);
          }, 0);
        };

        exports.platform = exports.arch =
          exports.execPath = exports.title = 'browser';
        exports.pid = 1;
        exports.browser = true;
        exports.env = {};
        exports.argv = [];

        exports.binding = function (name) {
          throw new Error('No such module. (Possibly not yet loaded)')
        };

        (function () {
          var cwd = '/';
          var path;
          exports.cwd = function () { return cwd };
          exports.chdir = function (dir) {
            if (!path) path = __webpack_require__("df7c");
            cwd = path.resolve(dir, cwd);
          };
        })();

        exports.exit = exports.kill =
          exports.umask = exports.dlopen =
            exports.uptime = exports.memoryUsage =
              exports.uvCounters = function() {};
        exports.features = {};


        /***/ }),

      /***/ "44ad":
      /***/ (function(module, exports, __webpack_require__) {

        var fails = __webpack_require__("d039");
        var classof = __webpack_require__("c6b6");

        var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
        module.exports = fails(function () {
          // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
          // eslint-disable-next-line no-prototype-builtins -- safe
          return !Object('z').propertyIsEnumerable(0);
        }) ? function (it) {
          return classof(it) == 'String' ? split.call(it, '') : Object(it);
        } : Object;


        /***/ }),

      /***/ "44d2":
      /***/ (function(module, exports, __webpack_require__) {

        var wellKnownSymbol = __webpack_require__("b622");
        var create = __webpack_require__("7c73");
        var definePropertyModule = __webpack_require__("9bf2");

        var UNSCOPABLES = wellKnownSymbol('unscopables');
        var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
        if (ArrayPrototype[UNSCOPABLES] == undefined) {
          definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
            configurable: true,
            value: create(null)
          });
        }

// add a key to Array.prototype[@@unscopables]
        module.exports = function (key) {
          ArrayPrototype[UNSCOPABLES][key] = true;
        };


        /***/ }),

      /***/ "44de":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");

        module.exports = function (a, b) {
          var console = global.console;
          if (console && console.error) {
            arguments.length === 1 ? console.error(a) : console.error(a, b);
          }
        };


        /***/ }),

      /***/ "44e7":
      /***/ (function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__("861d");
        var classof = __webpack_require__("c6b6");
        var wellKnownSymbol = __webpack_require__("b622");

        var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
        module.exports = function (it) {
          var isRegExp;
          return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
        };


        /***/ }),

      /***/ "4840":
      /***/ (function(module, exports, __webpack_require__) {

        var anObject = __webpack_require__("825a");
        var aConstructor = __webpack_require__("5087");
        var wellKnownSymbol = __webpack_require__("b622");

        var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
        module.exports = function (O, defaultConstructor) {
          var C = anObject(O).constructor;
          var S;
          return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aConstructor(S);
        };


        /***/ }),

      /***/ "485a":
      /***/ (function(module, exports, __webpack_require__) {

        var isCallable = __webpack_require__("1626");
        var isObject = __webpack_require__("861d");

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
        module.exports = function (input, pref) {
          var fn, val;
          if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = fn.call(input))) return val;
          if (isCallable(fn = input.valueOf) && !isObject(val = fn.call(input))) return val;
          if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = fn.call(input))) return val;
          throw TypeError("Can't convert object to primitive value");
        };


        /***/ }),

      /***/ "4930":
      /***/ (function(module, exports, __webpack_require__) {

        /* eslint-disable es/no-symbol -- required for testing */
        var V8_VERSION = __webpack_require__("2d00");
        var fails = __webpack_require__("d039");

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
        module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
          var symbol = Symbol();
          // Chrome 38 Symbol has incorrect toString conversion
          // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
          return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
            // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
            !Symbol.sham && V8_VERSION && V8_VERSION < 41;
        });


        /***/ }),

      /***/ "4968":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_OAuthConnect_vue_vue_type_style_index_0_id_dc9416e0_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6ba8");
        /* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_OAuthConnect_vue_vue_type_style_index_0_id_dc9416e0_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_dist_cjs_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_OAuthConnect_vue_vue_type_style_index_0_id_dc9416e0_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
        /* unused harmony reexport * */


        /***/ }),

      /***/ "4ae1":
      /***/ (function(module, exports, __webpack_require__) {

        var $ = __webpack_require__("23e7");
        var getBuiltIn = __webpack_require__("d066");
        var aConstructor = __webpack_require__("5087");
        var anObject = __webpack_require__("825a");
        var isObject = __webpack_require__("861d");
        var create = __webpack_require__("7c73");
        var bind = __webpack_require__("0538");
        var fails = __webpack_require__("d039");

        var nativeConstruct = getBuiltIn('Reflect', 'construct');

// `Reflect.construct` method
// https://tc39.es/ecma262/#sec-reflect.construct
// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
        var NEW_TARGET_BUG = fails(function () {
          function F() { /* empty */ }
          return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
        });
        var ARGS_BUG = !fails(function () {
          nativeConstruct(function () { /* empty */ });
        });
        var FORCED = NEW_TARGET_BUG || ARGS_BUG;

        $({ target: 'Reflect', stat: true, forced: FORCED, sham: FORCED }, {
          construct: function construct(Target, args /* , newTarget */) {
            aConstructor(Target);
            anObject(args);
            var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
            if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
            if (Target == newTarget) {
              // w/o altered newTarget, optimization for 0-4 arguments
              switch (args.length) {
                case 0: return new Target();
                case 1: return new Target(args[0]);
                case 2: return new Target(args[0], args[1]);
                case 3: return new Target(args[0], args[1], args[2]);
                case 4: return new Target(args[0], args[1], args[2], args[3]);
              }
              // w/o altered newTarget, lot of arguments case
              var $args = [null];
              $args.push.apply($args, args);
              return new (bind.apply(Target, $args))();
            }
            // with altered newTarget, not support built-in constructors
            var proto = newTarget.prototype;
            var instance = create(isObject(proto) ? proto : Object.prototype);
            var result = Function.apply.call(Target, instance, args);
            return isObject(result) ? result : instance;
          }
        });


        /***/ }),

      /***/ "4c41":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        /**
         * Returns a Promise that resolves to the value of window.ethereum if it is
         * set within the given timeout, or null.
         * The Promise will not reject, but an error will be thrown if invalid options
         * are provided.
         *
         * @param options - Options bag.
         * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.
         * Default: false
         * @param options.silent - Whether to silence console errors. Does not affect
         * thrown errors. Default: false
         * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to
         * be dispatched. Default: 3000
         * @returns A Promise that resolves with the Provider if it is detected within
         * given timeout, otherwise null.
         */
        function detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeout = 3000, } = {}) {
          _validateInputs();
          let handled = false;
          return new Promise((resolve) => {
            if (window.ethereum) {
              handleEthereum();
            }
            else {
              window.addEventListener('ethereum#initialized', handleEthereum, { once: true });
              setTimeout(() => {
                handleEthereum();
              }, timeout);
            }
            function handleEthereum() {
              if (handled) {
                return;
              }
              handled = true;
              window.removeEventListener('ethereum#initialized', handleEthereum);
              const { ethereum } = window;
              if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {
                resolve(ethereum);
              }
              else {
                const message = mustBeMetaMask && ethereum
                  ? 'Non-MetaMask window.ethereum detected.'
                  : 'Unable to detect window.ethereum.';
                !silent && console.error('@metamask/detect-provider:', message);
                resolve(null);
              }
            }
          });
          function _validateInputs() {
            if (typeof mustBeMetaMask !== 'boolean') {
              throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);
            }
            if (typeof silent !== 'boolean') {
              throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);
            }
            if (typeof timeout !== 'number') {
              throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);
            }
          }
        }
        module.exports = detectEthereumProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVlBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILFNBQVMsc0JBQXNCLENBQUMsRUFDOUIsY0FBYyxHQUFHLEtBQUssRUFDdEIsTUFBTSxHQUFHLEtBQUssRUFDZCxPQUFPLEdBQUcsSUFBSSxHQUNmLEdBQUcsRUFBRTtJQUVKLGVBQWUsRUFBRSxDQUFDO0lBRWxCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztJQUVwQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDN0IsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO1lBRW5CLGNBQWMsRUFBRSxDQUFDO1NBRWxCO2FBQU07WUFFTCxNQUFNLENBQUMsZ0JBQWdCLENBQ3JCLHNCQUFzQixFQUN0QixjQUFjLEVBQ2QsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQ2YsQ0FBQztZQUVGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsY0FBYyxFQUFFLENBQUM7WUFDbkIsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2I7UUFFRCxTQUFTLGNBQWM7WUFFckIsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTzthQUNSO1lBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQztZQUVmLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxzQkFBc0IsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUVuRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDO1lBRTVCLElBQUksUUFBUSxJQUFJLENBQUMsQ0FBQyxjQUFjLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDbkI7aUJBQU07Z0JBRUwsTUFBTSxPQUFPLEdBQUcsY0FBYyxJQUFJLFFBQVE7b0JBQ3hDLENBQUMsQ0FBQyx3Q0FBd0M7b0JBQzFDLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQztnQkFFeEMsQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDaEUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2Y7UUFDSCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLGVBQWU7UUFDdEIsSUFBSSxPQUFPLGNBQWMsS0FBSyxTQUFTLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RUFBOEUsQ0FBQyxDQUFDO1NBQ2pHO1FBQ0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ3pGO1FBQ0QsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ3pGO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFsRkQsaUJBQVMsc0JBQXNCLENBQUMifQ==

        /***/ }),

      /***/ "4d64":
      /***/ (function(module, exports, __webpack_require__) {

        var toIndexedObject = __webpack_require__("fc6a");
        var toLength = __webpack_require__("50c4");
        var toAbsoluteIndex = __webpack_require__("23cb");

// `Array.prototype.{ indexOf, includes }` methods implementation
        var createMethod = function (IS_INCLUDES) {
          return function ($this, el, fromIndex) {
            var O = toIndexedObject($this);
            var length = toLength(O.length);
            var index = toAbsoluteIndex(fromIndex, length);
            var value;
            // Array#includes uses SameValueZero equality algorithm
            // eslint-disable-next-line no-self-compare -- NaN check
            if (IS_INCLUDES && el != el) while (length > index) {
              value = O[index++];
              // eslint-disable-next-line no-self-compare -- NaN check
              if (value != value) return true;
              // Array#indexOf ignores holes, Array#includes - not
            } else for (;length > index; index++) {
              if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
            } return !IS_INCLUDES && -1;
          };
        };

        module.exports = {
          // `Array.prototype.includes` method
          // https://tc39.es/ecma262/#sec-array.prototype.includes
          includes: createMethod(true),
          // `Array.prototype.indexOf` method
          // https://tc39.es/ecma262/#sec-array.prototype.indexof
          indexOf: createMethod(false)
        };


        /***/ }),

      /***/ "4df4":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var bind = __webpack_require__("0366");
        var toObject = __webpack_require__("7b0b");
        var callWithSafeIterationClosing = __webpack_require__("9bdd");
        var isArrayIteratorMethod = __webpack_require__("e95a");
        var isConstructor = __webpack_require__("68ee");
        var toLength = __webpack_require__("50c4");
        var createProperty = __webpack_require__("8418");
        var getIterator = __webpack_require__("9a1f");
        var getIteratorMethod = __webpack_require__("35a1");

// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
        module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
          var O = toObject(arrayLike);
          var IS_CONSTRUCTOR = isConstructor(this);
          var argumentsLength = arguments.length;
          var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
          var mapping = mapfn !== undefined;
          if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
          var iteratorMethod = getIteratorMethod(O);
          var index = 0;
          var length, result, step, iterator, next, value;
          // if the target is not iterable or it's an array with the default iterator - use a simple case
          if (iteratorMethod && !(this == Array && isArrayIteratorMethod(iteratorMethod))) {
            iterator = getIterator(O, iteratorMethod);
            next = iterator.next;
            result = IS_CONSTRUCTOR ? new this() : [];
            for (;!(step = next.call(iterator)).done; index++) {
              value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
              createProperty(result, index, value);
            }
          } else {
            length = toLength(O.length);
            result = IS_CONSTRUCTOR ? new this(length) : Array(length);
            for (;length > index; index++) {
              value = mapping ? mapfn(O[index], index) : O[index];
              createProperty(result, index, value);
            }
          }
          result.length = index;
          return result;
        };


        /***/ }),

      /***/ "5087":
      /***/ (function(module, exports, __webpack_require__) {

        var isConstructor = __webpack_require__("68ee");
        var tryToString = __webpack_require__("0d51");

// `Assert: IsConstructor(argument) is true`
        module.exports = function (argument) {
          if (isConstructor(argument)) return argument;
          throw TypeError(tryToString(argument) + ' is not a constructor');
        };


        /***/ }),

      /***/ "50c4":
      /***/ (function(module, exports, __webpack_require__) {

        var toInteger = __webpack_require__("a691");

        var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
        module.exports = function (argument) {
          return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
        };


        /***/ }),

      /***/ "5135":
      /***/ (function(module, exports, __webpack_require__) {

        var toObject = __webpack_require__("7b0b");

        var hasOwnProperty = {}.hasOwnProperty;

        module.exports = Object.hasOwn || function hasOwn(it, key) {
          return hasOwnProperty.call(toObject(it), key);
        };


        /***/ }),

      /***/ "549e":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";

// EXPORTS
        __webpack_require__.d(__webpack_exports__, "k", function() { return /* binding */ isBytesLike; });
        __webpack_require__.d(__webpack_exports__, "j", function() { return /* binding */ isBytes; });
        __webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ arrayify; });
        __webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ concat; });
        __webpack_require__.d(__webpack_exports__, "o", function() { return /* binding */ stripZeros; });
        __webpack_require__.d(__webpack_exports__, "p", function() { return /* binding */ zeroPad; });
        __webpack_require__.d(__webpack_exports__, "l", function() { return /* binding */ isHexString; });
        __webpack_require__.d(__webpack_exports__, "i", function() { return /* binding */ hexlify; });
        __webpack_require__.d(__webpack_exports__, "d", function() { return /* binding */ hexDataLength; });
        __webpack_require__.d(__webpack_exports__, "e", function() { return /* binding */ hexDataSlice; });
        __webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ hexConcat; });
        __webpack_require__.d(__webpack_exports__, "g", function() { return /* binding */ hexValue; });
        __webpack_require__.d(__webpack_exports__, "f", function() { return /* binding */ hexStripZeros; });
        __webpack_require__.d(__webpack_exports__, "h", function() { return /* binding */ hexZeroPad; });
        __webpack_require__.d(__webpack_exports__, "n", function() { return /* binding */ splitSignature; });
        __webpack_require__.d(__webpack_exports__, "m", function() { return /* binding */ joinSignature; });

// EXTERNAL MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js + 1 modules
        var lib_esm = __webpack_require__("ffb2");

// CONCATENATED MODULE: ./node_modules/@ethersproject/bytes/lib.esm/_version.js
        const version = "bytes/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/bytes/lib.esm/index.js



        const logger = new lib_esm["b" /* Logger */](version);
///////////////////////////////
        function isHexable(value) {
          return !!(value.toHexString);
        }
        function addSlice(array) {
          if (array.slice) {
            return array;
          }
          array.slice = function () {
            const args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
          };
          return array;
        }
        function isBytesLike(value) {
          return ((isHexString(value) && !(value.length % 2)) || isBytes(value));
        }
        function isInteger(value) {
          return (typeof (value) === "number" && value == value && (value % 1) === 0);
        }
        function isBytes(value) {
          if (value == null) {
            return false;
          }
          if (value.constructor === Uint8Array) {
            return true;
          }
          if (typeof (value) === "string") {
            return false;
          }
          if (!isInteger(value.length) || value.length < 0) {
            return false;
          }
          for (let i = 0; i < value.length; i++) {
            const v = value[i];
            if (!isInteger(v) || v < 0 || v >= 256) {
              return false;
            }
          }
          return true;
        }
        function arrayify(value, options) {
          if (!options) {
            options = {};
          }
          if (typeof (value) === "number") {
            logger.checkSafeUint53(value, "invalid arrayify value");
            const result = [];
            while (value) {
              result.unshift(value & 0xff);
              value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
              result.push(0);
            }
            return addSlice(new Uint8Array(result));
          }
          if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
          }
          if (isHexable(value)) {
            value = value.toHexString();
          }
          if (isHexString(value)) {
            let hex = value.substring(2);
            if (hex.length % 2) {
              if (options.hexPad === "left") {
                hex = "0x0" + hex.substring(2);
              }
              else if (options.hexPad === "right") {
                hex += "0";
              }
              else {
                logger.throwArgumentError("hex data is odd-length", "value", value);
              }
            }
            const result = [];
            for (let i = 0; i < hex.length; i += 2) {
              result.push(parseInt(hex.substring(i, i + 2), 16));
            }
            return addSlice(new Uint8Array(result));
          }
          if (isBytes(value)) {
            return addSlice(new Uint8Array(value));
          }
          return logger.throwArgumentError("invalid arrayify value", "value", value);
        }
        function concat(items) {
          const objects = items.map(item => arrayify(item));
          const length = objects.reduce((accum, item) => (accum + item.length), 0);
          const result = new Uint8Array(length);
          objects.reduce((offset, object) => {
            result.set(object, offset);
            return offset + object.length;
          }, 0);
          return addSlice(result);
        }
        function stripZeros(value) {
          let result = arrayify(value);
          if (result.length === 0) {
            return result;
          }
          // Find the first non-zero entry
          let start = 0;
          while (start < result.length && result[start] === 0) {
            start++;
          }
          // If we started with zeros, strip them
          if (start) {
            result = result.slice(start);
          }
          return result;
        }
        function zeroPad(value, length) {
          value = arrayify(value);
          if (value.length > length) {
            logger.throwArgumentError("value out of range", "value", arguments[0]);
          }
          const result = new Uint8Array(length);
          result.set(value, length - value.length);
          return addSlice(result);
        }
        function isHexString(value, length) {
          if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
          }
          if (length && value.length !== 2 + 2 * length) {
            return false;
          }
          return true;
        }
        const HexCharacters = "0123456789abcdef";
        function hexlify(value, options) {
          if (!options) {
            options = {};
          }
          if (typeof (value) === "number") {
            logger.checkSafeUint53(value, "invalid hexlify value");
            let hex = "";
            while (value) {
              hex = HexCharacters[value & 0xf] + hex;
              value = Math.floor(value / 16);
            }
            if (hex.length) {
              if (hex.length % 2) {
                hex = "0" + hex;
              }
              return "0x" + hex;
            }
            return "0x00";
          }
          if (typeof (value) === "bigint") {
            value = value.toString(16);
            if (value.length % 2) {
              return ("0x0" + value);
            }
            return "0x" + value;
          }
          if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
          }
          if (isHexable(value)) {
            return value.toHexString();
          }
          if (isHexString(value)) {
            if (value.length % 2) {
              if (options.hexPad === "left") {
                value = "0x0" + value.substring(2);
              }
              else if (options.hexPad === "right") {
                value += "0";
              }
              else {
                logger.throwArgumentError("hex data is odd-length", "value", value);
              }
            }
            return value.toLowerCase();
          }
          if (isBytes(value)) {
            let result = "0x";
            for (let i = 0; i < value.length; i++) {
              let v = value[i];
              result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
            }
            return result;
          }
          return logger.throwArgumentError("invalid hexlify value", "value", value);
        }
        /*
function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
    if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
        return "0x0" + value.substring(2);
    }
    return value;
}
*/
        function hexDataLength(data) {
          if (typeof (data) !== "string") {
            data = hexlify(data);
          }
          else if (!isHexString(data) || (data.length % 2)) {
            return null;
          }
          return (data.length - 2) / 2;
        }
        function hexDataSlice(data, offset, endOffset) {
          if (typeof (data) !== "string") {
            data = hexlify(data);
          }
          else if (!isHexString(data) || (data.length % 2)) {
            logger.throwArgumentError("invalid hexData", "value", data);
          }
          offset = 2 + 2 * offset;
          if (endOffset != null) {
            return "0x" + data.substring(offset, 2 + 2 * endOffset);
          }
          return "0x" + data.substring(offset);
        }
        function hexConcat(items) {
          let result = "0x";
          items.forEach((item) => {
            result += hexlify(item).substring(2);
          });
          return result;
        }
        function hexValue(value) {
          const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
          if (trimmed === "0x") {
            return "0x0";
          }
          return trimmed;
        }
        function hexStripZeros(value) {
          if (typeof (value) !== "string") {
            value = hexlify(value);
          }
          if (!isHexString(value)) {
            logger.throwArgumentError("invalid hex string", "value", value);
          }
          value = value.substring(2);
          let offset = 0;
          while (offset < value.length && value[offset] === "0") {
            offset++;
          }
          return "0x" + value.substring(offset);
        }
        function hexZeroPad(value, length) {
          if (typeof (value) !== "string") {
            value = hexlify(value);
          }
          else if (!isHexString(value)) {
            logger.throwArgumentError("invalid hex string", "value", value);
          }
          if (value.length > 2 * length + 2) {
            logger.throwArgumentError("value out of range", "value", arguments[1]);
          }
          while (value.length < 2 * length + 2) {
            value = "0x0" + value.substring(2);
          }
          return value;
        }
        function splitSignature(signature) {
          const result = {
            r: "0x",
            s: "0x",
            _vs: "0x",
            recoveryParam: 0,
            v: 0
          };
          if (isBytesLike(signature)) {
            const bytes = arrayify(signature);
            if (bytes.length !== 65) {
              logger.throwArgumentError("invalid signature string; must be 65 bytes", "signature", signature);
            }
            // Get the r, s and v
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
            result.v = bytes[64];
            // Allow a recid to be used as the v
            if (result.v < 27) {
              if (result.v === 0 || result.v === 1) {
                result.v += 27;
              }
              else {
                logger.throwArgumentError("signature invalid v byte", "signature", signature);
              }
            }
            // Compute recoveryParam from v
            result.recoveryParam = 1 - (result.v % 2);
            // Compute _vs from recoveryParam and s
            if (result.recoveryParam) {
              bytes[32] |= 0x80;
            }
            result._vs = hexlify(bytes.slice(32, 64));
          }
          else {
            result.r = signature.r;
            result.s = signature.s;
            result.v = signature.v;
            result.recoveryParam = signature.recoveryParam;
            result._vs = signature._vs;
            // If the _vs is available, use it to populate missing s, v and recoveryParam
            // and verify non-missing s, v and recoveryParam
            if (result._vs != null) {
              const vs = zeroPad(arrayify(result._vs), 32);
              result._vs = hexlify(vs);
              // Set or check the recid
              const recoveryParam = ((vs[0] >= 128) ? 1 : 0);
              if (result.recoveryParam == null) {
                result.recoveryParam = recoveryParam;
              }
              else if (result.recoveryParam !== recoveryParam) {
                logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
              }
              // Set or check the s
              vs[0] &= 0x7f;
              const s = hexlify(vs);
              if (result.s == null) {
                result.s = s;
              }
              else if (result.s !== s) {
                logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
              }
            }
            // Use recid and v to populate each other
            if (result.recoveryParam == null) {
              if (result.v == null) {
                logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
              }
              else if (result.v === 0 || result.v === 1) {
                result.recoveryParam = result.v;
              }
              else {
                result.recoveryParam = 1 - (result.v % 2);
              }
            }
            else {
              if (result.v == null) {
                result.v = 27 + result.recoveryParam;
              }
              else {
                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
                if (result.recoveryParam !== recId) {
                  logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                }
              }
            }
            if (result.r == null || !isHexString(result.r)) {
              logger.throwArgumentError("signature missing or invalid r", "signature", signature);
            }
            else {
              result.r = hexZeroPad(result.r, 32);
            }
            if (result.s == null || !isHexString(result.s)) {
              logger.throwArgumentError("signature missing or invalid s", "signature", signature);
            }
            else {
              result.s = hexZeroPad(result.s, 32);
            }
            const vs = arrayify(result.s);
            if (vs[0] >= 128) {
              logger.throwArgumentError("signature s out of range", "signature", signature);
            }
            if (result.recoveryParam) {
              vs[0] |= 0x80;
            }
            const _vs = hexlify(vs);
            if (result._vs) {
              if (!isHexString(result._vs)) {
                logger.throwArgumentError("signature invalid _vs", "signature", signature);
              }
              result._vs = hexZeroPad(result._vs, 32);
            }
            // Set or check the _vs
            if (result._vs == null) {
              result._vs = _vs;
            }
            else if (result._vs !== _vs) {
              logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
            }
          }
          return result;
        }
        function joinSignature(signature) {
          signature = splitSignature(signature);
          return hexlify(concat([
            signature.r,
            signature.s,
            (signature.recoveryParam ? "0x1c" : "0x1b")
          ]));
        }
//# sourceMappingURL=index.js.map

        /***/ }),

      /***/ "5692":
      /***/ (function(module, exports, __webpack_require__) {

        var IS_PURE = __webpack_require__("c430");
        var store = __webpack_require__("c6cd");

        (module.exports = function (key, value) {
          return store[key] || (store[key] = value !== undefined ? value : {});
        })('versions', []).push({
          version: '3.18.1',
          mode: IS_PURE ? 'pure' : 'global',
          copyright: 'Â© 2021 Denis Pushkarev (zloirock.ru)'
        });


        /***/ }),

      /***/ "56ef":
      /***/ (function(module, exports, __webpack_require__) {

        var getBuiltIn = __webpack_require__("d066");
        var getOwnPropertyNamesModule = __webpack_require__("241c");
        var getOwnPropertySymbolsModule = __webpack_require__("7418");
        var anObject = __webpack_require__("825a");

// all object keys, includes non-enumerable and symbols
        module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
          var keys = getOwnPropertyNamesModule.f(anObject(it));
          var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
          return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
        };


        /***/ }),

      /***/ "576b":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        exports.EthereumNetwork = exports.EthereumProviderErrorName = exports.EthereumProvider = void 0;
        var EthereumProvider_1 = __webpack_require__("e39c");
        Object.defineProperty(exports, "EthereumProvider", { enumerable: true, get: function () { return EthereumProvider_1.EthereumProvider; } });
        Object.defineProperty(exports, "EthereumProviderErrorName", { enumerable: true, get: function () { return EthereumProvider_1.EthereumProviderErrorName; } });
        Object.defineProperty(exports, "EthereumNetwork", { enumerable: true, get: function () { return EthereumProvider_1.EthereumNetwork; } });


        /***/ }),

      /***/ "577e":
      /***/ (function(module, exports, __webpack_require__) {

        var classof = __webpack_require__("f5df");

        module.exports = function (argument) {
          if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
          return String(argument);
        };


        /***/ }),

      /***/ "5919":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        exports.sha1 = __webpack_require__("13e2");
        exports.sha224 = __webpack_require__("07f2");
        exports.sha256 = __webpack_require__("6eed");
        exports.sha384 = __webpack_require__("8b95");
        exports.sha512 = __webpack_require__("b525");


        /***/ }),

      /***/ "59ed":
      /***/ (function(module, exports, __webpack_require__) {

        var isCallable = __webpack_require__("1626");
        var tryToString = __webpack_require__("0d51");

// `Assert: IsCallable(argument) is true`
        module.exports = function (argument) {
          if (isCallable(argument)) return argument;
          throw TypeError(tryToString(argument) + ' is not a function');
        };


        /***/ }),

      /***/ "5a34":
      /***/ (function(module, exports, __webpack_require__) {

        var isRegExp = __webpack_require__("44e7");

        module.exports = function (it) {
          if (isRegExp(it)) {
            throw TypeError("The method doesn't accept regular expressions");
          } return it;
        };


        /***/ }),

      /***/ "5c6c":
      /***/ (function(module, exports) {

        module.exports = function (bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
          };
        };


        /***/ }),

      /***/ "5e77":
      /***/ (function(module, exports, __webpack_require__) {

        var DESCRIPTORS = __webpack_require__("83ab");
        var has = __webpack_require__("5135");

        var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

        var EXISTS = has(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
        var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
        var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

        module.exports = {
          EXISTS: EXISTS,
          PROPER: PROPER,
          CONFIGURABLE: CONFIGURABLE
        };


        /***/ }),

      /***/ "605d":
      /***/ (function(module, exports, __webpack_require__) {

        var classof = __webpack_require__("c6b6");
        var global = __webpack_require__("da84");

        module.exports = classof(global.process) == 'process';


        /***/ }),

      /***/ "6069":
      /***/ (function(module, exports) {

        module.exports = typeof window == 'object';


        /***/ }),

      /***/ "62e4":
      /***/ (function(module, exports) {

        module.exports = function(module) {
          if (!module.webpackPolyfill) {
            module.deprecate = function() {};
            module.paths = [];
            // module.parent = undefined by default
            if (!module.children) module.children = [];
            Object.defineProperty(module, "loaded", {
              enumerable: true,
              get: function() {
                return module.l;
              }
            });
            Object.defineProperty(module, "id", {
              enumerable: true,
              get: function() {
                return module.i;
              }
            });
            module.webpackPolyfill = 1;
          }
          return module;
        };


        /***/ }),

      /***/ "6415":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        Object.defineProperty(exports, "__esModule", { value: true });
        exports.deleteOAuth = exports.deleteJWT = exports.setOAuth = exports.setJWT = exports.getOAuth = exports.getJWT = exports.OAUTH_COOKIE = exports.JWT_COOKIE = void 0;
        exports.JWT_COOKIE = 'manifoldJWT';
        exports.OAUTH_COOKIE = 'manifoldOAuth';
        var getJWTKey = function (address, strict) {
          return strict ? exports.JWT_COOKIE + ":" + (address === null || address === void 0 ? void 0 : address.toLowerCase()) : exports.JWT_COOKIE;
        };
        var getOAuthKey = function (address, strict) {
          return strict ? exports.OAUTH_COOKIE + ":" + (address === null || address === void 0 ? void 0 : address.toLowerCase()) : exports.OAUTH_COOKIE;
        };
        var getJWT = function (address, strict) {
          return localStorage.getItem(getJWTKey(address, strict));
        };
        exports.getJWT = getJWT;
        var getOAuth = function (address, strict) {
          return localStorage.getItem(getOAuthKey(address, strict));
        };
        exports.getOAuth = getOAuth;
        var setJWT = function (address, strict, jwt) {
          localStorage.setItem(getJWTKey(address, strict), jwt);
        };
        exports.setJWT = setJWT;
        var setOAuth = function (address, strict, token) {
          localStorage.setItem(getOAuthKey(address, strict), token);
        };
        exports.setOAuth = setOAuth;
        var deleteJWT = function (address, strict) {
          localStorage.removeItem(getJWTKey(address, strict));
        };
        exports.deleteJWT = deleteJWT;
        var deleteOAuth = function (address, strict) {
          localStorage.removeItem(getOAuthKey(address, strict));
        };
        exports.deleteOAuth = deleteOAuth;


        /***/ }),

      /***/ "6547":
      /***/ (function(module, exports, __webpack_require__) {

        var toInteger = __webpack_require__("a691");
        var toString = __webpack_require__("577e");
        var requireObjectCoercible = __webpack_require__("1d80");

// `String.prototype.codePointAt` methods implementation
        var createMethod = function (CONVERT_TO_STRING) {
          return function ($this, pos) {
            var S = toString(requireObjectCoercible($this));
            var position = toInteger(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
            first = S.charCodeAt(position);
            return first < 0xD800 || first > 0xDBFF || position + 1 === size
            || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
              ? CONVERT_TO_STRING ? S.charAt(position) : first
              : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
          };
        };

        module.exports = {
          // `String.prototype.codePointAt` method
          // https://tc39.es/ecma262/#sec-string.prototype.codepointat
          codeAt: createMethod(false),
          // `String.prototype.at` method
          // https://github.com/mathiasbynens/String.prototype.at
          charAt: createMethod(true)
        };


        /***/ }),

      /***/ "65f0":
      /***/ (function(module, exports, __webpack_require__) {

        var arraySpeciesConstructor = __webpack_require__("0b42");

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
        module.exports = function (originalArray, length) {
          return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
        };


        /***/ }),

      /***/ "68ee":
      /***/ (function(module, exports, __webpack_require__) {

        var fails = __webpack_require__("d039");
        var isCallable = __webpack_require__("1626");
        var classof = __webpack_require__("f5df");
        var getBuiltIn = __webpack_require__("d066");
        var inspectSource = __webpack_require__("8925");

        var empty = [];
        var construct = getBuiltIn('Reflect', 'construct');
        var constructorRegExp = /^\s*(?:class|function)\b/;
        var exec = constructorRegExp.exec;
        var INCORRECT_TO_STRING = !constructorRegExp.exec(function () { /* empty */ });

        var isConstructorModern = function (argument) {
          if (!isCallable(argument)) return false;
          try {
            construct(Object, empty, argument);
            return true;
          } catch (error) {
            return false;
          }
        };

        var isConstructorLegacy = function (argument) {
          if (!isCallable(argument)) return false;
          switch (classof(argument)) {
            case 'AsyncFunction':
            case 'GeneratorFunction':
            case 'AsyncGeneratorFunction': return false;
            // we can't check .prototype since constructors produced by .bind haven't it
          } return INCORRECT_TO_STRING || !!exec.call(constructorRegExp, inspectSource(argument));
        };

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
        module.exports = !construct || fails(function () {
          var called;
          return isConstructorModern(isConstructorModern.call)
            || !isConstructorModern(Object)
            || !isConstructorModern(function () { called = true; })
            || called;
        }) ? isConstructorLegacy : isConstructorModern;


        /***/ }),

      /***/ "69f3":
      /***/ (function(module, exports, __webpack_require__) {

        var NATIVE_WEAK_MAP = __webpack_require__("7f9a");
        var global = __webpack_require__("da84");
        var isObject = __webpack_require__("861d");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var objectHas = __webpack_require__("5135");
        var shared = __webpack_require__("c6cd");
        var sharedKey = __webpack_require__("f772");
        var hiddenKeys = __webpack_require__("d012");

        var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
        var WeakMap = global.WeakMap;
        var set, get, has;

        var enforce = function (it) {
          return has(it) ? get(it) : set(it, {});
        };

        var getterFor = function (TYPE) {
          return function (it) {
            var state;
            if (!isObject(it) || (state = get(it)).type !== TYPE) {
              throw TypeError('Incompatible receiver, ' + TYPE + ' required');
            } return state;
          };
        };

        if (NATIVE_WEAK_MAP || shared.state) {
          var store = shared.state || (shared.state = new WeakMap());
          var wmget = store.get;
          var wmhas = store.has;
          var wmset = store.set;
          set = function (it, metadata) {
            if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            wmset.call(store, it, metadata);
            return metadata;
          };
          get = function (it) {
            return wmget.call(store, it) || {};
          };
          has = function (it) {
            return wmhas.call(store, it);
          };
        } else {
          var STATE = sharedKey('state');
          hiddenKeys[STATE] = true;
          set = function (it, metadata) {
            if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it;
            createNonEnumerableProperty(it, STATE, metadata);
            return metadata;
          };
          get = function (it) {
            return objectHas(it, STATE) ? it[STATE] : {};
          };
          has = function (it) {
            return objectHas(it, STATE);
          };
        }

        module.exports = {
          set: set,
          get: get,
          has: has,
          enforce: enforce,
          getterFor: getterFor
        };


        /***/ }),

      /***/ "6ba8":
      /***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

        /***/ }),

      /***/ "6e45":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return randomBytes; });
          /* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("549e");
          /* harmony import */ var _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("ffb2");
          /* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("ff09");




          const logger = new _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__[/* Logger */ "b"](_version__WEBPACK_IMPORTED_MODULE_2__[/* version */ "a"]);
// Debugging line for testing browser lib in node
//const window = { crypto: { getRandomValues: () => { } } };
          let anyGlobal = null;
          try {
            anyGlobal = window;
            if (anyGlobal == null) {
              throw new Error("try next");
            }
          }
          catch (error) {
            try {
              anyGlobal = global;
              if (anyGlobal == null) {
                throw new Error("try next");
              }
            }
            catch (error) {
              anyGlobal = {};
            }
          }
          let crypto = anyGlobal.crypto || anyGlobal.msCrypto;
          if (!crypto || !crypto.getRandomValues) {
            logger.warn("WARNING: Missing strong random number source");
            crypto = {
              getRandomValues: function (buffer) {
                return logger.throwError("no secure random source avaialble", _ethersproject_logger__WEBPACK_IMPORTED_MODULE_1__[/* Logger */ "b"].errors.UNSUPPORTED_OPERATION, {
                  operation: "crypto.getRandomValues"
                });
              }
            };
          }
          function randomBytes(length) {
            if (length <= 0 || length > 1024 || (length % 1) || length != length) {
              logger.throwArgumentError("invalid length", "length", length);
            }
            const result = new Uint8Array(length);
            crypto.getRandomValues(result);
            return Object(_ethersproject_bytes__WEBPACK_IMPORTED_MODULE_0__[/* arrayify */ "a"])(result);
          }
          ;
//# sourceMappingURL=random.js.map
          /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

        /***/ }),

      /***/ "6eeb":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var isCallable = __webpack_require__("1626");
        var has = __webpack_require__("5135");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var setGlobal = __webpack_require__("ce4e");
        var inspectSource = __webpack_require__("8925");
        var InternalStateModule = __webpack_require__("69f3");
        var CONFIGURABLE_FUNCTION_NAME = __webpack_require__("5e77").CONFIGURABLE;

        var getInternalState = InternalStateModule.get;
        var enforceInternalState = InternalStateModule.enforce;
        var TEMPLATE = String(String).split('String');

        (module.exports = function (O, key, value, options) {
          var unsafe = options ? !!options.unsafe : false;
          var simple = options ? !!options.enumerable : false;
          var noTargetGet = options ? !!options.noTargetGet : false;
          var name = options && options.name !== undefined ? options.name : key;
          var state;
          if (isCallable(value)) {
            if (String(name).slice(0, 7) === 'Symbol(') {
              name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
            }
            if (!has(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
              createNonEnumerableProperty(value, 'name', name);
            }
            state = enforceInternalState(value);
            if (!state.source) {
              state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
            }
          }
          if (O === global) {
            if (simple) O[key] = value;
            else setGlobal(key, value);
            return;
          } else if (!unsafe) {
            delete O[key];
          } else if (!noTargetGet && O[key]) {
            simple = true;
          }
          if (simple) O[key] = value;
          else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
        })(Function.prototype, 'toString', function toString() {
          return isCallable(this) && getInternalState(this).source || inspectSource(this);
        });


        /***/ }),

      /***/ "6eed":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__("c3c0");
        var common = __webpack_require__("edc9");
        var shaCommon = __webpack_require__("aa56");
        var assert = __webpack_require__("da3e");

        var sum32 = utils.sum32;
        var sum32_4 = utils.sum32_4;
        var sum32_5 = utils.sum32_5;
        var ch32 = shaCommon.ch32;
        var maj32 = shaCommon.maj32;
        var s0_256 = shaCommon.s0_256;
        var s1_256 = shaCommon.s1_256;
        var g0_256 = shaCommon.g0_256;
        var g1_256 = shaCommon.g1_256;

        var BlockHash = common.BlockHash;

        var sha256_K = [
          0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
          0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
          0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
          0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
          0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
          0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
          0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
          0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
          0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
          0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
          0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
          0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
          0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
          0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
          0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
          0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ];

        function SHA256() {
          if (!(this instanceof SHA256))
            return new SHA256();

          BlockHash.call(this);
          this.h = [
            0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
            0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
          ];
          this.k = sha256_K;
          this.W = new Array(64);
        }
        utils.inherits(SHA256, BlockHash);
        module.exports = SHA256;

        SHA256.blockSize = 512;
        SHA256.outSize = 256;
        SHA256.hmacStrength = 192;
        SHA256.padLength = 64;

        SHA256.prototype._update = function _update(msg, start) {
          var W = this.W;

          for (var i = 0; i < 16; i++)
            W[i] = msg[start + i];
          for (; i < W.length; i++)
            W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

          var a = this.h[0];
          var b = this.h[1];
          var c = this.h[2];
          var d = this.h[3];
          var e = this.h[4];
          var f = this.h[5];
          var g = this.h[6];
          var h = this.h[7];

          assert(this.k.length === W.length);
          for (i = 0; i < W.length; i++) {
            var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
            var T2 = sum32(s0_256(a), maj32(a, b, c));
            h = g;
            g = f;
            f = e;
            e = sum32(d, T1);
            d = c;
            c = b;
            b = a;
            a = sum32(T1, T2);
          }

          this.h[0] = sum32(this.h[0], a);
          this.h[1] = sum32(this.h[1], b);
          this.h[2] = sum32(this.h[2], c);
          this.h[3] = sum32(this.h[3], d);
          this.h[4] = sum32(this.h[4], e);
          this.h[5] = sum32(this.h[5], f);
          this.h[6] = sum32(this.h[6], g);
          this.h[7] = sum32(this.h[7], h);
        };

        SHA256.prototype._digest = function digest(enc) {
          if (enc === 'hex')
            return utils.toHex32(this.h, 'big');
          else
            return utils.split32(this.h, 'big');
        };


        /***/ }),

      /***/ "7037":
      /***/ (function(module, exports, __webpack_require__) {

        __webpack_require__("a4d3");

        __webpack_require__("e01a");

        __webpack_require__("d3b7");

        __webpack_require__("d28b");

        __webpack_require__("e260");

        __webpack_require__("3ca3");

        __webpack_require__("ddb0");

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            module.exports = _typeof = function _typeof(obj) {
              return typeof obj;
            };

            module.exports["default"] = module.exports, module.exports.__esModule = true;
          } else {
            module.exports = _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };

            module.exports["default"] = module.exports, module.exports.__esModule = true;
          }

          return _typeof(obj);
        }

        module.exports = _typeof;
        module.exports["default"] = module.exports, module.exports.__esModule = true;

        /***/ }),

      /***/ "7247":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        (function(root) {

          function checkInt(value) {
            return (parseInt(value) === value);
          }

          function checkInts(arrayish) {
            if (!checkInt(arrayish.length)) { return false; }

            for (var i = 0; i < arrayish.length; i++) {
              if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                return false;
              }
            }

            return true;
          }

          function coerceArray(arg, copy) {

            // ArrayBuffer view
            if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

              if (copy) {
                if (arg.slice) {
                  arg = arg.slice();
                } else {
                  arg = Array.prototype.slice.call(arg);
                }
              }

              return arg;
            }

            // It's an array; check it is a valid representation of a byte
            if (Array.isArray(arg)) {
              if (!checkInts(arg)) {
                throw new Error('Array contains invalid value: ' + arg);
              }

              return new Uint8Array(arg);
            }

            // Something else, but behaves like an array (maybe a Buffer? Arguments?)
            if (checkInt(arg.length) && checkInts(arg)) {
              return new Uint8Array(arg);
            }

            throw new Error('unsupported array-like object');
          }

          function createArray(length) {
            return new Uint8Array(length);
          }

          function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
            if (sourceStart != null || sourceEnd != null) {
              if (sourceArray.slice) {
                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
              } else {
                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
              }
            }
            targetArray.set(sourceArray, targetStart);
          }



          var convertUtf8 = (function() {
            function toBytes(text) {
              var result = [], i = 0;
              text = encodeURI(text);
              while (i < text.length) {
                var c = text.charCodeAt(i++);

                // if it is a % sign, encode the following 2 bytes as a hex value
                if (c === 37) {
                  result.push(parseInt(text.substr(i, 2), 16))
                  i += 2;

                  // otherwise, just the actual byte
                } else {
                  result.push(c)
                }
              }

              return coerceArray(result);
            }

            function fromBytes(bytes) {
              var result = [], i = 0;

              while (i < bytes.length) {
                var c = bytes[i];

                if (c < 128) {
                  result.push(String.fromCharCode(c));
                  i++;
                } else if (c > 191 && c < 224) {
                  result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                  i += 2;
                } else {
                  result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                  i += 3;
                }
              }

              return result.join('');
            }

            return {
              toBytes: toBytes,
              fromBytes: fromBytes,
            }
          })();

          var convertHex = (function() {
            function toBytes(text) {
              var result = [];
              for (var i = 0; i < text.length; i += 2) {
                result.push(parseInt(text.substr(i, 2), 16));
              }

              return result;
            }

            // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
            var Hex = '0123456789abcdef';

            function fromBytes(bytes) {
              var result = [];
              for (var i = 0; i < bytes.length; i++) {
                var v = bytes[i];
                result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
              }
              return result.join('');
            }

            return {
              toBytes: toBytes,
              fromBytes: fromBytes,
            }
          })();


          // Number of rounds by keysize
          var numberOfRounds = {16: 10, 24: 12, 32: 14}

          // Round constant words
          var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

          // S-box and Inverse S-box (S is for Substitution)
          var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
          var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

          // Transformations for encryption
          var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
          var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
          var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
          var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

          // Transformations for decryption
          var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
          var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
          var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
          var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

          // Transformations for decryption key expansion
          var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
          var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
          var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
          var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

          function convertToInt32(bytes) {
            var result = [];
            for (var i = 0; i < bytes.length; i += 4) {
              result.push(
                (bytes[i    ] << 24) |
                (bytes[i + 1] << 16) |
                (bytes[i + 2] <<  8) |
                bytes[i + 3]
              );
            }
            return result;
          }

          var AES = function(key) {
            if (!(this instanceof AES)) {
              throw Error('AES must be instanitated with `new`');
            }

            Object.defineProperty(this, 'key', {
              value: coerceArray(key, true)
            });

            this._prepare();
          }


          AES.prototype._prepare = function() {

            var rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
              throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
            }

            // encryption round keys
            this._Ke = [];

            // decryption round keys
            this._Kd = [];

            for (var i = 0; i <= rounds; i++) {
              this._Ke.push([0, 0, 0, 0]);
              this._Kd.push([0, 0, 0, 0]);
            }

            var roundKeyCount = (rounds + 1) * 4;
            var KC = this.key.length / 4;

            // convert the key into ints
            var tk = convertToInt32(this.key);

            // copy values into round key arrays
            var index;
            for (var i = 0; i < KC; i++) {
              index = i >> 2;
              this._Ke[index][i % 4] = tk[i];
              this._Kd[rounds - index][i % 4] = tk[i];
            }

            // key expansion (fips-197 section 5.2)
            var rconpointer = 0;
            var t = KC, tt;
            while (t < roundKeyCount) {
              tt = tk[KC - 1];
              tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                (S[(tt >>  8) & 0xFF] << 16) ^
                (S[ tt        & 0xFF] <<  8) ^
                S[(tt >> 24) & 0xFF]        ^
                (rcon[rconpointer] << 24));
              rconpointer += 1;

              // key expansion (for non-256 bit)
              if (KC != 8) {
                for (var i = 1; i < KC; i++) {
                  tk[i] ^= tk[i - 1];
                }

                // key expansion for 256-bit keys is "slightly different" (fips-197)
              } else {
                for (var i = 1; i < (KC / 2); i++) {
                  tk[i] ^= tk[i - 1];
                }
                tt = tk[(KC / 2) - 1];

                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                  (S[(tt >>  8) & 0xFF] <<  8) ^
                  (S[(tt >> 16) & 0xFF] << 16) ^
                  (S[(tt >> 24) & 0xFF] << 24));

                for (var i = (KC / 2) + 1; i < KC; i++) {
                  tk[i] ^= tk[i - 1];
                }
              }

              // copy values into round key arrays
              var i = 0, r, c;
              while (i < KC && t < roundKeyCount) {
                r = t >> 2;
                c = t % 4;
                this._Ke[r][c] = tk[i];
                this._Kd[rounds - r][c] = tk[i++];
                t++;
              }
            }

            // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
            for (var r = 1; r < rounds; r++) {
              for (var c = 0; c < 4; c++) {
                tt = this._Kd[r][c];
                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                  U2[(tt >> 16) & 0xFF] ^
                  U3[(tt >>  8) & 0xFF] ^
                  U4[ tt        & 0xFF]);
              }
            }
          }

          AES.prototype.encrypt = function(plaintext) {
            if (plaintext.length != 16) {
              throw new Error('invalid plaintext size (must be 16 bytes)');
            }

            var rounds = this._Ke.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(plaintext);
            for (var i = 0; i < 4; i++) {
              t[i] ^= this._Ke[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
              for (var i = 0; i < 4; i++) {
                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                  T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                  T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                  T4[ t[(i + 3) % 4]        & 0xff] ^
                  this._Ke[r][i]);
              }
              t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
              tt = this._Ke[rounds][i];
              result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
              result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
              result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
              result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
          }

          AES.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length != 16) {
              throw new Error('invalid ciphertext size (must be 16 bytes)');
            }

            var rounds = this._Kd.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(ciphertext);
            for (var i = 0; i < 4; i++) {
              t[i] ^= this._Kd[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
              for (var i = 0; i < 4; i++) {
                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                  T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                  T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                  T8[ t[(i + 1) % 4]        & 0xff] ^
                  this._Kd[r][i]);
              }
              t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
              tt = this._Kd[rounds][i];
              result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
              result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
              result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
              result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
          }


          /**
           *  Mode Of Operation - Electonic Codebook (ECB)
           */
          var ModeOfOperationECB = function(key) {
            if (!(this instanceof ModeOfOperationECB)) {
              throw Error('AES must be instanitated with `new`');
            }

            this.description = "Electronic Code Block";
            this.name = "ecb";

            this._aes = new AES(key);
          }

          ModeOfOperationECB.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
              throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
              copyArray(plaintext, block, 0, i, i + 16);
              block = this._aes.encrypt(block);
              copyArray(block, ciphertext, i);
            }

            return ciphertext;
          }

          ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
              throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
              copyArray(ciphertext, block, 0, i, i + 16);
              block = this._aes.decrypt(block);
              copyArray(block, plaintext, i);
            }

            return plaintext;
          }


          /**
           *  Mode Of Operation - Cipher Block Chaining (CBC)
           */
          var ModeOfOperationCBC = function(key, iv) {
            if (!(this instanceof ModeOfOperationCBC)) {
              throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Block Chaining";
            this.name = "cbc";

            if (!iv) {
              iv = createArray(16);

            } else if (iv.length != 16) {
              throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastCipherblock = coerceArray(iv, true);

            this._aes = new AES(key);
          }

          ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
              throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
              copyArray(plaintext, block, 0, i, i + 16);

              for (var j = 0; j < 16; j++) {
                block[j] ^= this._lastCipherblock[j];
              }

              this._lastCipherblock = this._aes.encrypt(block);
              copyArray(this._lastCipherblock, ciphertext, i);
            }

            return ciphertext;
          }

          ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
              throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
              copyArray(ciphertext, block, 0, i, i + 16);
              block = this._aes.decrypt(block);

              for (var j = 0; j < 16; j++) {
                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
              }

              copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
            }

            return plaintext;
          }


          /**
           *  Mode Of Operation - Cipher Feedback (CFB)
           */
          var ModeOfOperationCFB = function(key, iv, segmentSize) {
            if (!(this instanceof ModeOfOperationCFB)) {
              throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Feedback";
            this.name = "cfb";

            if (!iv) {
              iv = createArray(16);

            } else if (iv.length != 16) {
              throw new Error('invalid initialation vector size (must be 16 size)');
            }

            if (!segmentSize) { segmentSize = 1; }

            this.segmentSize = segmentSize;

            this._shiftRegister = coerceArray(iv, true);

            this._aes = new AES(key);
          }

          ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
            if ((plaintext.length % this.segmentSize) != 0) {
              throw new Error('invalid plaintext size (must be segmentSize bytes)');
            }

            var encrypted = coerceArray(plaintext, true);

            var xorSegment;
            for (var i = 0; i < encrypted.length; i += this.segmentSize) {
              xorSegment = this._aes.encrypt(this._shiftRegister);
              for (var j = 0; j < this.segmentSize; j++) {
                encrypted[i + j] ^= xorSegment[j];
              }

              // Shift the register
              copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
              copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return encrypted;
          }

          ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
            if ((ciphertext.length % this.segmentSize) != 0) {
              throw new Error('invalid ciphertext size (must be segmentSize bytes)');
            }

            var plaintext = coerceArray(ciphertext, true);

            var xorSegment;
            for (var i = 0; i < plaintext.length; i += this.segmentSize) {
              xorSegment = this._aes.encrypt(this._shiftRegister);

              for (var j = 0; j < this.segmentSize; j++) {
                plaintext[i + j] ^= xorSegment[j];
              }

              // Shift the register
              copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
              copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return plaintext;
          }

          /**
           *  Mode Of Operation - Output Feedback (OFB)
           */
          var ModeOfOperationOFB = function(key, iv) {
            if (!(this instanceof ModeOfOperationOFB)) {
              throw Error('AES must be instanitated with `new`');
            }

            this.description = "Output Feedback";
            this.name = "ofb";

            if (!iv) {
              iv = createArray(16);

            } else if (iv.length != 16) {
              throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastPrecipher = coerceArray(iv, true);
            this._lastPrecipherIndex = 16;

            this._aes = new AES(key);
          }

          ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
              if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
              }
              encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            }

            return encrypted;
          }

          // Decryption is symetric
          ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


          /**
           *  Counter object for CTR common mode of operation
           */
          var Counter = function(initialValue) {
            if (!(this instanceof Counter)) {
              throw Error('Counter must be instanitated with `new`');
            }

            // We allow 0, but anything false-ish uses the default 1
            if (initialValue !== 0 && !initialValue) { initialValue = 1; }

            if (typeof(initialValue) === 'number') {
              this._counter = createArray(16);
              this.setValue(initialValue);

            } else {
              this.setBytes(initialValue);
            }
          }

          Counter.prototype.setValue = function(value) {
            if (typeof(value) !== 'number' || parseInt(value) != value) {
              throw new Error('invalid counter value (must be an integer)');
            }

            for (var index = 15; index >= 0; --index) {
              this._counter[index] = value % 256;
              value = value >> 8;
            }
          }

          Counter.prototype.setBytes = function(bytes) {
            bytes = coerceArray(bytes, true);

            if (bytes.length != 16) {
              throw new Error('invalid counter bytes size (must be 16 bytes)');
            }

            this._counter = bytes;
          };

          Counter.prototype.increment = function() {
            for (var i = 15; i >= 0; i--) {
              if (this._counter[i] === 255) {
                this._counter[i] = 0;
              } else {
                this._counter[i]++;
                break;
              }
            }
          }


          /**
           *  Mode Of Operation - Counter (CTR)
           */
          var ModeOfOperationCTR = function(key, counter) {
            if (!(this instanceof ModeOfOperationCTR)) {
              throw Error('AES must be instanitated with `new`');
            }

            this.description = "Counter";
            this.name = "ctr";

            if (!(counter instanceof Counter)) {
              counter = new Counter(counter)
            }

            this._counter = counter;

            this._remainingCounter = null;
            this._remainingCounterIndex = 16;

            this._aes = new AES(key);
          }

          ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
              if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(this._counter._counter);
                this._remainingCounterIndex = 0;
                this._counter.increment();
              }
              encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
            }

            return encrypted;
          }

          // Decryption is symetric
          ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


          ///////////////////////
          // Padding

          // See:https://tools.ietf.org/html/rfc2315
          function pkcs7pad(data) {
            data = coerceArray(data, true);
            var padder = 16 - (data.length % 16);
            var result = createArray(data.length + padder);
            copyArray(data, result);
            for (var i = data.length; i < result.length; i++) {
              result[i] = padder;
            }
            return result;
          }

          function pkcs7strip(data) {
            data = coerceArray(data, true);
            if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

            var padder = data[data.length - 1];
            if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

            var length = data.length - padder;
            for (var i = 0; i < padder; i++) {
              if (data[length + i] !== padder) {
                throw new Error('PKCS#7 invalid padding byte');
              }
            }

            var result = createArray(length);
            copyArray(data, result, 0, 0, length);
            return result;
          }

          ///////////////////////
          // Exporting


          // The block cipher
          var aesjs = {
            AES: AES,
            Counter: Counter,

            ModeOfOperation: {
              ecb: ModeOfOperationECB,
              cbc: ModeOfOperationCBC,
              cfb: ModeOfOperationCFB,
              ofb: ModeOfOperationOFB,
              ctr: ModeOfOperationCTR
            },

            utils: {
              hex: convertHex,
              utf8: convertUtf8
            },

            padding: {
              pkcs7: {
                pad: pkcs7pad,
                strip: pkcs7strip
              }
            },

            _arrayTest: {
              coerceArray: coerceArray,
              createArray: createArray,
              copyArray: copyArray,
            }
          };


          // node.js
          if (true) {
            module.exports = aesjs

            // RequireJS/AMD
            // http://www.requirejs.org/docs/api.html
            // https://github.com/amdjs/amdjs-api/wiki/AMD
          } else {}


        })(this);


        /***/ }),

      /***/ "7418":
      /***/ (function(module, exports) {

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
        exports.f = Object.getOwnPropertySymbols;


        /***/ }),

      /***/ "746f":
      /***/ (function(module, exports, __webpack_require__) {

        var path = __webpack_require__("428f");
        var has = __webpack_require__("5135");
        var wrappedWellKnownSymbolModule = __webpack_require__("e538");
        var defineProperty = __webpack_require__("9bf2").f;

        module.exports = function (NAME) {
          var Symbol = path.Symbol || (path.Symbol = {});
          if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
            value: wrappedWellKnownSymbolModule.f(NAME)
          });
        };


        /***/ }),

      /***/ "7839":
      /***/ (function(module, exports) {

// IE8- don't enum bug keys
        module.exports = [
          'constructor',
          'hasOwnProperty',
          'isPrototypeOf',
          'propertyIsEnumerable',
          'toLocaleString',
          'toString',
          'valueOf'
        ];


        /***/ }),

      /***/ "785a":
      /***/ (function(module, exports, __webpack_require__) {

// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
        var documentCreateElement = __webpack_require__("cc12");

        var classList = documentCreateElement('span').classList;
        var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;

        module.exports = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;


        /***/ }),

      /***/ "7b0b":
      /***/ (function(module, exports, __webpack_require__) {

        var requireObjectCoercible = __webpack_require__("1d80");

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
        module.exports = function (argument) {
          return Object(requireObjectCoercible(argument));
        };


        /***/ }),

      /***/ "7c73":
      /***/ (function(module, exports, __webpack_require__) {

        /* global ActiveXObject -- old IE, WSH */
        var anObject = __webpack_require__("825a");
        var defineProperties = __webpack_require__("37e8");
        var enumBugKeys = __webpack_require__("7839");
        var hiddenKeys = __webpack_require__("d012");
        var html = __webpack_require__("1be4");
        var documentCreateElement = __webpack_require__("cc12");
        var sharedKey = __webpack_require__("f772");

        var GT = '>';
        var LT = '<';
        var PROTOTYPE = 'prototype';
        var SCRIPT = 'script';
        var IE_PROTO = sharedKey('IE_PROTO');

        var EmptyConstructor = function () { /* empty */ };

        var scriptTag = function (content) {
          return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
        };

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
        var NullProtoObjectViaActiveX = function (activeXDocument) {
          activeXDocument.write(scriptTag(''));
          activeXDocument.close();
          var temp = activeXDocument.parentWindow.Object;
          activeXDocument = null; // avoid memory leak
          return temp;
        };

// Create object with fake `null` prototype: use iframe Object with cleared prototype
        var NullProtoObjectViaIFrame = function () {
          // Thrash, waste and sodomy: IE GC bug
          var iframe = documentCreateElement('iframe');
          var JS = 'java' + SCRIPT + ':';
          var iframeDocument;
          iframe.style.display = 'none';
          html.appendChild(iframe);
          // https://github.com/zloirock/core-js/issues/475
          iframe.src = String(JS);
          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(scriptTag('document.F=Object'));
          iframeDocument.close();
          return iframeDocument.F;
        };

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
        var activeXDocument;
        var NullProtoObject = function () {
          try {
            activeXDocument = new ActiveXObject('htmlfile');
          } catch (error) { /* ignore */ }
          NullProtoObject = typeof document != 'undefined'
            ? document.domain && activeXDocument
              ? NullProtoObjectViaActiveX(activeXDocument) // old IE
              : NullProtoObjectViaIFrame()
            : NullProtoObjectViaActiveX(activeXDocument); // WSH
          var length = enumBugKeys.length;
          while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
          return NullProtoObject();
        };

        hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
        module.exports = Object.create || function create(O, Properties) {
          var result;
          if (O !== null) {
            EmptyConstructor[PROTOTYPE] = anObject(O);
            result = new EmptyConstructor();
            EmptyConstructor[PROTOTYPE] = null;
            // add "__proto__" for Object.getPrototypeOf polyfill
            result[IE_PROTO] = O;
          } else result = NullProtoObject();
          return Properties === undefined ? result : defineProperties(result, Properties);
        };


        /***/ }),

      /***/ "7d92":
      /***/ (function(module, exports, __webpack_require__) {

        var hash = exports;

        hash.utils = __webpack_require__("c3c0");
        hash.common = __webpack_require__("edc9");
        hash.sha = __webpack_require__("5919");
        hash.ripemd = __webpack_require__("bb44");
        hash.hmac = __webpack_require__("2137");

// Proxy hash functions to the main object
        hash.sha1 = hash.sha.sha1;
        hash.sha256 = hash.sha.sha256;
        hash.sha224 = hash.sha.sha224;
        hash.sha384 = hash.sha.sha384;
        hash.sha512 = hash.sha.sha512;
        hash.ripemd160 = hash.ripemd.ripemd160;


        /***/ }),

      /***/ "7dd0":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $ = __webpack_require__("23e7");
        var IS_PURE = __webpack_require__("c430");
        var FunctionName = __webpack_require__("5e77");
        var isCallable = __webpack_require__("1626");
        var createIteratorConstructor = __webpack_require__("9ed3");
        var getPrototypeOf = __webpack_require__("e163");
        var setPrototypeOf = __webpack_require__("d2bb");
        var setToStringTag = __webpack_require__("d44e");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var redefine = __webpack_require__("6eeb");
        var wellKnownSymbol = __webpack_require__("b622");
        var Iterators = __webpack_require__("3f8c");
        var IteratorsCore = __webpack_require__("ae93");

        var PROPER_FUNCTION_NAME = FunctionName.PROPER;
        var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
        var IteratorPrototype = IteratorsCore.IteratorPrototype;
        var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
        var ITERATOR = wellKnownSymbol('iterator');
        var KEYS = 'keys';
        var VALUES = 'values';
        var ENTRIES = 'entries';

        var returnThis = function () { return this; };

        module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
          createIteratorConstructor(IteratorConstructor, NAME, next);

          var getIterationMethod = function (KIND) {
            if (KIND === DEFAULT && defaultIterator) return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
            switch (KIND) {
              case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
              case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
              case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
            } return function () { return new IteratorConstructor(this); };
          };

          var TO_STRING_TAG = NAME + ' Iterator';
          var INCORRECT_VALUES_NAME = false;
          var IterablePrototype = Iterable.prototype;
          var nativeIterator = IterablePrototype[ITERATOR]
            || IterablePrototype['@@iterator']
            || DEFAULT && IterablePrototype[DEFAULT];
          var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
          var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
          var CurrentIteratorPrototype, methods, KEY;

          // fix native
          if (anyNativeIterator) {
            CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
            if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
              if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                if (setPrototypeOf) {
                  setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
                  redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
                }
              }
              // Set @@toStringTag to native iterators
              setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
              if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
            }
          }

          // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
          if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
            if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
              createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
            } else {
              INCORRECT_VALUES_NAME = true;
              defaultIterator = function values() { return nativeIterator.call(this); };
            }
          }

          // export additional methods
          if (DEFAULT) {
            methods = {
              values: getIterationMethod(VALUES),
              keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
              entries: getIterationMethod(ENTRIES)
            };
            if (FORCED) for (KEY in methods) {
              if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                redefine(IterablePrototype, KEY, methods[KEY]);
              }
            } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
          }

          // define iterator
          if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
            redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
          }
          Iterators[NAME] = defaultIterator;

          return methods;
        };


        /***/ }),

      /***/ "7f9a":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var isCallable = __webpack_require__("1626");
        var inspectSource = __webpack_require__("8925");

        var WeakMap = global.WeakMap;

        module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));


        /***/ }),

      /***/ "825a":
      /***/ (function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__("861d");

// `Assert: Type(argument) is Object`
        module.exports = function (argument) {
          if (isObject(argument)) return argument;
          throw TypeError(String(argument) + ' is not an object');
        };


        /***/ }),

      /***/ "83ab":
      /***/ (function(module, exports, __webpack_require__) {

        var fails = __webpack_require__("d039");

// Detect IE8's incomplete defineProperty implementation
        module.exports = !fails(function () {
          // eslint-disable-next-line es/no-object-defineproperty -- required for testing
          return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
        });


        /***/ }),

      /***/ "8418":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var toPropertyKey = __webpack_require__("a04b");
        var definePropertyModule = __webpack_require__("9bf2");
        var createPropertyDescriptor = __webpack_require__("5c6c");

        module.exports = function (object, key, value) {
          var propertyKey = toPropertyKey(key);
          if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
          else object[propertyKey] = value;
        };


        /***/ }),

      /***/ "861d":
      /***/ (function(module, exports, __webpack_require__) {

        var isCallable = __webpack_require__("1626");

        module.exports = function (it) {
          return typeof it === 'object' ? it !== null : isCallable(it);
        };


        /***/ }),

      /***/ "8875":
      /***/ (function(module, exports, __webpack_require__) {

        var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// addapted from the document.currentScript polyfill by Adam Miller
// MIT license
// source: https://github.com/amiller-gh/currentScript-polyfill

// added support for Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1620505

        (function (root, factory) {
          if (true) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
              __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          } else {}
        }(typeof self !== 'undefined' ? self : this, function () {
          function getCurrentScript () {
            var descriptor = Object.getOwnPropertyDescriptor(document, 'currentScript')
            // for chrome
            if (!descriptor && 'currentScript' in document && document.currentScript) {
              return document.currentScript
            }

            // for other browsers with native support for currentScript
            if (descriptor && descriptor.get !== getCurrentScript && document.currentScript) {
              return document.currentScript
            }

            // IE 8-10 support script readyState
            // IE 11+ & Firefox support stack trace
            try {
              throw new Error();
            }
            catch (err) {
              // Find the second match for the "at" string to get file src url from stack.
              var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/ig,
                ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/ig,
                stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack),
                scriptLocation = (stackDetails && stackDetails[1]) || false,
                line = (stackDetails && stackDetails[2]) || false,
                currentLocation = document.location.href.replace(document.location.hash, ''),
                pageSource,
                inlineScriptSourceRegExp,
                inlineScriptSource,
                scripts = document.getElementsByTagName('script'); // Live NodeList collection

              if (scriptLocation === currentLocation) {
                pageSource = document.documentElement.outerHTML;
                inlineScriptSourceRegExp = new RegExp('(?:[^\\n]+?\\n){0,' + (line - 2) + '}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*', 'i');
                inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, '$1').trim();
              }

              for (var i = 0; i < scripts.length; i++) {
                // If ready state is interactive, return the script tag
                if (scripts[i].readyState === 'interactive') {
                  return scripts[i];
                }

                // If src matches, return the script tag
                if (scripts[i].src === scriptLocation) {
                  return scripts[i];
                }

                // If inline source matches, return the script tag
                if (
                  scriptLocation === currentLocation &&
                  scripts[i].innerHTML &&
                  scripts[i].innerHTML.trim() === inlineScriptSource
                ) {
                  return scripts[i];
                }
              }

              // If no match, return null
              return null;
            }
          };

          return getCurrentScript
        }));


        /***/ }),

      /***/ "8925":
      /***/ (function(module, exports, __webpack_require__) {

        var isCallable = __webpack_require__("1626");
        var store = __webpack_require__("c6cd");

        var functionToString = Function.toString;

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
        if (!isCallable(store.inspectSource)) {
          store.inspectSource = function (it) {
            return functionToString.call(it);
          };
        }

        module.exports = store.inspectSource;


        /***/ }),

      /***/ "8aa5":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var charAt = __webpack_require__("6547").charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
        module.exports = function (S, index, unicode) {
          return index + (unicode ? charAt(S, index).length : 1);
        };


        /***/ }),

      /***/ "8b95":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__("c3c0");

        var SHA512 = __webpack_require__("b525");

        function SHA384() {
          if (!(this instanceof SHA384))
            return new SHA384();

          SHA512.call(this);
          this.h = [
            0xcbbb9d5d, 0xc1059ed8,
            0x629a292a, 0x367cd507,
            0x9159015a, 0x3070dd17,
            0x152fecd8, 0xf70e5939,
            0x67332667, 0xffc00b31,
            0x8eb44a87, 0x68581511,
            0xdb0c2e0d, 0x64f98fa7,
            0x47b5481d, 0xbefa4fa4 ];
        }
        utils.inherits(SHA384, SHA512);
        module.exports = SHA384;

        SHA384.blockSize = 1024;
        SHA384.outSize = 384;
        SHA384.hmacStrength = 192;
        SHA384.padLength = 128;

        SHA384.prototype._digest = function digest(enc) {
          if (enc === 'hex')
            return utils.toHex32(this.h.slice(0, 12), 'big');
          else
            return utils.split32(this.h.slice(0, 12), 'big');
        };


        /***/ }),

      /***/ "90e3":
      /***/ (function(module, exports) {

        var id = 0;
        var postfix = Math.random();

        module.exports = function (key) {
          return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
        };


        /***/ }),

      /***/ "9112":
      /***/ (function(module, exports, __webpack_require__) {

        var DESCRIPTORS = __webpack_require__("83ab");
        var definePropertyModule = __webpack_require__("9bf2");
        var createPropertyDescriptor = __webpack_require__("5c6c");

        module.exports = DESCRIPTORS ? function (object, key, value) {
          return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
        } : function (object, key, value) {
          object[key] = value;
          return object;
        };


        /***/ }),

      /***/ "9263":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        /* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
        /* eslint-disable regexp/no-useless-quantifier -- testing */
        var toString = __webpack_require__("577e");
        var regexpFlags = __webpack_require__("ad6d");
        var stickyHelpers = __webpack_require__("9f7f");
        var shared = __webpack_require__("5692");
        var create = __webpack_require__("7c73");
        var getInternalState = __webpack_require__("69f3").get;
        var UNSUPPORTED_DOT_ALL = __webpack_require__("fce3");
        var UNSUPPORTED_NCG = __webpack_require__("107c");

        var nativeExec = RegExp.prototype.exec;
        var nativeReplace = shared('native-string-replace', String.prototype.replace);

        var patchedExec = nativeExec;

        var UPDATES_LAST_INDEX_WRONG = (function () {
          var re1 = /a/;
          var re2 = /b*/g;
          nativeExec.call(re1, 'a');
          nativeExec.call(re2, 'a');
          return re1.lastIndex !== 0 || re2.lastIndex !== 0;
        })();

        var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
        var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

        var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

        if (PATCH) {
          // eslint-disable-next-line max-statements -- TODO
          patchedExec = function exec(string) {
            var re = this;
            var state = getInternalState(re);
            var str = toString(string);
            var raw = state.raw;
            var result, reCopy, lastIndex, match, i, object, group;

            if (raw) {
              raw.lastIndex = re.lastIndex;
              result = patchedExec.call(raw, str);
              re.lastIndex = raw.lastIndex;
              return result;
            }

            var groups = state.groups;
            var sticky = UNSUPPORTED_Y && re.sticky;
            var flags = regexpFlags.call(re);
            var source = re.source;
            var charsAdded = 0;
            var strCopy = str;

            if (sticky) {
              flags = flags.replace('y', '');
              if (flags.indexOf('g') === -1) {
                flags += 'g';
              }

              strCopy = str.slice(re.lastIndex);
              // Support anchored sticky behavior.
              if (re.lastIndex > 0 && (!re.multiline || re.multiline && str.charAt(re.lastIndex - 1) !== '\n')) {
                source = '(?: ' + source + ')';
                strCopy = ' ' + strCopy;
                charsAdded++;
              }
              // ^(? + rx + ) is needed, in combination with some str slicing, to
              // simulate the 'y' flag.
              reCopy = new RegExp('^(?:' + source + ')', flags);
            }

            if (NPCG_INCLUDED) {
              reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
            }
            if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

            match = nativeExec.call(sticky ? reCopy : re, strCopy);

            if (sticky) {
              if (match) {
                match.input = match.input.slice(charsAdded);
                match[0] = match[0].slice(charsAdded);
                match.index = re.lastIndex;
                re.lastIndex += match[0].length;
              } else re.lastIndex = 0;
            } else if (UPDATES_LAST_INDEX_WRONG && match) {
              re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
            }
            if (NPCG_INCLUDED && match && match.length > 1) {
              // Fix browsers whose `exec` methods don't consistently return `undefined`
              // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
              nativeReplace.call(match[0], reCopy, function () {
                for (i = 1; i < arguments.length - 2; i++) {
                  if (arguments[i] === undefined) match[i] = undefined;
                }
              });
            }

            if (match && groups) {
              match.groups = object = create(null);
              for (i = 0; i < groups.length; i++) {
                group = groups[i];
                object[group[0]] = match[group[1]];
              }
            }

            return match;
          };
        }

        module.exports = patchedExec;


        /***/ }),

      /***/ "94ca":
      /***/ (function(module, exports, __webpack_require__) {

        var fails = __webpack_require__("d039");
        var isCallable = __webpack_require__("1626");

        var replacement = /#|\.prototype\./;

        var isForced = function (feature, detection) {
          var value = data[normalize(feature)];
          return value == POLYFILL ? true
            : value == NATIVE ? false
              : isCallable(detection) ? fails(detection)
                : !!detection;
        };

        var normalize = isForced.normalize = function (string) {
          return String(string).replace(replacement, '.').toLowerCase();
        };

        var data = isForced.data = {};
        var NATIVE = isForced.NATIVE = 'N';
        var POLYFILL = isForced.POLYFILL = 'P';

        module.exports = isForced;


        /***/ }),

      /***/ "96cf":
      /***/ (function(module, exports, __webpack_require__) {

        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        var runtime = (function (exports) {
          "use strict";

          var Op = Object.prototype;
          var hasOwn = Op.hasOwnProperty;
          var undefined; // More compressible than void 0.
          var $Symbol = typeof Symbol === "function" ? Symbol : {};
          var iteratorSymbol = $Symbol.iterator || "@@iterator";
          var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
          var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

          function define(obj, key, value) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
            return obj[key];
          }
          try {
            // IE 8 has a broken Object.defineProperty that only works on DOM objects.
            define({}, "");
          } catch (err) {
            define = function(obj, key, value) {
              return obj[key] = value;
            };
          }

          function wrap(innerFn, outerFn, self, tryLocsList) {
            // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
            var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
            var generator = Object.create(protoGenerator.prototype);
            var context = new Context(tryLocsList || []);

            // The ._invoke method unifies the implementations of the .next,
            // .throw, and .return methods.
            generator._invoke = makeInvokeMethod(innerFn, self, context);

            return generator;
          }
          exports.wrap = wrap;

          // Try/catch helper to minimize deoptimizations. Returns a completion
          // record like context.tryEntries[i].completion. This interface could
          // have been (and was previously) designed to take a closure to be
          // invoked without arguments, but in all the cases we care about we
          // already have an existing method we want to call, so there's no need
          // to create a new function object. We can even get away with assuming
          // the method takes exactly one argument, since that happens to be true
          // in every case, so we don't have to touch the arguments object. The
          // only additional allocation required is the completion record, which
          // has a stable shape and so hopefully should be cheap to allocate.
          function tryCatch(fn, obj, arg) {
            try {
              return { type: "normal", arg: fn.call(obj, arg) };
            } catch (err) {
              return { type: "throw", arg: err };
            }
          }

          var GenStateSuspendedStart = "suspendedStart";
          var GenStateSuspendedYield = "suspendedYield";
          var GenStateExecuting = "executing";
          var GenStateCompleted = "completed";

          // Returning this object from the innerFn has the same effect as
          // breaking out of the dispatch switch statement.
          var ContinueSentinel = {};

          // Dummy constructor functions that we use as the .constructor and
          // .constructor.prototype properties for functions that return Generator
          // objects. For full spec compliance, you may wish to configure your
          // minifier not to mangle the names of these two functions.
          function Generator() {}
          function GeneratorFunction() {}
          function GeneratorFunctionPrototype() {}

          // This is a polyfill for %IteratorPrototype% for environments that
          // don't natively support it.
          var IteratorPrototype = {};
          define(IteratorPrototype, iteratorSymbol, function () {
            return this;
          });

          var getProto = Object.getPrototypeOf;
          var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
          if (NativeIteratorPrototype &&
            NativeIteratorPrototype !== Op &&
            hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
            // This environment has a native %IteratorPrototype%; use it instead
            // of the polyfill.
            IteratorPrototype = NativeIteratorPrototype;
          }

          var Gp = GeneratorFunctionPrototype.prototype =
            Generator.prototype = Object.create(IteratorPrototype);
          GeneratorFunction.prototype = GeneratorFunctionPrototype;
          define(Gp, "constructor", GeneratorFunctionPrototype);
          define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
          GeneratorFunction.displayName = define(
            GeneratorFunctionPrototype,
            toStringTagSymbol,
            "GeneratorFunction"
          );

          // Helper for defining the .next, .throw, and .return methods of the
          // Iterator interface in terms of a single ._invoke method.
          function defineIteratorMethods(prototype) {
            ["next", "throw", "return"].forEach(function(method) {
              define(prototype, method, function(arg) {
                return this._invoke(method, arg);
              });
            });
          }

          exports.isGeneratorFunction = function(genFun) {
            var ctor = typeof genFun === "function" && genFun.constructor;
            return ctor
              ? ctor === GeneratorFunction ||
              // For the native GeneratorFunction constructor, the best we can
              // do is to check its .name property.
              (ctor.displayName || ctor.name) === "GeneratorFunction"
              : false;
          };

          exports.mark = function(genFun) {
            if (Object.setPrototypeOf) {
              Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
            } else {
              genFun.__proto__ = GeneratorFunctionPrototype;
              define(genFun, toStringTagSymbol, "GeneratorFunction");
            }
            genFun.prototype = Object.create(Gp);
            return genFun;
          };

          // Within the body of any async function, `await x` is transformed to
          // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
          // `hasOwn.call(value, "__await")` to determine if the yielded value is
          // meant to be awaited.
          exports.awrap = function(arg) {
            return { __await: arg };
          };

          function AsyncIterator(generator, PromiseImpl) {
            function invoke(method, arg, resolve, reject) {
              var record = tryCatch(generator[method], generator, arg);
              if (record.type === "throw") {
                reject(record.arg);
              } else {
                var result = record.arg;
                var value = result.value;
                if (value &&
                  typeof value === "object" &&
                  hasOwn.call(value, "__await")) {
                  return PromiseImpl.resolve(value.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                  }, function(err) {
                    invoke("throw", err, resolve, reject);
                  });
                }

                return PromiseImpl.resolve(value).then(function(unwrapped) {
                  // When a yielded Promise is resolved, its final value becomes
                  // the .value of the Promise<{value,done}> result for the
                  // current iteration.
                  result.value = unwrapped;
                  resolve(result);
                }, function(error) {
                  // If a rejected Promise was yielded, throw the rejection back
                  // into the async generator function so it can be handled there.
                  return invoke("throw", error, resolve, reject);
                });
              }
            }

            var previousPromise;

            function enqueue(method, arg) {
              function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                  invoke(method, arg, resolve, reject);
                });
              }

              return previousPromise =
                // If enqueue has been called before, then we want to wait until
                // all previous Promises have been resolved before calling invoke,
                // so that results are always delivered in the correct order. If
                // enqueue has not been called before, then it is important to
                // call invoke immediately, without waiting on a callback to fire,
                // so that the async generator function has the opportunity to do
                // any necessary setup in a predictable way. This predictability
                // is why the Promise constructor synchronously invokes its
                // executor callback, and why async functions synchronously
                // execute code before the first await. Since we implement simple
                // async functions in terms of async generators, it is especially
                // important to get this right, even though it requires care.
                previousPromise ? previousPromise.then(
                  callInvokeWithMethodAndArg,
                  // Avoid propagating failures to Promises returned by later
                  // invocations of the iterator.
                  callInvokeWithMethodAndArg
                ) : callInvokeWithMethodAndArg();
            }

            // Define the unified helper method that is used to implement .next,
            // .throw, and .return (see defineIteratorMethods).
            this._invoke = enqueue;
          }

          defineIteratorMethods(AsyncIterator.prototype);
          define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
            return this;
          });
          exports.AsyncIterator = AsyncIterator;

          // Note that simple async functions are implemented on top of
          // AsyncIterator objects; they just return a Promise for the value of
          // the final result produced by the iterator.
          exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
            if (PromiseImpl === void 0) PromiseImpl = Promise;

            var iter = new AsyncIterator(
              wrap(innerFn, outerFn, self, tryLocsList),
              PromiseImpl
            );

            return exports.isGeneratorFunction(outerFn)
              ? iter // If outerFn is a generator, return the full iterator.
              : iter.next().then(function(result) {
                return result.done ? result.value : iter.next();
              });
          };

          function makeInvokeMethod(innerFn, self, context) {
            var state = GenStateSuspendedStart;

            return function invoke(method, arg) {
              if (state === GenStateExecuting) {
                throw new Error("Generator is already running");
              }

              if (state === GenStateCompleted) {
                if (method === "throw") {
                  throw arg;
                }

                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
              }

              context.method = method;
              context.arg = arg;

              while (true) {
                var delegate = context.delegate;
                if (delegate) {
                  var delegateResult = maybeInvokeDelegate(delegate, context);
                  if (delegateResult) {
                    if (delegateResult === ContinueSentinel) continue;
                    return delegateResult;
                  }
                }

                if (context.method === "next") {
                  // Setting context._sent for legacy support of Babel's
                  // function.sent implementation.
                  context.sent = context._sent = context.arg;

                } else if (context.method === "throw") {
                  if (state === GenStateSuspendedStart) {
                    state = GenStateCompleted;
                    throw context.arg;
                  }

                  context.dispatchException(context.arg);

                } else if (context.method === "return") {
                  context.abrupt("return", context.arg);
                }

                state = GenStateExecuting;

                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                  // If an exception is thrown from innerFn, we leave state ===
                  // GenStateExecuting and loop back for another invocation.
                  state = context.done
                    ? GenStateCompleted
                    : GenStateSuspendedYield;

                  if (record.arg === ContinueSentinel) {
                    continue;
                  }

                  return {
                    value: record.arg,
                    done: context.done
                  };

                } else if (record.type === "throw") {
                  state = GenStateCompleted;
                  // Dispatch the exception by looping back around to the
                  // context.dispatchException(context.arg) call above.
                  context.method = "throw";
                  context.arg = record.arg;
                }
              }
            };
          }

          // Call delegate.iterator[context.method](context.arg) and handle the
          // result, either by returning a { value, done } result from the
          // delegate iterator, or by modifying context.method and context.arg,
          // setting context.delegate to null, and returning the ContinueSentinel.
          function maybeInvokeDelegate(delegate, context) {
            var method = delegate.iterator[context.method];
            if (method === undefined) {
              // A .throw or .return when the delegate iterator has no .throw
              // method always terminates the yield* loop.
              context.delegate = null;

              if (context.method === "throw") {
                // Note: ["return"] must be used for ES3 parsing compatibility.
                if (delegate.iterator["return"]) {
                  // If the delegate iterator has a return method, give it a
                  // chance to clean up.
                  context.method = "return";
                  context.arg = undefined;
                  maybeInvokeDelegate(delegate, context);

                  if (context.method === "throw") {
                    // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                  }
                }

                context.method = "throw";
                context.arg = new TypeError(
                  "The iterator does not provide a 'throw' method");
              }

              return ContinueSentinel;
            }

            var record = tryCatch(method, delegate.iterator, context.arg);

            if (record.type === "throw") {
              context.method = "throw";
              context.arg = record.arg;
              context.delegate = null;
              return ContinueSentinel;
            }

            var info = record.arg;

            if (! info) {
              context.method = "throw";
              context.arg = new TypeError("iterator result is not an object");
              context.delegate = null;
              return ContinueSentinel;
            }

            if (info.done) {
              // Assign the result of the finished delegate to the temporary
              // variable specified by delegate.resultName (see delegateYield).
              context[delegate.resultName] = info.value;

              // Resume execution at the desired location (see delegateYield).
              context.next = delegate.nextLoc;

              // If context.method was "throw" but the delegate handled the
              // exception, let the outer generator proceed normally. If
              // context.method was "next", forget context.arg since it has been
              // "consumed" by the delegate iterator. If context.method was
              // "return", allow the original .return call to continue in the
              // outer generator.
              if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
              }

            } else {
              // Re-yield the result returned by the delegate method.
              return info;
            }

            // The delegate iterator is finished, so forget it and continue with
            // the outer generator.
            context.delegate = null;
            return ContinueSentinel;
          }

          // Define Generator.prototype.{next,throw,return} in terms of the
          // unified ._invoke helper method.
          defineIteratorMethods(Gp);

          define(Gp, toStringTagSymbol, "Generator");

          // A Generator should always return itself as the iterator object when the
          // @@iterator function is called on it. Some browsers' implementations of the
          // iterator prototype chain incorrectly implement this, causing the Generator
          // object to not be returned from this call. This ensures that doesn't happen.
          // See https://github.com/facebook/regenerator/issues/274 for more details.
          define(Gp, iteratorSymbol, function() {
            return this;
          });

          define(Gp, "toString", function() {
            return "[object Generator]";
          });

          function pushTryEntry(locs) {
            var entry = { tryLoc: locs[0] };

            if (1 in locs) {
              entry.catchLoc = locs[1];
            }

            if (2 in locs) {
              entry.finallyLoc = locs[2];
              entry.afterLoc = locs[3];
            }

            this.tryEntries.push(entry);
          }

          function resetTryEntry(entry) {
            var record = entry.completion || {};
            record.type = "normal";
            delete record.arg;
            entry.completion = record;
          }

          function Context(tryLocsList) {
            // The root entry object (effectively a try statement without a catch
            // or a finally block) gives us a place to store values thrown from
            // locations where there is no enclosing try statement.
            this.tryEntries = [{ tryLoc: "root" }];
            tryLocsList.forEach(pushTryEntry, this);
            this.reset(true);
          }

          exports.keys = function(object) {
            var keys = [];
            for (var key in object) {
              keys.push(key);
            }
            keys.reverse();

            // Rather than returning an object with a next method, we keep
            // things simple and return the next function itself.
            return function next() {
              while (keys.length) {
                var key = keys.pop();
                if (key in object) {
                  next.value = key;
                  next.done = false;
                  return next;
                }
              }

              // To avoid creating an additional object, we just hang the .value
              // and .done properties off the next function object itself. This
              // also ensures that the minifier will not anonymize the function.
              next.done = true;
              return next;
            };
          };

          function values(iterable) {
            if (iterable) {
              var iteratorMethod = iterable[iteratorSymbol];
              if (iteratorMethod) {
                return iteratorMethod.call(iterable);
              }

              if (typeof iterable.next === "function") {
                return iterable;
              }

              if (!isNaN(iterable.length)) {
                var i = -1, next = function next() {
                  while (++i < iterable.length) {
                    if (hasOwn.call(iterable, i)) {
                      next.value = iterable[i];
                      next.done = false;
                      return next;
                    }
                  }

                  next.value = undefined;
                  next.done = true;

                  return next;
                };

                return next.next = next;
              }
            }

            // Return an iterator with no values.
            return { next: doneResult };
          }
          exports.values = values;

          function doneResult() {
            return { value: undefined, done: true };
          }

          Context.prototype = {
            constructor: Context,

            reset: function(skipTempReset) {
              this.prev = 0;
              this.next = 0;
              // Resetting context._sent for legacy support of Babel's
              // function.sent implementation.
              this.sent = this._sent = undefined;
              this.done = false;
              this.delegate = null;

              this.method = "next";
              this.arg = undefined;

              this.tryEntries.forEach(resetTryEntry);

              if (!skipTempReset) {
                for (var name in this) {
                  // Not sure about the optimal order of these conditions:
                  if (name.charAt(0) === "t" &&
                    hasOwn.call(this, name) &&
                    !isNaN(+name.slice(1))) {
                    this[name] = undefined;
                  }
                }
              }
            },

            stop: function() {
              this.done = true;

              var rootEntry = this.tryEntries[0];
              var rootRecord = rootEntry.completion;
              if (rootRecord.type === "throw") {
                throw rootRecord.arg;
              }

              return this.rval;
            },

            dispatchException: function(exception) {
              if (this.done) {
                throw exception;
              }

              var context = this;
              function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;

                if (caught) {
                  // If the dispatched exception was caught by a catch block,
                  // then let that catch block handle the exception normally.
                  context.method = "next";
                  context.arg = undefined;
                }

                return !! caught;
              }

              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                var record = entry.completion;

                if (entry.tryLoc === "root") {
                  // Exception thrown outside of any try block that could handle
                  // it, so set the completion value of the entire function to
                  // throw the exception.
                  return handle("end");
                }

                if (entry.tryLoc <= this.prev) {
                  var hasCatch = hasOwn.call(entry, "catchLoc");
                  var hasFinally = hasOwn.call(entry, "finallyLoc");

                  if (hasCatch && hasFinally) {
                    if (this.prev < entry.catchLoc) {
                      return handle(entry.catchLoc, true);
                    } else if (this.prev < entry.finallyLoc) {
                      return handle(entry.finallyLoc);
                    }

                  } else if (hasCatch) {
                    if (this.prev < entry.catchLoc) {
                      return handle(entry.catchLoc, true);
                    }

                  } else if (hasFinally) {
                    if (this.prev < entry.finallyLoc) {
                      return handle(entry.finallyLoc);
                    }

                  } else {
                    throw new Error("try statement without catch or finally");
                  }
                }
              }
            },

            abrupt: function(type, arg) {
              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev &&
                  hasOwn.call(entry, "finallyLoc") &&
                  this.prev < entry.finallyLoc) {
                  var finallyEntry = entry;
                  break;
                }
              }

              if (finallyEntry &&
                (type === "break" ||
                  type === "continue") &&
                finallyEntry.tryLoc <= arg &&
                arg <= finallyEntry.finallyLoc) {
                // Ignore the finally entry if control is not jumping to a
                // location outside the try/catch block.
                finallyEntry = null;
              }

              var record = finallyEntry ? finallyEntry.completion : {};
              record.type = type;
              record.arg = arg;

              if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
              }

              return this.complete(record);
            },

            complete: function(record, afterLoc) {
              if (record.type === "throw") {
                throw record.arg;
              }

              if (record.type === "break" ||
                record.type === "continue") {
                this.next = record.arg;
              } else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
              } else if (record.type === "normal" && afterLoc) {
                this.next = afterLoc;
              }

              return ContinueSentinel;
            },

            finish: function(finallyLoc) {
              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                  this.complete(entry.completion, entry.afterLoc);
                  resetTryEntry(entry);
                  return ContinueSentinel;
                }
              }
            },

            "catch": function(tryLoc) {
              for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                  var record = entry.completion;
                  if (record.type === "throw") {
                    var thrown = record.arg;
                    resetTryEntry(entry);
                  }
                  return thrown;
                }
              }

              // The context.catch method must only be called with a location
              // argument that corresponds to a known catch block.
              throw new Error("illegal catch attempt");
            },

            delegateYield: function(iterable, resultName, nextLoc) {
              this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
              };

              if (this.method === "next") {
                // Deliberately forget the last sent value so that we don't
                // accidentally pass it on to the delegate.
                this.arg = undefined;
              }

              return ContinueSentinel;
            }
          };

          // Regardless of whether this script is executing as a CommonJS module
          // or not, return the runtime object so that we can declare the variable
          // regeneratorRuntime in the outer scope, which allows this module to be
          // injected easily by `bin/regenerator --include-runtime script.js`.
          return exports;

        }(
          // If this script is executing as a CommonJS module, use module.exports
          // as the regeneratorRuntime namespace. Otherwise create a new empty
          // object. Either way, the resulting object will be used to initialize
          // the regeneratorRuntime variable at the top of this file.
          true ? module.exports : undefined
        ));

        try {
          regeneratorRuntime = runtime;
        } catch (accidentalStrictMode) {
          // This module should not be running in strict mode, so the above
          // assignment should always work unless something is misconfigured. Just
          // in case runtime.js accidentally runs in strict mode, in modern engines
          // we can explicitly access globalThis. In older engines we can escape
          // strict mode using a global Function call. This could conceivably fail
          // if a Content Security Policy forbids using Function, but in that case
          // the proper solution is to fix the accidental strict mode problem. If
          // you've misconfigured your bundler to force strict mode and applied a
          // CSP to forbid Function, and you're not willing to fix either of those
          // problems, please detail your unique predicament in a GitHub issue.
          if (typeof globalThis === "object") {
            globalThis.regeneratorRuntime = runtime;
          } else {
            Function("r", "regeneratorRuntime = r")(runtime);
          }
        }


        /***/ }),

      /***/ "99af":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $ = __webpack_require__("23e7");
        var fails = __webpack_require__("d039");
        var isArray = __webpack_require__("e8b5");
        var isObject = __webpack_require__("861d");
        var toObject = __webpack_require__("7b0b");
        var toLength = __webpack_require__("50c4");
        var createProperty = __webpack_require__("8418");
        var arraySpeciesCreate = __webpack_require__("65f0");
        var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
        var wellKnownSymbol = __webpack_require__("b622");
        var V8_VERSION = __webpack_require__("2d00");

        var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
        var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
        var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
        var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
          var array = [];
          array[IS_CONCAT_SPREADABLE] = false;
          return array.concat()[0] !== array;
        });

        var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

        var isConcatSpreadable = function (O) {
          if (!isObject(O)) return false;
          var spreadable = O[IS_CONCAT_SPREADABLE];
          return spreadable !== undefined ? !!spreadable : isArray(O);
        };

        var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
        $({ target: 'Array', proto: true, forced: FORCED }, {
          // eslint-disable-next-line no-unused-vars -- required for `.length`
          concat: function concat(arg) {
            var O = toObject(this);
            var A = arraySpeciesCreate(O, 0);
            var n = 0;
            var i, k, length, len, E;
            for (i = -1, length = arguments.length; i < length; i++) {
              E = i === -1 ? O : arguments[i];
              if (isConcatSpreadable(E)) {
                len = toLength(E.length);
                if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
              } else {
                if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                createProperty(A, n++, E);
              }
            }
            A.length = n;
            return A;
          }
        });


        /***/ }),

      /***/ "9a1f":
      /***/ (function(module, exports, __webpack_require__) {

        var aCallable = __webpack_require__("59ed");
        var anObject = __webpack_require__("825a");
        var getIteratorMethod = __webpack_require__("35a1");

        module.exports = function (argument, usingIterator) {
          var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
          if (aCallable(iteratorMethod)) return anObject(iteratorMethod.call(argument));
          throw TypeError(String(argument) + ' is not iterable');
        };


        /***/ }),

      /***/ "9bdd":
      /***/ (function(module, exports, __webpack_require__) {

        var anObject = __webpack_require__("825a");
        var iteratorClose = __webpack_require__("2a62");

// call something on iterator step with safe closing on error
        module.exports = function (iterator, fn, value, ENTRIES) {
          try {
            return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
          } catch (error) {
            iteratorClose(iterator, 'throw', error);
          }
        };


        /***/ }),

      /***/ "9bf2":
      /***/ (function(module, exports, __webpack_require__) {

        var DESCRIPTORS = __webpack_require__("83ab");
        var IE8_DOM_DEFINE = __webpack_require__("0cfb");
        var anObject = __webpack_require__("825a");
        var toPropertyKey = __webpack_require__("a04b");

// eslint-disable-next-line es/no-object-defineproperty -- safe
        var $defineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
        exports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
          anObject(O);
          P = toPropertyKey(P);
          anObject(Attributes);
          if (IE8_DOM_DEFINE) try {
            return $defineProperty(O, P, Attributes);
          } catch (error) { /* empty */ }
          if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
          if ('value' in Attributes) O[P] = Attributes.value;
          return O;
        };


        /***/ }),

      /***/ "9ed3":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var IteratorPrototype = __webpack_require__("ae93").IteratorPrototype;
        var create = __webpack_require__("7c73");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        var setToStringTag = __webpack_require__("d44e");
        var Iterators = __webpack_require__("3f8c");

        var returnThis = function () { return this; };

        module.exports = function (IteratorConstructor, NAME, next) {
          var TO_STRING_TAG = NAME + ' Iterator';
          IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
          setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
          Iterators[TO_STRING_TAG] = returnThis;
          return IteratorConstructor;
        };


        /***/ }),

      /***/ "9f6a":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        (function(root) {
          const MAX_VALUE = 0x7fffffff;

          // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
          // See: https://github.com/dchest/scrypt-async-js
          function SHA256(m) {
            const K = new Uint32Array([
              0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
              0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
              0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
              0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
              0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
              0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
              0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
              0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
              0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
              0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
              0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
              0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
              0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
            ]);

            let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
            let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
            const w = new Uint32Array(64);

            function blocks(p) {
              let off = 0, len = p.length;
              while (len >= 64) {
                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

                for (i = 0; i < 16; i++) {
                  j = off + i*4;
                  w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
                }

                for (i = 16; i < 64; i++) {
                  u = w[i-2];
                  t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

                  u = w[i-15];
                  t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

                  w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
                }

                for (i = 0; i < 64; i++) {
                  t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
                      ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
                    ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

                  t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
                    ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

                  h = g;
                  g = f;
                  f = e;
                  e = (d + t1) | 0;
                  d = c;
                  c = b;
                  b = a;
                  a = (t1 + t2) | 0;
                }

                h0 = (h0 + a) | 0;
                h1 = (h1 + b) | 0;
                h2 = (h2 + c) | 0;
                h3 = (h3 + d) | 0;
                h4 = (h4 + e) | 0;
                h5 = (h5 + f) | 0;
                h6 = (h6 + g) | 0;
                h7 = (h7 + h) | 0;

                off += 64;
                len -= 64;
              }
            }

            blocks(m);

            let i, bytesLeft = m.length % 64,
              bitLenHi = (m.length / 0x20000000) | 0,
              bitLenLo = m.length << 3,
              numZeros = (bytesLeft < 56) ? 56 : 120,
              p = m.slice(m.length - bytesLeft, m.length);

            p.push(0x80);
            for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
            p.push((bitLenHi >>> 24) & 0xff);
            p.push((bitLenHi >>> 16) & 0xff);
            p.push((bitLenHi >>> 8)  & 0xff);
            p.push((bitLenHi >>> 0)  & 0xff);
            p.push((bitLenLo >>> 24) & 0xff);
            p.push((bitLenLo >>> 16) & 0xff);
            p.push((bitLenLo >>> 8)  & 0xff);
            p.push((bitLenLo >>> 0)  & 0xff);

            blocks(p);

            return [
              (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
              (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
              (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
              (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
              (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
              (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
              (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
              (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
            ];
          }

          function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
            // compress password if it's longer than hash block length
            password = (password.length <= 64) ? password : SHA256(password);

            const innerLen = 64 + salt.length + 4;
            const inner = new Array(innerLen);
            const outerKey = new Array(64);

            let i;
            let dk = [];

            // inner = (password ^ ipad) || salt || counter
            for (i = 0; i < 64; i++) { inner[i] = 0x36; }
            for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
            for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
            for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

            // outerKey = password ^ opad
            for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
            for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

            // increments counter inside inner
            function incrementCounter() {
              for (let i = innerLen - 1; i >= innerLen - 4; i--) {
                inner[i]++;
                if (inner[i] <= 0xff) return;
                inner[i] = 0;
              }
            }

            // output blocks = SHA256(outerKey || SHA256(inner)) ...
            while (dkLen >= 32) {
              incrementCounter();
              dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
              dkLen -= 32;
            }
            if (dkLen > 0) {
              incrementCounter();
              dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
            }

            return dk;
          }

          // The following is an adaptation of scryptsy
          // See: https://www.npmjs.com/package/scryptsy
          function blockmix_salsa8(BY, Yi, r, x, _X) {
            let i;

            arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
            for (i = 0; i < 2 * r; i++) {
              blockxor(BY, i * 16, _X, 16);
              salsa20_8(_X, x);
              arraycopy(_X, 0, BY, Yi + (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
              arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
              arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
            }
          }

          function R(a, b) {
            return (a << b) | (a >>> (32 - b));
          }

          function salsa20_8(B, x) {
            arraycopy(B, 0, x, 0, 16);

            for (let i = 8; i > 0; i -= 2) {
              x[ 4] ^= R(x[ 0] + x[12], 7);
              x[ 8] ^= R(x[ 4] + x[ 0], 9);
              x[12] ^= R(x[ 8] + x[ 4], 13);
              x[ 0] ^= R(x[12] + x[ 8], 18);
              x[ 9] ^= R(x[ 5] + x[ 1], 7);
              x[13] ^= R(x[ 9] + x[ 5], 9);
              x[ 1] ^= R(x[13] + x[ 9], 13);
              x[ 5] ^= R(x[ 1] + x[13], 18);
              x[14] ^= R(x[10] + x[ 6], 7);
              x[ 2] ^= R(x[14] + x[10], 9);
              x[ 6] ^= R(x[ 2] + x[14], 13);
              x[10] ^= R(x[ 6] + x[ 2], 18);
              x[ 3] ^= R(x[15] + x[11], 7);
              x[ 7] ^= R(x[ 3] + x[15], 9);
              x[11] ^= R(x[ 7] + x[ 3], 13);
              x[15] ^= R(x[11] + x[ 7], 18);
              x[ 1] ^= R(x[ 0] + x[ 3], 7);
              x[ 2] ^= R(x[ 1] + x[ 0], 9);
              x[ 3] ^= R(x[ 2] + x[ 1], 13);
              x[ 0] ^= R(x[ 3] + x[ 2], 18);
              x[ 6] ^= R(x[ 5] + x[ 4], 7);
              x[ 7] ^= R(x[ 6] + x[ 5], 9);
              x[ 4] ^= R(x[ 7] + x[ 6], 13);
              x[ 5] ^= R(x[ 4] + x[ 7], 18);
              x[11] ^= R(x[10] + x[ 9], 7);
              x[ 8] ^= R(x[11] + x[10], 9);
              x[ 9] ^= R(x[ 8] + x[11], 13);
              x[10] ^= R(x[ 9] + x[ 8], 18);
              x[12] ^= R(x[15] + x[14], 7);
              x[13] ^= R(x[12] + x[15], 9);
              x[14] ^= R(x[13] + x[12], 13);
              x[15] ^= R(x[14] + x[13], 18);
            }

            for (let i = 0; i < 16; ++i) {
              B[i] += x[i];
            }
          }

          // naive approach... going back to loop unrolling may yield additional performance
          function blockxor(S, Si, D, len) {
            for (let i = 0; i < len; i++) {
              D[i] ^= S[Si + i]
            }
          }

          function arraycopy(src, srcPos, dest, destPos, length) {
            while (length--) {
              dest[destPos++] = src[srcPos++];
            }
          }

          function checkBufferish(o) {
            if (!o || typeof(o.length) !== 'number') { return false; }

            for (let i = 0; i < o.length; i++) {
              const v = o[i];
              if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
                return false;
              }
            }

            return true;
          }

          function ensureInteger(value, name) {
            if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
            return value;
          }

          // N = Cpu cost, r = Memory cost, p = parallelization cost
          // callback(error, progress, key)
          function _scrypt(password, salt, N, r, p, dkLen, callback) {

            N = ensureInteger(N, 'N');
            r = ensureInteger(r, 'r');
            p = ensureInteger(p, 'p');

            dkLen = ensureInteger(dkLen, 'dkLen');

            if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

            if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
            if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

            if (!checkBufferish(password)) {
              throw new Error('password must be an array or buffer');
            }
            password = Array.prototype.slice.call(password);

            if (!checkBufferish(salt)) {
              throw new Error('salt must be an array or buffer');
            }
            salt = Array.prototype.slice.call(salt);

            let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
            const B = new Uint32Array(p * 32 * r)
            for (let i = 0; i < B.length; i++) {
              const j = i * 4;
              B[i] = ((b[j + 3] & 0xff) << 24) |
                ((b[j + 2] & 0xff) << 16) |
                ((b[j + 1] & 0xff) << 8) |
                ((b[j + 0] & 0xff) << 0);
            }

            const XY = new Uint32Array(64 * r);
            const V = new Uint32Array(32 * r * N);

            const Yi = 32 * r;

            // scratch space
            const x = new Uint32Array(16);       // salsa20_8
            const _X = new Uint32Array(16);      // blockmix_salsa8

            const totalOps = p * N * 2;
            let currentOp = 0;
            let lastPercent10 = null;

            // Set this to true to abandon the scrypt on the next step
            let stop = false;

            // State information
            let state = 0;
            let i0 = 0, i1;
            let Bi;

            // How many blockmix_salsa8 can we do per step?
            const limit = callback ? parseInt(1000 / r): 0xffffffff;

            // Trick from scrypt-async; if there is a setImmediate shim in place, use it
            const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

            // This is really all I changed; making scryptsy a state machine so we occasionally
            // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
            const incrementalSMix = function() {
              if (stop) {
                return callback(new Error('cancelled'), currentOp / totalOps);
              }

              let steps;

              switch (state) {
                case 0:
                  // for (var i = 0; i < p; i++)...
                  Bi = i0 * 32 * r;

                  arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

                  state = 1;                                         // Move to ROMix 2
                  i1 = 0;

                // Fall through

                case 1:

                  // Run up to 1000 steps of the first inner smix loop
                  steps = N - i1;
                  if (steps > limit) { steps = limit; }
                  for (let i = 0; i < steps; i++) {                  // ROMix - 2
                    arraycopy(XY, 0, V, (i1 + i) * Yi, Yi)         // ROMix - 3
                    blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
                  }

                  // for (var i = 0; i < N; i++)
                  i1 += steps;
                  currentOp += steps;

                  if (callback) {
                    // Call the callback with the progress (optionally stopping us)
                    const percent10 = parseInt(1000 * currentOp / totalOps);
                    if (percent10 !== lastPercent10) {
                      stop = callback(null, currentOp / totalOps);
                      if (stop) { break; }
                      lastPercent10 = percent10;
                    }
                  }

                  if (i1 < N) { break; }

                  i1 = 0;                                          // Move to ROMix 6
                  state = 2;

                // Fall through

                case 2:

                  // Run up to 1000 steps of the second inner smix loop
                  steps = N - i1;
                  if (steps > limit) { steps = limit; }
                  for (let i = 0; i < steps; i++) {                // ROMix - 6
                    const offset = (2 * r - 1) * 16;             // ROMix - 7
                    const j = XY[offset] & (N - 1);
                    blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
                    blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
                  }

                  // for (var i = 0; i < N; i++)...
                  i1 += steps;
                  currentOp += steps;

                  // Call the callback with the progress (optionally stopping us)
                  if (callback) {
                    const percent10 = parseInt(1000 * currentOp / totalOps);
                    if (percent10 !== lastPercent10) {
                      stop = callback(null, currentOp / totalOps);
                      if (stop) { break; }
                      lastPercent10 = percent10;
                    }
                  }

                  if (i1 < N) { break; }

                  arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

                  // for (var i = 0; i < p; i++)...
                  i0++;
                  if (i0 < p) {
                    state = 0;
                    break;
                  }

                  b = [];
                  for (let i = 0; i < B.length; i++) {
                    b.push((B[i] >>  0) & 0xff);
                    b.push((B[i] >>  8) & 0xff);
                    b.push((B[i] >> 16) & 0xff);
                    b.push((B[i] >> 24) & 0xff);
                  }

                  const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

                  // Send the result to the callback
                  if (callback) { callback(null, 1.0, derivedKey); }

                  // Done; don't break (which would reschedule)
                  return derivedKey;
              }

              // Schedule the next steps
              if (callback) { nextTick(incrementalSMix); }
            }

            // Run the smix state machine until completion
            if (!callback) {
              while (true) {
                const derivedKey = incrementalSMix();
                if (derivedKey != undefined) { return derivedKey; }
              }
            }

            // Bootstrap the async incremental smix
            incrementalSMix();
          }

          const lib = {
            scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
              return new Promise(function(resolve, reject) {
                let lastProgress = 0;
                if (progressCallback) { progressCallback(0); }
                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                  if (error) {
                    reject(error);
                  } else if (key) {
                    if (progressCallback && lastProgress !== 1) {
                      progressCallback(1);
                    }
                    resolve(new Uint8Array(key));
                  } else if (progressCallback && progress !== lastProgress) {
                    lastProgress = progress;
                    return progressCallback(progress);
                  }
                });
              });
            },
            syncScrypt: function(password, salt, N, r, p, dkLen) {
              return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
            }
          };

          // node.js
          if (true) {
            module.exports = lib;

            // RequireJS/AMD
            // http://www.requirejs.org/docs/api.html
            // https://github.com/amdjs/amdjs-api/wiki/AMD
          } else {}

        })(this);


        /***/ }),

      /***/ "9f7f":
      /***/ (function(module, exports, __webpack_require__) {

        var fails = __webpack_require__("d039");
        var global = __webpack_require__("da84");

// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
        var $RegExp = global.RegExp;

        exports.UNSUPPORTED_Y = fails(function () {
          var re = $RegExp('a', 'y');
          re.lastIndex = 2;
          return re.exec('abcd') != null;
        });

        exports.BROKEN_CARET = fails(function () {
          // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
          var re = $RegExp('^r', 'gy');
          re.lastIndex = 2;
          return re.exec('str') != null;
        });


        /***/ }),

      /***/ "a026":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */(function(global) {/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
          /*  */

          var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
          function isUndef (v) {
            return v === undefined || v === null
          }

          function isDef (v) {
            return v !== undefined && v !== null
          }

          function isTrue (v) {
            return v === true
          }

          function isFalse (v) {
            return v === false
          }

          /**
           * Check if value is primitive.
           */
          function isPrimitive (value) {
            return (
              typeof value === 'string' ||
              typeof value === 'number' ||
              // $flow-disable-line
              typeof value === 'symbol' ||
              typeof value === 'boolean'
            )
          }

          /**
           * Quick object check - this is primarily used to tell
           * Objects from primitive values when we know the value
           * is a JSON-compliant type.
           */
          function isObject (obj) {
            return obj !== null && typeof obj === 'object'
          }

          /**
           * Get the raw type string of a value, e.g., [object Object].
           */
          var _toString = Object.prototype.toString;

          function toRawType (value) {
            return _toString.call(value).slice(8, -1)
          }

          /**
           * Strict object type check. Only returns true
           * for plain JavaScript objects.
           */
          function isPlainObject (obj) {
            return _toString.call(obj) === '[object Object]'
          }

          function isRegExp (v) {
            return _toString.call(v) === '[object RegExp]'
          }

          /**
           * Check if val is a valid array index.
           */
          function isValidArrayIndex (val) {
            var n = parseFloat(String(val));
            return n >= 0 && Math.floor(n) === n && isFinite(val)
          }

          function isPromise (val) {
            return (
              isDef(val) &&
              typeof val.then === 'function' &&
              typeof val.catch === 'function'
            )
          }

          /**
           * Convert a value to a string that is actually rendered.
           */
          function toString (val) {
            return val == null
              ? ''
              : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
                ? JSON.stringify(val, null, 2)
                : String(val)
          }

          /**
           * Convert an input value to a number for persistence.
           * If the conversion fails, return original string.
           */
          function toNumber (val) {
            var n = parseFloat(val);
            return isNaN(n) ? val : n
          }

          /**
           * Make a map and return a function for checking if a key
           * is in that map.
           */
          function makeMap (
            str,
            expectsLowerCase
          ) {
            var map = Object.create(null);
            var list = str.split(',');
            for (var i = 0; i < list.length; i++) {
              map[list[i]] = true;
            }
            return expectsLowerCase
              ? function (val) { return map[val.toLowerCase()]; }
              : function (val) { return map[val]; }
          }

          /**
           * Check if a tag is a built-in tag.
           */
          var isBuiltInTag = makeMap('slot,component', true);

          /**
           * Check if an attribute is a reserved attribute.
           */
          var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

          /**
           * Remove an item from an array.
           */
          function remove (arr, item) {
            if (arr.length) {
              var index = arr.indexOf(item);
              if (index > -1) {
                return arr.splice(index, 1)
              }
            }
          }

          /**
           * Check whether an object has the property.
           */
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function hasOwn (obj, key) {
            return hasOwnProperty.call(obj, key)
          }

          /**
           * Create a cached version of a pure function.
           */
          function cached (fn) {
            var cache = Object.create(null);
            return (function cachedFn (str) {
              var hit = cache[str];
              return hit || (cache[str] = fn(str))
            })
          }

          /**
           * Camelize a hyphen-delimited string.
           */
          var camelizeRE = /-(\w)/g;
          var camelize = cached(function (str) {
            return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
          });

          /**
           * Capitalize a string.
           */
          var capitalize = cached(function (str) {
            return str.charAt(0).toUpperCase() + str.slice(1)
          });

          /**
           * Hyphenate a camelCase string.
           */
          var hyphenateRE = /\B([A-Z])/g;
          var hyphenate = cached(function (str) {
            return str.replace(hyphenateRE, '-$1').toLowerCase()
          });

          /**
           * Simple bind polyfill for environments that do not support it,
           * e.g., PhantomJS 1.x. Technically, we don't need this anymore
           * since native bind is now performant enough in most browsers.
           * But removing it would mean breaking code that was able to run in
           * PhantomJS 1.x, so this must be kept for backward compatibility.
           */

          /* istanbul ignore next */
          function polyfillBind (fn, ctx) {
            function boundFn (a) {
              var l = arguments.length;
              return l
                ? l > 1
                  ? fn.apply(ctx, arguments)
                  : fn.call(ctx, a)
                : fn.call(ctx)
            }

            boundFn._length = fn.length;
            return boundFn
          }

          function nativeBind (fn, ctx) {
            return fn.bind(ctx)
          }

          var bind = Function.prototype.bind
            ? nativeBind
            : polyfillBind;

          /**
           * Convert an Array-like object to a real Array.
           */
          function toArray (list, start) {
            start = start || 0;
            var i = list.length - start;
            var ret = new Array(i);
            while (i--) {
              ret[i] = list[i + start];
            }
            return ret
          }

          /**
           * Mix properties into target object.
           */
          function extend (to, _from) {
            for (var key in _from) {
              to[key] = _from[key];
            }
            return to
          }

          /**
           * Merge an Array of Objects into a single Object.
           */
          function toObject (arr) {
            var res = {};
            for (var i = 0; i < arr.length; i++) {
              if (arr[i]) {
                extend(res, arr[i]);
              }
            }
            return res
          }

          /* eslint-disable no-unused-vars */

          /**
           * Perform no operation.
           * Stubbing args to make Flow happy without leaving useless transpiled code
           * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
           */
          function noop (a, b, c) {}

          /**
           * Always return false.
           */
          var no = function (a, b, c) { return false; };

          /* eslint-enable no-unused-vars */

          /**
           * Return the same value.
           */
          var identity = function (_) { return _; };

          /**
           * Generate a string containing static keys from compiler modules.
           */
          function genStaticKeys (modules) {
            return modules.reduce(function (keys, m) {
              return keys.concat(m.staticKeys || [])
            }, []).join(',')
          }

          /**
           * Check if two values are loosely equal - that is,
           * if they are plain objects, do they have the same shape?
           */
          function looseEqual (a, b) {
            if (a === b) { return true }
            var isObjectA = isObject(a);
            var isObjectB = isObject(b);
            if (isObjectA && isObjectB) {
              try {
                var isArrayA = Array.isArray(a);
                var isArrayB = Array.isArray(b);
                if (isArrayA && isArrayB) {
                  return a.length === b.length && a.every(function (e, i) {
                    return looseEqual(e, b[i])
                  })
                } else if (a instanceof Date && b instanceof Date) {
                  return a.getTime() === b.getTime()
                } else if (!isArrayA && !isArrayB) {
                  var keysA = Object.keys(a);
                  var keysB = Object.keys(b);
                  return keysA.length === keysB.length && keysA.every(function (key) {
                    return looseEqual(a[key], b[key])
                  })
                } else {
                  /* istanbul ignore next */
                  return false
                }
              } catch (e) {
                /* istanbul ignore next */
                return false
              }
            } else if (!isObjectA && !isObjectB) {
              return String(a) === String(b)
            } else {
              return false
            }
          }

          /**
           * Return the first index at which a loosely equal value can be
           * found in the array (if value is a plain object, the array must
           * contain an object of the same shape), or -1 if it is not present.
           */
          function looseIndexOf (arr, val) {
            for (var i = 0; i < arr.length; i++) {
              if (looseEqual(arr[i], val)) { return i }
            }
            return -1
          }

          /**
           * Ensure a function is called only once.
           */
          function once (fn) {
            var called = false;
            return function () {
              if (!called) {
                called = true;
                fn.apply(this, arguments);
              }
            }
          }

          var SSR_ATTR = 'data-server-rendered';

          var ASSET_TYPES = [
            'component',
            'directive',
            'filter'
          ];

          var LIFECYCLE_HOOKS = [
            'beforeCreate',
            'created',
            'beforeMount',
            'mounted',
            'beforeUpdate',
            'updated',
            'beforeDestroy',
            'destroyed',
            'activated',
            'deactivated',
            'errorCaptured',
            'serverPrefetch'
          ];

          /*  */



          var config = ({
            /**
             * Option merge strategies (used in core/util/options)
             */
            // $flow-disable-line
            optionMergeStrategies: Object.create(null),

            /**
             * Whether to suppress warnings.
             */
            silent: false,

            /**
             * Show production mode tip message on boot?
             */
            productionTip: "production" !== 'production',

            /**
             * Whether to enable devtools
             */
            devtools: "production" !== 'production',

            /**
             * Whether to record perf
             */
            performance: false,

            /**
             * Error handler for watcher errors
             */
            errorHandler: null,

            /**
             * Warn handler for watcher warns
             */
            warnHandler: null,

            /**
             * Ignore certain custom elements
             */
            ignoredElements: [],

            /**
             * Custom user key aliases for v-on
             */
            // $flow-disable-line
            keyCodes: Object.create(null),

            /**
             * Check if a tag is reserved so that it cannot be registered as a
             * component. This is platform-dependent and may be overwritten.
             */
            isReservedTag: no,

            /**
             * Check if an attribute is reserved so that it cannot be used as a component
             * prop. This is platform-dependent and may be overwritten.
             */
            isReservedAttr: no,

            /**
             * Check if a tag is an unknown element.
             * Platform-dependent.
             */
            isUnknownElement: no,

            /**
             * Get the namespace of an element
             */
            getTagNamespace: noop,

            /**
             * Parse the real tag name for the specific platform.
             */
            parsePlatformTagName: identity,

            /**
             * Check if an attribute must be bound using property, e.g. value
             * Platform-dependent.
             */
            mustUseProp: no,

            /**
             * Perform updates asynchronously. Intended to be used by Vue Test Utils
             * This will significantly reduce performance if set to false.
             */
            async: true,

            /**
             * Exposed for legacy reasons
             */
            _lifecycleHooks: LIFECYCLE_HOOKS
          });

          /*  */

          /**
           * unicode letters used for parsing html tags, component names and property paths.
           * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
           * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
           */
          var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

          /**
           * Check if a string starts with $ or _
           */
          function isReserved (str) {
            var c = (str + '').charCodeAt(0);
            return c === 0x24 || c === 0x5F
          }

          /**
           * Define a property.
           */
          function def (obj, key, val, enumerable) {
            Object.defineProperty(obj, key, {
              value: val,
              enumerable: !!enumerable,
              writable: true,
              configurable: true
            });
          }

          /**
           * Parse simple path.
           */
          var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
          function parsePath (path) {
            if (bailRE.test(path)) {
              return
            }
            var segments = path.split('.');
            return function (obj) {
              for (var i = 0; i < segments.length; i++) {
                if (!obj) { return }
                obj = obj[segments[i]];
              }
              return obj
            }
          }

          /*  */

// can we use __proto__?
          var hasProto = '__proto__' in {};

// Browser environment sniffing
          var inBrowser = typeof window !== 'undefined';
          var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
          var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
          var UA = inBrowser && window.navigator.userAgent.toLowerCase();
          var isIE = UA && /msie|trident/.test(UA);
          var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
          var isEdge = UA && UA.indexOf('edge/') > 0;
          var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
          var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
          var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
          var isPhantomJS = UA && /phantomjs/.test(UA);
          var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
          var nativeWatch = ({}).watch;

          var supportsPassive = false;
          if (inBrowser) {
            try {
              var opts = {};
              Object.defineProperty(opts, 'passive', ({
                get: function get () {
                  /* istanbul ignore next */
                  supportsPassive = true;
                }
              })); // https://github.com/facebook/flow/issues/285
              window.addEventListener('test-passive', null, opts);
            } catch (e) {}
          }

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
          var _isServer;
          var isServerRendering = function () {
            if (_isServer === undefined) {
              /* istanbul ignore if */
              if (!inBrowser && !inWeex && typeof global !== 'undefined') {
                // detect presence of vue-server-renderer and avoid
                // Webpack shimming the process
                _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
              } else {
                _isServer = false;
              }
            }
            return _isServer
          };

// detect devtools
          var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

          /* istanbul ignore next */
          function isNative (Ctor) {
            return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
          }

          var hasSymbol =
            typeof Symbol !== 'undefined' && isNative(Symbol) &&
            typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

          var _Set;
          /* istanbul ignore if */ // $flow-disable-line
          if (typeof Set !== 'undefined' && isNative(Set)) {
            // use native Set when available.
            _Set = Set;
          } else {
            // a non-standard Set polyfill that only works with primitive keys.
            _Set = /*@__PURE__*/(function () {
              function Set () {
                this.set = Object.create(null);
              }
              Set.prototype.has = function has (key) {
                return this.set[key] === true
              };
              Set.prototype.add = function add (key) {
                this.set[key] = true;
              };
              Set.prototype.clear = function clear () {
                this.set = Object.create(null);
              };

              return Set;
            }());
          }

          /*  */

          var warn = noop;
          var tip = noop;
          var generateComponentTrace = (noop); // work around flow check
          var formatComponentName = (noop);

          if (false) { var repeat, classify, classifyRE, hasConsole; }

          /*  */

          var uid = 0;

          /**
           * A dep is an observable that can have multiple
           * directives subscribing to it.
           */
          var Dep = function Dep () {
            this.id = uid++;
            this.subs = [];
          };

          Dep.prototype.addSub = function addSub (sub) {
            this.subs.push(sub);
          };

          Dep.prototype.removeSub = function removeSub (sub) {
            remove(this.subs, sub);
          };

          Dep.prototype.depend = function depend () {
            if (Dep.target) {
              Dep.target.addDep(this);
            }
          };

          Dep.prototype.notify = function notify () {
            // stabilize the subscriber list first
            var subs = this.subs.slice();
            if (false) {}
            for (var i = 0, l = subs.length; i < l; i++) {
              subs[i].update();
            }
          };

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
          Dep.target = null;
          var targetStack = [];

          function pushTarget (target) {
            targetStack.push(target);
            Dep.target = target;
          }

          function popTarget () {
            targetStack.pop();
            Dep.target = targetStack[targetStack.length - 1];
          }

          /*  */

          var VNode = function VNode (
            tag,
            data,
            children,
            text,
            elm,
            context,
            componentOptions,
            asyncFactory
          ) {
            this.tag = tag;
            this.data = data;
            this.children = children;
            this.text = text;
            this.elm = elm;
            this.ns = undefined;
            this.context = context;
            this.fnContext = undefined;
            this.fnOptions = undefined;
            this.fnScopeId = undefined;
            this.key = data && data.key;
            this.componentOptions = componentOptions;
            this.componentInstance = undefined;
            this.parent = undefined;
            this.raw = false;
            this.isStatic = false;
            this.isRootInsert = true;
            this.isComment = false;
            this.isCloned = false;
            this.isOnce = false;
            this.asyncFactory = asyncFactory;
            this.asyncMeta = undefined;
            this.isAsyncPlaceholder = false;
          };

          var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
          /* istanbul ignore next */
          prototypeAccessors.child.get = function () {
            return this.componentInstance
          };

          Object.defineProperties( VNode.prototype, prototypeAccessors );

          var createEmptyVNode = function (text) {
            if ( text === void 0 ) text = '';

            var node = new VNode();
            node.text = text;
            node.isComment = true;
            return node
          };

          function createTextVNode (val) {
            return new VNode(undefined, undefined, undefined, String(val))
          }

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
          function cloneVNode (vnode) {
            var cloned = new VNode(
              vnode.tag,
              vnode.data,
              // #7975
              // clone children array to avoid mutating original in case of cloning
              // a child.
              vnode.children && vnode.children.slice(),
              vnode.text,
              vnode.elm,
              vnode.context,
              vnode.componentOptions,
              vnode.asyncFactory
            );
            cloned.ns = vnode.ns;
            cloned.isStatic = vnode.isStatic;
            cloned.key = vnode.key;
            cloned.isComment = vnode.isComment;
            cloned.fnContext = vnode.fnContext;
            cloned.fnOptions = vnode.fnOptions;
            cloned.fnScopeId = vnode.fnScopeId;
            cloned.asyncMeta = vnode.asyncMeta;
            cloned.isCloned = true;
            return cloned
          }

          /*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

          var arrayProto = Array.prototype;
          var arrayMethods = Object.create(arrayProto);

          var methodsToPatch = [
            'push',
            'pop',
            'shift',
            'unshift',
            'splice',
            'sort',
            'reverse'
          ];

          /**
           * Intercept mutating methods and emit events
           */
          methodsToPatch.forEach(function (method) {
            // cache original method
            var original = arrayProto[method];
            def(arrayMethods, method, function mutator () {
              var args = [], len = arguments.length;
              while ( len-- ) args[ len ] = arguments[ len ];

              var result = original.apply(this, args);
              var ob = this.__ob__;
              var inserted;
              switch (method) {
                case 'push':
                case 'unshift':
                  inserted = args;
                  break
                case 'splice':
                  inserted = args.slice(2);
                  break
              }
              if (inserted) { ob.observeArray(inserted); }
              // notify change
              ob.dep.notify();
              return result
            });
          });

          /*  */

          var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

          /**
           * In some cases we may want to disable observation inside a component's
           * update computation.
           */
          var shouldObserve = true;

          function toggleObserving (value) {
            shouldObserve = value;
          }

          /**
           * Observer class that is attached to each observed
           * object. Once attached, the observer converts the target
           * object's property keys into getter/setters that
           * collect dependencies and dispatch updates.
           */
          var Observer = function Observer (value) {
            this.value = value;
            this.dep = new Dep();
            this.vmCount = 0;
            def(value, '__ob__', this);
            if (Array.isArray(value)) {
              if (hasProto) {
                protoAugment(value, arrayMethods);
              } else {
                copyAugment(value, arrayMethods, arrayKeys);
              }
              this.observeArray(value);
            } else {
              this.walk(value);
            }
          };

          /**
           * Walk through all properties and convert them into
           * getter/setters. This method should only be called when
           * value type is Object.
           */
          Observer.prototype.walk = function walk (obj) {
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length; i++) {
              defineReactive$$1(obj, keys[i]);
            }
          };

          /**
           * Observe a list of Array items.
           */
          Observer.prototype.observeArray = function observeArray (items) {
            for (var i = 0, l = items.length; i < l; i++) {
              observe(items[i]);
            }
          };

// helpers

          /**
           * Augment a target Object or Array by intercepting
           * the prototype chain using __proto__
           */
          function protoAugment (target, src) {
            /* eslint-disable no-proto */
            target.__proto__ = src;
            /* eslint-enable no-proto */
          }

          /**
           * Augment a target Object or Array by defining
           * hidden properties.
           */
          /* istanbul ignore next */
          function copyAugment (target, src, keys) {
            for (var i = 0, l = keys.length; i < l; i++) {
              var key = keys[i];
              def(target, key, src[key]);
            }
          }

          /**
           * Attempt to create an observer instance for a value,
           * returns the new observer if successfully observed,
           * or the existing observer if the value already has one.
           */
          function observe (value, asRootData) {
            if (!isObject(value) || value instanceof VNode) {
              return
            }
            var ob;
            if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
              ob = value.__ob__;
            } else if (
              shouldObserve &&
              !isServerRendering() &&
              (Array.isArray(value) || isPlainObject(value)) &&
              Object.isExtensible(value) &&
              !value._isVue
            ) {
              ob = new Observer(value);
            }
            if (asRootData && ob) {
              ob.vmCount++;
            }
            return ob
          }

          /**
           * Define a reactive property on an Object.
           */
          function defineReactive$$1 (
            obj,
            key,
            val,
            customSetter,
            shallow
          ) {
            var dep = new Dep();

            var property = Object.getOwnPropertyDescriptor(obj, key);
            if (property && property.configurable === false) {
              return
            }

            // cater for pre-defined getter/setters
            var getter = property && property.get;
            var setter = property && property.set;
            if ((!getter || setter) && arguments.length === 2) {
              val = obj[key];
            }

            var childOb = !shallow && observe(val);
            Object.defineProperty(obj, key, {
              enumerable: true,
              configurable: true,
              get: function reactiveGetter () {
                var value = getter ? getter.call(obj) : val;
                if (Dep.target) {
                  dep.depend();
                  if (childOb) {
                    childOb.dep.depend();
                    if (Array.isArray(value)) {
                      dependArray(value);
                    }
                  }
                }
                return value
              },
              set: function reactiveSetter (newVal) {
                var value = getter ? getter.call(obj) : val;
                /* eslint-disable no-self-compare */
                if (newVal === value || (newVal !== newVal && value !== value)) {
                  return
                }
                /* eslint-enable no-self-compare */
                if (false) {}
                // #7981: for accessor properties without setter
                if (getter && !setter) { return }
                if (setter) {
                  setter.call(obj, newVal);
                } else {
                  val = newVal;
                }
                childOb = !shallow && observe(newVal);
                dep.notify();
              }
            });
          }

          /**
           * Set a property on an object. Adds the new property and
           * triggers change notification if the property doesn't
           * already exist.
           */
          function set (target, key, val) {
            if (false
            ) {}
            if (Array.isArray(target) && isValidArrayIndex(key)) {
              target.length = Math.max(target.length, key);
              target.splice(key, 1, val);
              return val
            }
            if (key in target && !(key in Object.prototype)) {
              target[key] = val;
              return val
            }
            var ob = (target).__ob__;
            if (target._isVue || (ob && ob.vmCount)) {
              false && false;
              return val
            }
            if (!ob) {
              target[key] = val;
              return val
            }
            defineReactive$$1(ob.value, key, val);
            ob.dep.notify();
            return val
          }

          /**
           * Delete a property and trigger change if necessary.
           */
          function del (target, key) {
            if (false
            ) {}
            if (Array.isArray(target) && isValidArrayIndex(key)) {
              target.splice(key, 1);
              return
            }
            var ob = (target).__ob__;
            if (target._isVue || (ob && ob.vmCount)) {
              false && false;
              return
            }
            if (!hasOwn(target, key)) {
              return
            }
            delete target[key];
            if (!ob) {
              return
            }
            ob.dep.notify();
          }

          /**
           * Collect dependencies on array elements when the array is touched, since
           * we cannot intercept array element access like property getters.
           */
          function dependArray (value) {
            for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
              e = value[i];
              e && e.__ob__ && e.__ob__.dep.depend();
              if (Array.isArray(e)) {
                dependArray(e);
              }
            }
          }

          /*  */

          /**
           * Option overwriting strategies are functions that handle
           * how to merge a parent option value and a child option
           * value into the final value.
           */
          var strats = config.optionMergeStrategies;

          /**
           * Options with restrictions
           */
          if (false) {}

          /**
           * Helper that recursively merges two data objects together.
           */
          function mergeData (to, from) {
            if (!from) { return to }
            var key, toVal, fromVal;

            var keys = hasSymbol
              ? Reflect.ownKeys(from)
              : Object.keys(from);

            for (var i = 0; i < keys.length; i++) {
              key = keys[i];
              // in case the object is already observed...
              if (key === '__ob__') { continue }
              toVal = to[key];
              fromVal = from[key];
              if (!hasOwn(to, key)) {
                set(to, key, fromVal);
              } else if (
                toVal !== fromVal &&
                isPlainObject(toVal) &&
                isPlainObject(fromVal)
              ) {
                mergeData(toVal, fromVal);
              }
            }
            return to
          }

          /**
           * Data
           */
          function mergeDataOrFn (
            parentVal,
            childVal,
            vm
          ) {
            if (!vm) {
              // in a Vue.extend merge, both should be functions
              if (!childVal) {
                return parentVal
              }
              if (!parentVal) {
                return childVal
              }
              // when parentVal & childVal are both present,
              // we need to return a function that returns the
              // merged result of both functions... no need to
              // check if parentVal is a function here because
              // it has to be a function to pass previous merges.
              return function mergedDataFn () {
                return mergeData(
                  typeof childVal === 'function' ? childVal.call(this, this) : childVal,
                  typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
                )
              }
            } else {
              return function mergedInstanceDataFn () {
                // instance merge
                var instanceData = typeof childVal === 'function'
                  ? childVal.call(vm, vm)
                  : childVal;
                var defaultData = typeof parentVal === 'function'
                  ? parentVal.call(vm, vm)
                  : parentVal;
                if (instanceData) {
                  return mergeData(instanceData, defaultData)
                } else {
                  return defaultData
                }
              }
            }
          }

          strats.data = function (
            parentVal,
            childVal,
            vm
          ) {
            if (!vm) {
              if (childVal && typeof childVal !== 'function') {
                false && false;

                return parentVal
              }
              return mergeDataOrFn(parentVal, childVal)
            }

            return mergeDataOrFn(parentVal, childVal, vm)
          };

          /**
           * Hooks and props are merged as arrays.
           */
          function mergeHook (
            parentVal,
            childVal
          ) {
            var res = childVal
              ? parentVal
                ? parentVal.concat(childVal)
                : Array.isArray(childVal)
                  ? childVal
                  : [childVal]
              : parentVal;
            return res
              ? dedupeHooks(res)
              : res
          }

          function dedupeHooks (hooks) {
            var res = [];
            for (var i = 0; i < hooks.length; i++) {
              if (res.indexOf(hooks[i]) === -1) {
                res.push(hooks[i]);
              }
            }
            return res
          }

          LIFECYCLE_HOOKS.forEach(function (hook) {
            strats[hook] = mergeHook;
          });

          /**
           * Assets
           *
           * When a vm is present (instance creation), we need to do
           * a three-way merge between constructor options, instance
           * options and parent options.
           */
          function mergeAssets (
            parentVal,
            childVal,
            vm,
            key
          ) {
            var res = Object.create(parentVal || null);
            if (childVal) {
              false && false;
              return extend(res, childVal)
            } else {
              return res
            }
          }

          ASSET_TYPES.forEach(function (type) {
            strats[type + 's'] = mergeAssets;
          });

          /**
           * Watchers.
           *
           * Watchers hashes should not overwrite one
           * another, so we merge them as arrays.
           */
          strats.watch = function (
            parentVal,
            childVal,
            vm,
            key
          ) {
            // work around Firefox's Object.prototype.watch...
            if (parentVal === nativeWatch) { parentVal = undefined; }
            if (childVal === nativeWatch) { childVal = undefined; }
            /* istanbul ignore if */
            if (!childVal) { return Object.create(parentVal || null) }
            if (false) {}
            if (!parentVal) { return childVal }
            var ret = {};
            extend(ret, parentVal);
            for (var key$1 in childVal) {
              var parent = ret[key$1];
              var child = childVal[key$1];
              if (parent && !Array.isArray(parent)) {
                parent = [parent];
              }
              ret[key$1] = parent
                ? parent.concat(child)
                : Array.isArray(child) ? child : [child];
            }
            return ret
          };

          /**
           * Other object hashes.
           */
          strats.props =
            strats.methods =
              strats.inject =
                strats.computed = function (
                  parentVal,
                  childVal,
                  vm,
                  key
                ) {
                  if (childVal && "production" !== 'production') {
                    assertObjectType(key, childVal, vm);
                  }
                  if (!parentVal) { return childVal }
                  var ret = Object.create(null);
                  extend(ret, parentVal);
                  if (childVal) { extend(ret, childVal); }
                  return ret
                };
          strats.provide = mergeDataOrFn;

          /**
           * Default strategy.
           */
          var defaultStrat = function (parentVal, childVal) {
            return childVal === undefined
              ? parentVal
              : childVal
          };

          /**
           * Validate component names
           */
          function checkComponents (options) {
            for (var key in options.components) {
              validateComponentName(key);
            }
          }

          function validateComponentName (name) {
            if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
              warn(
                'Invalid component name: "' + name + '". Component names ' +
                'should conform to valid custom element name in html5 specification.'
              );
            }
            if (isBuiltInTag(name) || config.isReservedTag(name)) {
              warn(
                'Do not use built-in or reserved HTML elements as component ' +
                'id: ' + name
              );
            }
          }

          /**
           * Ensure all props option syntax are normalized into the
           * Object-based format.
           */
          function normalizeProps (options, vm) {
            var props = options.props;
            if (!props) { return }
            var res = {};
            var i, val, name;
            if (Array.isArray(props)) {
              i = props.length;
              while (i--) {
                val = props[i];
                if (typeof val === 'string') {
                  name = camelize(val);
                  res[name] = { type: null };
                } else if (false) {}
              }
            } else if (isPlainObject(props)) {
              for (var key in props) {
                val = props[key];
                name = camelize(key);
                res[name] = isPlainObject(val)
                  ? val
                  : { type: val };
              }
            } else if (false) {}
            options.props = res;
          }

          /**
           * Normalize all injections into Object-based format
           */
          function normalizeInject (options, vm) {
            var inject = options.inject;
            if (!inject) { return }
            var normalized = options.inject = {};
            if (Array.isArray(inject)) {
              for (var i = 0; i < inject.length; i++) {
                normalized[inject[i]] = { from: inject[i] };
              }
            } else if (isPlainObject(inject)) {
              for (var key in inject) {
                var val = inject[key];
                normalized[key] = isPlainObject(val)
                  ? extend({ from: key }, val)
                  : { from: val };
              }
            } else if (false) {}
          }

          /**
           * Normalize raw function directives into object format.
           */
          function normalizeDirectives (options) {
            var dirs = options.directives;
            if (dirs) {
              for (var key in dirs) {
                var def$$1 = dirs[key];
                if (typeof def$$1 === 'function') {
                  dirs[key] = { bind: def$$1, update: def$$1 };
                }
              }
            }
          }

          function assertObjectType (name, value, vm) {
            if (!isPlainObject(value)) {
              warn(
                "Invalid value for option \"" + name + "\": expected an Object, " +
                "but got " + (toRawType(value)) + ".",
                vm
              );
            }
          }

          /**
           * Merge two option objects into a new one.
           * Core utility used in both instantiation and inheritance.
           */
          function mergeOptions (
            parent,
            child,
            vm
          ) {
            if (false) {}

            if (typeof child === 'function') {
              child = child.options;
            }

            normalizeProps(child, vm);
            normalizeInject(child, vm);
            normalizeDirectives(child);

            // Apply extends and mixins on the child options,
            // but only if it is a raw options object that isn't
            // the result of another mergeOptions call.
            // Only merged options has the _base property.
            if (!child._base) {
              if (child.extends) {
                parent = mergeOptions(parent, child.extends, vm);
              }
              if (child.mixins) {
                for (var i = 0, l = child.mixins.length; i < l; i++) {
                  parent = mergeOptions(parent, child.mixins[i], vm);
                }
              }
            }

            var options = {};
            var key;
            for (key in parent) {
              mergeField(key);
            }
            for (key in child) {
              if (!hasOwn(parent, key)) {
                mergeField(key);
              }
            }
            function mergeField (key) {
              var strat = strats[key] || defaultStrat;
              options[key] = strat(parent[key], child[key], vm, key);
            }
            return options
          }

          /**
           * Resolve an asset.
           * This function is used because child instances need access
           * to assets defined in its ancestor chain.
           */
          function resolveAsset (
            options,
            type,
            id,
            warnMissing
          ) {
            /* istanbul ignore if */
            if (typeof id !== 'string') {
              return
            }
            var assets = options[type];
            // check local registration variations first
            if (hasOwn(assets, id)) { return assets[id] }
            var camelizedId = camelize(id);
            if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
            var PascalCaseId = capitalize(camelizedId);
            if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
            // fallback to prototype chain
            var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
            if (false) {}
            return res
          }

          /*  */



          function validateProp (
            key,
            propOptions,
            propsData,
            vm
          ) {
            var prop = propOptions[key];
            var absent = !hasOwn(propsData, key);
            var value = propsData[key];
            // boolean casting
            var booleanIndex = getTypeIndex(Boolean, prop.type);
            if (booleanIndex > -1) {
              if (absent && !hasOwn(prop, 'default')) {
                value = false;
              } else if (value === '' || value === hyphenate(key)) {
                // only cast empty string / same name to boolean if
                // boolean has higher priority
                var stringIndex = getTypeIndex(String, prop.type);
                if (stringIndex < 0 || booleanIndex < stringIndex) {
                  value = true;
                }
              }
            }
            // check default value
            if (value === undefined) {
              value = getPropDefaultValue(vm, prop, key);
              // since the default value is a fresh copy,
              // make sure to observe it.
              var prevShouldObserve = shouldObserve;
              toggleObserving(true);
              observe(value);
              toggleObserving(prevShouldObserve);
            }
            if (
              false
            ) {}
            return value
          }

          /**
           * Get the default value of a prop.
           */
          function getPropDefaultValue (vm, prop, key) {
            // no default, return undefined
            if (!hasOwn(prop, 'default')) {
              return undefined
            }
            var def = prop.default;
            // warn against non-factory defaults for Object & Array
            if (false) {}
            // the raw prop value was also undefined from previous render,
            // return previous default value to avoid unnecessary watcher trigger
            if (vm && vm.$options.propsData &&
              vm.$options.propsData[key] === undefined &&
              vm._props[key] !== undefined
            ) {
              return vm._props[key]
            }
            // call factory function for non-Function types
            // a value is Function if its prototype is function even across different execution context
            return typeof def === 'function' && getType(prop.type) !== 'Function'
              ? def.call(vm)
              : def
          }

          /**
           * Assert whether a prop is valid.
           */
          function assertProp (
            prop,
            name,
            value,
            vm,
            absent
          ) {
            if (prop.required && absent) {
              warn(
                'Missing required prop: "' + name + '"',
                vm
              );
              return
            }
            if (value == null && !prop.required) {
              return
            }
            var type = prop.type;
            var valid = !type || type === true;
            var expectedTypes = [];
            if (type) {
              if (!Array.isArray(type)) {
                type = [type];
              }
              for (var i = 0; i < type.length && !valid; i++) {
                var assertedType = assertType(value, type[i], vm);
                expectedTypes.push(assertedType.expectedType || '');
                valid = assertedType.valid;
              }
            }

            var haveExpectedTypes = expectedTypes.some(function (t) { return t; });
            if (!valid && haveExpectedTypes) {
              warn(
                getInvalidTypeMessage(name, value, expectedTypes),
                vm
              );
              return
            }
            var validator = prop.validator;
            if (validator) {
              if (!validator(value)) {
                warn(
                  'Invalid prop: custom validator check failed for prop "' + name + '".',
                  vm
                );
              }
            }
          }

          var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;

          function assertType (value, type, vm) {
            var valid;
            var expectedType = getType(type);
            if (simpleCheckRE.test(expectedType)) {
              var t = typeof value;
              valid = t === expectedType.toLowerCase();
              // for primitive wrapper objects
              if (!valid && t === 'object') {
                valid = value instanceof type;
              }
            } else if (expectedType === 'Object') {
              valid = isPlainObject(value);
            } else if (expectedType === 'Array') {
              valid = Array.isArray(value);
            } else {
              try {
                valid = value instanceof type;
              } catch (e) {
                warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
                valid = false;
              }
            }
            return {
              valid: valid,
              expectedType: expectedType
            }
          }

          var functionTypeCheckRE = /^\s*function (\w+)/;

          /**
           * Use function string name to check built-in types,
           * because a simple equality check will fail when running
           * across different vms / iframes.
           */
          function getType (fn) {
            var match = fn && fn.toString().match(functionTypeCheckRE);
            return match ? match[1] : ''
          }

          function isSameType (a, b) {
            return getType(a) === getType(b)
          }

          function getTypeIndex (type, expectedTypes) {
            if (!Array.isArray(expectedTypes)) {
              return isSameType(expectedTypes, type) ? 0 : -1
            }
            for (var i = 0, len = expectedTypes.length; i < len; i++) {
              if (isSameType(expectedTypes[i], type)) {
                return i
              }
            }
            return -1
          }

          function getInvalidTypeMessage (name, value, expectedTypes) {
            var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
              " Expected " + (expectedTypes.map(capitalize).join(', '));
            var expectedType = expectedTypes[0];
            var receivedType = toRawType(value);
            // check if we need to specify expected value
            if (
              expectedTypes.length === 1 &&
              isExplicable(expectedType) &&
              isExplicable(typeof value) &&
              !isBoolean(expectedType, receivedType)
            ) {
              message += " with value " + (styleValue(value, expectedType));
            }
            message += ", got " + receivedType + " ";
            // check if we need to specify received value
            if (isExplicable(receivedType)) {
              message += "with value " + (styleValue(value, receivedType)) + ".";
            }
            return message
          }

          function styleValue (value, type) {
            if (type === 'String') {
              return ("\"" + value + "\"")
            } else if (type === 'Number') {
              return ("" + (Number(value)))
            } else {
              return ("" + value)
            }
          }

          var EXPLICABLE_TYPES = ['string', 'number', 'boolean'];
          function isExplicable (value) {
            return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; })
          }

          function isBoolean () {
            var args = [], len = arguments.length;
            while ( len-- ) args[ len ] = arguments[ len ];

            return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
          }

          /*  */

          function handleError (err, vm, info) {
            // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
            // See: https://github.com/vuejs/vuex/issues/1505
            pushTarget();
            try {
              if (vm) {
                var cur = vm;
                while ((cur = cur.$parent)) {
                  var hooks = cur.$options.errorCaptured;
                  if (hooks) {
                    for (var i = 0; i < hooks.length; i++) {
                      try {
                        var capture = hooks[i].call(cur, err, vm, info) === false;
                        if (capture) { return }
                      } catch (e) {
                        globalHandleError(e, cur, 'errorCaptured hook');
                      }
                    }
                  }
                }
              }
              globalHandleError(err, vm, info);
            } finally {
              popTarget();
            }
          }

          function invokeWithErrorHandling (
            handler,
            context,
            args,
            vm,
            info
          ) {
            var res;
            try {
              res = args ? handler.apply(context, args) : handler.call(context);
              if (res && !res._isVue && isPromise(res) && !res._handled) {
                res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
                // issue #9511
                // avoid catch triggering multiple times when nested calls
                res._handled = true;
              }
            } catch (e) {
              handleError(e, vm, info);
            }
            return res
          }

          function globalHandleError (err, vm, info) {
            if (config.errorHandler) {
              try {
                return config.errorHandler.call(null, err, vm, info)
              } catch (e) {
                // if the user intentionally throws the original error in the handler,
                // do not log it twice
                if (e !== err) {
                  logError(e, null, 'config.errorHandler');
                }
              }
            }
            logError(err, vm, info);
          }

          function logError (err, vm, info) {
            if (false) {}
            /* istanbul ignore else */
            if ((inBrowser || inWeex) && typeof console !== 'undefined') {
              console.error(err);
            } else {
              throw err
            }
          }

          /*  */

          var isUsingMicroTask = false;

          var callbacks = [];
          var pending = false;

          function flushCallbacks () {
            pending = false;
            var copies = callbacks.slice(0);
            callbacks.length = 0;
            for (var i = 0; i < copies.length; i++) {
              copies[i]();
            }
          }

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
          var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
          /* istanbul ignore next, $flow-disable-line */
          if (typeof Promise !== 'undefined' && isNative(Promise)) {
            var p = Promise.resolve();
            timerFunc = function () {
              p.then(flushCallbacks);
              // In problematic UIWebViews, Promise.then doesn't completely break, but
              // it can get stuck in a weird state where callbacks are pushed into the
              // microtask queue but the queue isn't being flushed, until the browser
              // needs to do some other work, e.g. handle a timer. Therefore we can
              // "force" the microtask queue to be flushed by adding an empty timer.
              if (isIOS) { setTimeout(noop); }
            };
            isUsingMicroTask = true;
          } else if (!isIE && typeof MutationObserver !== 'undefined' && (
            isNative(MutationObserver) ||
            // PhantomJS and iOS 7.x
            MutationObserver.toString() === '[object MutationObserverConstructor]'
          )) {
            // Use MutationObserver where native Promise is not available,
            // e.g. PhantomJS, iOS7, Android 4.4
            // (#6466 MutationObserver is unreliable in IE11)
            var counter = 1;
            var observer = new MutationObserver(flushCallbacks);
            var textNode = document.createTextNode(String(counter));
            observer.observe(textNode, {
              characterData: true
            });
            timerFunc = function () {
              counter = (counter + 1) % 2;
              textNode.data = String(counter);
            };
            isUsingMicroTask = true;
          } else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
            // Fallback to setImmediate.
            // Technically it leverages the (macro) task queue,
            // but it is still a better choice than setTimeout.
            timerFunc = function () {
              setImmediate(flushCallbacks);
            };
          } else {
            // Fallback to setTimeout.
            timerFunc = function () {
              setTimeout(flushCallbacks, 0);
            };
          }

          function nextTick (cb, ctx) {
            var _resolve;
            callbacks.push(function () {
              if (cb) {
                try {
                  cb.call(ctx);
                } catch (e) {
                  handleError(e, ctx, 'nextTick');
                }
              } else if (_resolve) {
                _resolve(ctx);
              }
            });
            if (!pending) {
              pending = true;
              timerFunc();
            }
            // $flow-disable-line
            if (!cb && typeof Promise !== 'undefined') {
              return new Promise(function (resolve) {
                _resolve = resolve;
              })
            }
          }

          /*  */

          var mark;
          var measure;

          if (false) { var perf; }

          /* not type checking this file because flow doesn't play well with Proxy */

          var initProxy;

          if (false) { var getHandler, hasHandler, isBuiltInModifier, hasProxy, warnReservedPrefix, warnNonPresent, allowedGlobals; }

          /*  */

          var seenObjects = new _Set();

          /**
           * Recursively traverse an object to evoke all converted
           * getters, so that every nested property inside the object
           * is collected as a "deep" dependency.
           */
          function traverse (val) {
            _traverse(val, seenObjects);
            seenObjects.clear();
          }

          function _traverse (val, seen) {
            var i, keys;
            var isA = Array.isArray(val);
            if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
              return
            }
            if (val.__ob__) {
              var depId = val.__ob__.dep.id;
              if (seen.has(depId)) {
                return
              }
              seen.add(depId);
            }
            if (isA) {
              i = val.length;
              while (i--) { _traverse(val[i], seen); }
            } else {
              keys = Object.keys(val);
              i = keys.length;
              while (i--) { _traverse(val[keys[i]], seen); }
            }
          }

          /*  */

          var normalizeEvent = cached(function (name) {
            var passive = name.charAt(0) === '&';
            name = passive ? name.slice(1) : name;
            var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
            name = once$$1 ? name.slice(1) : name;
            var capture = name.charAt(0) === '!';
            name = capture ? name.slice(1) : name;
            return {
              name: name,
              once: once$$1,
              capture: capture,
              passive: passive
            }
          });

          function createFnInvoker (fns, vm) {
            function invoker () {
              var arguments$1 = arguments;

              var fns = invoker.fns;
              if (Array.isArray(fns)) {
                var cloned = fns.slice();
                for (var i = 0; i < cloned.length; i++) {
                  invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
                }
              } else {
                // return handler return value for single handlers
                return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
              }
            }
            invoker.fns = fns;
            return invoker
          }

          function updateListeners (
            on,
            oldOn,
            add,
            remove$$1,
            createOnceHandler,
            vm
          ) {
            var name, def$$1, cur, old, event;
            for (name in on) {
              def$$1 = cur = on[name];
              old = oldOn[name];
              event = normalizeEvent(name);
              if (isUndef(cur)) {
                false && false;
              } else if (isUndef(old)) {
                if (isUndef(cur.fns)) {
                  cur = on[name] = createFnInvoker(cur, vm);
                }
                if (isTrue(event.once)) {
                  cur = on[name] = createOnceHandler(event.name, cur, event.capture);
                }
                add(event.name, cur, event.capture, event.passive, event.params);
              } else if (cur !== old) {
                old.fns = cur;
                on[name] = old;
              }
            }
            for (name in oldOn) {
              if (isUndef(on[name])) {
                event = normalizeEvent(name);
                remove$$1(event.name, oldOn[name], event.capture);
              }
            }
          }

          /*  */

          function mergeVNodeHook (def, hookKey, hook) {
            if (def instanceof VNode) {
              def = def.data.hook || (def.data.hook = {});
            }
            var invoker;
            var oldHook = def[hookKey];

            function wrappedHook () {
              hook.apply(this, arguments);
              // important: remove merged hook to ensure it's called only once
              // and prevent memory leak
              remove(invoker.fns, wrappedHook);
            }

            if (isUndef(oldHook)) {
              // no existing hook
              invoker = createFnInvoker([wrappedHook]);
            } else {
              /* istanbul ignore if */
              if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
                // already a merged invoker
                invoker = oldHook;
                invoker.fns.push(wrappedHook);
              } else {
                // existing plain hook
                invoker = createFnInvoker([oldHook, wrappedHook]);
              }
            }

            invoker.merged = true;
            def[hookKey] = invoker;
          }

          /*  */

          function extractPropsFromVNodeData (
            data,
            Ctor,
            tag
          ) {
            // we are only extracting raw values here.
            // validation and default values are handled in the child
            // component itself.
            var propOptions = Ctor.options.props;
            if (isUndef(propOptions)) {
              return
            }
            var res = {};
            var attrs = data.attrs;
            var props = data.props;
            if (isDef(attrs) || isDef(props)) {
              for (var key in propOptions) {
                var altKey = hyphenate(key);
                if (false) { var keyInLowerCase; }
                checkProp(res, props, key, altKey, true) ||
                checkProp(res, attrs, key, altKey, false);
              }
            }
            return res
          }

          function checkProp (
            res,
            hash,
            key,
            altKey,
            preserve
          ) {
            if (isDef(hash)) {
              if (hasOwn(hash, key)) {
                res[key] = hash[key];
                if (!preserve) {
                  delete hash[key];
                }
                return true
              } else if (hasOwn(hash, altKey)) {
                res[key] = hash[altKey];
                if (!preserve) {
                  delete hash[altKey];
                }
                return true
              }
            }
            return false
          }

          /*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
          function simpleNormalizeChildren (children) {
            for (var i = 0; i < children.length; i++) {
              if (Array.isArray(children[i])) {
                return Array.prototype.concat.apply([], children)
              }
            }
            return children
          }

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
          function normalizeChildren (children) {
            return isPrimitive(children)
              ? [createTextVNode(children)]
              : Array.isArray(children)
                ? normalizeArrayChildren(children)
                : undefined
          }

          function isTextNode (node) {
            return isDef(node) && isDef(node.text) && isFalse(node.isComment)
          }

          function normalizeArrayChildren (children, nestedIndex) {
            var res = [];
            var i, c, lastIndex, last;
            for (i = 0; i < children.length; i++) {
              c = children[i];
              if (isUndef(c) || typeof c === 'boolean') { continue }
              lastIndex = res.length - 1;
              last = res[lastIndex];
              //  nested
              if (Array.isArray(c)) {
                if (c.length > 0) {
                  c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
                  // merge adjacent text nodes
                  if (isTextNode(c[0]) && isTextNode(last)) {
                    res[lastIndex] = createTextVNode(last.text + (c[0]).text);
                    c.shift();
                  }
                  res.push.apply(res, c);
                }
              } else if (isPrimitive(c)) {
                if (isTextNode(last)) {
                  // merge adjacent text nodes
                  // this is necessary for SSR hydration because text nodes are
                  // essentially merged when rendered to HTML strings
                  res[lastIndex] = createTextVNode(last.text + c);
                } else if (c !== '') {
                  // convert primitive to vnode
                  res.push(createTextVNode(c));
                }
              } else {
                if (isTextNode(c) && isTextNode(last)) {
                  // merge adjacent text nodes
                  res[lastIndex] = createTextVNode(last.text + c.text);
                } else {
                  // default key for nested array children (likely generated by v-for)
                  if (isTrue(children._isVList) &&
                    isDef(c.tag) &&
                    isUndef(c.key) &&
                    isDef(nestedIndex)) {
                    c.key = "__vlist" + nestedIndex + "_" + i + "__";
                  }
                  res.push(c);
                }
              }
            }
            return res
          }

          /*  */

          function initProvide (vm) {
            var provide = vm.$options.provide;
            if (provide) {
              vm._provided = typeof provide === 'function'
                ? provide.call(vm)
                : provide;
            }
          }

          function initInjections (vm) {
            var result = resolveInject(vm.$options.inject, vm);
            if (result) {
              toggleObserving(false);
              Object.keys(result).forEach(function (key) {
                /* istanbul ignore else */
                if (false) {} else {
                  defineReactive$$1(vm, key, result[key]);
                }
              });
              toggleObserving(true);
            }
          }

          function resolveInject (inject, vm) {
            if (inject) {
              // inject is :any because flow is not smart enough to figure out cached
              var result = Object.create(null);
              var keys = hasSymbol
                ? Reflect.ownKeys(inject)
                : Object.keys(inject);

              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                // #6574 in case the inject object is observed...
                if (key === '__ob__') { continue }
                var provideKey = inject[key].from;
                var source = vm;
                while (source) {
                  if (source._provided && hasOwn(source._provided, provideKey)) {
                    result[key] = source._provided[provideKey];
                    break
                  }
                  source = source.$parent;
                }
                if (!source) {
                  if ('default' in inject[key]) {
                    var provideDefault = inject[key].default;
                    result[key] = typeof provideDefault === 'function'
                      ? provideDefault.call(vm)
                      : provideDefault;
                  } else if (false) {}
                }
              }
              return result
            }
          }

          /*  */



          /**
           * Runtime helper for resolving raw children VNodes into a slot object.
           */
          function resolveSlots (
            children,
            context
          ) {
            if (!children || !children.length) {
              return {}
            }
            var slots = {};
            for (var i = 0, l = children.length; i < l; i++) {
              var child = children[i];
              var data = child.data;
              // remove slot attribute if the node is resolved as a Vue slot node
              if (data && data.attrs && data.attrs.slot) {
                delete data.attrs.slot;
              }
              // named slots should only be respected if the vnode was rendered in the
              // same context.
              if ((child.context === context || child.fnContext === context) &&
                data && data.slot != null
              ) {
                var name = data.slot;
                var slot = (slots[name] || (slots[name] = []));
                if (child.tag === 'template') {
                  slot.push.apply(slot, child.children || []);
                } else {
                  slot.push(child);
                }
              } else {
                (slots.default || (slots.default = [])).push(child);
              }
            }
            // ignore slots that contains only whitespace
            for (var name$1 in slots) {
              if (slots[name$1].every(isWhitespace)) {
                delete slots[name$1];
              }
            }
            return slots
          }

          function isWhitespace (node) {
            return (node.isComment && !node.asyncFactory) || node.text === ' '
          }

          /*  */

          function isAsyncPlaceholder (node) {
            return node.isComment && node.asyncFactory
          }

          /*  */

          function normalizeScopedSlots (
            slots,
            normalSlots,
            prevSlots
          ) {
            var res;
            var hasNormalSlots = Object.keys(normalSlots).length > 0;
            var isStable = slots ? !!slots.$stable : !hasNormalSlots;
            var key = slots && slots.$key;
            if (!slots) {
              res = {};
            } else if (slots._normalized) {
              // fast path 1: child component re-render only, parent did not change
              return slots._normalized
            } else if (
              isStable &&
              prevSlots &&
              prevSlots !== emptyObject &&
              key === prevSlots.$key &&
              !hasNormalSlots &&
              !prevSlots.$hasNormal
            ) {
              // fast path 2: stable scoped slots w/ no normal slots to proxy,
              // only need to normalize once
              return prevSlots
            } else {
              res = {};
              for (var key$1 in slots) {
                if (slots[key$1] && key$1[0] !== '$') {
                  res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
                }
              }
            }
            // expose normal slots on scopedSlots
            for (var key$2 in normalSlots) {
              if (!(key$2 in res)) {
                res[key$2] = proxyNormalSlot(normalSlots, key$2);
              }
            }
            // avoriaz seems to mock a non-extensible $scopedSlots object
            // and when that is passed down this would cause an error
            if (slots && Object.isExtensible(slots)) {
              (slots)._normalized = res;
            }
            def(res, '$stable', isStable);
            def(res, '$key', key);
            def(res, '$hasNormal', hasNormalSlots);
            return res
          }

          function normalizeScopedSlot(normalSlots, key, fn) {
            var normalized = function () {
              var res = arguments.length ? fn.apply(null, arguments) : fn({});
              res = res && typeof res === 'object' && !Array.isArray(res)
                ? [res] // single vnode
                : normalizeChildren(res);
              var vnode = res && res[0];
              return res && (
                !vnode ||
                (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) // #9658, #10391
              ) ? undefined
                : res
            };
            // this is a slot using the new v-slot syntax without scope. although it is
            // compiled as a scoped slot, render fn users would expect it to be present
            // on this.$slots because the usage is semantically a normal slot.
            if (fn.proxy) {
              Object.defineProperty(normalSlots, key, {
                get: normalized,
                enumerable: true,
                configurable: true
              });
            }
            return normalized
          }

          function proxyNormalSlot(slots, key) {
            return function () { return slots[key]; }
          }

          /*  */

          /**
           * Runtime helper for rendering v-for lists.
           */
          function renderList (
            val,
            render
          ) {
            var ret, i, l, keys, key;
            if (Array.isArray(val) || typeof val === 'string') {
              ret = new Array(val.length);
              for (i = 0, l = val.length; i < l; i++) {
                ret[i] = render(val[i], i);
              }
            } else if (typeof val === 'number') {
              ret = new Array(val);
              for (i = 0; i < val; i++) {
                ret[i] = render(i + 1, i);
              }
            } else if (isObject(val)) {
              if (hasSymbol && val[Symbol.iterator]) {
                ret = [];
                var iterator = val[Symbol.iterator]();
                var result = iterator.next();
                while (!result.done) {
                  ret.push(render(result.value, ret.length));
                  result = iterator.next();
                }
              } else {
                keys = Object.keys(val);
                ret = new Array(keys.length);
                for (i = 0, l = keys.length; i < l; i++) {
                  key = keys[i];
                  ret[i] = render(val[key], key, i);
                }
              }
            }
            if (!isDef(ret)) {
              ret = [];
            }
            (ret)._isVList = true;
            return ret
          }

          /*  */

          /**
           * Runtime helper for rendering <slot>
           */
          function renderSlot (
            name,
            fallbackRender,
            props,
            bindObject
          ) {
            var scopedSlotFn = this.$scopedSlots[name];
            var nodes;
            if (scopedSlotFn) {
              // scoped slot
              props = props || {};
              if (bindObject) {
                if (false) {}
                props = extend(extend({}, bindObject), props);
              }
              nodes =
                scopedSlotFn(props) ||
                (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
            } else {
              nodes =
                this.$slots[name] ||
                (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
            }

            var target = props && props.slot;
            if (target) {
              return this.$createElement('template', { slot: target }, nodes)
            } else {
              return nodes
            }
          }

          /*  */

          /**
           * Runtime helper for resolving filters
           */
          function resolveFilter (id) {
            return resolveAsset(this.$options, 'filters', id, true) || identity
          }

          /*  */

          function isKeyNotMatch (expect, actual) {
            if (Array.isArray(expect)) {
              return expect.indexOf(actual) === -1
            } else {
              return expect !== actual
            }
          }

          /**
           * Runtime helper for checking keyCodes from config.
           * exposed as Vue.prototype._k
           * passing in eventKeyName as last argument separately for backwards compat
           */
          function checkKeyCodes (
            eventKeyCode,
            key,
            builtInKeyCode,
            eventKeyName,
            builtInKeyName
          ) {
            var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
            if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
              return isKeyNotMatch(builtInKeyName, eventKeyName)
            } else if (mappedKeyCode) {
              return isKeyNotMatch(mappedKeyCode, eventKeyCode)
            } else if (eventKeyName) {
              return hyphenate(eventKeyName) !== key
            }
            return eventKeyCode === undefined
          }

          /*  */

          /**
           * Runtime helper for merging v-bind="object" into a VNode's data.
           */
          function bindObjectProps (
            data,
            tag,
            value,
            asProp,
            isSync
          ) {
            if (value) {
              if (!isObject(value)) {
                false && false;
              } else {
                if (Array.isArray(value)) {
                  value = toObject(value);
                }
                var hash;
                var loop = function ( key ) {
                  if (
                    key === 'class' ||
                    key === 'style' ||
                    isReservedAttribute(key)
                  ) {
                    hash = data;
                  } else {
                    var type = data.attrs && data.attrs.type;
                    hash = asProp || config.mustUseProp(tag, type, key)
                      ? data.domProps || (data.domProps = {})
                      : data.attrs || (data.attrs = {});
                  }
                  var camelizedKey = camelize(key);
                  var hyphenatedKey = hyphenate(key);
                  if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
                    hash[key] = value[key];

                    if (isSync) {
                      var on = data.on || (data.on = {});
                      on[("update:" + key)] = function ($event) {
                        value[key] = $event;
                      };
                    }
                  }
                };

                for (var key in value) loop( key );
              }
            }
            return data
          }

          /*  */

          /**
           * Runtime helper for rendering static trees.
           */
          function renderStatic (
            index,
            isInFor
          ) {
            var cached = this._staticTrees || (this._staticTrees = []);
            var tree = cached[index];
            // if has already-rendered static tree and not inside v-for,
            // we can reuse the same tree.
            if (tree && !isInFor) {
              return tree
            }
            // otherwise, render a fresh tree.
            tree = cached[index] = this.$options.staticRenderFns[index].call(
              this._renderProxy,
              null,
              this // for render fns generated for functional component templates
            );
            markStatic(tree, ("__static__" + index), false);
            return tree
          }

          /**
           * Runtime helper for v-once.
           * Effectively it means marking the node as static with a unique key.
           */
          function markOnce (
            tree,
            index,
            key
          ) {
            markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
            return tree
          }

          function markStatic (
            tree,
            key,
            isOnce
          ) {
            if (Array.isArray(tree)) {
              for (var i = 0; i < tree.length; i++) {
                if (tree[i] && typeof tree[i] !== 'string') {
                  markStaticNode(tree[i], (key + "_" + i), isOnce);
                }
              }
            } else {
              markStaticNode(tree, key, isOnce);
            }
          }

          function markStaticNode (node, key, isOnce) {
            node.isStatic = true;
            node.key = key;
            node.isOnce = isOnce;
          }

          /*  */

          function bindObjectListeners (data, value) {
            if (value) {
              if (!isPlainObject(value)) {
                false && false;
              } else {
                var on = data.on = data.on ? extend({}, data.on) : {};
                for (var key in value) {
                  var existing = on[key];
                  var ours = value[key];
                  on[key] = existing ? [].concat(existing, ours) : ours;
                }
              }
            }
            return data
          }

          /*  */

          function resolveScopedSlots (
            fns, // see flow/vnode
            res,
            // the following are added in 2.6
            hasDynamicKeys,
            contentHashKey
          ) {
            res = res || { $stable: !hasDynamicKeys };
            for (var i = 0; i < fns.length; i++) {
              var slot = fns[i];
              if (Array.isArray(slot)) {
                resolveScopedSlots(slot, res, hasDynamicKeys);
              } else if (slot) {
                // marker for reverse proxying v-slot without scope on this.$slots
                if (slot.proxy) {
                  slot.fn.proxy = true;
                }
                res[slot.key] = slot.fn;
              }
            }
            if (contentHashKey) {
              (res).$key = contentHashKey;
            }
            return res
          }

          /*  */

          function bindDynamicKeys (baseObj, values) {
            for (var i = 0; i < values.length; i += 2) {
              var key = values[i];
              if (typeof key === 'string' && key) {
                baseObj[values[i]] = values[i + 1];
              } else if (false) {}
            }
            return baseObj
          }

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
          function prependModifier (value, symbol) {
            return typeof value === 'string' ? symbol + value : value
          }

          /*  */

          function installRenderHelpers (target) {
            target._o = markOnce;
            target._n = toNumber;
            target._s = toString;
            target._l = renderList;
            target._t = renderSlot;
            target._q = looseEqual;
            target._i = looseIndexOf;
            target._m = renderStatic;
            target._f = resolveFilter;
            target._k = checkKeyCodes;
            target._b = bindObjectProps;
            target._v = createTextVNode;
            target._e = createEmptyVNode;
            target._u = resolveScopedSlots;
            target._g = bindObjectListeners;
            target._d = bindDynamicKeys;
            target._p = prependModifier;
          }

          /*  */

          function FunctionalRenderContext (
            data,
            props,
            children,
            parent,
            Ctor
          ) {
            var this$1 = this;

            var options = Ctor.options;
            // ensure the createElement function in functional components
            // gets a unique context - this is necessary for correct named slot check
            var contextVm;
            if (hasOwn(parent, '_uid')) {
              contextVm = Object.create(parent);
              // $flow-disable-line
              contextVm._original = parent;
            } else {
              // the context vm passed in is a functional context as well.
              // in this case we want to make sure we are able to get a hold to the
              // real context instance.
              contextVm = parent;
              // $flow-disable-line
              parent = parent._original;
            }
            var isCompiled = isTrue(options._compiled);
            var needNormalization = !isCompiled;

            this.data = data;
            this.props = props;
            this.children = children;
            this.parent = parent;
            this.listeners = data.on || emptyObject;
            this.injections = resolveInject(options.inject, parent);
            this.slots = function () {
              if (!this$1.$slots) {
                normalizeScopedSlots(
                  data.scopedSlots,
                  this$1.$slots = resolveSlots(children, parent)
                );
              }
              return this$1.$slots
            };

            Object.defineProperty(this, 'scopedSlots', ({
              enumerable: true,
              get: function get () {
                return normalizeScopedSlots(data.scopedSlots, this.slots())
              }
            }));

            // support for compiled functional template
            if (isCompiled) {
              // exposing $options for renderStatic()
              this.$options = options;
              // pre-resolve slots for renderSlot()
              this.$slots = this.slots();
              this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
            }

            if (options._scopeId) {
              this._c = function (a, b, c, d) {
                var vnode = createElement(contextVm, a, b, c, d, needNormalization);
                if (vnode && !Array.isArray(vnode)) {
                  vnode.fnScopeId = options._scopeId;
                  vnode.fnContext = parent;
                }
                return vnode
              };
            } else {
              this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
            }
          }

          installRenderHelpers(FunctionalRenderContext.prototype);

          function createFunctionalComponent (
            Ctor,
            propsData,
            data,
            contextVm,
            children
          ) {
            var options = Ctor.options;
            var props = {};
            var propOptions = options.props;
            if (isDef(propOptions)) {
              for (var key in propOptions) {
                props[key] = validateProp(key, propOptions, propsData || emptyObject);
              }
            } else {
              if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
              if (isDef(data.props)) { mergeProps(props, data.props); }
            }

            var renderContext = new FunctionalRenderContext(
              data,
              props,
              children,
              contextVm,
              Ctor
            );

            var vnode = options.render.call(null, renderContext._c, renderContext);

            if (vnode instanceof VNode) {
              return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
            } else if (Array.isArray(vnode)) {
              var vnodes = normalizeChildren(vnode) || [];
              var res = new Array(vnodes.length);
              for (var i = 0; i < vnodes.length; i++) {
                res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
              }
              return res
            }
          }

          function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
            // #7817 clone node before setting fnContext, otherwise if the node is reused
            // (e.g. it was from a cached normal slot) the fnContext causes named slots
            // that should not be matched to match.
            var clone = cloneVNode(vnode);
            clone.fnContext = contextVm;
            clone.fnOptions = options;
            if (false) {}
            if (data.slot) {
              (clone.data || (clone.data = {})).slot = data.slot;
            }
            return clone
          }

          function mergeProps (to, from) {
            for (var key in from) {
              to[camelize(key)] = from[key];
            }
          }

          /*  */

          /*  */

          /*  */

          /*  */

// inline hooks to be invoked on component VNodes during patch
          var componentVNodeHooks = {
            init: function init (vnode, hydrating) {
              if (
                vnode.componentInstance &&
                !vnode.componentInstance._isDestroyed &&
                vnode.data.keepAlive
              ) {
                // kept-alive components, treat as a patch
                var mountedNode = vnode; // work around flow
                componentVNodeHooks.prepatch(mountedNode, mountedNode);
              } else {
                var child = vnode.componentInstance = createComponentInstanceForVnode(
                  vnode,
                  activeInstance
                );
                child.$mount(hydrating ? vnode.elm : undefined, hydrating);
              }
            },

            prepatch: function prepatch (oldVnode, vnode) {
              var options = vnode.componentOptions;
              var child = vnode.componentInstance = oldVnode.componentInstance;
              updateChildComponent(
                child,
                options.propsData, // updated props
                options.listeners, // updated listeners
                vnode, // new parent vnode
                options.children // new children
              );
            },

            insert: function insert (vnode) {
              var context = vnode.context;
              var componentInstance = vnode.componentInstance;
              if (!componentInstance._isMounted) {
                componentInstance._isMounted = true;
                callHook(componentInstance, 'mounted');
              }
              if (vnode.data.keepAlive) {
                if (context._isMounted) {
                  // vue-router#1212
                  // During updates, a kept-alive component's child components may
                  // change, so directly walking the tree here may call activated hooks
                  // on incorrect children. Instead we push them into a queue which will
                  // be processed after the whole patch process ended.
                  queueActivatedComponent(componentInstance);
                } else {
                  activateChildComponent(componentInstance, true /* direct */);
                }
              }
            },

            destroy: function destroy (vnode) {
              var componentInstance = vnode.componentInstance;
              if (!componentInstance._isDestroyed) {
                if (!vnode.data.keepAlive) {
                  componentInstance.$destroy();
                } else {
                  deactivateChildComponent(componentInstance, true /* direct */);
                }
              }
            }
          };

          var hooksToMerge = Object.keys(componentVNodeHooks);

          function createComponent (
            Ctor,
            data,
            context,
            children,
            tag
          ) {
            if (isUndef(Ctor)) {
              return
            }

            var baseCtor = context.$options._base;

            // plain options object: turn it into a constructor
            if (isObject(Ctor)) {
              Ctor = baseCtor.extend(Ctor);
            }

            // if at this stage it's not a constructor or an async component factory,
            // reject.
            if (typeof Ctor !== 'function') {
              if (false) {}
              return
            }

            // async component
            var asyncFactory;
            if (isUndef(Ctor.cid)) {
              asyncFactory = Ctor;
              Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
              if (Ctor === undefined) {
                // return a placeholder node for async component, which is rendered
                // as a comment node but preserves all the raw information for the node.
                // the information will be used for async server-rendering and hydration.
                return createAsyncPlaceholder(
                  asyncFactory,
                  data,
                  context,
                  children,
                  tag
                )
              }
            }

            data = data || {};

            // resolve constructor options in case global mixins are applied after
            // component constructor creation
            resolveConstructorOptions(Ctor);

            // transform component v-model data into props & events
            if (isDef(data.model)) {
              transformModel(Ctor.options, data);
            }

            // extract props
            var propsData = extractPropsFromVNodeData(data, Ctor, tag);

            // functional component
            if (isTrue(Ctor.options.functional)) {
              return createFunctionalComponent(Ctor, propsData, data, context, children)
            }

            // extract listeners, since these needs to be treated as
            // child component listeners instead of DOM listeners
            var listeners = data.on;
            // replace with listeners with .native modifier
            // so it gets processed during parent component patch.
            data.on = data.nativeOn;

            if (isTrue(Ctor.options.abstract)) {
              // abstract components do not keep anything
              // other than props & listeners & slot

              // work around flow
              var slot = data.slot;
              data = {};
              if (slot) {
                data.slot = slot;
              }
            }

            // install component management hooks onto the placeholder node
            installComponentHooks(data);

            // return a placeholder vnode
            var name = Ctor.options.name || tag;
            var vnode = new VNode(
              ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
              data, undefined, undefined, undefined, context,
              { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
              asyncFactory
            );

            return vnode
          }

          function createComponentInstanceForVnode (
            // we know it's MountedComponentVNode but flow doesn't
            vnode,
            // activeInstance in lifecycle state
            parent
          ) {
            var options = {
              _isComponent: true,
              _parentVnode: vnode,
              parent: parent
            };
            // check inline-template render functions
            var inlineTemplate = vnode.data.inlineTemplate;
            if (isDef(inlineTemplate)) {
              options.render = inlineTemplate.render;
              options.staticRenderFns = inlineTemplate.staticRenderFns;
            }
            return new vnode.componentOptions.Ctor(options)
          }

          function installComponentHooks (data) {
            var hooks = data.hook || (data.hook = {});
            for (var i = 0; i < hooksToMerge.length; i++) {
              var key = hooksToMerge[i];
              var existing = hooks[key];
              var toMerge = componentVNodeHooks[key];
              if (existing !== toMerge && !(existing && existing._merged)) {
                hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
              }
            }
          }

          function mergeHook$1 (f1, f2) {
            var merged = function (a, b) {
              // flow complains about extra args which is why we use any
              f1(a, b);
              f2(a, b);
            };
            merged._merged = true;
            return merged
          }

// transform component v-model info (value and callback) into
// prop and event handler respectively.
          function transformModel (options, data) {
            var prop = (options.model && options.model.prop) || 'value';
            var event = (options.model && options.model.event) || 'input'
            ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
            var on = data.on || (data.on = {});
            var existing = on[event];
            var callback = data.model.callback;
            if (isDef(existing)) {
              if (
                Array.isArray(existing)
                  ? existing.indexOf(callback) === -1
                  : existing !== callback
              ) {
                on[event] = [callback].concat(existing);
              }
            } else {
              on[event] = callback;
            }
          }

          /*  */

          var SIMPLE_NORMALIZE = 1;
          var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
          function createElement (
            context,
            tag,
            data,
            children,
            normalizationType,
            alwaysNormalize
          ) {
            if (Array.isArray(data) || isPrimitive(data)) {
              normalizationType = children;
              children = data;
              data = undefined;
            }
            if (isTrue(alwaysNormalize)) {
              normalizationType = ALWAYS_NORMALIZE;
            }
            return _createElement(context, tag, data, children, normalizationType)
          }

          function _createElement (
            context,
            tag,
            data,
            children,
            normalizationType
          ) {
            if (isDef(data) && isDef((data).__ob__)) {
              false && false;
              return createEmptyVNode()
            }
            // object syntax in v-bind
            if (isDef(data) && isDef(data.is)) {
              tag = data.is;
            }
            if (!tag) {
              // in case of component :is set to falsy value
              return createEmptyVNode()
            }
            // warn against non-primitive key
            if (false
            ) {}
            // support single function children as default scoped slot
            if (Array.isArray(children) &&
              typeof children[0] === 'function'
            ) {
              data = data || {};
              data.scopedSlots = { default: children[0] };
              children.length = 0;
            }
            if (normalizationType === ALWAYS_NORMALIZE) {
              children = normalizeChildren(children);
            } else if (normalizationType === SIMPLE_NORMALIZE) {
              children = simpleNormalizeChildren(children);
            }
            var vnode, ns;
            if (typeof tag === 'string') {
              var Ctor;
              ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
              if (config.isReservedTag(tag)) {
                // platform built-in elements
                if (false) {}
                vnode = new VNode(
                  config.parsePlatformTagName(tag), data, children,
                  undefined, undefined, context
                );
              } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
                // component
                vnode = createComponent(Ctor, data, context, children, tag);
              } else {
                // unknown or unlisted namespaced elements
                // check at runtime because it may get assigned a namespace when its
                // parent normalizes children
                vnode = new VNode(
                  tag, data, children,
                  undefined, undefined, context
                );
              }
            } else {
              // direct component options / constructor
              vnode = createComponent(tag, data, context, children);
            }
            if (Array.isArray(vnode)) {
              return vnode
            } else if (isDef(vnode)) {
              if (isDef(ns)) { applyNS(vnode, ns); }
              if (isDef(data)) { registerDeepBindings(data); }
              return vnode
            } else {
              return createEmptyVNode()
            }
          }

          function applyNS (vnode, ns, force) {
            vnode.ns = ns;
            if (vnode.tag === 'foreignObject') {
              // use default namespace inside foreignObject
              ns = undefined;
              force = true;
            }
            if (isDef(vnode.children)) {
              for (var i = 0, l = vnode.children.length; i < l; i++) {
                var child = vnode.children[i];
                if (isDef(child.tag) && (
                  isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
                  applyNS(child, ns, force);
                }
              }
            }
          }

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
          function registerDeepBindings (data) {
            if (isObject(data.style)) {
              traverse(data.style);
            }
            if (isObject(data.class)) {
              traverse(data.class);
            }
          }

          /*  */

          function initRender (vm) {
            vm._vnode = null; // the root of the child tree
            vm._staticTrees = null; // v-once cached trees
            var options = vm.$options;
            var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
            var renderContext = parentVnode && parentVnode.context;
            vm.$slots = resolveSlots(options._renderChildren, renderContext);
            vm.$scopedSlots = emptyObject;
            // bind the createElement fn to this instance
            // so that we get proper render context inside it.
            // args order: tag, data, children, normalizationType, alwaysNormalize
            // internal version is used by render functions compiled from templates
            vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
            // normalization is always applied for the public version, used in
            // user-written render functions.
            vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

            // $attrs & $listeners are exposed for easier HOC creation.
            // they need to be reactive so that HOCs using them are always updated
            var parentData = parentVnode && parentVnode.data;

            /* istanbul ignore else */
            if (false) {} else {
              defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
              defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
            }
          }

          var currentRenderingInstance = null;

          function renderMixin (Vue) {
            // install runtime convenience helpers
            installRenderHelpers(Vue.prototype);

            Vue.prototype.$nextTick = function (fn) {
              return nextTick(fn, this)
            };

            Vue.prototype._render = function () {
              var vm = this;
              var ref = vm.$options;
              var render = ref.render;
              var _parentVnode = ref._parentVnode;

              if (_parentVnode) {
                vm.$scopedSlots = normalizeScopedSlots(
                  _parentVnode.data.scopedSlots,
                  vm.$slots,
                  vm.$scopedSlots
                );
              }

              // set parent vnode. this allows render functions to have access
              // to the data on the placeholder node.
              vm.$vnode = _parentVnode;
              // render self
              var vnode;
              try {
                // There's no need to maintain a stack because all render fns are called
                // separately from one another. Nested component's render fns are called
                // when parent component is patched.
                currentRenderingInstance = vm;
                vnode = render.call(vm._renderProxy, vm.$createElement);
              } catch (e) {
                handleError(e, vm, "render");
                // return error render result,
                // or previous vnode to prevent render error causing blank component
                /* istanbul ignore else */
                if (false) {} else {
                  vnode = vm._vnode;
                }
              } finally {
                currentRenderingInstance = null;
              }
              // if the returned array contains only a single node, allow it
              if (Array.isArray(vnode) && vnode.length === 1) {
                vnode = vnode[0];
              }
              // return empty vnode in case the render function errored out
              if (!(vnode instanceof VNode)) {
                if (false) {}
                vnode = createEmptyVNode();
              }
              // set parent
              vnode.parent = _parentVnode;
              return vnode
            };
          }

          /*  */

          function ensureCtor (comp, base) {
            if (
              comp.__esModule ||
              (hasSymbol && comp[Symbol.toStringTag] === 'Module')
            ) {
              comp = comp.default;
            }
            return isObject(comp)
              ? base.extend(comp)
              : comp
          }

          function createAsyncPlaceholder (
            factory,
            data,
            context,
            children,
            tag
          ) {
            var node = createEmptyVNode();
            node.asyncFactory = factory;
            node.asyncMeta = { data: data, context: context, children: children, tag: tag };
            return node
          }

          function resolveAsyncComponent (
            factory,
            baseCtor
          ) {
            if (isTrue(factory.error) && isDef(factory.errorComp)) {
              return factory.errorComp
            }

            if (isDef(factory.resolved)) {
              return factory.resolved
            }

            var owner = currentRenderingInstance;
            if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
              // already pending
              factory.owners.push(owner);
            }

            if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
              return factory.loadingComp
            }

            if (owner && !isDef(factory.owners)) {
              var owners = factory.owners = [owner];
              var sync = true;
              var timerLoading = null;
              var timerTimeout = null

              ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

              var forceRender = function (renderCompleted) {
                for (var i = 0, l = owners.length; i < l; i++) {
                  (owners[i]).$forceUpdate();
                }

                if (renderCompleted) {
                  owners.length = 0;
                  if (timerLoading !== null) {
                    clearTimeout(timerLoading);
                    timerLoading = null;
                  }
                  if (timerTimeout !== null) {
                    clearTimeout(timerTimeout);
                    timerTimeout = null;
                  }
                }
              };

              var resolve = once(function (res) {
                // cache resolved
                factory.resolved = ensureCtor(res, baseCtor);
                // invoke callbacks only if this is not a synchronous resolve
                // (async resolves are shimmed as synchronous during SSR)
                if (!sync) {
                  forceRender(true);
                } else {
                  owners.length = 0;
                }
              });

              var reject = once(function (reason) {
                false && false;
                if (isDef(factory.errorComp)) {
                  factory.error = true;
                  forceRender(true);
                }
              });

              var res = factory(resolve, reject);

              if (isObject(res)) {
                if (isPromise(res)) {
                  // () => Promise
                  if (isUndef(factory.resolved)) {
                    res.then(resolve, reject);
                  }
                } else if (isPromise(res.component)) {
                  res.component.then(resolve, reject);

                  if (isDef(res.error)) {
                    factory.errorComp = ensureCtor(res.error, baseCtor);
                  }

                  if (isDef(res.loading)) {
                    factory.loadingComp = ensureCtor(res.loading, baseCtor);
                    if (res.delay === 0) {
                      factory.loading = true;
                    } else {
                      timerLoading = setTimeout(function () {
                        timerLoading = null;
                        if (isUndef(factory.resolved) && isUndef(factory.error)) {
                          factory.loading = true;
                          forceRender(false);
                        }
                      }, res.delay || 200);
                    }
                  }

                  if (isDef(res.timeout)) {
                    timerTimeout = setTimeout(function () {
                      timerTimeout = null;
                      if (isUndef(factory.resolved)) {
                        reject(
                          false
                            ? (undefined)
                            : null
                        );
                      }
                    }, res.timeout);
                  }
                }
              }

              sync = false;
              // return in case resolved synchronously
              return factory.loading
                ? factory.loadingComp
                : factory.resolved
            }
          }

          /*  */

          function getFirstComponentChild (children) {
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                var c = children[i];
                if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
                  return c
                }
              }
            }
          }

          /*  */

          /*  */

          function initEvents (vm) {
            vm._events = Object.create(null);
            vm._hasHookEvent = false;
            // init parent attached events
            var listeners = vm.$options._parentListeners;
            if (listeners) {
              updateComponentListeners(vm, listeners);
            }
          }

          var target;

          function add (event, fn) {
            target.$on(event, fn);
          }

          function remove$1 (event, fn) {
            target.$off(event, fn);
          }

          function createOnceHandler (event, fn) {
            var _target = target;
            return function onceHandler () {
              var res = fn.apply(null, arguments);
              if (res !== null) {
                _target.$off(event, onceHandler);
              }
            }
          }

          function updateComponentListeners (
            vm,
            listeners,
            oldListeners
          ) {
            target = vm;
            updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
            target = undefined;
          }

          function eventsMixin (Vue) {
            var hookRE = /^hook:/;
            Vue.prototype.$on = function (event, fn) {
              var vm = this;
              if (Array.isArray(event)) {
                for (var i = 0, l = event.length; i < l; i++) {
                  vm.$on(event[i], fn);
                }
              } else {
                (vm._events[event] || (vm._events[event] = [])).push(fn);
                // optimize hook:event cost by using a boolean flag marked at registration
                // instead of a hash lookup
                if (hookRE.test(event)) {
                  vm._hasHookEvent = true;
                }
              }
              return vm
            };

            Vue.prototype.$once = function (event, fn) {
              var vm = this;
              function on () {
                vm.$off(event, on);
                fn.apply(vm, arguments);
              }
              on.fn = fn;
              vm.$on(event, on);
              return vm
            };

            Vue.prototype.$off = function (event, fn) {
              var vm = this;
              // all
              if (!arguments.length) {
                vm._events = Object.create(null);
                return vm
              }
              // array of events
              if (Array.isArray(event)) {
                for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
                  vm.$off(event[i$1], fn);
                }
                return vm
              }
              // specific event
              var cbs = vm._events[event];
              if (!cbs) {
                return vm
              }
              if (!fn) {
                vm._events[event] = null;
                return vm
              }
              // specific handler
              var cb;
              var i = cbs.length;
              while (i--) {
                cb = cbs[i];
                if (cb === fn || cb.fn === fn) {
                  cbs.splice(i, 1);
                  break
                }
              }
              return vm
            };

            Vue.prototype.$emit = function (event) {
              var vm = this;
              if (false) { var lowerCaseEvent; }
              var cbs = vm._events[event];
              if (cbs) {
                cbs = cbs.length > 1 ? toArray(cbs) : cbs;
                var args = toArray(arguments, 1);
                var info = "event handler for \"" + event + "\"";
                for (var i = 0, l = cbs.length; i < l; i++) {
                  invokeWithErrorHandling(cbs[i], vm, args, vm, info);
                }
              }
              return vm
            };
          }

          /*  */

          var activeInstance = null;
          var isUpdatingChildComponent = false;

          function setActiveInstance(vm) {
            var prevActiveInstance = activeInstance;
            activeInstance = vm;
            return function () {
              activeInstance = prevActiveInstance;
            }
          }

          function initLifecycle (vm) {
            var options = vm.$options;

            // locate first non-abstract parent
            var parent = options.parent;
            if (parent && !options.abstract) {
              while (parent.$options.abstract && parent.$parent) {
                parent = parent.$parent;
              }
              parent.$children.push(vm);
            }

            vm.$parent = parent;
            vm.$root = parent ? parent.$root : vm;

            vm.$children = [];
            vm.$refs = {};

            vm._watcher = null;
            vm._inactive = null;
            vm._directInactive = false;
            vm._isMounted = false;
            vm._isDestroyed = false;
            vm._isBeingDestroyed = false;
          }

          function lifecycleMixin (Vue) {
            Vue.prototype._update = function (vnode, hydrating) {
              var vm = this;
              var prevEl = vm.$el;
              var prevVnode = vm._vnode;
              var restoreActiveInstance = setActiveInstance(vm);
              vm._vnode = vnode;
              // Vue.prototype.__patch__ is injected in entry points
              // based on the rendering backend used.
              if (!prevVnode) {
                // initial render
                vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
              } else {
                // updates
                vm.$el = vm.__patch__(prevVnode, vnode);
              }
              restoreActiveInstance();
              // update __vue__ reference
              if (prevEl) {
                prevEl.__vue__ = null;
              }
              if (vm.$el) {
                vm.$el.__vue__ = vm;
              }
              // if parent is an HOC, update its $el as well
              if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
                vm.$parent.$el = vm.$el;
              }
              // updated hook is called by the scheduler to ensure that children are
              // updated in a parent's updated hook.
            };

            Vue.prototype.$forceUpdate = function () {
              var vm = this;
              if (vm._watcher) {
                vm._watcher.update();
              }
            };

            Vue.prototype.$destroy = function () {
              var vm = this;
              if (vm._isBeingDestroyed) {
                return
              }
              callHook(vm, 'beforeDestroy');
              vm._isBeingDestroyed = true;
              // remove self from parent
              var parent = vm.$parent;
              if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
                remove(parent.$children, vm);
              }
              // teardown watchers
              if (vm._watcher) {
                vm._watcher.teardown();
              }
              var i = vm._watchers.length;
              while (i--) {
                vm._watchers[i].teardown();
              }
              // remove reference from data ob
              // frozen object may not have observer.
              if (vm._data.__ob__) {
                vm._data.__ob__.vmCount--;
              }
              // call the last hook...
              vm._isDestroyed = true;
              // invoke destroy hooks on current rendered tree
              vm.__patch__(vm._vnode, null);
              // fire destroyed hook
              callHook(vm, 'destroyed');
              // turn off all instance listeners.
              vm.$off();
              // remove __vue__ reference
              if (vm.$el) {
                vm.$el.__vue__ = null;
              }
              // release circular reference (#6759)
              if (vm.$vnode) {
                vm.$vnode.parent = null;
              }
            };
          }

          function mountComponent (
            vm,
            el,
            hydrating
          ) {
            vm.$el = el;
            if (!vm.$options.render) {
              vm.$options.render = createEmptyVNode;
              if (false) {}
            }
            callHook(vm, 'beforeMount');

            var updateComponent;
            /* istanbul ignore if */
            if (false) {} else {
              updateComponent = function () {
                vm._update(vm._render(), hydrating);
              };
            }

            // we set this to vm._watcher inside the watcher's constructor
            // since the watcher's initial patch may call $forceUpdate (e.g. inside child
            // component's mounted hook), which relies on vm._watcher being already defined
            new Watcher(vm, updateComponent, noop, {
              before: function before () {
                if (vm._isMounted && !vm._isDestroyed) {
                  callHook(vm, 'beforeUpdate');
                }
              }
            }, true /* isRenderWatcher */);
            hydrating = false;

            // manually mounted instance, call mounted on self
            // mounted is called for render-created child components in its inserted hook
            if (vm.$vnode == null) {
              vm._isMounted = true;
              callHook(vm, 'mounted');
            }
            return vm
          }

          function updateChildComponent (
            vm,
            propsData,
            listeners,
            parentVnode,
            renderChildren
          ) {
            if (false) {}

            // determine whether component has slot children
            // we need to do this before overwriting $options._renderChildren.

            // check if there are dynamic scopedSlots (hand-written or compiled but with
            // dynamic slot names). Static scoped slots compiled from template has the
            // "$stable" marker.
            var newScopedSlots = parentVnode.data.scopedSlots;
            var oldScopedSlots = vm.$scopedSlots;
            var hasDynamicScopedSlot = !!(
              (newScopedSlots && !newScopedSlots.$stable) ||
              (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
              (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||
              (!newScopedSlots && vm.$scopedSlots.$key)
            );

            // Any static slot children from the parent may have changed during parent's
            // update. Dynamic scoped slots may also have changed. In such cases, a forced
            // update is necessary to ensure correctness.
            var needsForceUpdate = !!(
              renderChildren ||               // has new static slots
              vm.$options._renderChildren ||  // has old static slots
              hasDynamicScopedSlot
            );

            vm.$options._parentVnode = parentVnode;
            vm.$vnode = parentVnode; // update vm's placeholder node without re-render

            if (vm._vnode) { // update child tree's parent
              vm._vnode.parent = parentVnode;
            }
            vm.$options._renderChildren = renderChildren;

            // update $attrs and $listeners hash
            // these are also reactive so they may trigger child update if the child
            // used them during render
            vm.$attrs = parentVnode.data.attrs || emptyObject;
            vm.$listeners = listeners || emptyObject;

            // update props
            if (propsData && vm.$options.props) {
              toggleObserving(false);
              var props = vm._props;
              var propKeys = vm.$options._propKeys || [];
              for (var i = 0; i < propKeys.length; i++) {
                var key = propKeys[i];
                var propOptions = vm.$options.props; // wtf flow?
                props[key] = validateProp(key, propOptions, propsData, vm);
              }
              toggleObserving(true);
              // keep a copy of raw propsData
              vm.$options.propsData = propsData;
            }

            // update listeners
            listeners = listeners || emptyObject;
            var oldListeners = vm.$options._parentListeners;
            vm.$options._parentListeners = listeners;
            updateComponentListeners(vm, listeners, oldListeners);

            // resolve slots + force update if has children
            if (needsForceUpdate) {
              vm.$slots = resolveSlots(renderChildren, parentVnode.context);
              vm.$forceUpdate();
            }

            if (false) {}
          }

          function isInInactiveTree (vm) {
            while (vm && (vm = vm.$parent)) {
              if (vm._inactive) { return true }
            }
            return false
          }

          function activateChildComponent (vm, direct) {
            if (direct) {
              vm._directInactive = false;
              if (isInInactiveTree(vm)) {
                return
              }
            } else if (vm._directInactive) {
              return
            }
            if (vm._inactive || vm._inactive === null) {
              vm._inactive = false;
              for (var i = 0; i < vm.$children.length; i++) {
                activateChildComponent(vm.$children[i]);
              }
              callHook(vm, 'activated');
            }
          }

          function deactivateChildComponent (vm, direct) {
            if (direct) {
              vm._directInactive = true;
              if (isInInactiveTree(vm)) {
                return
              }
            }
            if (!vm._inactive) {
              vm._inactive = true;
              for (var i = 0; i < vm.$children.length; i++) {
                deactivateChildComponent(vm.$children[i]);
              }
              callHook(vm, 'deactivated');
            }
          }

          function callHook (vm, hook) {
            // #7573 disable dep collection when invoking lifecycle hooks
            pushTarget();
            var handlers = vm.$options[hook];
            var info = hook + " hook";
            if (handlers) {
              for (var i = 0, j = handlers.length; i < j; i++) {
                invokeWithErrorHandling(handlers[i], vm, null, vm, info);
              }
            }
            if (vm._hasHookEvent) {
              vm.$emit('hook:' + hook);
            }
            popTarget();
          }

          /*  */

          var MAX_UPDATE_COUNT = 100;

          var queue = [];
          var activatedChildren = [];
          var has = {};
          var circular = {};
          var waiting = false;
          var flushing = false;
          var index = 0;

          /**
           * Reset the scheduler's state.
           */
          function resetSchedulerState () {
            index = queue.length = activatedChildren.length = 0;
            has = {};
            if (false) {}
            waiting = flushing = false;
          }

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
          var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
          var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
          if (inBrowser && !isIE) {
            var performance = window.performance;
            if (
              performance &&
              typeof performance.now === 'function' &&
              getNow() > document.createEvent('Event').timeStamp
            ) {
              // if the event timestamp, although evaluated AFTER the Date.now(), is
              // smaller than it, it means the event is using a hi-res timestamp,
              // and we need to use the hi-res version for event listener timestamps as
              // well.
              getNow = function () { return performance.now(); };
            }
          }

          /**
           * Flush both queues and run the watchers.
           */
          function flushSchedulerQueue () {
            currentFlushTimestamp = getNow();
            flushing = true;
            var watcher, id;

            // Sort queue before flush.
            // This ensures that:
            // 1. Components are updated from parent to child. (because parent is always
            //    created before the child)
            // 2. A component's user watchers are run before its render watcher (because
            //    user watchers are created before the render watcher)
            // 3. If a component is destroyed during a parent component's watcher run,
            //    its watchers can be skipped.
            queue.sort(function (a, b) { return a.id - b.id; });

            // do not cache length because more watchers might be pushed
            // as we run existing watchers
            for (index = 0; index < queue.length; index++) {
              watcher = queue[index];
              if (watcher.before) {
                watcher.before();
              }
              id = watcher.id;
              has[id] = null;
              watcher.run();
              // in dev build, check and stop circular updates.
              if (false) {}
            }

            // keep copies of post queues before resetting state
            var activatedQueue = activatedChildren.slice();
            var updatedQueue = queue.slice();

            resetSchedulerState();

            // call component updated and activated hooks
            callActivatedHooks(activatedQueue);
            callUpdatedHooks(updatedQueue);

            // devtool hook
            /* istanbul ignore if */
            if (devtools && config.devtools) {
              devtools.emit('flush');
            }
          }

          function callUpdatedHooks (queue) {
            var i = queue.length;
            while (i--) {
              var watcher = queue[i];
              var vm = watcher.vm;
              if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
                callHook(vm, 'updated');
              }
            }
          }

          /**
           * Queue a kept-alive component that was activated during patch.
           * The queue will be processed after the entire tree has been patched.
           */
          function queueActivatedComponent (vm) {
            // setting _inactive to false here so that a render function can
            // rely on checking whether it's in an inactive tree (e.g. router-view)
            vm._inactive = false;
            activatedChildren.push(vm);
          }

          function callActivatedHooks (queue) {
            for (var i = 0; i < queue.length; i++) {
              queue[i]._inactive = true;
              activateChildComponent(queue[i], true /* true */);
            }
          }

          /**
           * Push a watcher into the watcher queue.
           * Jobs with duplicate IDs will be skipped unless it's
           * pushed when the queue is being flushed.
           */
          function queueWatcher (watcher) {
            var id = watcher.id;
            if (has[id] == null) {
              has[id] = true;
              if (!flushing) {
                queue.push(watcher);
              } else {
                // if already flushing, splice the watcher based on its id
                // if already past its id, it will be run next immediately.
                var i = queue.length - 1;
                while (i > index && queue[i].id > watcher.id) {
                  i--;
                }
                queue.splice(i + 1, 0, watcher);
              }
              // queue the flush
              if (!waiting) {
                waiting = true;

                if (false) {}
                nextTick(flushSchedulerQueue);
              }
            }
          }

          /*  */



          var uid$2 = 0;

          /**
           * A watcher parses an expression, collects dependencies,
           * and fires callback when the expression value changes.
           * This is used for both the $watch() api and directives.
           */
          var Watcher = function Watcher (
            vm,
            expOrFn,
            cb,
            options,
            isRenderWatcher
          ) {
            this.vm = vm;
            if (isRenderWatcher) {
              vm._watcher = this;
            }
            vm._watchers.push(this);
            // options
            if (options) {
              this.deep = !!options.deep;
              this.user = !!options.user;
              this.lazy = !!options.lazy;
              this.sync = !!options.sync;
              this.before = options.before;
            } else {
              this.deep = this.user = this.lazy = this.sync = false;
            }
            this.cb = cb;
            this.id = ++uid$2; // uid for batching
            this.active = true;
            this.dirty = this.lazy; // for lazy watchers
            this.deps = [];
            this.newDeps = [];
            this.depIds = new _Set();
            this.newDepIds = new _Set();
            this.expression =  false
              ? undefined
              : '';
            // parse expression for getter
            if (typeof expOrFn === 'function') {
              this.getter = expOrFn;
            } else {
              this.getter = parsePath(expOrFn);
              if (!this.getter) {
                this.getter = noop;
                false && false;
              }
            }
            this.value = this.lazy
              ? undefined
              : this.get();
          };

          /**
           * Evaluate the getter, and re-collect dependencies.
           */
          Watcher.prototype.get = function get () {
            pushTarget(this);
            var value;
            var vm = this.vm;
            try {
              value = this.getter.call(vm, vm);
            } catch (e) {
              if (this.user) {
                handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
              } else {
                throw e
              }
            } finally {
              // "touch" every property so they are all tracked as
              // dependencies for deep watching
              if (this.deep) {
                traverse(value);
              }
              popTarget();
              this.cleanupDeps();
            }
            return value
          };

          /**
           * Add a dependency to this directive.
           */
          Watcher.prototype.addDep = function addDep (dep) {
            var id = dep.id;
            if (!this.newDepIds.has(id)) {
              this.newDepIds.add(id);
              this.newDeps.push(dep);
              if (!this.depIds.has(id)) {
                dep.addSub(this);
              }
            }
          };

          /**
           * Clean up for dependency collection.
           */
          Watcher.prototype.cleanupDeps = function cleanupDeps () {
            var i = this.deps.length;
            while (i--) {
              var dep = this.deps[i];
              if (!this.newDepIds.has(dep.id)) {
                dep.removeSub(this);
              }
            }
            var tmp = this.depIds;
            this.depIds = this.newDepIds;
            this.newDepIds = tmp;
            this.newDepIds.clear();
            tmp = this.deps;
            this.deps = this.newDeps;
            this.newDeps = tmp;
            this.newDeps.length = 0;
          };

          /**
           * Subscriber interface.
           * Will be called when a dependency changes.
           */
          Watcher.prototype.update = function update () {
            /* istanbul ignore else */
            if (this.lazy) {
              this.dirty = true;
            } else if (this.sync) {
              this.run();
            } else {
              queueWatcher(this);
            }
          };

          /**
           * Scheduler job interface.
           * Will be called by the scheduler.
           */
          Watcher.prototype.run = function run () {
            if (this.active) {
              var value = this.get();
              if (
                value !== this.value ||
                // Deep watchers and watchers on Object/Arrays should fire even
                // when the value is the same, because the value may
                // have mutated.
                isObject(value) ||
                this.deep
              ) {
                // set new value
                var oldValue = this.value;
                this.value = value;
                if (this.user) {
                  var info = "callback for watcher \"" + (this.expression) + "\"";
                  invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
                } else {
                  this.cb.call(this.vm, value, oldValue);
                }
              }
            }
          };

          /**
           * Evaluate the value of the watcher.
           * This only gets called for lazy watchers.
           */
          Watcher.prototype.evaluate = function evaluate () {
            this.value = this.get();
            this.dirty = false;
          };

          /**
           * Depend on all deps collected by this watcher.
           */
          Watcher.prototype.depend = function depend () {
            var i = this.deps.length;
            while (i--) {
              this.deps[i].depend();
            }
          };

          /**
           * Remove self from all dependencies' subscriber list.
           */
          Watcher.prototype.teardown = function teardown () {
            if (this.active) {
              // remove self from vm's watcher list
              // this is a somewhat expensive operation so we skip it
              // if the vm is being destroyed.
              if (!this.vm._isBeingDestroyed) {
                remove(this.vm._watchers, this);
              }
              var i = this.deps.length;
              while (i--) {
                this.deps[i].removeSub(this);
              }
              this.active = false;
            }
          };

          /*  */

          var sharedPropertyDefinition = {
            enumerable: true,
            configurable: true,
            get: noop,
            set: noop
          };

          function proxy (target, sourceKey, key) {
            sharedPropertyDefinition.get = function proxyGetter () {
              return this[sourceKey][key]
            };
            sharedPropertyDefinition.set = function proxySetter (val) {
              this[sourceKey][key] = val;
            };
            Object.defineProperty(target, key, sharedPropertyDefinition);
          }

          function initState (vm) {
            vm._watchers = [];
            var opts = vm.$options;
            if (opts.props) { initProps(vm, opts.props); }
            if (opts.methods) { initMethods(vm, opts.methods); }
            if (opts.data) {
              initData(vm);
            } else {
              observe(vm._data = {}, true /* asRootData */);
            }
            if (opts.computed) { initComputed(vm, opts.computed); }
            if (opts.watch && opts.watch !== nativeWatch) {
              initWatch(vm, opts.watch);
            }
          }

          function initProps (vm, propsOptions) {
            var propsData = vm.$options.propsData || {};
            var props = vm._props = {};
            // cache prop keys so that future props updates can iterate using Array
            // instead of dynamic object key enumeration.
            var keys = vm.$options._propKeys = [];
            var isRoot = !vm.$parent;
            // root instance props should be converted
            if (!isRoot) {
              toggleObserving(false);
            }
            var loop = function ( key ) {
              keys.push(key);
              var value = validateProp(key, propsOptions, propsData, vm);
              /* istanbul ignore else */
              if (false) { var hyphenatedKey; } else {
                defineReactive$$1(props, key, value);
              }
              // static props are already proxied on the component's prototype
              // during Vue.extend(). We only need to proxy props defined at
              // instantiation here.
              if (!(key in vm)) {
                proxy(vm, "_props", key);
              }
            };

            for (var key in propsOptions) loop( key );
            toggleObserving(true);
          }

          function initData (vm) {
            var data = vm.$options.data;
            data = vm._data = typeof data === 'function'
              ? getData(data, vm)
              : data || {};
            if (!isPlainObject(data)) {
              data = {};
              false && false;
            }
            // proxy data on instance
            var keys = Object.keys(data);
            var props = vm.$options.props;
            var methods = vm.$options.methods;
            var i = keys.length;
            while (i--) {
              var key = keys[i];
              if (false) {}
              if (props && hasOwn(props, key)) {
                false && false;
              } else if (!isReserved(key)) {
                proxy(vm, "_data", key);
              }
            }
            // observe data
            observe(data, true /* asRootData */);
          }

          function getData (data, vm) {
            // #7573 disable dep collection when invoking data getters
            pushTarget();
            try {
              return data.call(vm, vm)
            } catch (e) {
              handleError(e, vm, "data()");
              return {}
            } finally {
              popTarget();
            }
          }

          var computedWatcherOptions = { lazy: true };

          function initComputed (vm, computed) {
            // $flow-disable-line
            var watchers = vm._computedWatchers = Object.create(null);
            // computed properties are just getters during SSR
            var isSSR = isServerRendering();

            for (var key in computed) {
              var userDef = computed[key];
              var getter = typeof userDef === 'function' ? userDef : userDef.get;
              if (false) {}

              if (!isSSR) {
                // create internal watcher for the computed property.
                watchers[key] = new Watcher(
                  vm,
                  getter || noop,
                  noop,
                  computedWatcherOptions
                );
              }

              // component-defined computed properties are already defined on the
              // component prototype. We only need to define computed properties defined
              // at instantiation here.
              if (!(key in vm)) {
                defineComputed(vm, key, userDef);
              } else if (false) {}
            }
          }

          function defineComputed (
            target,
            key,
            userDef
          ) {
            var shouldCache = !isServerRendering();
            if (typeof userDef === 'function') {
              sharedPropertyDefinition.get = shouldCache
                ? createComputedGetter(key)
                : createGetterInvoker(userDef);
              sharedPropertyDefinition.set = noop;
            } else {
              sharedPropertyDefinition.get = userDef.get
                ? shouldCache && userDef.cache !== false
                  ? createComputedGetter(key)
                  : createGetterInvoker(userDef.get)
                : noop;
              sharedPropertyDefinition.set = userDef.set || noop;
            }
            if (false) {}
            Object.defineProperty(target, key, sharedPropertyDefinition);
          }

          function createComputedGetter (key) {
            return function computedGetter () {
              var watcher = this._computedWatchers && this._computedWatchers[key];
              if (watcher) {
                if (watcher.dirty) {
                  watcher.evaluate();
                }
                if (Dep.target) {
                  watcher.depend();
                }
                return watcher.value
              }
            }
          }

          function createGetterInvoker(fn) {
            return function computedGetter () {
              return fn.call(this, this)
            }
          }

          function initMethods (vm, methods) {
            var props = vm.$options.props;
            for (var key in methods) {
              if (false) {}
              vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
            }
          }

          function initWatch (vm, watch) {
            for (var key in watch) {
              var handler = watch[key];
              if (Array.isArray(handler)) {
                for (var i = 0; i < handler.length; i++) {
                  createWatcher(vm, key, handler[i]);
                }
              } else {
                createWatcher(vm, key, handler);
              }
            }
          }

          function createWatcher (
            vm,
            expOrFn,
            handler,
            options
          ) {
            if (isPlainObject(handler)) {
              options = handler;
              handler = handler.handler;
            }
            if (typeof handler === 'string') {
              handler = vm[handler];
            }
            return vm.$watch(expOrFn, handler, options)
          }

          function stateMixin (Vue) {
            // flow somehow has problems with directly declared definition object
            // when using Object.defineProperty, so we have to procedurally build up
            // the object here.
            var dataDef = {};
            dataDef.get = function () { return this._data };
            var propsDef = {};
            propsDef.get = function () { return this._props };
            if (false) {}
            Object.defineProperty(Vue.prototype, '$data', dataDef);
            Object.defineProperty(Vue.prototype, '$props', propsDef);

            Vue.prototype.$set = set;
            Vue.prototype.$delete = del;

            Vue.prototype.$watch = function (
              expOrFn,
              cb,
              options
            ) {
              var vm = this;
              if (isPlainObject(cb)) {
                return createWatcher(vm, expOrFn, cb, options)
              }
              options = options || {};
              options.user = true;
              var watcher = new Watcher(vm, expOrFn, cb, options);
              if (options.immediate) {
                var info = "callback for immediate watcher \"" + (watcher.expression) + "\"";
                pushTarget();
                invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
                popTarget();
              }
              return function unwatchFn () {
                watcher.teardown();
              }
            };
          }

          /*  */

          var uid$3 = 0;

          function initMixin (Vue) {
            Vue.prototype._init = function (options) {
              var vm = this;
              // a uid
              vm._uid = uid$3++;

              var startTag, endTag;
              /* istanbul ignore if */
              if (false) {}

              // a flag to avoid this being observed
              vm._isVue = true;
              // merge options
              if (options && options._isComponent) {
                // optimize internal component instantiation
                // since dynamic options merging is pretty slow, and none of the
                // internal component options needs special treatment.
                initInternalComponent(vm, options);
              } else {
                vm.$options = mergeOptions(
                  resolveConstructorOptions(vm.constructor),
                  options || {},
                  vm
                );
              }
              /* istanbul ignore else */
              if (false) {} else {
                vm._renderProxy = vm;
              }
              // expose real self
              vm._self = vm;
              initLifecycle(vm);
              initEvents(vm);
              initRender(vm);
              callHook(vm, 'beforeCreate');
              initInjections(vm); // resolve injections before data/props
              initState(vm);
              initProvide(vm); // resolve provide after data/props
              callHook(vm, 'created');

              /* istanbul ignore if */
              if (false) {}

              if (vm.$options.el) {
                vm.$mount(vm.$options.el);
              }
            };
          }

          function initInternalComponent (vm, options) {
            var opts = vm.$options = Object.create(vm.constructor.options);
            // doing this because it's faster than dynamic enumeration.
            var parentVnode = options._parentVnode;
            opts.parent = options.parent;
            opts._parentVnode = parentVnode;

            var vnodeComponentOptions = parentVnode.componentOptions;
            opts.propsData = vnodeComponentOptions.propsData;
            opts._parentListeners = vnodeComponentOptions.listeners;
            opts._renderChildren = vnodeComponentOptions.children;
            opts._componentTag = vnodeComponentOptions.tag;

            if (options.render) {
              opts.render = options.render;
              opts.staticRenderFns = options.staticRenderFns;
            }
          }

          function resolveConstructorOptions (Ctor) {
            var options = Ctor.options;
            if (Ctor.super) {
              var superOptions = resolveConstructorOptions(Ctor.super);
              var cachedSuperOptions = Ctor.superOptions;
              if (superOptions !== cachedSuperOptions) {
                // super option changed,
                // need to resolve new options.
                Ctor.superOptions = superOptions;
                // check if there are any late-modified/attached options (#4976)
                var modifiedOptions = resolveModifiedOptions(Ctor);
                // update base extend options
                if (modifiedOptions) {
                  extend(Ctor.extendOptions, modifiedOptions);
                }
                options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
                if (options.name) {
                  options.components[options.name] = Ctor;
                }
              }
            }
            return options
          }

          function resolveModifiedOptions (Ctor) {
            var modified;
            var latest = Ctor.options;
            var sealed = Ctor.sealedOptions;
            for (var key in latest) {
              if (latest[key] !== sealed[key]) {
                if (!modified) { modified = {}; }
                modified[key] = latest[key];
              }
            }
            return modified
          }

          function Vue (options) {
            if (false
            ) {}
            this._init(options);
          }

          initMixin(Vue);
          stateMixin(Vue);
          eventsMixin(Vue);
          lifecycleMixin(Vue);
          renderMixin(Vue);

          /*  */

          function initUse (Vue) {
            Vue.use = function (plugin) {
              var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
              if (installedPlugins.indexOf(plugin) > -1) {
                return this
              }

              // additional parameters
              var args = toArray(arguments, 1);
              args.unshift(this);
              if (typeof plugin.install === 'function') {
                plugin.install.apply(plugin, args);
              } else if (typeof plugin === 'function') {
                plugin.apply(null, args);
              }
              installedPlugins.push(plugin);
              return this
            };
          }

          /*  */

          function initMixin$1 (Vue) {
            Vue.mixin = function (mixin) {
              this.options = mergeOptions(this.options, mixin);
              return this
            };
          }

          /*  */

          function initExtend (Vue) {
            /**
             * Each instance constructor, including Vue, has a unique
             * cid. This enables us to create wrapped "child
             * constructors" for prototypal inheritance and cache them.
             */
            Vue.cid = 0;
            var cid = 1;

            /**
             * Class inheritance
             */
            Vue.extend = function (extendOptions) {
              extendOptions = extendOptions || {};
              var Super = this;
              var SuperId = Super.cid;
              var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
              if (cachedCtors[SuperId]) {
                return cachedCtors[SuperId]
              }

              var name = extendOptions.name || Super.options.name;
              if (false) {}

              var Sub = function VueComponent (options) {
                this._init(options);
              };
              Sub.prototype = Object.create(Super.prototype);
              Sub.prototype.constructor = Sub;
              Sub.cid = cid++;
              Sub.options = mergeOptions(
                Super.options,
                extendOptions
              );
              Sub['super'] = Super;

              // For props and computed properties, we define the proxy getters on
              // the Vue instances at extension time, on the extended prototype. This
              // avoids Object.defineProperty calls for each instance created.
              if (Sub.options.props) {
                initProps$1(Sub);
              }
              if (Sub.options.computed) {
                initComputed$1(Sub);
              }

              // allow further extension/mixin/plugin usage
              Sub.extend = Super.extend;
              Sub.mixin = Super.mixin;
              Sub.use = Super.use;

              // create asset registers, so extended classes
              // can have their private assets too.
              ASSET_TYPES.forEach(function (type) {
                Sub[type] = Super[type];
              });
              // enable recursive self-lookup
              if (name) {
                Sub.options.components[name] = Sub;
              }

              // keep a reference to the super options at extension time.
              // later at instantiation we can check if Super's options have
              // been updated.
              Sub.superOptions = Super.options;
              Sub.extendOptions = extendOptions;
              Sub.sealedOptions = extend({}, Sub.options);

              // cache constructor
              cachedCtors[SuperId] = Sub;
              return Sub
            };
          }

          function initProps$1 (Comp) {
            var props = Comp.options.props;
            for (var key in props) {
              proxy(Comp.prototype, "_props", key);
            }
          }

          function initComputed$1 (Comp) {
            var computed = Comp.options.computed;
            for (var key in computed) {
              defineComputed(Comp.prototype, key, computed[key]);
            }
          }

          /*  */

          function initAssetRegisters (Vue) {
            /**
             * Create asset registration methods.
             */
            ASSET_TYPES.forEach(function (type) {
              Vue[type] = function (
                id,
                definition
              ) {
                if (!definition) {
                  return this.options[type + 's'][id]
                } else {
                  /* istanbul ignore if */
                  if (false) {}
                  if (type === 'component' && isPlainObject(definition)) {
                    definition.name = definition.name || id;
                    definition = this.options._base.extend(definition);
                  }
                  if (type === 'directive' && typeof definition === 'function') {
                    definition = { bind: definition, update: definition };
                  }
                  this.options[type + 's'][id] = definition;
                  return definition
                }
              };
            });
          }

          /*  */





          function getComponentName (opts) {
            return opts && (opts.Ctor.options.name || opts.tag)
          }

          function matches (pattern, name) {
            if (Array.isArray(pattern)) {
              return pattern.indexOf(name) > -1
            } else if (typeof pattern === 'string') {
              return pattern.split(',').indexOf(name) > -1
            } else if (isRegExp(pattern)) {
              return pattern.test(name)
            }
            /* istanbul ignore next */
            return false
          }

          function pruneCache (keepAliveInstance, filter) {
            var cache = keepAliveInstance.cache;
            var keys = keepAliveInstance.keys;
            var _vnode = keepAliveInstance._vnode;
            for (var key in cache) {
              var entry = cache[key];
              if (entry) {
                var name = entry.name;
                if (name && !filter(name)) {
                  pruneCacheEntry(cache, key, keys, _vnode);
                }
              }
            }
          }

          function pruneCacheEntry (
            cache,
            key,
            keys,
            current
          ) {
            var entry = cache[key];
            if (entry && (!current || entry.tag !== current.tag)) {
              entry.componentInstance.$destroy();
            }
            cache[key] = null;
            remove(keys, key);
          }

          var patternTypes = [String, RegExp, Array];

          var KeepAlive = {
            name: 'keep-alive',
            abstract: true,

            props: {
              include: patternTypes,
              exclude: patternTypes,
              max: [String, Number]
            },

            methods: {
              cacheVNode: function cacheVNode() {
                var ref = this;
                var cache = ref.cache;
                var keys = ref.keys;
                var vnodeToCache = ref.vnodeToCache;
                var keyToCache = ref.keyToCache;
                if (vnodeToCache) {
                  var tag = vnodeToCache.tag;
                  var componentInstance = vnodeToCache.componentInstance;
                  var componentOptions = vnodeToCache.componentOptions;
                  cache[keyToCache] = {
                    name: getComponentName(componentOptions),
                    tag: tag,
                    componentInstance: componentInstance,
                  };
                  keys.push(keyToCache);
                  // prune oldest entry
                  if (this.max && keys.length > parseInt(this.max)) {
                    pruneCacheEntry(cache, keys[0], keys, this._vnode);
                  }
                  this.vnodeToCache = null;
                }
              }
            },

            created: function created () {
              this.cache = Object.create(null);
              this.keys = [];
            },

            destroyed: function destroyed () {
              for (var key in this.cache) {
                pruneCacheEntry(this.cache, key, this.keys);
              }
            },

            mounted: function mounted () {
              var this$1 = this;

              this.cacheVNode();
              this.$watch('include', function (val) {
                pruneCache(this$1, function (name) { return matches(val, name); });
              });
              this.$watch('exclude', function (val) {
                pruneCache(this$1, function (name) { return !matches(val, name); });
              });
            },

            updated: function updated () {
              this.cacheVNode();
            },

            render: function render () {
              var slot = this.$slots.default;
              var vnode = getFirstComponentChild(slot);
              var componentOptions = vnode && vnode.componentOptions;
              if (componentOptions) {
                // check pattern
                var name = getComponentName(componentOptions);
                var ref = this;
                var include = ref.include;
                var exclude = ref.exclude;
                if (
                  // not included
                  (include && (!name || !matches(include, name))) ||
                  // excluded
                  (exclude && name && matches(exclude, name))
                ) {
                  return vnode
                }

                var ref$1 = this;
                var cache = ref$1.cache;
                var keys = ref$1.keys;
                var key = vnode.key == null
                  // same constructor may get registered as different local components
                  // so cid alone is not enough (#3269)
                  ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
                  : vnode.key;
                if (cache[key]) {
                  vnode.componentInstance = cache[key].componentInstance;
                  // make current key freshest
                  remove(keys, key);
                  keys.push(key);
                } else {
                  // delay setting the cache until update
                  this.vnodeToCache = vnode;
                  this.keyToCache = key;
                }

                vnode.data.keepAlive = true;
              }
              return vnode || (slot && slot[0])
            }
          };

          var builtInComponents = {
            KeepAlive: KeepAlive
          };

          /*  */

          function initGlobalAPI (Vue) {
            // config
            var configDef = {};
            configDef.get = function () { return config; };
            if (false) {}
            Object.defineProperty(Vue, 'config', configDef);

            // exposed util methods.
            // NOTE: these are not considered part of the public API - avoid relying on
            // them unless you are aware of the risk.
            Vue.util = {
              warn: warn,
              extend: extend,
              mergeOptions: mergeOptions,
              defineReactive: defineReactive$$1
            };

            Vue.set = set;
            Vue.delete = del;
            Vue.nextTick = nextTick;

            // 2.6 explicit observable API
            Vue.observable = function (obj) {
              observe(obj);
              return obj
            };

            Vue.options = Object.create(null);
            ASSET_TYPES.forEach(function (type) {
              Vue.options[type + 's'] = Object.create(null);
            });

            // this is used to identify the "base" constructor to extend all plain-object
            // components with in Weex's multi-instance scenarios.
            Vue.options._base = Vue;

            extend(Vue.options.components, builtInComponents);

            initUse(Vue);
            initMixin$1(Vue);
            initExtend(Vue);
            initAssetRegisters(Vue);
          }

          initGlobalAPI(Vue);

          Object.defineProperty(Vue.prototype, '$isServer', {
            get: isServerRendering
          });

          Object.defineProperty(Vue.prototype, '$ssrContext', {
            get: function get () {
              /* istanbul ignore next */
              return this.$vnode && this.$vnode.ssrContext
            }
          });

// expose FunctionalRenderContext for ssr runtime helper installation
          Object.defineProperty(Vue, 'FunctionalRenderContext', {
            value: FunctionalRenderContext
          });

          Vue.version = '2.6.14';

          /*  */

// these are reserved for web because they are directly compiled away
// during template compilation
          var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
          var acceptValue = makeMap('input,textarea,option,select,progress');
          var mustUseProp = function (tag, type, attr) {
            return (
              (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
              (attr === 'selected' && tag === 'option') ||
              (attr === 'checked' && tag === 'input') ||
              (attr === 'muted' && tag === 'video')
            )
          };

          var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

          var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

          var convertEnumeratedValue = function (key, value) {
            return isFalsyAttrValue(value) || value === 'false'
              ? 'false'
              // allow arbitrary string value for contenteditable
              : key === 'contenteditable' && isValidContentEditableValue(value)
                ? value
                : 'true'
          };

          var isBooleanAttr = makeMap(
            'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
            'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
            'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
            'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
            'required,reversed,scoped,seamless,selected,sortable,' +
            'truespeed,typemustmatch,visible'
          );

          var xlinkNS = 'http://www.w3.org/1999/xlink';

          var isXlink = function (name) {
            return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
          };

          var getXlinkProp = function (name) {
            return isXlink(name) ? name.slice(6, name.length) : ''
          };

          var isFalsyAttrValue = function (val) {
            return val == null || val === false
          };

          /*  */

          function genClassForVnode (vnode) {
            var data = vnode.data;
            var parentNode = vnode;
            var childNode = vnode;
            while (isDef(childNode.componentInstance)) {
              childNode = childNode.componentInstance._vnode;
              if (childNode && childNode.data) {
                data = mergeClassData(childNode.data, data);
              }
            }
            while (isDef(parentNode = parentNode.parent)) {
              if (parentNode && parentNode.data) {
                data = mergeClassData(data, parentNode.data);
              }
            }
            return renderClass(data.staticClass, data.class)
          }

          function mergeClassData (child, parent) {
            return {
              staticClass: concat(child.staticClass, parent.staticClass),
              class: isDef(child.class)
                ? [child.class, parent.class]
                : parent.class
            }
          }

          function renderClass (
            staticClass,
            dynamicClass
          ) {
            if (isDef(staticClass) || isDef(dynamicClass)) {
              return concat(staticClass, stringifyClass(dynamicClass))
            }
            /* istanbul ignore next */
            return ''
          }

          function concat (a, b) {
            return a ? b ? (a + ' ' + b) : a : (b || '')
          }

          function stringifyClass (value) {
            if (Array.isArray(value)) {
              return stringifyArray(value)
            }
            if (isObject(value)) {
              return stringifyObject(value)
            }
            if (typeof value === 'string') {
              return value
            }
            /* istanbul ignore next */
            return ''
          }

          function stringifyArray (value) {
            var res = '';
            var stringified;
            for (var i = 0, l = value.length; i < l; i++) {
              if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
                if (res) { res += ' '; }
                res += stringified;
              }
            }
            return res
          }

          function stringifyObject (value) {
            var res = '';
            for (var key in value) {
              if (value[key]) {
                if (res) { res += ' '; }
                res += key;
              }
            }
            return res
          }

          /*  */

          var namespaceMap = {
            svg: 'http://www.w3.org/2000/svg',
            math: 'http://www.w3.org/1998/Math/MathML'
          };

          var isHTMLTag = makeMap(
            'html,body,base,head,link,meta,style,title,' +
            'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
            'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
            'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
            's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
            'embed,object,param,source,canvas,script,noscript,del,ins,' +
            'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
            'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
            'output,progress,select,textarea,' +
            'details,dialog,menu,menuitem,summary,' +
            'content,element,shadow,template,blockquote,iframe,tfoot'
          );

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
          var isSVG = makeMap(
            'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
            'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
            'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
            true
          );

          var isPreTag = function (tag) { return tag === 'pre'; };

          var isReservedTag = function (tag) {
            return isHTMLTag(tag) || isSVG(tag)
          };

          function getTagNamespace (tag) {
            if (isSVG(tag)) {
              return 'svg'
            }
            // basic support for MathML
            // note it doesn't support other MathML elements being component roots
            if (tag === 'math') {
              return 'math'
            }
          }

          var unknownElementCache = Object.create(null);
          function isUnknownElement (tag) {
            /* istanbul ignore if */
            if (!inBrowser) {
              return true
            }
            if (isReservedTag(tag)) {
              return false
            }
            tag = tag.toLowerCase();
            /* istanbul ignore if */
            if (unknownElementCache[tag] != null) {
              return unknownElementCache[tag]
            }
            var el = document.createElement(tag);
            if (tag.indexOf('-') > -1) {
              // http://stackoverflow.com/a/28210364/1070244
              return (unknownElementCache[tag] = (
                el.constructor === window.HTMLUnknownElement ||
                el.constructor === window.HTMLElement
              ))
            } else {
              return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
            }
          }

          var isTextInputType = makeMap('text,number,password,search,email,tel,url');

          /*  */

          /**
           * Query an element selector if it's not an element already.
           */
          function query (el) {
            if (typeof el === 'string') {
              var selected = document.querySelector(el);
              if (!selected) {
                false && false;
                return document.createElement('div')
              }
              return selected
            } else {
              return el
            }
          }

          /*  */

          function createElement$1 (tagName, vnode) {
            var elm = document.createElement(tagName);
            if (tagName !== 'select') {
              return elm
            }
            // false or null will remove the attribute but undefined will not
            if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
              elm.setAttribute('multiple', 'multiple');
            }
            return elm
          }

          function createElementNS (namespace, tagName) {
            return document.createElementNS(namespaceMap[namespace], tagName)
          }

          function createTextNode (text) {
            return document.createTextNode(text)
          }

          function createComment (text) {
            return document.createComment(text)
          }

          function insertBefore (parentNode, newNode, referenceNode) {
            parentNode.insertBefore(newNode, referenceNode);
          }

          function removeChild (node, child) {
            node.removeChild(child);
          }

          function appendChild (node, child) {
            node.appendChild(child);
          }

          function parentNode (node) {
            return node.parentNode
          }

          function nextSibling (node) {
            return node.nextSibling
          }

          function tagName (node) {
            return node.tagName
          }

          function setTextContent (node, text) {
            node.textContent = text;
          }

          function setStyleScope (node, scopeId) {
            node.setAttribute(scopeId, '');
          }

          var nodeOps = /*#__PURE__*/Object.freeze({
            createElement: createElement$1,
            createElementNS: createElementNS,
            createTextNode: createTextNode,
            createComment: createComment,
            insertBefore: insertBefore,
            removeChild: removeChild,
            appendChild: appendChild,
            parentNode: parentNode,
            nextSibling: nextSibling,
            tagName: tagName,
            setTextContent: setTextContent,
            setStyleScope: setStyleScope
          });

          /*  */

          var ref = {
            create: function create (_, vnode) {
              registerRef(vnode);
            },
            update: function update (oldVnode, vnode) {
              if (oldVnode.data.ref !== vnode.data.ref) {
                registerRef(oldVnode, true);
                registerRef(vnode);
              }
            },
            destroy: function destroy (vnode) {
              registerRef(vnode, true);
            }
          };

          function registerRef (vnode, isRemoval) {
            var key = vnode.data.ref;
            if (!isDef(key)) { return }

            var vm = vnode.context;
            var ref = vnode.componentInstance || vnode.elm;
            var refs = vm.$refs;
            if (isRemoval) {
              if (Array.isArray(refs[key])) {
                remove(refs[key], ref);
              } else if (refs[key] === ref) {
                refs[key] = undefined;
              }
            } else {
              if (vnode.data.refInFor) {
                if (!Array.isArray(refs[key])) {
                  refs[key] = [ref];
                } else if (refs[key].indexOf(ref) < 0) {
                  // $flow-disable-line
                  refs[key].push(ref);
                }
              } else {
                refs[key] = ref;
              }
            }
          }

          /**
           * Virtual DOM patching algorithm based on Snabbdom by
           * Simon Friis Vindum (@paldepind)
           * Licensed under the MIT License
           * https://github.com/paldepind/snabbdom/blob/master/LICENSE
           *
           * modified by Evan You (@yyx990803)
           *
           * Not type-checking this because this file is perf-critical and the cost
           * of making flow understand it is not worth it.
           */

          var emptyNode = new VNode('', {}, []);

          var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

          function sameVnode (a, b) {
            return (
              a.key === b.key &&
              a.asyncFactory === b.asyncFactory && (
                (
                  a.tag === b.tag &&
                  a.isComment === b.isComment &&
                  isDef(a.data) === isDef(b.data) &&
                  sameInputType(a, b)
                ) || (
                  isTrue(a.isAsyncPlaceholder) &&
                  isUndef(b.asyncFactory.error)
                )
              )
            )
          }

          function sameInputType (a, b) {
            if (a.tag !== 'input') { return true }
            var i;
            var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
            var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
            return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
          }

          function createKeyToOldIdx (children, beginIdx, endIdx) {
            var i, key;
            var map = {};
            for (i = beginIdx; i <= endIdx; ++i) {
              key = children[i].key;
              if (isDef(key)) { map[key] = i; }
            }
            return map
          }

          function createPatchFunction (backend) {
            var i, j;
            var cbs = {};

            var modules = backend.modules;
            var nodeOps = backend.nodeOps;

            for (i = 0; i < hooks.length; ++i) {
              cbs[hooks[i]] = [];
              for (j = 0; j < modules.length; ++j) {
                if (isDef(modules[j][hooks[i]])) {
                  cbs[hooks[i]].push(modules[j][hooks[i]]);
                }
              }
            }

            function emptyNodeAt (elm) {
              return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
            }

            function createRmCb (childElm, listeners) {
              function remove$$1 () {
                if (--remove$$1.listeners === 0) {
                  removeNode(childElm);
                }
              }
              remove$$1.listeners = listeners;
              return remove$$1
            }

            function removeNode (el) {
              var parent = nodeOps.parentNode(el);
              // element may have already been removed due to v-html / v-text
              if (isDef(parent)) {
                nodeOps.removeChild(parent, el);
              }
            }

            function isUnknownElement$$1 (vnode, inVPre) {
              return (
                !inVPre &&
                !vnode.ns &&
                !(
                  config.ignoredElements.length &&
                  config.ignoredElements.some(function (ignore) {
                    return isRegExp(ignore)
                      ? ignore.test(vnode.tag)
                      : ignore === vnode.tag
                  })
                ) &&
                config.isUnknownElement(vnode.tag)
              )
            }

            var creatingElmInVPre = 0;

            function createElm (
              vnode,
              insertedVnodeQueue,
              parentElm,
              refElm,
              nested,
              ownerArray,
              index
            ) {
              if (isDef(vnode.elm) && isDef(ownerArray)) {
                // This vnode was used in a previous render!
                // now it's used as a new node, overwriting its elm would cause
                // potential patch errors down the road when it's used as an insertion
                // reference node. Instead, we clone the node on-demand before creating
                // associated DOM element for it.
                vnode = ownerArray[index] = cloneVNode(vnode);
              }

              vnode.isRootInsert = !nested; // for transition enter check
              if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
                return
              }

              var data = vnode.data;
              var children = vnode.children;
              var tag = vnode.tag;
              if (isDef(tag)) {
                if (false) {}

                vnode.elm = vnode.ns
                  ? nodeOps.createElementNS(vnode.ns, tag)
                  : nodeOps.createElement(tag, vnode);
                setScope(vnode);

                /* istanbul ignore if */
                {
                  createChildren(vnode, children, insertedVnodeQueue);
                  if (isDef(data)) {
                    invokeCreateHooks(vnode, insertedVnodeQueue);
                  }
                  insert(parentElm, vnode.elm, refElm);
                }

                if (false) {}
              } else if (isTrue(vnode.isComment)) {
                vnode.elm = nodeOps.createComment(vnode.text);
                insert(parentElm, vnode.elm, refElm);
              } else {
                vnode.elm = nodeOps.createTextNode(vnode.text);
                insert(parentElm, vnode.elm, refElm);
              }
            }

            function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
              var i = vnode.data;
              if (isDef(i)) {
                var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
                if (isDef(i = i.hook) && isDef(i = i.init)) {
                  i(vnode, false /* hydrating */);
                }
                // after calling the init hook, if the vnode is a child component
                // it should've created a child instance and mounted it. the child
                // component also has set the placeholder vnode's elm.
                // in that case we can just return the element and be done.
                if (isDef(vnode.componentInstance)) {
                  initComponent(vnode, insertedVnodeQueue);
                  insert(parentElm, vnode.elm, refElm);
                  if (isTrue(isReactivated)) {
                    reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
                  }
                  return true
                }
              }
            }

            function initComponent (vnode, insertedVnodeQueue) {
              if (isDef(vnode.data.pendingInsert)) {
                insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
                vnode.data.pendingInsert = null;
              }
              vnode.elm = vnode.componentInstance.$el;
              if (isPatchable(vnode)) {
                invokeCreateHooks(vnode, insertedVnodeQueue);
                setScope(vnode);
              } else {
                // empty component root.
                // skip all element-related modules except for ref (#3455)
                registerRef(vnode);
                // make sure to invoke the insert hook
                insertedVnodeQueue.push(vnode);
              }
            }

            function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
              var i;
              // hack for #4339: a reactivated component with inner transition
              // does not trigger because the inner node's created hooks are not called
              // again. It's not ideal to involve module-specific logic in here but
              // there doesn't seem to be a better way to do it.
              var innerNode = vnode;
              while (innerNode.componentInstance) {
                innerNode = innerNode.componentInstance._vnode;
                if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
                  for (i = 0; i < cbs.activate.length; ++i) {
                    cbs.activate[i](emptyNode, innerNode);
                  }
                  insertedVnodeQueue.push(innerNode);
                  break
                }
              }
              // unlike a newly created component,
              // a reactivated keep-alive component doesn't insert itself
              insert(parentElm, vnode.elm, refElm);
            }

            function insert (parent, elm, ref$$1) {
              if (isDef(parent)) {
                if (isDef(ref$$1)) {
                  if (nodeOps.parentNode(ref$$1) === parent) {
                    nodeOps.insertBefore(parent, elm, ref$$1);
                  }
                } else {
                  nodeOps.appendChild(parent, elm);
                }
              }
            }

            function createChildren (vnode, children, insertedVnodeQueue) {
              if (Array.isArray(children)) {
                if (false) {}
                for (var i = 0; i < children.length; ++i) {
                  createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
                }
              } else if (isPrimitive(vnode.text)) {
                nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
              }
            }

            function isPatchable (vnode) {
              while (vnode.componentInstance) {
                vnode = vnode.componentInstance._vnode;
              }
              return isDef(vnode.tag)
            }

            function invokeCreateHooks (vnode, insertedVnodeQueue) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, vnode);
              }
              i = vnode.data.hook; // Reuse variable
              if (isDef(i)) {
                if (isDef(i.create)) { i.create(emptyNode, vnode); }
                if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
              }
            }

            // set scope id attribute for scoped CSS.
            // this is implemented as a special case to avoid the overhead
            // of going through the normal attribute patching process.
            function setScope (vnode) {
              var i;
              if (isDef(i = vnode.fnScopeId)) {
                nodeOps.setStyleScope(vnode.elm, i);
              } else {
                var ancestor = vnode;
                while (ancestor) {
                  if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
                    nodeOps.setStyleScope(vnode.elm, i);
                  }
                  ancestor = ancestor.parent;
                }
              }
              // for slot content they should also get the scopeId from the host instance.
              if (isDef(i = activeInstance) &&
                i !== vnode.context &&
                i !== vnode.fnContext &&
                isDef(i = i.$options._scopeId)
              ) {
                nodeOps.setStyleScope(vnode.elm, i);
              }
            }

            function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
              for (; startIdx <= endIdx; ++startIdx) {
                createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
              }
            }

            function invokeDestroyHook (vnode) {
              var i, j;
              var data = vnode.data;
              if (isDef(data)) {
                if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
                for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
              }
              if (isDef(i = vnode.children)) {
                for (j = 0; j < vnode.children.length; ++j) {
                  invokeDestroyHook(vnode.children[j]);
                }
              }
            }

            function removeVnodes (vnodes, startIdx, endIdx) {
              for (; startIdx <= endIdx; ++startIdx) {
                var ch = vnodes[startIdx];
                if (isDef(ch)) {
                  if (isDef(ch.tag)) {
                    removeAndInvokeRemoveHook(ch);
                    invokeDestroyHook(ch);
                  } else { // Text node
                    removeNode(ch.elm);
                  }
                }
              }
            }

            function removeAndInvokeRemoveHook (vnode, rm) {
              if (isDef(rm) || isDef(vnode.data)) {
                var i;
                var listeners = cbs.remove.length + 1;
                if (isDef(rm)) {
                  // we have a recursively passed down rm callback
                  // increase the listeners count
                  rm.listeners += listeners;
                } else {
                  // directly removing
                  rm = createRmCb(vnode.elm, listeners);
                }
                // recursively invoke hooks on child component root node
                if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
                  removeAndInvokeRemoveHook(i, rm);
                }
                for (i = 0; i < cbs.remove.length; ++i) {
                  cbs.remove[i](vnode, rm);
                }
                if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
                  i(vnode, rm);
                } else {
                  rm();
                }
              } else {
                removeNode(vnode.elm);
              }
            }

            function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
              var oldStartIdx = 0;
              var newStartIdx = 0;
              var oldEndIdx = oldCh.length - 1;
              var oldStartVnode = oldCh[0];
              var oldEndVnode = oldCh[oldEndIdx];
              var newEndIdx = newCh.length - 1;
              var newStartVnode = newCh[0];
              var newEndVnode = newCh[newEndIdx];
              var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

              // removeOnly is a special flag used only by <transition-group>
              // to ensure removed elements stay in correct relative positions
              // during leaving transitions
              var canMove = !removeOnly;

              if (false) {}

              while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
                if (isUndef(oldStartVnode)) {
                  oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
                } else if (isUndef(oldEndVnode)) {
                  oldEndVnode = oldCh[--oldEndIdx];
                } else if (sameVnode(oldStartVnode, newStartVnode)) {
                  patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                  oldStartVnode = oldCh[++oldStartIdx];
                  newStartVnode = newCh[++newStartIdx];
                } else if (sameVnode(oldEndVnode, newEndVnode)) {
                  patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
                  oldEndVnode = oldCh[--oldEndIdx];
                  newEndVnode = newCh[--newEndIdx];
                } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
                  patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
                  canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
                  oldStartVnode = oldCh[++oldStartIdx];
                  newEndVnode = newCh[--newEndIdx];
                } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
                  patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                  canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                  oldEndVnode = oldCh[--oldEndIdx];
                  newStartVnode = newCh[++newStartIdx];
                } else {
                  if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
                  idxInOld = isDef(newStartVnode.key)
                    ? oldKeyToIdx[newStartVnode.key]
                    : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
                  if (isUndef(idxInOld)) { // New element
                    createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                  } else {
                    vnodeToMove = oldCh[idxInOld];
                    if (sameVnode(vnodeToMove, newStartVnode)) {
                      patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                      oldCh[idxInOld] = undefined;
                      canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
                    } else {
                      // same key but different element. treat as new element
                      createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                    }
                  }
                  newStartVnode = newCh[++newStartIdx];
                }
              }
              if (oldStartIdx > oldEndIdx) {
                refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
                addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
              } else if (newStartIdx > newEndIdx) {
                removeVnodes(oldCh, oldStartIdx, oldEndIdx);
              }
            }

            function checkDuplicateKeys (children) {
              var seenKeys = {};
              for (var i = 0; i < children.length; i++) {
                var vnode = children[i];
                var key = vnode.key;
                if (isDef(key)) {
                  if (seenKeys[key]) {
                    warn(
                      ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
                      vnode.context
                    );
                  } else {
                    seenKeys[key] = true;
                  }
                }
              }
            }

            function findIdxInOld (node, oldCh, start, end) {
              for (var i = start; i < end; i++) {
                var c = oldCh[i];
                if (isDef(c) && sameVnode(node, c)) { return i }
              }
            }

            function patchVnode (
              oldVnode,
              vnode,
              insertedVnodeQueue,
              ownerArray,
              index,
              removeOnly
            ) {
              if (oldVnode === vnode) {
                return
              }

              if (isDef(vnode.elm) && isDef(ownerArray)) {
                // clone reused vnode
                vnode = ownerArray[index] = cloneVNode(vnode);
              }

              var elm = vnode.elm = oldVnode.elm;

              if (isTrue(oldVnode.isAsyncPlaceholder)) {
                if (isDef(vnode.asyncFactory.resolved)) {
                  hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
                } else {
                  vnode.isAsyncPlaceholder = true;
                }
                return
              }

              // reuse element for static trees.
              // note we only do this if the vnode is cloned -
              // if the new node is not cloned it means the render functions have been
              // reset by the hot-reload-api and we need to do a proper re-render.
              if (isTrue(vnode.isStatic) &&
                isTrue(oldVnode.isStatic) &&
                vnode.key === oldVnode.key &&
                (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
              ) {
                vnode.componentInstance = oldVnode.componentInstance;
                return
              }

              var i;
              var data = vnode.data;
              if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
                i(oldVnode, vnode);
              }

              var oldCh = oldVnode.children;
              var ch = vnode.children;
              if (isDef(data) && isPatchable(vnode)) {
                for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
                if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
              }
              if (isUndef(vnode.text)) {
                if (isDef(oldCh) && isDef(ch)) {
                  if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
                } else if (isDef(ch)) {
                  if (false) {}
                  if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
                  addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
                } else if (isDef(oldCh)) {
                  removeVnodes(oldCh, 0, oldCh.length - 1);
                } else if (isDef(oldVnode.text)) {
                  nodeOps.setTextContent(elm, '');
                }
              } else if (oldVnode.text !== vnode.text) {
                nodeOps.setTextContent(elm, vnode.text);
              }
              if (isDef(data)) {
                if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
              }
            }

            function invokeInsertHook (vnode, queue, initial) {
              // delay insert hooks for component root nodes, invoke them after the
              // element is really inserted
              if (isTrue(initial) && isDef(vnode.parent)) {
                vnode.parent.data.pendingInsert = queue;
              } else {
                for (var i = 0; i < queue.length; ++i) {
                  queue[i].data.hook.insert(queue[i]);
                }
              }
            }

            var hydrationBailed = false;
            // list of modules that can skip create hook during hydration because they
            // are already rendered on the client or has no need for initialization
            // Note: style is excluded because it relies on initial clone for future
            // deep updates (#7063).
            var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

            // Note: this is a browser-only function so we can assume elms are DOM nodes.
            function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
              var i;
              var tag = vnode.tag;
              var data = vnode.data;
              var children = vnode.children;
              inVPre = inVPre || (data && data.pre);
              vnode.elm = elm;

              if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
                vnode.isAsyncPlaceholder = true;
                return true
              }
              // assert node match
              if (false) {}
              if (isDef(data)) {
                if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
                if (isDef(i = vnode.componentInstance)) {
                  // child component. it should have hydrated its own tree.
                  initComponent(vnode, insertedVnodeQueue);
                  return true
                }
              }
              if (isDef(tag)) {
                if (isDef(children)) {
                  // empty element, allow client to pick up and populate children
                  if (!elm.hasChildNodes()) {
                    createChildren(vnode, children, insertedVnodeQueue);
                  } else {
                    // v-html and domProps: innerHTML
                    if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
                      if (i !== elm.innerHTML) {
                        /* istanbul ignore if */
                        if (false
                        ) {}
                        return false
                      }
                    } else {
                      // iterate and compare children lists
                      var childrenMatch = true;
                      var childNode = elm.firstChild;
                      for (var i$1 = 0; i$1 < children.length; i$1++) {
                        if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                          childrenMatch = false;
                          break
                        }
                        childNode = childNode.nextSibling;
                      }
                      // if childNode is not null, it means the actual childNodes list is
                      // longer than the virtual children list.
                      if (!childrenMatch || childNode) {
                        /* istanbul ignore if */
                        if (false
                        ) {}
                        return false
                      }
                    }
                  }
                }
                if (isDef(data)) {
                  var fullInvoke = false;
                  for (var key in data) {
                    if (!isRenderedModule(key)) {
                      fullInvoke = true;
                      invokeCreateHooks(vnode, insertedVnodeQueue);
                      break
                    }
                  }
                  if (!fullInvoke && data['class']) {
                    // ensure collecting deps for deep class bindings for future updates
                    traverse(data['class']);
                  }
                }
              } else if (elm.data !== vnode.text) {
                elm.data = vnode.text;
              }
              return true
            }

            function assertNodeMatch (node, vnode, inVPre) {
              if (isDef(vnode.tag)) {
                return vnode.tag.indexOf('vue-component') === 0 || (
                  !isUnknownElement$$1(vnode, inVPre) &&
                  vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
                )
              } else {
                return node.nodeType === (vnode.isComment ? 8 : 3)
              }
            }

            return function patch (oldVnode, vnode, hydrating, removeOnly) {
              if (isUndef(vnode)) {
                if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
                return
              }

              var isInitialPatch = false;
              var insertedVnodeQueue = [];

              if (isUndef(oldVnode)) {
                // empty mount (likely as component), create new root element
                isInitialPatch = true;
                createElm(vnode, insertedVnodeQueue);
              } else {
                var isRealElement = isDef(oldVnode.nodeType);
                if (!isRealElement && sameVnode(oldVnode, vnode)) {
                  // patch existing root node
                  patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
                } else {
                  if (isRealElement) {
                    // mounting to a real element
                    // check if this is server-rendered content and if we can perform
                    // a successful hydration.
                    if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
                      oldVnode.removeAttribute(SSR_ATTR);
                      hydrating = true;
                    }
                    if (isTrue(hydrating)) {
                      if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                        invokeInsertHook(vnode, insertedVnodeQueue, true);
                        return oldVnode
                      } else if (false) {}
                    }
                    // either not server-rendered, or hydration failed.
                    // create an empty node and replace it
                    oldVnode = emptyNodeAt(oldVnode);
                  }

                  // replacing existing element
                  var oldElm = oldVnode.elm;
                  var parentElm = nodeOps.parentNode(oldElm);

                  // create new node
                  createElm(
                    vnode,
                    insertedVnodeQueue,
                    // extremely rare edge case: do not insert if old element is in a
                    // leaving transition. Only happens when combining transition +
                    // keep-alive + HOCs. (#4590)
                    oldElm._leaveCb ? null : parentElm,
                    nodeOps.nextSibling(oldElm)
                  );

                  // update parent placeholder node element, recursively
                  if (isDef(vnode.parent)) {
                    var ancestor = vnode.parent;
                    var patchable = isPatchable(vnode);
                    while (ancestor) {
                      for (var i = 0; i < cbs.destroy.length; ++i) {
                        cbs.destroy[i](ancestor);
                      }
                      ancestor.elm = vnode.elm;
                      if (patchable) {
                        for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                          cbs.create[i$1](emptyNode, ancestor);
                        }
                        // #6513
                        // invoke insert hooks that may have been merged by create hooks.
                        // e.g. for directives that uses the "inserted" hook.
                        var insert = ancestor.data.hook.insert;
                        if (insert.merged) {
                          // start at index 1 to avoid re-invoking component mounted hook
                          for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                            insert.fns[i$2]();
                          }
                        }
                      } else {
                        registerRef(ancestor);
                      }
                      ancestor = ancestor.parent;
                    }
                  }

                  // destroy old node
                  if (isDef(parentElm)) {
                    removeVnodes([oldVnode], 0, 0);
                  } else if (isDef(oldVnode.tag)) {
                    invokeDestroyHook(oldVnode);
                  }
                }
              }

              invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
              return vnode.elm
            }
          }

          /*  */

          var directives = {
            create: updateDirectives,
            update: updateDirectives,
            destroy: function unbindDirectives (vnode) {
              updateDirectives(vnode, emptyNode);
            }
          };

          function updateDirectives (oldVnode, vnode) {
            if (oldVnode.data.directives || vnode.data.directives) {
              _update(oldVnode, vnode);
            }
          }

          function _update (oldVnode, vnode) {
            var isCreate = oldVnode === emptyNode;
            var isDestroy = vnode === emptyNode;
            var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
            var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

            var dirsWithInsert = [];
            var dirsWithPostpatch = [];

            var key, oldDir, dir;
            for (key in newDirs) {
              oldDir = oldDirs[key];
              dir = newDirs[key];
              if (!oldDir) {
                // new directive, bind
                callHook$1(dir, 'bind', vnode, oldVnode);
                if (dir.def && dir.def.inserted) {
                  dirsWithInsert.push(dir);
                }
              } else {
                // existing directive, update
                dir.oldValue = oldDir.value;
                dir.oldArg = oldDir.arg;
                callHook$1(dir, 'update', vnode, oldVnode);
                if (dir.def && dir.def.componentUpdated) {
                  dirsWithPostpatch.push(dir);
                }
              }
            }

            if (dirsWithInsert.length) {
              var callInsert = function () {
                for (var i = 0; i < dirsWithInsert.length; i++) {
                  callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
                }
              };
              if (isCreate) {
                mergeVNodeHook(vnode, 'insert', callInsert);
              } else {
                callInsert();
              }
            }

            if (dirsWithPostpatch.length) {
              mergeVNodeHook(vnode, 'postpatch', function () {
                for (var i = 0; i < dirsWithPostpatch.length; i++) {
                  callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
                }
              });
            }

            if (!isCreate) {
              for (key in oldDirs) {
                if (!newDirs[key]) {
                  // no longer present, unbind
                  callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
                }
              }
            }
          }

          var emptyModifiers = Object.create(null);

          function normalizeDirectives$1 (
            dirs,
            vm
          ) {
            var res = Object.create(null);
            if (!dirs) {
              // $flow-disable-line
              return res
            }
            var i, dir;
            for (i = 0; i < dirs.length; i++) {
              dir = dirs[i];
              if (!dir.modifiers) {
                // $flow-disable-line
                dir.modifiers = emptyModifiers;
              }
              res[getRawDirName(dir)] = dir;
              dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
            }
            // $flow-disable-line
            return res
          }

          function getRawDirName (dir) {
            return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
          }

          function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
            var fn = dir.def && dir.def[hook];
            if (fn) {
              try {
                fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
              } catch (e) {
                handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
              }
            }
          }

          var baseModules = [
            ref,
            directives
          ];

          /*  */

          function updateAttrs (oldVnode, vnode) {
            var opts = vnode.componentOptions;
            if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
              return
            }
            if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
              return
            }
            var key, cur, old;
            var elm = vnode.elm;
            var oldAttrs = oldVnode.data.attrs || {};
            var attrs = vnode.data.attrs || {};
            // clone observed objects, as the user probably wants to mutate it
            if (isDef(attrs.__ob__)) {
              attrs = vnode.data.attrs = extend({}, attrs);
            }

            for (key in attrs) {
              cur = attrs[key];
              old = oldAttrs[key];
              if (old !== cur) {
                setAttr(elm, key, cur, vnode.data.pre);
              }
            }
            // #4391: in IE9, setting type can reset value for input[type=radio]
            // #6666: IE/Edge forces progress value down to 1 before setting a max
            /* istanbul ignore if */
            if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
              setAttr(elm, 'value', attrs.value);
            }
            for (key in oldAttrs) {
              if (isUndef(attrs[key])) {
                if (isXlink(key)) {
                  elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
                } else if (!isEnumeratedAttr(key)) {
                  elm.removeAttribute(key);
                }
              }
            }
          }

          function setAttr (el, key, value, isInPre) {
            if (isInPre || el.tagName.indexOf('-') > -1) {
              baseSetAttr(el, key, value);
            } else if (isBooleanAttr(key)) {
              // set attribute for blank value
              // e.g. <option disabled>Select one</option>
              if (isFalsyAttrValue(value)) {
                el.removeAttribute(key);
              } else {
                // technically allowfullscreen is a boolean attribute for <iframe>,
                // but Flash expects a value of "true" when used on <embed> tag
                value = key === 'allowfullscreen' && el.tagName === 'EMBED'
                  ? 'true'
                  : key;
                el.setAttribute(key, value);
              }
            } else if (isEnumeratedAttr(key)) {
              el.setAttribute(key, convertEnumeratedValue(key, value));
            } else if (isXlink(key)) {
              if (isFalsyAttrValue(value)) {
                el.removeAttributeNS(xlinkNS, getXlinkProp(key));
              } else {
                el.setAttributeNS(xlinkNS, key, value);
              }
            } else {
              baseSetAttr(el, key, value);
            }
          }

          function baseSetAttr (el, key, value) {
            if (isFalsyAttrValue(value)) {
              el.removeAttribute(key);
            } else {
              // #7138: IE10 & 11 fires input event when setting placeholder on
              // <textarea>... block the first input event and remove the blocker
              // immediately.
              /* istanbul ignore if */
              if (
                isIE && !isIE9 &&
                el.tagName === 'TEXTAREA' &&
                key === 'placeholder' && value !== '' && !el.__ieph
              ) {
                var blocker = function (e) {
                  e.stopImmediatePropagation();
                  el.removeEventListener('input', blocker);
                };
                el.addEventListener('input', blocker);
                // $flow-disable-line
                el.__ieph = true; /* IE placeholder patched */
              }
              el.setAttribute(key, value);
            }
          }

          var attrs = {
            create: updateAttrs,
            update: updateAttrs
          };

          /*  */

          function updateClass (oldVnode, vnode) {
            var el = vnode.elm;
            var data = vnode.data;
            var oldData = oldVnode.data;
            if (
              isUndef(data.staticClass) &&
              isUndef(data.class) && (
                isUndef(oldData) || (
                  isUndef(oldData.staticClass) &&
                  isUndef(oldData.class)
                )
              )
            ) {
              return
            }

            var cls = genClassForVnode(vnode);

            // handle transition classes
            var transitionClass = el._transitionClasses;
            if (isDef(transitionClass)) {
              cls = concat(cls, stringifyClass(transitionClass));
            }

            // set the class
            if (cls !== el._prevClass) {
              el.setAttribute('class', cls);
              el._prevClass = cls;
            }
          }

          var klass = {
            create: updateClass,
            update: updateClass
          };

          /*  */

          var validDivisionCharRE = /[\w).+\-_$\]]/;

          function parseFilters (exp) {
            var inSingle = false;
            var inDouble = false;
            var inTemplateString = false;
            var inRegex = false;
            var curly = 0;
            var square = 0;
            var paren = 0;
            var lastFilterIndex = 0;
            var c, prev, i, expression, filters;

            for (i = 0; i < exp.length; i++) {
              prev = c;
              c = exp.charCodeAt(i);
              if (inSingle) {
                if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
              } else if (inDouble) {
                if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
              } else if (inTemplateString) {
                if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
              } else if (inRegex) {
                if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
              } else if (
                c === 0x7C && // pipe
                exp.charCodeAt(i + 1) !== 0x7C &&
                exp.charCodeAt(i - 1) !== 0x7C &&
                !curly && !square && !paren
              ) {
                if (expression === undefined) {
                  // first filter, end of expression
                  lastFilterIndex = i + 1;
                  expression = exp.slice(0, i).trim();
                } else {
                  pushFilter();
                }
              } else {
                switch (c) {
                  case 0x22: inDouble = true; break         // "
                  case 0x27: inSingle = true; break         // '
                  case 0x60: inTemplateString = true; break // `
                  case 0x28: paren++; break                 // (
                  case 0x29: paren--; break                 // )
                  case 0x5B: square++; break                // [
                  case 0x5D: square--; break                // ]
                  case 0x7B: curly++; break                 // {
                  case 0x7D: curly--; break                 // }
                }
                if (c === 0x2f) { // /
                  var j = i - 1;
                  var p = (void 0);
                  // find first non-whitespace prev char
                  for (; j >= 0; j--) {
                    p = exp.charAt(j);
                    if (p !== ' ') { break }
                  }
                  if (!p || !validDivisionCharRE.test(p)) {
                    inRegex = true;
                  }
                }
              }
            }

            if (expression === undefined) {
              expression = exp.slice(0, i).trim();
            } else if (lastFilterIndex !== 0) {
              pushFilter();
            }

            function pushFilter () {
              (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
              lastFilterIndex = i + 1;
            }

            if (filters) {
              for (i = 0; i < filters.length; i++) {
                expression = wrapFilter(expression, filters[i]);
              }
            }

            return expression
          }

          function wrapFilter (exp, filter) {
            var i = filter.indexOf('(');
            if (i < 0) {
              // _f: resolveFilter
              return ("_f(\"" + filter + "\")(" + exp + ")")
            } else {
              var name = filter.slice(0, i);
              var args = filter.slice(i + 1);
              return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
            }
          }

          /*  */



          /* eslint-disable no-unused-vars */
          function baseWarn (msg, range) {
            console.error(("[Vue compiler]: " + msg));
          }
          /* eslint-enable no-unused-vars */

          function pluckModuleFunction (
            modules,
            key
          ) {
            return modules
              ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
              : []
          }

          function addProp (el, name, value, range, dynamic) {
            (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
            el.plain = false;
          }

          function addAttr (el, name, value, range, dynamic) {
            var attrs = dynamic
              ? (el.dynamicAttrs || (el.dynamicAttrs = []))
              : (el.attrs || (el.attrs = []));
            attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
            el.plain = false;
          }

// add a raw attr (use this in preTransforms)
          function addRawAttr (el, name, value, range) {
            el.attrsMap[name] = value;
            el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
          }

          function addDirective (
            el,
            name,
            rawName,
            value,
            arg,
            isDynamicArg,
            modifiers,
            range
          ) {
            (el.directives || (el.directives = [])).push(rangeSetItem({
              name: name,
              rawName: rawName,
              value: value,
              arg: arg,
              isDynamicArg: isDynamicArg,
              modifiers: modifiers
            }, range));
            el.plain = false;
          }

          function prependModifierMarker (symbol, name, dynamic) {
            return dynamic
              ? ("_p(" + name + ",\"" + symbol + "\")")
              : symbol + name // mark the event as captured
          }

          function addHandler (
            el,
            name,
            value,
            modifiers,
            important,
            warn,
            range,
            dynamic
          ) {
            modifiers = modifiers || emptyObject;
            // warn prevent and passive modifier
            /* istanbul ignore if */
            if (
              false
            ) {}

            // normalize click.right and click.middle since they don't actually fire
            // this is technically browser-specific, but at least for now browsers are
            // the only target envs that have right/middle clicks.
            if (modifiers.right) {
              if (dynamic) {
                name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
              } else if (name === 'click') {
                name = 'contextmenu';
                delete modifiers.right;
              }
            } else if (modifiers.middle) {
              if (dynamic) {
                name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
              } else if (name === 'click') {
                name = 'mouseup';
              }
            }

            // check capture modifier
            if (modifiers.capture) {
              delete modifiers.capture;
              name = prependModifierMarker('!', name, dynamic);
            }
            if (modifiers.once) {
              delete modifiers.once;
              name = prependModifierMarker('~', name, dynamic);
            }
            /* istanbul ignore if */
            if (modifiers.passive) {
              delete modifiers.passive;
              name = prependModifierMarker('&', name, dynamic);
            }

            var events;
            if (modifiers.native) {
              delete modifiers.native;
              events = el.nativeEvents || (el.nativeEvents = {});
            } else {
              events = el.events || (el.events = {});
            }

            var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
            if (modifiers !== emptyObject) {
              newHandler.modifiers = modifiers;
            }

            var handlers = events[name];
            /* istanbul ignore if */
            if (Array.isArray(handlers)) {
              important ? handlers.unshift(newHandler) : handlers.push(newHandler);
            } else if (handlers) {
              events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
            } else {
              events[name] = newHandler;
            }

            el.plain = false;
          }

          function getRawBindingAttr (
            el,
            name
          ) {
            return el.rawAttrsMap[':' + name] ||
              el.rawAttrsMap['v-bind:' + name] ||
              el.rawAttrsMap[name]
          }

          function getBindingAttr (
            el,
            name,
            getStatic
          ) {
            var dynamicValue =
              getAndRemoveAttr(el, ':' + name) ||
              getAndRemoveAttr(el, 'v-bind:' + name);
            if (dynamicValue != null) {
              return parseFilters(dynamicValue)
            } else if (getStatic !== false) {
              var staticValue = getAndRemoveAttr(el, name);
              if (staticValue != null) {
                return JSON.stringify(staticValue)
              }
            }
          }

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
          function getAndRemoveAttr (
            el,
            name,
            removeFromMap
          ) {
            var val;
            if ((val = el.attrsMap[name]) != null) {
              var list = el.attrsList;
              for (var i = 0, l = list.length; i < l; i++) {
                if (list[i].name === name) {
                  list.splice(i, 1);
                  break
                }
              }
            }
            if (removeFromMap) {
              delete el.attrsMap[name];
            }
            return val
          }

          function getAndRemoveAttrByRegex (
            el,
            name
          ) {
            var list = el.attrsList;
            for (var i = 0, l = list.length; i < l; i++) {
              var attr = list[i];
              if (name.test(attr.name)) {
                list.splice(i, 1);
                return attr
              }
            }
          }

          function rangeSetItem (
            item,
            range
          ) {
            if (range) {
              if (range.start != null) {
                item.start = range.start;
              }
              if (range.end != null) {
                item.end = range.end;
              }
            }
            return item
          }

          /*  */

          /**
           * Cross-platform code generation for component v-model
           */
          function genComponentModel (
            el,
            value,
            modifiers
          ) {
            var ref = modifiers || {};
            var number = ref.number;
            var trim = ref.trim;

            var baseValueExpression = '$$v';
            var valueExpression = baseValueExpression;
            if (trim) {
              valueExpression =
                "(typeof " + baseValueExpression + " === 'string'" +
                "? " + baseValueExpression + ".trim()" +
                ": " + baseValueExpression + ")";
            }
            if (number) {
              valueExpression = "_n(" + valueExpression + ")";
            }
            var assignment = genAssignmentCode(value, valueExpression);

            el.model = {
              value: ("(" + value + ")"),
              expression: JSON.stringify(value),
              callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
            };
          }

          /**
           * Cross-platform codegen helper for generating v-model value assignment code.
           */
          function genAssignmentCode (
            value,
            assignment
          ) {
            var res = parseModel(value);
            if (res.key === null) {
              return (value + "=" + assignment)
            } else {
              return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
            }
          }

          /**
           * Parse a v-model expression into a base path and a final key segment.
           * Handles both dot-path and possible square brackets.
           *
           * Possible cases:
           *
           * - test
           * - test[key]
           * - test[test1[key]]
           * - test["a"][key]
           * - xxx.test[a[a].test1[key]]
           * - test.xxx.a["asa"][test1[key]]
           *
           */

          var len, str, chr, index$1, expressionPos, expressionEndPos;



          function parseModel (val) {
            // Fix https://github.com/vuejs/vue/pull/7730
            // allow v-model="obj.val " (trailing whitespace)
            val = val.trim();
            len = val.length;

            if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
              index$1 = val.lastIndexOf('.');
              if (index$1 > -1) {
                return {
                  exp: val.slice(0, index$1),
                  key: '"' + val.slice(index$1 + 1) + '"'
                }
              } else {
                return {
                  exp: val,
                  key: null
                }
              }
            }

            str = val;
            index$1 = expressionPos = expressionEndPos = 0;

            while (!eof()) {
              chr = next();
              /* istanbul ignore if */
              if (isStringStart(chr)) {
                parseString(chr);
              } else if (chr === 0x5B) {
                parseBracket(chr);
              }
            }

            return {
              exp: val.slice(0, expressionPos),
              key: val.slice(expressionPos + 1, expressionEndPos)
            }
          }

          function next () {
            return str.charCodeAt(++index$1)
          }

          function eof () {
            return index$1 >= len
          }

          function isStringStart (chr) {
            return chr === 0x22 || chr === 0x27
          }

          function parseBracket (chr) {
            var inBracket = 1;
            expressionPos = index$1;
            while (!eof()) {
              chr = next();
              if (isStringStart(chr)) {
                parseString(chr);
                continue
              }
              if (chr === 0x5B) { inBracket++; }
              if (chr === 0x5D) { inBracket--; }
              if (inBracket === 0) {
                expressionEndPos = index$1;
                break
              }
            }
          }

          function parseString (chr) {
            var stringQuote = chr;
            while (!eof()) {
              chr = next();
              if (chr === stringQuote) {
                break
              }
            }
          }

          /*  */

          var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
          var RANGE_TOKEN = '__r';
          var CHECKBOX_RADIO_TOKEN = '__c';

          function model (
            el,
            dir,
            _warn
          ) {
            warn$1 = _warn;
            var value = dir.value;
            var modifiers = dir.modifiers;
            var tag = el.tag;
            var type = el.attrsMap.type;

            if (false) {}

            if (el.component) {
              genComponentModel(el, value, modifiers);
              // component v-model doesn't need extra runtime
              return false
            } else if (tag === 'select') {
              genSelect(el, value, modifiers);
            } else if (tag === 'input' && type === 'checkbox') {
              genCheckboxModel(el, value, modifiers);
            } else if (tag === 'input' && type === 'radio') {
              genRadioModel(el, value, modifiers);
            } else if (tag === 'input' || tag === 'textarea') {
              genDefaultModel(el, value, modifiers);
            } else if (!config.isReservedTag(tag)) {
              genComponentModel(el, value, modifiers);
              // component v-model doesn't need extra runtime
              return false
            } else if (false) {}

            // ensure runtime directive metadata
            return true
          }

          function genCheckboxModel (
            el,
            value,
            modifiers
          ) {
            var number = modifiers && modifiers.number;
            var valueBinding = getBindingAttr(el, 'value') || 'null';
            var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
            var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
            addProp(el, 'checked',
              "Array.isArray(" + value + ")" +
              "?_i(" + value + "," + valueBinding + ")>-1" + (
                trueValueBinding === 'true'
                  ? (":(" + value + ")")
                  : (":_q(" + value + "," + trueValueBinding + ")")
              )
            );
            addHandler(el, 'change',
              "var $$a=" + value + "," +
              '$$el=$event.target,' +
              "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
              'if(Array.isArray($$a)){' +
              "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
              '$$i=_i($$a,$$v);' +
              "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
              "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
              "}else{" + (genAssignmentCode(value, '$$c')) + "}",
              null, true
            );
          }

          function genRadioModel (
            el,
            value,
            modifiers
          ) {
            var number = modifiers && modifiers.number;
            var valueBinding = getBindingAttr(el, 'value') || 'null';
            valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
            addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
            addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
          }

          function genSelect (
            el,
            value,
            modifiers
          ) {
            var number = modifiers && modifiers.number;
            var selectedVal = "Array.prototype.filter" +
              ".call($event.target.options,function(o){return o.selected})" +
              ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
              "return " + (number ? '_n(val)' : 'val') + "})";

            var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
            var code = "var $$selectedVal = " + selectedVal + ";";
            code = code + " " + (genAssignmentCode(value, assignment));
            addHandler(el, 'change', code, null, true);
          }

          function genDefaultModel (
            el,
            value,
            modifiers
          ) {
            var type = el.attrsMap.type;

            // warn if v-bind:value conflicts with v-model
            // except for inputs with v-bind:type
            if (false) { var binding, typeBinding, value$1; }

            var ref = modifiers || {};
            var lazy = ref.lazy;
            var number = ref.number;
            var trim = ref.trim;
            var needCompositionGuard = !lazy && type !== 'range';
            var event = lazy
              ? 'change'
              : type === 'range'
                ? RANGE_TOKEN
                : 'input';

            var valueExpression = '$event.target.value';
            if (trim) {
              valueExpression = "$event.target.value.trim()";
            }
            if (number) {
              valueExpression = "_n(" + valueExpression + ")";
            }

            var code = genAssignmentCode(value, valueExpression);
            if (needCompositionGuard) {
              code = "if($event.target.composing)return;" + code;
            }

            addProp(el, 'value', ("(" + value + ")"));
            addHandler(el, event, code, null, true);
            if (trim || number) {
              addHandler(el, 'blur', '$forceUpdate()');
            }
          }

          /*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
          function normalizeEvents (on) {
            /* istanbul ignore if */
            if (isDef(on[RANGE_TOKEN])) {
              // IE input[type=range] only supports `change` event
              var event = isIE ? 'change' : 'input';
              on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
              delete on[RANGE_TOKEN];
            }
            // This was originally intended to fix #4521 but no longer necessary
            // after 2.5. Keeping it for backwards compat with generated code from < 2.4
            /* istanbul ignore if */
            if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
              on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
              delete on[CHECKBOX_RADIO_TOKEN];
            }
          }

          var target$1;

          function createOnceHandler$1 (event, handler, capture) {
            var _target = target$1; // save current target element in closure
            return function onceHandler () {
              var res = handler.apply(null, arguments);
              if (res !== null) {
                remove$2(event, onceHandler, capture, _target);
              }
            }
          }

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
          var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

          function add$1 (
            name,
            handler,
            capture,
            passive
          ) {
            // async edge case #6566: inner click event triggers patch, event handler
            // attached to outer element during patch, and triggered again. This
            // happens because browsers fire microtask ticks between event propagation.
            // the solution is simple: we save the timestamp when a handler is attached,
            // and the handler would only fire if the event passed to it was fired
            // AFTER it was attached.
            if (useMicrotaskFix) {
              var attachedTimestamp = currentFlushTimestamp;
              var original = handler;
              handler = original._wrapper = function (e) {
                if (
                  // no bubbling, should always fire.
                  // this is just a safety net in case event.timeStamp is unreliable in
                  // certain weird environments...
                  e.target === e.currentTarget ||
                  // event is fired after handler attachment
                  e.timeStamp >= attachedTimestamp ||
                  // bail for environments that have buggy event.timeStamp implementations
                  // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
                  // #9681 QtWebEngine event.timeStamp is negative value
                  e.timeStamp <= 0 ||
                  // #9448 bail if event is fired in another document in a multi-page
                  // electron/nw.js app, since event.timeStamp will be using a different
                  // starting reference
                  e.target.ownerDocument !== document
                ) {
                  return original.apply(this, arguments)
                }
              };
            }
            target$1.addEventListener(
              name,
              handler,
              supportsPassive
                ? { capture: capture, passive: passive }
                : capture
            );
          }

          function remove$2 (
            name,
            handler,
            capture,
            _target
          ) {
            (_target || target$1).removeEventListener(
              name,
              handler._wrapper || handler,
              capture
            );
          }

          function updateDOMListeners (oldVnode, vnode) {
            if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
              return
            }
            var on = vnode.data.on || {};
            var oldOn = oldVnode.data.on || {};
            target$1 = vnode.elm;
            normalizeEvents(on);
            updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
            target$1 = undefined;
          }

          var events = {
            create: updateDOMListeners,
            update: updateDOMListeners
          };

          /*  */

          var svgContainer;

          function updateDOMProps (oldVnode, vnode) {
            if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
              return
            }
            var key, cur;
            var elm = vnode.elm;
            var oldProps = oldVnode.data.domProps || {};
            var props = vnode.data.domProps || {};
            // clone observed objects, as the user probably wants to mutate it
            if (isDef(props.__ob__)) {
              props = vnode.data.domProps = extend({}, props);
            }

            for (key in oldProps) {
              if (!(key in props)) {
                elm[key] = '';
              }
            }

            for (key in props) {
              cur = props[key];
              // ignore children if the node has textContent or innerHTML,
              // as these will throw away existing DOM nodes and cause removal errors
              // on subsequent patches (#3360)
              if (key === 'textContent' || key === 'innerHTML') {
                if (vnode.children) { vnode.children.length = 0; }
                if (cur === oldProps[key]) { continue }
                // #6601 work around Chrome version <= 55 bug where single textNode
                // replaced by innerHTML/textContent retains its parentNode property
                if (elm.childNodes.length === 1) {
                  elm.removeChild(elm.childNodes[0]);
                }
              }

              if (key === 'value' && elm.tagName !== 'PROGRESS') {
                // store value as _value as well since
                // non-string values will be stringified
                elm._value = cur;
                // avoid resetting cursor position when value is the same
                var strCur = isUndef(cur) ? '' : String(cur);
                if (shouldUpdateValue(elm, strCur)) {
                  elm.value = strCur;
                }
              } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
                // IE doesn't support innerHTML for SVG elements
                svgContainer = svgContainer || document.createElement('div');
                svgContainer.innerHTML = "<svg>" + cur + "</svg>";
                var svg = svgContainer.firstChild;
                while (elm.firstChild) {
                  elm.removeChild(elm.firstChild);
                }
                while (svg.firstChild) {
                  elm.appendChild(svg.firstChild);
                }
              } else if (
                // skip the update if old and new VDOM state is the same.
                // `value` is handled separately because the DOM value may be temporarily
                // out of sync with VDOM state due to focus, composition and modifiers.
                // This  #4521 by skipping the unnecessary `checked` update.
                cur !== oldProps[key]
              ) {
                // some property updates can throw
                // e.g. `value` on <progress> w/ non-finite value
                try {
                  elm[key] = cur;
                } catch (e) {}
              }
            }
          }

// check platforms/web/util/attrs.js acceptValue


          function shouldUpdateValue (elm, checkVal) {
            return (!elm.composing && (
              elm.tagName === 'OPTION' ||
              isNotInFocusAndDirty(elm, checkVal) ||
              isDirtyWithModifiers(elm, checkVal)
            ))
          }

          function isNotInFocusAndDirty (elm, checkVal) {
            // return true when textbox (.number and .trim) loses focus and its value is
            // not equal to the updated value
            var notInFocus = true;
            // #6157
            // work around IE bug when accessing document.activeElement in an iframe
            try { notInFocus = document.activeElement !== elm; } catch (e) {}
            return notInFocus && elm.value !== checkVal
          }

          function isDirtyWithModifiers (elm, newVal) {
            var value = elm.value;
            var modifiers = elm._vModifiers; // injected by v-model runtime
            if (isDef(modifiers)) {
              if (modifiers.number) {
                return toNumber(value) !== toNumber(newVal)
              }
              if (modifiers.trim) {
                return value.trim() !== newVal.trim()
              }
            }
            return value !== newVal
          }

          var domProps = {
            create: updateDOMProps,
            update: updateDOMProps
          };

          /*  */

          var parseStyleText = cached(function (cssText) {
            var res = {};
            var listDelimiter = /;(?![^(]*\))/g;
            var propertyDelimiter = /:(.+)/;
            cssText.split(listDelimiter).forEach(function (item) {
              if (item) {
                var tmp = item.split(propertyDelimiter);
                tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
              }
            });
            return res
          });

// merge static and dynamic style data on the same vnode
          function normalizeStyleData (data) {
            var style = normalizeStyleBinding(data.style);
            // static style is pre-processed into an object during compilation
            // and is always a fresh object, so it's safe to merge into it
            return data.staticStyle
              ? extend(data.staticStyle, style)
              : style
          }

// normalize possible array / string values into Object
          function normalizeStyleBinding (bindingStyle) {
            if (Array.isArray(bindingStyle)) {
              return toObject(bindingStyle)
            }
            if (typeof bindingStyle === 'string') {
              return parseStyleText(bindingStyle)
            }
            return bindingStyle
          }

          /**
           * parent component style should be after child's
           * so that parent component's style could override it
           */
          function getStyle (vnode, checkChild) {
            var res = {};
            var styleData;

            if (checkChild) {
              var childNode = vnode;
              while (childNode.componentInstance) {
                childNode = childNode.componentInstance._vnode;
                if (
                  childNode && childNode.data &&
                  (styleData = normalizeStyleData(childNode.data))
                ) {
                  extend(res, styleData);
                }
              }
            }

            if ((styleData = normalizeStyleData(vnode.data))) {
              extend(res, styleData);
            }

            var parentNode = vnode;
            while ((parentNode = parentNode.parent)) {
              if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
                extend(res, styleData);
              }
            }
            return res
          }

          /*  */

          var cssVarRE = /^--/;
          var importantRE = /\s*!important$/;
          var setProp = function (el, name, val) {
            /* istanbul ignore if */
            if (cssVarRE.test(name)) {
              el.style.setProperty(name, val);
            } else if (importantRE.test(val)) {
              el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
            } else {
              var normalizedName = normalize(name);
              if (Array.isArray(val)) {
                // Support values array created by autoprefixer, e.g.
                // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
                // Set them one by one, and the browser will only set those it can recognize
                for (var i = 0, len = val.length; i < len; i++) {
                  el.style[normalizedName] = val[i];
                }
              } else {
                el.style[normalizedName] = val;
              }
            }
          };

          var vendorNames = ['Webkit', 'Moz', 'ms'];

          var emptyStyle;
          var normalize = cached(function (prop) {
            emptyStyle = emptyStyle || document.createElement('div').style;
            prop = camelize(prop);
            if (prop !== 'filter' && (prop in emptyStyle)) {
              return prop
            }
            var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
            for (var i = 0; i < vendorNames.length; i++) {
              var name = vendorNames[i] + capName;
              if (name in emptyStyle) {
                return name
              }
            }
          });

          function updateStyle (oldVnode, vnode) {
            var data = vnode.data;
            var oldData = oldVnode.data;

            if (isUndef(data.staticStyle) && isUndef(data.style) &&
              isUndef(oldData.staticStyle) && isUndef(oldData.style)
            ) {
              return
            }

            var cur, name;
            var el = vnode.elm;
            var oldStaticStyle = oldData.staticStyle;
            var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

            // if static style exists, stylebinding already merged into it when doing normalizeStyleData
            var oldStyle = oldStaticStyle || oldStyleBinding;

            var style = normalizeStyleBinding(vnode.data.style) || {};

            // store normalized style under a different key for next diff
            // make sure to clone it if it's reactive, since the user likely wants
            // to mutate it.
            vnode.data.normalizedStyle = isDef(style.__ob__)
              ? extend({}, style)
              : style;

            var newStyle = getStyle(vnode, true);

            for (name in oldStyle) {
              if (isUndef(newStyle[name])) {
                setProp(el, name, '');
              }
            }
            for (name in newStyle) {
              cur = newStyle[name];
              if (cur !== oldStyle[name]) {
                // ie9 setting to null has no effect, must use empty string
                setProp(el, name, cur == null ? '' : cur);
              }
            }
          }

          var style = {
            create: updateStyle,
            update: updateStyle
          };

          /*  */

          var whitespaceRE = /\s+/;

          /**
           * Add class with compatibility for SVG since classList is not supported on
           * SVG elements in IE
           */
          function addClass (el, cls) {
            /* istanbul ignore if */
            if (!cls || !(cls = cls.trim())) {
              return
            }

            /* istanbul ignore else */
            if (el.classList) {
              if (cls.indexOf(' ') > -1) {
                cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
              } else {
                el.classList.add(cls);
              }
            } else {
              var cur = " " + (el.getAttribute('class') || '') + " ";
              if (cur.indexOf(' ' + cls + ' ') < 0) {
                el.setAttribute('class', (cur + cls).trim());
              }
            }
          }

          /**
           * Remove class with compatibility for SVG since classList is not supported on
           * SVG elements in IE
           */
          function removeClass (el, cls) {
            /* istanbul ignore if */
            if (!cls || !(cls = cls.trim())) {
              return
            }

            /* istanbul ignore else */
            if (el.classList) {
              if (cls.indexOf(' ') > -1) {
                cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
              } else {
                el.classList.remove(cls);
              }
              if (!el.classList.length) {
                el.removeAttribute('class');
              }
            } else {
              var cur = " " + (el.getAttribute('class') || '') + " ";
              var tar = ' ' + cls + ' ';
              while (cur.indexOf(tar) >= 0) {
                cur = cur.replace(tar, ' ');
              }
              cur = cur.trim();
              if (cur) {
                el.setAttribute('class', cur);
              } else {
                el.removeAttribute('class');
              }
            }
          }

          /*  */

          function resolveTransition (def$$1) {
            if (!def$$1) {
              return
            }
            /* istanbul ignore else */
            if (typeof def$$1 === 'object') {
              var res = {};
              if (def$$1.css !== false) {
                extend(res, autoCssTransition(def$$1.name || 'v'));
              }
              extend(res, def$$1);
              return res
            } else if (typeof def$$1 === 'string') {
              return autoCssTransition(def$$1)
            }
          }

          var autoCssTransition = cached(function (name) {
            return {
              enterClass: (name + "-enter"),
              enterToClass: (name + "-enter-to"),
              enterActiveClass: (name + "-enter-active"),
              leaveClass: (name + "-leave"),
              leaveToClass: (name + "-leave-to"),
              leaveActiveClass: (name + "-leave-active")
            }
          });

          var hasTransition = inBrowser && !isIE9;
          var TRANSITION = 'transition';
          var ANIMATION = 'animation';

// Transition property/event sniffing
          var transitionProp = 'transition';
          var transitionEndEvent = 'transitionend';
          var animationProp = 'animation';
          var animationEndEvent = 'animationend';
          if (hasTransition) {
            /* istanbul ignore if */
            if (window.ontransitionend === undefined &&
              window.onwebkittransitionend !== undefined
            ) {
              transitionProp = 'WebkitTransition';
              transitionEndEvent = 'webkitTransitionEnd';
            }
            if (window.onanimationend === undefined &&
              window.onwebkitanimationend !== undefined
            ) {
              animationProp = 'WebkitAnimation';
              animationEndEvent = 'webkitAnimationEnd';
            }
          }

// binding to window is necessary to make hot reload work in IE in strict mode
          var raf = inBrowser
            ? window.requestAnimationFrame
              ? window.requestAnimationFrame.bind(window)
              : setTimeout
            : /* istanbul ignore next */ function (fn) { return fn(); };

          function nextFrame (fn) {
            raf(function () {
              raf(fn);
            });
          }

          function addTransitionClass (el, cls) {
            var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
            if (transitionClasses.indexOf(cls) < 0) {
              transitionClasses.push(cls);
              addClass(el, cls);
            }
          }

          function removeTransitionClass (el, cls) {
            if (el._transitionClasses) {
              remove(el._transitionClasses, cls);
            }
            removeClass(el, cls);
          }

          function whenTransitionEnds (
            el,
            expectedType,
            cb
          ) {
            var ref = getTransitionInfo(el, expectedType);
            var type = ref.type;
            var timeout = ref.timeout;
            var propCount = ref.propCount;
            if (!type) { return cb() }
            var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
            var ended = 0;
            var end = function () {
              el.removeEventListener(event, onEnd);
              cb();
            };
            var onEnd = function (e) {
              if (e.target === el) {
                if (++ended >= propCount) {
                  end();
                }
              }
            };
            setTimeout(function () {
              if (ended < propCount) {
                end();
              }
            }, timeout + 1);
            el.addEventListener(event, onEnd);
          }

          var transformRE = /\b(transform|all)(,|$)/;

          function getTransitionInfo (el, expectedType) {
            var styles = window.getComputedStyle(el);
            // JSDOM may return undefined for transition properties
            var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
            var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
            var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
            var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
            var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
            var animationTimeout = getTimeout(animationDelays, animationDurations);

            var type;
            var timeout = 0;
            var propCount = 0;
            /* istanbul ignore if */
            if (expectedType === TRANSITION) {
              if (transitionTimeout > 0) {
                type = TRANSITION;
                timeout = transitionTimeout;
                propCount = transitionDurations.length;
              }
            } else if (expectedType === ANIMATION) {
              if (animationTimeout > 0) {
                type = ANIMATION;
                timeout = animationTimeout;
                propCount = animationDurations.length;
              }
            } else {
              timeout = Math.max(transitionTimeout, animationTimeout);
              type = timeout > 0
                ? transitionTimeout > animationTimeout
                  ? TRANSITION
                  : ANIMATION
                : null;
              propCount = type
                ? type === TRANSITION
                  ? transitionDurations.length
                  : animationDurations.length
                : 0;
            }
            var hasTransform =
              type === TRANSITION &&
              transformRE.test(styles[transitionProp + 'Property']);
            return {
              type: type,
              timeout: timeout,
              propCount: propCount,
              hasTransform: hasTransform
            }
          }

          function getTimeout (delays, durations) {
            /* istanbul ignore next */
            while (delays.length < durations.length) {
              delays = delays.concat(delays);
            }

            return Math.max.apply(null, durations.map(function (d, i) {
              return toMs(d) + toMs(delays[i])
            }))
          }

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
          function toMs (s) {
            return Number(s.slice(0, -1).replace(',', '.')) * 1000
          }

          /*  */

          function enter (vnode, toggleDisplay) {
            var el = vnode.elm;

            // call leave callback now
            if (isDef(el._leaveCb)) {
              el._leaveCb.cancelled = true;
              el._leaveCb();
            }

            var data = resolveTransition(vnode.data.transition);
            if (isUndef(data)) {
              return
            }

            /* istanbul ignore if */
            if (isDef(el._enterCb) || el.nodeType !== 1) {
              return
            }

            var css = data.css;
            var type = data.type;
            var enterClass = data.enterClass;
            var enterToClass = data.enterToClass;
            var enterActiveClass = data.enterActiveClass;
            var appearClass = data.appearClass;
            var appearToClass = data.appearToClass;
            var appearActiveClass = data.appearActiveClass;
            var beforeEnter = data.beforeEnter;
            var enter = data.enter;
            var afterEnter = data.afterEnter;
            var enterCancelled = data.enterCancelled;
            var beforeAppear = data.beforeAppear;
            var appear = data.appear;
            var afterAppear = data.afterAppear;
            var appearCancelled = data.appearCancelled;
            var duration = data.duration;

            // activeInstance will always be the <transition> component managing this
            // transition. One edge case to check is when the <transition> is placed
            // as the root node of a child component. In that case we need to check
            // <transition>'s parent for appear check.
            var context = activeInstance;
            var transitionNode = activeInstance.$vnode;
            while (transitionNode && transitionNode.parent) {
              context = transitionNode.context;
              transitionNode = transitionNode.parent;
            }

            var isAppear = !context._isMounted || !vnode.isRootInsert;

            if (isAppear && !appear && appear !== '') {
              return
            }

            var startClass = isAppear && appearClass
              ? appearClass
              : enterClass;
            var activeClass = isAppear && appearActiveClass
              ? appearActiveClass
              : enterActiveClass;
            var toClass = isAppear && appearToClass
              ? appearToClass
              : enterToClass;

            var beforeEnterHook = isAppear
              ? (beforeAppear || beforeEnter)
              : beforeEnter;
            var enterHook = isAppear
              ? (typeof appear === 'function' ? appear : enter)
              : enter;
            var afterEnterHook = isAppear
              ? (afterAppear || afterEnter)
              : afterEnter;
            var enterCancelledHook = isAppear
              ? (appearCancelled || enterCancelled)
              : enterCancelled;

            var explicitEnterDuration = toNumber(
              isObject(duration)
                ? duration.enter
                : duration
            );

            if (false) {}

            var expectsCSS = css !== false && !isIE9;
            var userWantsControl = getHookArgumentsLength(enterHook);

            var cb = el._enterCb = once(function () {
              if (expectsCSS) {
                removeTransitionClass(el, toClass);
                removeTransitionClass(el, activeClass);
              }
              if (cb.cancelled) {
                if (expectsCSS) {
                  removeTransitionClass(el, startClass);
                }
                enterCancelledHook && enterCancelledHook(el);
              } else {
                afterEnterHook && afterEnterHook(el);
              }
              el._enterCb = null;
            });

            if (!vnode.data.show) {
              // remove pending leave element on enter by injecting an insert hook
              mergeVNodeHook(vnode, 'insert', function () {
                var parent = el.parentNode;
                var pendingNode = parent && parent._pending && parent._pending[vnode.key];
                if (pendingNode &&
                  pendingNode.tag === vnode.tag &&
                  pendingNode.elm._leaveCb
                ) {
                  pendingNode.elm._leaveCb();
                }
                enterHook && enterHook(el, cb);
              });
            }

            // start enter transition
            beforeEnterHook && beforeEnterHook(el);
            if (expectsCSS) {
              addTransitionClass(el, startClass);
              addTransitionClass(el, activeClass);
              nextFrame(function () {
                removeTransitionClass(el, startClass);
                if (!cb.cancelled) {
                  addTransitionClass(el, toClass);
                  if (!userWantsControl) {
                    if (isValidDuration(explicitEnterDuration)) {
                      setTimeout(cb, explicitEnterDuration);
                    } else {
                      whenTransitionEnds(el, type, cb);
                    }
                  }
                }
              });
            }

            if (vnode.data.show) {
              toggleDisplay && toggleDisplay();
              enterHook && enterHook(el, cb);
            }

            if (!expectsCSS && !userWantsControl) {
              cb();
            }
          }

          function leave (vnode, rm) {
            var el = vnode.elm;

            // call enter callback now
            if (isDef(el._enterCb)) {
              el._enterCb.cancelled = true;
              el._enterCb();
            }

            var data = resolveTransition(vnode.data.transition);
            if (isUndef(data) || el.nodeType !== 1) {
              return rm()
            }

            /* istanbul ignore if */
            if (isDef(el._leaveCb)) {
              return
            }

            var css = data.css;
            var type = data.type;
            var leaveClass = data.leaveClass;
            var leaveToClass = data.leaveToClass;
            var leaveActiveClass = data.leaveActiveClass;
            var beforeLeave = data.beforeLeave;
            var leave = data.leave;
            var afterLeave = data.afterLeave;
            var leaveCancelled = data.leaveCancelled;
            var delayLeave = data.delayLeave;
            var duration = data.duration;

            var expectsCSS = css !== false && !isIE9;
            var userWantsControl = getHookArgumentsLength(leave);

            var explicitLeaveDuration = toNumber(
              isObject(duration)
                ? duration.leave
                : duration
            );

            if (false) {}

            var cb = el._leaveCb = once(function () {
              if (el.parentNode && el.parentNode._pending) {
                el.parentNode._pending[vnode.key] = null;
              }
              if (expectsCSS) {
                removeTransitionClass(el, leaveToClass);
                removeTransitionClass(el, leaveActiveClass);
              }
              if (cb.cancelled) {
                if (expectsCSS) {
                  removeTransitionClass(el, leaveClass);
                }
                leaveCancelled && leaveCancelled(el);
              } else {
                rm();
                afterLeave && afterLeave(el);
              }
              el._leaveCb = null;
            });

            if (delayLeave) {
              delayLeave(performLeave);
            } else {
              performLeave();
            }

            function performLeave () {
              // the delayed leave may have already been cancelled
              if (cb.cancelled) {
                return
              }
              // record leaving element
              if (!vnode.data.show && el.parentNode) {
                (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
              }
              beforeLeave && beforeLeave(el);
              if (expectsCSS) {
                addTransitionClass(el, leaveClass);
                addTransitionClass(el, leaveActiveClass);
                nextFrame(function () {
                  removeTransitionClass(el, leaveClass);
                  if (!cb.cancelled) {
                    addTransitionClass(el, leaveToClass);
                    if (!userWantsControl) {
                      if (isValidDuration(explicitLeaveDuration)) {
                        setTimeout(cb, explicitLeaveDuration);
                      } else {
                        whenTransitionEnds(el, type, cb);
                      }
                    }
                  }
                });
              }
              leave && leave(el, cb);
              if (!expectsCSS && !userWantsControl) {
                cb();
              }
            }
          }

// only used in dev mode
          function checkDuration (val, name, vnode) {
            if (typeof val !== 'number') {
              warn(
                "<transition> explicit " + name + " duration is not a valid number - " +
                "got " + (JSON.stringify(val)) + ".",
                vnode.context
              );
            } else if (isNaN(val)) {
              warn(
                "<transition> explicit " + name + " duration is NaN - " +
                'the duration expression might be incorrect.',
                vnode.context
              );
            }
          }

          function isValidDuration (val) {
            return typeof val === 'number' && !isNaN(val)
          }

          /**
           * Normalize a transition hook's argument length. The hook may be:
           * - a merged hook (invoker) with the original in .fns
           * - a wrapped component method (check ._length)
           * - a plain function (.length)
           */
          function getHookArgumentsLength (fn) {
            if (isUndef(fn)) {
              return false
            }
            var invokerFns = fn.fns;
            if (isDef(invokerFns)) {
              // invoker
              return getHookArgumentsLength(
                Array.isArray(invokerFns)
                  ? invokerFns[0]
                  : invokerFns
              )
            } else {
              return (fn._length || fn.length) > 1
            }
          }

          function _enter (_, vnode) {
            if (vnode.data.show !== true) {
              enter(vnode);
            }
          }

          var transition = inBrowser ? {
            create: _enter,
            activate: _enter,
            remove: function remove$$1 (vnode, rm) {
              /* istanbul ignore else */
              if (vnode.data.show !== true) {
                leave(vnode, rm);
              } else {
                rm();
              }
            }
          } : {};

          var platformModules = [
            attrs,
            klass,
            events,
            domProps,
            style,
            transition
          ];

          /*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
          var modules = platformModules.concat(baseModules);

          var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

          /**
           * Not type checking this file because flow doesn't like attaching
           * properties to Elements.
           */

          /* istanbul ignore if */
          if (isIE9) {
            // http://www.matts411.com/post/internet-explorer-9-oninput/
            document.addEventListener('selectionchange', function () {
              var el = document.activeElement;
              if (el && el.vmodel) {
                trigger(el, 'input');
              }
            });
          }

          var directive = {
            inserted: function inserted (el, binding, vnode, oldVnode) {
              if (vnode.tag === 'select') {
                // #6903
                if (oldVnode.elm && !oldVnode.elm._vOptions) {
                  mergeVNodeHook(vnode, 'postpatch', function () {
                    directive.componentUpdated(el, binding, vnode);
                  });
                } else {
                  setSelected(el, binding, vnode.context);
                }
                el._vOptions = [].map.call(el.options, getValue);
              } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
                el._vModifiers = binding.modifiers;
                if (!binding.modifiers.lazy) {
                  el.addEventListener('compositionstart', onCompositionStart);
                  el.addEventListener('compositionend', onCompositionEnd);
                  // Safari < 10.2 & UIWebView doesn't fire compositionend when
                  // switching focus before confirming composition choice
                  // this also fixes the issue where some browsers e.g. iOS Chrome
                  // fires "change" instead of "input" on autocomplete.
                  el.addEventListener('change', onCompositionEnd);
                  /* istanbul ignore if */
                  if (isIE9) {
                    el.vmodel = true;
                  }
                }
              }
            },

            componentUpdated: function componentUpdated (el, binding, vnode) {
              if (vnode.tag === 'select') {
                setSelected(el, binding, vnode.context);
                // in case the options rendered by v-for have changed,
                // it's possible that the value is out-of-sync with the rendered options.
                // detect such cases and filter out values that no longer has a matching
                // option in the DOM.
                var prevOptions = el._vOptions;
                var curOptions = el._vOptions = [].map.call(el.options, getValue);
                if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
                  // trigger change event if
                  // no matching option found for at least one value
                  var needReset = el.multiple
                    ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
                    : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
                  if (needReset) {
                    trigger(el, 'change');
                  }
                }
              }
            }
          };

          function setSelected (el, binding, vm) {
            actuallySetSelected(el, binding, vm);
            /* istanbul ignore if */
            if (isIE || isEdge) {
              setTimeout(function () {
                actuallySetSelected(el, binding, vm);
              }, 0);
            }
          }

          function actuallySetSelected (el, binding, vm) {
            var value = binding.value;
            var isMultiple = el.multiple;
            if (isMultiple && !Array.isArray(value)) {
              false && false;
              return
            }
            var selected, option;
            for (var i = 0, l = el.options.length; i < l; i++) {
              option = el.options[i];
              if (isMultiple) {
                selected = looseIndexOf(value, getValue(option)) > -1;
                if (option.selected !== selected) {
                  option.selected = selected;
                }
              } else {
                if (looseEqual(getValue(option), value)) {
                  if (el.selectedIndex !== i) {
                    el.selectedIndex = i;
                  }
                  return
                }
              }
            }
            if (!isMultiple) {
              el.selectedIndex = -1;
            }
          }

          function hasNoMatchingOption (value, options) {
            return options.every(function (o) { return !looseEqual(o, value); })
          }

          function getValue (option) {
            return '_value' in option
              ? option._value
              : option.value
          }

          function onCompositionStart (e) {
            e.target.composing = true;
          }

          function onCompositionEnd (e) {
            // prevent triggering an input event for no reason
            if (!e.target.composing) { return }
            e.target.composing = false;
            trigger(e.target, 'input');
          }

          function trigger (el, type) {
            var e = document.createEvent('HTMLEvents');
            e.initEvent(type, true, true);
            el.dispatchEvent(e);
          }

          /*  */

// recursively search for possible transition defined inside the component root
          function locateNode (vnode) {
            return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
              ? locateNode(vnode.componentInstance._vnode)
              : vnode
          }

          var show = {
            bind: function bind (el, ref, vnode) {
              var value = ref.value;

              vnode = locateNode(vnode);
              var transition$$1 = vnode.data && vnode.data.transition;
              var originalDisplay = el.__vOriginalDisplay =
                el.style.display === 'none' ? '' : el.style.display;
              if (value && transition$$1) {
                vnode.data.show = true;
                enter(vnode, function () {
                  el.style.display = originalDisplay;
                });
              } else {
                el.style.display = value ? originalDisplay : 'none';
              }
            },

            update: function update (el, ref, vnode) {
              var value = ref.value;
              var oldValue = ref.oldValue;

              /* istanbul ignore if */
              if (!value === !oldValue) { return }
              vnode = locateNode(vnode);
              var transition$$1 = vnode.data && vnode.data.transition;
              if (transition$$1) {
                vnode.data.show = true;
                if (value) {
                  enter(vnode, function () {
                    el.style.display = el.__vOriginalDisplay;
                  });
                } else {
                  leave(vnode, function () {
                    el.style.display = 'none';
                  });
                }
              } else {
                el.style.display = value ? el.__vOriginalDisplay : 'none';
              }
            },

            unbind: function unbind (
              el,
              binding,
              vnode,
              oldVnode,
              isDestroy
            ) {
              if (!isDestroy) {
                el.style.display = el.__vOriginalDisplay;
              }
            }
          };

          var platformDirectives = {
            model: directive,
            show: show
          };

          /*  */

          var transitionProps = {
            name: String,
            appear: Boolean,
            css: Boolean,
            mode: String,
            type: String,
            enterClass: String,
            leaveClass: String,
            enterToClass: String,
            leaveToClass: String,
            enterActiveClass: String,
            leaveActiveClass: String,
            appearClass: String,
            appearActiveClass: String,
            appearToClass: String,
            duration: [Number, String, Object]
          };

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
          function getRealChild (vnode) {
            var compOptions = vnode && vnode.componentOptions;
            if (compOptions && compOptions.Ctor.options.abstract) {
              return getRealChild(getFirstComponentChild(compOptions.children))
            } else {
              return vnode
            }
          }

          function extractTransitionData (comp) {
            var data = {};
            var options = comp.$options;
            // props
            for (var key in options.propsData) {
              data[key] = comp[key];
            }
            // events.
            // extract listeners and pass them directly to the transition methods
            var listeners = options._parentListeners;
            for (var key$1 in listeners) {
              data[camelize(key$1)] = listeners[key$1];
            }
            return data
          }

          function placeholder (h, rawChild) {
            if (/\d-keep-alive$/.test(rawChild.tag)) {
              return h('keep-alive', {
                props: rawChild.componentOptions.propsData
              })
            }
          }

          function hasParentTransition (vnode) {
            while ((vnode = vnode.parent)) {
              if (vnode.data.transition) {
                return true
              }
            }
          }

          function isSameChild (child, oldChild) {
            return oldChild.key === child.key && oldChild.tag === child.tag
          }

          var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

          var isVShowDirective = function (d) { return d.name === 'show'; };

          var Transition = {
            name: 'transition',
            props: transitionProps,
            abstract: true,

            render: function render (h) {
              var this$1 = this;

              var children = this.$slots.default;
              if (!children) {
                return
              }

              // filter out text nodes (possible whitespaces)
              children = children.filter(isNotTextNode);
              /* istanbul ignore if */
              if (!children.length) {
                return
              }

              // warn multiple elements
              if (false) {}

              var mode = this.mode;

              // warn invalid mode
              if (false
              ) {}

              var rawChild = children[0];

              // if this is a component root node and the component's
              // parent container node also has transition, skip.
              if (hasParentTransition(this.$vnode)) {
                return rawChild
              }

              // apply transition data to child
              // use getRealChild() to ignore abstract components e.g. keep-alive
              var child = getRealChild(rawChild);
              /* istanbul ignore if */
              if (!child) {
                return rawChild
              }

              if (this._leaving) {
                return placeholder(h, rawChild)
              }

              // ensure a key that is unique to the vnode type and to this transition
              // component instance. This key will be used to remove pending leaving nodes
              // during entering.
              var id = "__transition-" + (this._uid) + "-";
              child.key = child.key == null
                ? child.isComment
                  ? id + 'comment'
                  : id + child.tag
                : isPrimitive(child.key)
                  ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
                  : child.key;

              var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
              var oldRawChild = this._vnode;
              var oldChild = getRealChild(oldRawChild);

              // mark v-show
              // so that the transition module can hand over the control to the directive
              if (child.data.directives && child.data.directives.some(isVShowDirective)) {
                child.data.show = true;
              }

              if (
                oldChild &&
                oldChild.data &&
                !isSameChild(child, oldChild) &&
                !isAsyncPlaceholder(oldChild) &&
                // #6687 component root is a comment node
                !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
              ) {
                // replace old child transition data with fresh one
                // important for dynamic transitions!
                var oldData = oldChild.data.transition = extend({}, data);
                // handle transition mode
                if (mode === 'out-in') {
                  // return placeholder node and queue update when leave finishes
                  this._leaving = true;
                  mergeVNodeHook(oldData, 'afterLeave', function () {
                    this$1._leaving = false;
                    this$1.$forceUpdate();
                  });
                  return placeholder(h, rawChild)
                } else if (mode === 'in-out') {
                  if (isAsyncPlaceholder(child)) {
                    return oldRawChild
                  }
                  var delayedLeave;
                  var performLeave = function () { delayedLeave(); };
                  mergeVNodeHook(data, 'afterEnter', performLeave);
                  mergeVNodeHook(data, 'enterCancelled', performLeave);
                  mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
                }
              }

              return rawChild
            }
          };

          /*  */

          var props = extend({
            tag: String,
            moveClass: String
          }, transitionProps);

          delete props.mode;

          var TransitionGroup = {
            props: props,

            beforeMount: function beforeMount () {
              var this$1 = this;

              var update = this._update;
              this._update = function (vnode, hydrating) {
                var restoreActiveInstance = setActiveInstance(this$1);
                // force removing pass
                this$1.__patch__(
                  this$1._vnode,
                  this$1.kept,
                  false, // hydrating
                  true // removeOnly (!important, avoids unnecessary moves)
                );
                this$1._vnode = this$1.kept;
                restoreActiveInstance();
                update.call(this$1, vnode, hydrating);
              };
            },

            render: function render (h) {
              var tag = this.tag || this.$vnode.data.tag || 'span';
              var map = Object.create(null);
              var prevChildren = this.prevChildren = this.children;
              var rawChildren = this.$slots.default || [];
              var children = this.children = [];
              var transitionData = extractTransitionData(this);

              for (var i = 0; i < rawChildren.length; i++) {
                var c = rawChildren[i];
                if (c.tag) {
                  if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
                    children.push(c);
                    map[c.key] = c
                    ;(c.data || (c.data = {})).transition = transitionData;
                  } else if (false) { var name, opts; }
                }
              }

              if (prevChildren) {
                var kept = [];
                var removed = [];
                for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
                  var c$1 = prevChildren[i$1];
                  c$1.data.transition = transitionData;
                  c$1.data.pos = c$1.elm.getBoundingClientRect();
                  if (map[c$1.key]) {
                    kept.push(c$1);
                  } else {
                    removed.push(c$1);
                  }
                }
                this.kept = h(tag, null, kept);
                this.removed = removed;
              }

              return h(tag, null, children)
            },

            updated: function updated () {
              var children = this.prevChildren;
              var moveClass = this.moveClass || ((this.name || 'v') + '-move');
              if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
                return
              }

              // we divide the work into three loops to avoid mixing DOM reads and writes
              // in each iteration - which helps prevent layout thrashing.
              children.forEach(callPendingCbs);
              children.forEach(recordPosition);
              children.forEach(applyTranslation);

              // force reflow to put everything in position
              // assign to this to avoid being removed in tree-shaking
              // $flow-disable-line
              this._reflow = document.body.offsetHeight;

              children.forEach(function (c) {
                if (c.data.moved) {
                  var el = c.elm;
                  var s = el.style;
                  addTransitionClass(el, moveClass);
                  s.transform = s.WebkitTransform = s.transitionDuration = '';
                  el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
                    if (e && e.target !== el) {
                      return
                    }
                    if (!e || /transform$/.test(e.propertyName)) {
                      el.removeEventListener(transitionEndEvent, cb);
                      el._moveCb = null;
                      removeTransitionClass(el, moveClass);
                    }
                  });
                }
              });
            },

            methods: {
              hasMove: function hasMove (el, moveClass) {
                /* istanbul ignore if */
                if (!hasTransition) {
                  return false
                }
                /* istanbul ignore if */
                if (this._hasMove) {
                  return this._hasMove
                }
                // Detect whether an element with the move class applied has
                // CSS transitions. Since the element may be inside an entering
                // transition at this very moment, we make a clone of it and remove
                // all other transition classes applied to ensure only the move class
                // is applied.
                var clone = el.cloneNode();
                if (el._transitionClasses) {
                  el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
                }
                addClass(clone, moveClass);
                clone.style.display = 'none';
                this.$el.appendChild(clone);
                var info = getTransitionInfo(clone);
                this.$el.removeChild(clone);
                return (this._hasMove = info.hasTransform)
              }
            }
          };

          function callPendingCbs (c) {
            /* istanbul ignore if */
            if (c.elm._moveCb) {
              c.elm._moveCb();
            }
            /* istanbul ignore if */
            if (c.elm._enterCb) {
              c.elm._enterCb();
            }
          }

          function recordPosition (c) {
            c.data.newPos = c.elm.getBoundingClientRect();
          }

          function applyTranslation (c) {
            var oldPos = c.data.pos;
            var newPos = c.data.newPos;
            var dx = oldPos.left - newPos.left;
            var dy = oldPos.top - newPos.top;
            if (dx || dy) {
              c.data.moved = true;
              var s = c.elm.style;
              s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
              s.transitionDuration = '0s';
            }
          }

          var platformComponents = {
            Transition: Transition,
            TransitionGroup: TransitionGroup
          };

          /*  */

// install platform specific utils
          Vue.config.mustUseProp = mustUseProp;
          Vue.config.isReservedTag = isReservedTag;
          Vue.config.isReservedAttr = isReservedAttr;
          Vue.config.getTagNamespace = getTagNamespace;
          Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
          extend(Vue.options.directives, platformDirectives);
          extend(Vue.options.components, platformComponents);

// install platform patch function
          Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
          Vue.prototype.$mount = function (
            el,
            hydrating
          ) {
            el = el && inBrowser ? query(el) : undefined;
            return mountComponent(this, el, hydrating)
          };

// devtools global hook
          /* istanbul ignore next */
          if (inBrowser) {
            setTimeout(function () {
              if (config.devtools) {
                if (devtools) {
                  devtools.emit('init', Vue);
                } else if (
                  false
                ) {}
              }
              if (false
              ) {}
            }, 0);
          }

          /*  */

          var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
          var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

          var buildRegex = cached(function (delimiters) {
            var open = delimiters[0].replace(regexEscapeRE, '\\$&');
            var close = delimiters[1].replace(regexEscapeRE, '\\$&');
            return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
          });



          function parseText (
            text,
            delimiters
          ) {
            var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
            if (!tagRE.test(text)) {
              return
            }
            var tokens = [];
            var rawTokens = [];
            var lastIndex = tagRE.lastIndex = 0;
            var match, index, tokenValue;
            while ((match = tagRE.exec(text))) {
              index = match.index;
              // push text token
              if (index > lastIndex) {
                rawTokens.push(tokenValue = text.slice(lastIndex, index));
                tokens.push(JSON.stringify(tokenValue));
              }
              // tag token
              var exp = parseFilters(match[1].trim());
              tokens.push(("_s(" + exp + ")"));
              rawTokens.push({ '@binding': exp });
              lastIndex = index + match[0].length;
            }
            if (lastIndex < text.length) {
              rawTokens.push(tokenValue = text.slice(lastIndex));
              tokens.push(JSON.stringify(tokenValue));
            }
            return {
              expression: tokens.join('+'),
              tokens: rawTokens
            }
          }

          /*  */

          function transformNode (el, options) {
            var warn = options.warn || baseWarn;
            var staticClass = getAndRemoveAttr(el, 'class');
            if (false) { var res; }
            if (staticClass) {
              el.staticClass = JSON.stringify(staticClass);
            }
            var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
            if (classBinding) {
              el.classBinding = classBinding;
            }
          }

          function genData (el) {
            var data = '';
            if (el.staticClass) {
              data += "staticClass:" + (el.staticClass) + ",";
            }
            if (el.classBinding) {
              data += "class:" + (el.classBinding) + ",";
            }
            return data
          }

          var klass$1 = {
            staticKeys: ['staticClass'],
            transformNode: transformNode,
            genData: genData
          };

          /*  */

          function transformNode$1 (el, options) {
            var warn = options.warn || baseWarn;
            var staticStyle = getAndRemoveAttr(el, 'style');
            if (staticStyle) {
              /* istanbul ignore if */
              if (false) { var res; }
              el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
            }

            var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
            if (styleBinding) {
              el.styleBinding = styleBinding;
            }
          }

          function genData$1 (el) {
            var data = '';
            if (el.staticStyle) {
              data += "staticStyle:" + (el.staticStyle) + ",";
            }
            if (el.styleBinding) {
              data += "style:(" + (el.styleBinding) + "),";
            }
            return data
          }

          var style$1 = {
            staticKeys: ['staticStyle'],
            transformNode: transformNode$1,
            genData: genData$1
          };

          /*  */

          var decoder;

          var he = {
            decode: function decode (html) {
              decoder = decoder || document.createElement('div');
              decoder.innerHTML = html;
              return decoder.textContent
            }
          };

          /*  */

          var isUnaryTag = makeMap(
            'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
            'link,meta,param,source,track,wbr'
          );

// Elements that you can, intentionally, leave open
// (and which close themselves)
          var canBeLeftOpenTag = makeMap(
            'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
          );

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
          var isNonPhrasingTag = makeMap(
            'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
            'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
            'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
            'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
            'title,tr,track'
          );

          /**
           * Not type-checking this file because it's mostly vendor code.
           */

// Regular Expressions for parsing tags and attributes
          var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
          var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
          var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
          var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
          var startTagOpen = new RegExp(("^<" + qnameCapture));
          var startTagClose = /^\s*(\/?)>/;
          var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
          var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being passed as HTML comment when inlined in page
          var comment = /^<!\--/;
          var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
          var isPlainTextElement = makeMap('script,style,textarea', true);
          var reCache = {};

          var decodingMap = {
            '&lt;': '<',
            '&gt;': '>',
            '&quot;': '"',
            '&amp;': '&',
            '&#10;': '\n',
            '&#9;': '\t',
            '&#39;': "'"
          };
          var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
          var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
          var isIgnoreNewlineTag = makeMap('pre,textarea', true);
          var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

          function decodeAttr (value, shouldDecodeNewlines) {
            var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
            return value.replace(re, function (match) { return decodingMap[match]; })
          }

          function parseHTML (html, options) {
            var stack = [];
            var expectHTML = options.expectHTML;
            var isUnaryTag$$1 = options.isUnaryTag || no;
            var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
            var index = 0;
            var last, lastTag;
            while (html) {
              last = html;
              // Make sure we're not in a plaintext content element like script/style
              if (!lastTag || !isPlainTextElement(lastTag)) {
                var textEnd = html.indexOf('<');
                if (textEnd === 0) {
                  // Comment:
                  if (comment.test(html)) {
                    var commentEnd = html.indexOf('-->');

                    if (commentEnd >= 0) {
                      if (options.shouldKeepComment) {
                        options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
                      }
                      advance(commentEnd + 3);
                      continue
                    }
                  }

                  // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
                  if (conditionalComment.test(html)) {
                    var conditionalEnd = html.indexOf(']>');

                    if (conditionalEnd >= 0) {
                      advance(conditionalEnd + 2);
                      continue
                    }
                  }

                  // Doctype:
                  var doctypeMatch = html.match(doctype);
                  if (doctypeMatch) {
                    advance(doctypeMatch[0].length);
                    continue
                  }

                  // End tag:
                  var endTagMatch = html.match(endTag);
                  if (endTagMatch) {
                    var curIndex = index;
                    advance(endTagMatch[0].length);
                    parseEndTag(endTagMatch[1], curIndex, index);
                    continue
                  }

                  // Start tag:
                  var startTagMatch = parseStartTag();
                  if (startTagMatch) {
                    handleStartTag(startTagMatch);
                    if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
                      advance(1);
                    }
                    continue
                  }
                }

                var text = (void 0), rest = (void 0), next = (void 0);
                if (textEnd >= 0) {
                  rest = html.slice(textEnd);
                  while (
                    !endTag.test(rest) &&
                    !startTagOpen.test(rest) &&
                    !comment.test(rest) &&
                    !conditionalComment.test(rest)
                    ) {
                    // < in plain text, be forgiving and treat it as text
                    next = rest.indexOf('<', 1);
                    if (next < 0) { break }
                    textEnd += next;
                    rest = html.slice(textEnd);
                  }
                  text = html.substring(0, textEnd);
                }

                if (textEnd < 0) {
                  text = html;
                }

                if (text) {
                  advance(text.length);
                }

                if (options.chars && text) {
                  options.chars(text, index - text.length, index);
                }
              } else {
                var endTagLength = 0;
                var stackedTag = lastTag.toLowerCase();
                var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
                var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
                  endTagLength = endTag.length;
                  if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
                    text = text
                      .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
                      .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
                  }
                  if (shouldIgnoreFirstNewline(stackedTag, text)) {
                    text = text.slice(1);
                  }
                  if (options.chars) {
                    options.chars(text);
                  }
                  return ''
                });
                index += html.length - rest$1.length;
                html = rest$1;
                parseEndTag(stackedTag, index - endTagLength, index);
              }

              if (html === last) {
                options.chars && options.chars(html);
                if (false) {}
                break
              }
            }

            // Clean up any remaining tags
            parseEndTag();

            function advance (n) {
              index += n;
              html = html.substring(n);
            }

            function parseStartTag () {
              var start = html.match(startTagOpen);
              if (start) {
                var match = {
                  tagName: start[1],
                  attrs: [],
                  start: index
                };
                advance(start[0].length);
                var end, attr;
                while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
                  attr.start = index;
                  advance(attr[0].length);
                  attr.end = index;
                  match.attrs.push(attr);
                }
                if (end) {
                  match.unarySlash = end[1];
                  advance(end[0].length);
                  match.end = index;
                  return match
                }
              }
            }

            function handleStartTag (match) {
              var tagName = match.tagName;
              var unarySlash = match.unarySlash;

              if (expectHTML) {
                if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
                  parseEndTag(lastTag);
                }
                if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
                  parseEndTag(tagName);
                }
              }

              var unary = isUnaryTag$$1(tagName) || !!unarySlash;

              var l = match.attrs.length;
              var attrs = new Array(l);
              for (var i = 0; i < l; i++) {
                var args = match.attrs[i];
                var value = args[3] || args[4] || args[5] || '';
                var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
                  ? options.shouldDecodeNewlinesForHref
                  : options.shouldDecodeNewlines;
                attrs[i] = {
                  name: args[1],
                  value: decodeAttr(value, shouldDecodeNewlines)
                };
                if (false) {}
              }

              if (!unary) {
                stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
                lastTag = tagName;
              }

              if (options.start) {
                options.start(tagName, attrs, unary, match.start, match.end);
              }
            }

            function parseEndTag (tagName, start, end) {
              var pos, lowerCasedTagName;
              if (start == null) { start = index; }
              if (end == null) { end = index; }

              // Find the closest opened tag of the same type
              if (tagName) {
                lowerCasedTagName = tagName.toLowerCase();
                for (pos = stack.length - 1; pos >= 0; pos--) {
                  if (stack[pos].lowerCasedTag === lowerCasedTagName) {
                    break
                  }
                }
              } else {
                // If no tag name is provided, clean shop
                pos = 0;
              }

              if (pos >= 0) {
                // Close all the open elements, up the stack
                for (var i = stack.length - 1; i >= pos; i--) {
                  if (false
                  ) {}
                  if (options.end) {
                    options.end(stack[i].tag, start, end);
                  }
                }

                // Remove the open elements from the stack
                stack.length = pos;
                lastTag = pos && stack[pos - 1].tag;
              } else if (lowerCasedTagName === 'br') {
                if (options.start) {
                  options.start(tagName, [], true, start, end);
                }
              } else if (lowerCasedTagName === 'p') {
                if (options.start) {
                  options.start(tagName, [], false, start, end);
                }
                if (options.end) {
                  options.end(tagName, start, end);
                }
              }
            }
          }

          /*  */

          var onRE = /^@|^v-on:/;
          var dirRE = /^v-|^@|^:|^#/;
          var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
          var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
          var stripParensRE = /^\(|\)$/g;
          var dynamicArgRE = /^\[.*\]$/;

          var argRE = /:(.*)$/;
          var bindRE = /^:|^\.|^v-bind:/;
          var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

          var slotRE = /^v-slot(:|$)|^#/;

          var lineBreakRE = /[\r\n]/;
          var whitespaceRE$1 = /[ \f\t\r\n]+/g;

          var invalidAttributeRE = /[\s"'<>\/=]/;

          var decodeHTMLCached = cached(he.decode);

          var emptySlotScopeToken = "_empty_";

// configurable state
          var warn$2;
          var delimiters;
          var transforms;
          var preTransforms;
          var postTransforms;
          var platformIsPreTag;
          var platformMustUseProp;
          var platformGetTagNamespace;
          var maybeComponent;

          function createASTElement (
            tag,
            attrs,
            parent
          ) {
            return {
              type: 1,
              tag: tag,
              attrsList: attrs,
              attrsMap: makeAttrsMap(attrs),
              rawAttrsMap: {},
              parent: parent,
              children: []
            }
          }

          /**
           * Convert HTML string to AST.
           */
          function parse (
            template,
            options
          ) {
            warn$2 = options.warn || baseWarn;

            platformIsPreTag = options.isPreTag || no;
            platformMustUseProp = options.mustUseProp || no;
            platformGetTagNamespace = options.getTagNamespace || no;
            var isReservedTag = options.isReservedTag || no;
            maybeComponent = function (el) { return !!(
              el.component ||
              el.attrsMap[':is'] ||
              el.attrsMap['v-bind:is'] ||
              !(el.attrsMap.is ? isReservedTag(el.attrsMap.is) : isReservedTag(el.tag))
            ); };
            transforms = pluckModuleFunction(options.modules, 'transformNode');
            preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
            postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

            delimiters = options.delimiters;

            var stack = [];
            var preserveWhitespace = options.preserveWhitespace !== false;
            var whitespaceOption = options.whitespace;
            var root;
            var currentParent;
            var inVPre = false;
            var inPre = false;
            var warned = false;

            function warnOnce (msg, range) {
              if (!warned) {
                warned = true;
                warn$2(msg, range);
              }
            }

            function closeElement (element) {
              trimEndingWhitespace(element);
              if (!inVPre && !element.processed) {
                element = processElement(element, options);
              }
              // tree management
              if (!stack.length && element !== root) {
                // allow root elements with v-if, v-else-if and v-else
                if (root.if && (element.elseif || element.else)) {
                  if (false) {}
                  addIfCondition(root, {
                    exp: element.elseif,
                    block: element
                  });
                } else if (false) {}
              }
              if (currentParent && !element.forbidden) {
                if (element.elseif || element.else) {
                  processIfConditions(element, currentParent);
                } else {
                  if (element.slotScope) {
                    // scoped slot
                    // keep it in the children list so that v-else(-if) conditions can
                    // find it as the prev node.
                    var name = element.slotTarget || '"default"'
                    ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
                  }
                  currentParent.children.push(element);
                  element.parent = currentParent;
                }
              }

              // final children cleanup
              // filter out scoped slots
              element.children = element.children.filter(function (c) { return !(c).slotScope; });
              // remove trailing whitespace node again
              trimEndingWhitespace(element);

              // check pre state
              if (element.pre) {
                inVPre = false;
              }
              if (platformIsPreTag(element.tag)) {
                inPre = false;
              }
              // apply post-transforms
              for (var i = 0; i < postTransforms.length; i++) {
                postTransforms[i](element, options);
              }
            }

            function trimEndingWhitespace (el) {
              // remove trailing whitespace node
              if (!inPre) {
                var lastNode;
                while (
                  (lastNode = el.children[el.children.length - 1]) &&
                  lastNode.type === 3 &&
                  lastNode.text === ' '
                  ) {
                  el.children.pop();
                }
              }
            }

            function checkRootConstraints (el) {
              if (el.tag === 'slot' || el.tag === 'template') {
                warnOnce(
                  "Cannot use <" + (el.tag) + "> as component root element because it may " +
                  'contain multiple nodes.',
                  { start: el.start }
                );
              }
              if (el.attrsMap.hasOwnProperty('v-for')) {
                warnOnce(
                  'Cannot use v-for on stateful component root element because ' +
                  'it renders multiple elements.',
                  el.rawAttrsMap['v-for']
                );
              }
            }

            parseHTML(template, {
              warn: warn$2,
              expectHTML: options.expectHTML,
              isUnaryTag: options.isUnaryTag,
              canBeLeftOpenTag: options.canBeLeftOpenTag,
              shouldDecodeNewlines: options.shouldDecodeNewlines,
              shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
              shouldKeepComment: options.comments,
              outputSourceRange: options.outputSourceRange,
              start: function start (tag, attrs, unary, start$1, end) {
                // check namespace.
                // inherit parent ns if there is one
                var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

                // handle IE svg bug
                /* istanbul ignore if */
                if (isIE && ns === 'svg') {
                  attrs = guardIESVGBug(attrs);
                }

                var element = createASTElement(tag, attrs, currentParent);
                if (ns) {
                  element.ns = ns;
                }

                if (false) {}

                if (isForbiddenTag(element) && !isServerRendering()) {
                  element.forbidden = true;
                  false && false;
                }

                // apply pre-transforms
                for (var i = 0; i < preTransforms.length; i++) {
                  element = preTransforms[i](element, options) || element;
                }

                if (!inVPre) {
                  processPre(element);
                  if (element.pre) {
                    inVPre = true;
                  }
                }
                if (platformIsPreTag(element.tag)) {
                  inPre = true;
                }
                if (inVPre) {
                  processRawAttrs(element);
                } else if (!element.processed) {
                  // structural directives
                  processFor(element);
                  processIf(element);
                  processOnce(element);
                }

                if (!root) {
                  root = element;
                  if (false) {}
                }

                if (!unary) {
                  currentParent = element;
                  stack.push(element);
                } else {
                  closeElement(element);
                }
              },

              end: function end (tag, start, end$1) {
                var element = stack[stack.length - 1];
                // pop stack
                stack.length -= 1;
                currentParent = stack[stack.length - 1];
                if (false) {}
                closeElement(element);
              },

              chars: function chars (text, start, end) {
                if (!currentParent) {
                  if (false) {}
                  return
                }
                // IE textarea placeholder bug
                /* istanbul ignore if */
                if (isIE &&
                  currentParent.tag === 'textarea' &&
                  currentParent.attrsMap.placeholder === text
                ) {
                  return
                }
                var children = currentParent.children;
                if (inPre || text.trim()) {
                  text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
                } else if (!children.length) {
                  // remove the whitespace-only node right after an opening tag
                  text = '';
                } else if (whitespaceOption) {
                  if (whitespaceOption === 'condense') {
                    // in condense mode, remove the whitespace node if it contains
                    // line break, otherwise condense to a single space
                    text = lineBreakRE.test(text) ? '' : ' ';
                  } else {
                    text = ' ';
                  }
                } else {
                  text = preserveWhitespace ? ' ' : '';
                }
                if (text) {
                  if (!inPre && whitespaceOption === 'condense') {
                    // condense consecutive whitespaces into single space
                    text = text.replace(whitespaceRE$1, ' ');
                  }
                  var res;
                  var child;
                  if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
                    child = {
                      type: 2,
                      expression: res.expression,
                      tokens: res.tokens,
                      text: text
                    };
                  } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
                    child = {
                      type: 3,
                      text: text
                    };
                  }
                  if (child) {
                    if (false) {}
                    children.push(child);
                  }
                }
              },
              comment: function comment (text, start, end) {
                // adding anything as a sibling to the root node is forbidden
                // comments should still be allowed, but ignored
                if (currentParent) {
                  var child = {
                    type: 3,
                    text: text,
                    isComment: true
                  };
                  if (false) {}
                  currentParent.children.push(child);
                }
              }
            });
            return root
          }

          function processPre (el) {
            if (getAndRemoveAttr(el, 'v-pre') != null) {
              el.pre = true;
            }
          }

          function processRawAttrs (el) {
            var list = el.attrsList;
            var len = list.length;
            if (len) {
              var attrs = el.attrs = new Array(len);
              for (var i = 0; i < len; i++) {
                attrs[i] = {
                  name: list[i].name,
                  value: JSON.stringify(list[i].value)
                };
                if (list[i].start != null) {
                  attrs[i].start = list[i].start;
                  attrs[i].end = list[i].end;
                }
              }
            } else if (!el.pre) {
              // non root node in pre blocks with no attributes
              el.plain = true;
            }
          }

          function processElement (
            element,
            options
          ) {
            processKey(element);

            // determine whether this is a plain element after
            // removing structural attributes
            element.plain = (
              !element.key &&
              !element.scopedSlots &&
              !element.attrsList.length
            );

            processRef(element);
            processSlotContent(element);
            processSlotOutlet(element);
            processComponent(element);
            for (var i = 0; i < transforms.length; i++) {
              element = transforms[i](element, options) || element;
            }
            processAttrs(element);
            return element
          }

          function processKey (el) {
            var exp = getBindingAttr(el, 'key');
            if (exp) {
              if (false) { var parent, iterator; }
              el.key = exp;
            }
          }

          function processRef (el) {
            var ref = getBindingAttr(el, 'ref');
            if (ref) {
              el.ref = ref;
              el.refInFor = checkInFor(el);
            }
          }

          function processFor (el) {
            var exp;
            if ((exp = getAndRemoveAttr(el, 'v-for'))) {
              var res = parseFor(exp);
              if (res) {
                extend(el, res);
              } else if (false) {}
            }
          }



          function parseFor (exp) {
            var inMatch = exp.match(forAliasRE);
            if (!inMatch) { return }
            var res = {};
            res.for = inMatch[2].trim();
            var alias = inMatch[1].trim().replace(stripParensRE, '');
            var iteratorMatch = alias.match(forIteratorRE);
            if (iteratorMatch) {
              res.alias = alias.replace(forIteratorRE, '').trim();
              res.iterator1 = iteratorMatch[1].trim();
              if (iteratorMatch[2]) {
                res.iterator2 = iteratorMatch[2].trim();
              }
            } else {
              res.alias = alias;
            }
            return res
          }

          function processIf (el) {
            var exp = getAndRemoveAttr(el, 'v-if');
            if (exp) {
              el.if = exp;
              addIfCondition(el, {
                exp: exp,
                block: el
              });
            } else {
              if (getAndRemoveAttr(el, 'v-else') != null) {
                el.else = true;
              }
              var elseif = getAndRemoveAttr(el, 'v-else-if');
              if (elseif) {
                el.elseif = elseif;
              }
            }
          }

          function processIfConditions (el, parent) {
            var prev = findPrevElement(parent.children);
            if (prev && prev.if) {
              addIfCondition(prev, {
                exp: el.elseif,
                block: el
              });
            } else if (false) {}
          }

          function findPrevElement (children) {
            var i = children.length;
            while (i--) {
              if (children[i].type === 1) {
                return children[i]
              } else {
                if (false) {}
                children.pop();
              }
            }
          }

          function addIfCondition (el, condition) {
            if (!el.ifConditions) {
              el.ifConditions = [];
            }
            el.ifConditions.push(condition);
          }

          function processOnce (el) {
            var once$$1 = getAndRemoveAttr(el, 'v-once');
            if (once$$1 != null) {
              el.once = true;
            }
          }

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
          function processSlotContent (el) {
            var slotScope;
            if (el.tag === 'template') {
              slotScope = getAndRemoveAttr(el, 'scope');
              /* istanbul ignore if */
              if (false) {}
              el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
            } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
              /* istanbul ignore if */
              if (false) {}
              el.slotScope = slotScope;
            }

            // slot="xxx"
            var slotTarget = getBindingAttr(el, 'slot');
            if (slotTarget) {
              el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
              el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
              // preserve slot as an attribute for native shadow DOM compat
              // only for non-scoped slots.
              if (el.tag !== 'template' && !el.slotScope) {
                addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
              }
            }

            // 2.6 v-slot syntax
            {
              if (el.tag === 'template') {
                // v-slot on <template>
                var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
                if (slotBinding) {
                  if (false) {}
                  var ref = getSlotName(slotBinding);
                  var name = ref.name;
                  var dynamic = ref.dynamic;
                  el.slotTarget = name;
                  el.slotTargetDynamic = dynamic;
                  el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
                }
              } else {
                // v-slot on component, denotes default slot
                var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
                if (slotBinding$1) {
                  if (false) {}
                  // add the component's children to its default slot
                  var slots = el.scopedSlots || (el.scopedSlots = {});
                  var ref$1 = getSlotName(slotBinding$1);
                  var name$1 = ref$1.name;
                  var dynamic$1 = ref$1.dynamic;
                  var slotContainer = slots[name$1] = createASTElement('template', [], el);
                  slotContainer.slotTarget = name$1;
                  slotContainer.slotTargetDynamic = dynamic$1;
                  slotContainer.children = el.children.filter(function (c) {
                    if (!c.slotScope) {
                      c.parent = slotContainer;
                      return true
                    }
                  });
                  slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
                  // remove children as they are returned from scopedSlots now
                  el.children = [];
                  // mark el non-plain so data gets generated
                  el.plain = false;
                }
              }
            }
          }

          function getSlotName (binding) {
            var name = binding.name.replace(slotRE, '');
            if (!name) {
              if (binding.name[0] !== '#') {
                name = 'default';
              } else if (false) {}
            }
            return dynamicArgRE.test(name)
              // dynamic [name]
              ? { name: name.slice(1, -1), dynamic: true }
              // static name
              : { name: ("\"" + name + "\""), dynamic: false }
          }

// handle <slot/> outlets
          function processSlotOutlet (el) {
            if (el.tag === 'slot') {
              el.slotName = getBindingAttr(el, 'name');
              if (false) {}
            }
          }

          function processComponent (el) {
            var binding;
            if ((binding = getBindingAttr(el, 'is'))) {
              el.component = binding;
            }
            if (getAndRemoveAttr(el, 'inline-template') != null) {
              el.inlineTemplate = true;
            }
          }

          function processAttrs (el) {
            var list = el.attrsList;
            var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
            for (i = 0, l = list.length; i < l; i++) {
              name = rawName = list[i].name;
              value = list[i].value;
              if (dirRE.test(name)) {
                // mark element as dynamic
                el.hasBindings = true;
                // modifiers
                modifiers = parseModifiers(name.replace(dirRE, ''));
                // support .foo shorthand syntax for the .prop modifier
                if (modifiers) {
                  name = name.replace(modifierRE, '');
                }
                if (bindRE.test(name)) { // v-bind
                  name = name.replace(bindRE, '');
                  value = parseFilters(value);
                  isDynamic = dynamicArgRE.test(name);
                  if (isDynamic) {
                    name = name.slice(1, -1);
                  }
                  if (
                    false
                  ) {}
                  if (modifiers) {
                    if (modifiers.prop && !isDynamic) {
                      name = camelize(name);
                      if (name === 'innerHtml') { name = 'innerHTML'; }
                    }
                    if (modifiers.camel && !isDynamic) {
                      name = camelize(name);
                    }
                    if (modifiers.sync) {
                      syncGen = genAssignmentCode(value, "$event");
                      if (!isDynamic) {
                        addHandler(
                          el,
                          ("update:" + (camelize(name))),
                          syncGen,
                          null,
                          false,
                          warn$2,
                          list[i]
                        );
                        if (hyphenate(name) !== camelize(name)) {
                          addHandler(
                            el,
                            ("update:" + (hyphenate(name))),
                            syncGen,
                            null,
                            false,
                            warn$2,
                            list[i]
                          );
                        }
                      } else {
                        // handler w/ dynamic event name
                        addHandler(
                          el,
                          ("\"update:\"+(" + name + ")"),
                          syncGen,
                          null,
                          false,
                          warn$2,
                          list[i],
                          true // dynamic
                        );
                      }
                    }
                  }
                  if ((modifiers && modifiers.prop) || (
                    !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
                  )) {
                    addProp(el, name, value, list[i], isDynamic);
                  } else {
                    addAttr(el, name, value, list[i], isDynamic);
                  }
                } else if (onRE.test(name)) { // v-on
                  name = name.replace(onRE, '');
                  isDynamic = dynamicArgRE.test(name);
                  if (isDynamic) {
                    name = name.slice(1, -1);
                  }
                  addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
                } else { // normal directives
                  name = name.replace(dirRE, '');
                  // parse arg
                  var argMatch = name.match(argRE);
                  var arg = argMatch && argMatch[1];
                  isDynamic = false;
                  if (arg) {
                    name = name.slice(0, -(arg.length + 1));
                    if (dynamicArgRE.test(arg)) {
                      arg = arg.slice(1, -1);
                      isDynamic = true;
                    }
                  }
                  addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
                  if (false) {}
                }
              } else {
                // literal attribute
                if (false) { var res; }
                addAttr(el, name, JSON.stringify(value), list[i]);
                // #6887 firefox doesn't update muted state if set via attribute
                // even immediately after element creation
                if (!el.component &&
                  name === 'muted' &&
                  platformMustUseProp(el.tag, el.attrsMap.type, name)) {
                  addProp(el, name, 'true', list[i]);
                }
              }
            }
          }

          function checkInFor (el) {
            var parent = el;
            while (parent) {
              if (parent.for !== undefined) {
                return true
              }
              parent = parent.parent;
            }
            return false
          }

          function parseModifiers (name) {
            var match = name.match(modifierRE);
            if (match) {
              var ret = {};
              match.forEach(function (m) { ret[m.slice(1)] = true; });
              return ret
            }
          }

          function makeAttrsMap (attrs) {
            var map = {};
            for (var i = 0, l = attrs.length; i < l; i++) {
              if (
                false
              ) {}
              map[attrs[i].name] = attrs[i].value;
            }
            return map
          }

// for script (e.g. type="x/template") or style, do not decode content
          function isTextTag (el) {
            return el.tag === 'script' || el.tag === 'style'
          }

          function isForbiddenTag (el) {
            return (
              el.tag === 'style' ||
              (el.tag === 'script' && (
                !el.attrsMap.type ||
                el.attrsMap.type === 'text/javascript'
              ))
            )
          }

          var ieNSBug = /^xmlns:NS\d+/;
          var ieNSPrefix = /^NS\d+:/;

          /* istanbul ignore next */
          function guardIESVGBug (attrs) {
            var res = [];
            for (var i = 0; i < attrs.length; i++) {
              var attr = attrs[i];
              if (!ieNSBug.test(attr.name)) {
                attr.name = attr.name.replace(ieNSPrefix, '');
                res.push(attr);
              }
            }
            return res
          }

          function checkForAliasModel (el, value) {
            var _el = el;
            while (_el) {
              if (_el.for && _el.alias === value) {
                warn$2(
                  "<" + (el.tag) + " v-model=\"" + value + "\">: " +
                  "You are binding v-model directly to a v-for iteration alias. " +
                  "This will not be able to modify the v-for source array because " +
                  "writing to the alias is like modifying a function local variable. " +
                  "Consider using an array of objects and use v-model on an object property instead.",
                  el.rawAttrsMap['v-model']
                );
              }
              _el = _el.parent;
            }
          }

          /*  */

          function preTransformNode (el, options) {
            if (el.tag === 'input') {
              var map = el.attrsMap;
              if (!map['v-model']) {
                return
              }

              var typeBinding;
              if (map[':type'] || map['v-bind:type']) {
                typeBinding = getBindingAttr(el, 'type');
              }
              if (!map.type && !typeBinding && map['v-bind']) {
                typeBinding = "(" + (map['v-bind']) + ").type";
              }

              if (typeBinding) {
                var ifCondition = getAndRemoveAttr(el, 'v-if', true);
                var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
                var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
                var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
                // 1. checkbox
                var branch0 = cloneASTElement(el);
                // process for on the main node
                processFor(branch0);
                addRawAttr(branch0, 'type', 'checkbox');
                processElement(branch0, options);
                branch0.processed = true; // prevent it from double-processed
                branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
                addIfCondition(branch0, {
                  exp: branch0.if,
                  block: branch0
                });
                // 2. add radio else-if condition
                var branch1 = cloneASTElement(el);
                getAndRemoveAttr(branch1, 'v-for', true);
                addRawAttr(branch1, 'type', 'radio');
                processElement(branch1, options);
                addIfCondition(branch0, {
                  exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
                  block: branch1
                });
                // 3. other
                var branch2 = cloneASTElement(el);
                getAndRemoveAttr(branch2, 'v-for', true);
                addRawAttr(branch2, ':type', typeBinding);
                processElement(branch2, options);
                addIfCondition(branch0, {
                  exp: ifCondition,
                  block: branch2
                });

                if (hasElse) {
                  branch0.else = true;
                } else if (elseIfCondition) {
                  branch0.elseif = elseIfCondition;
                }

                return branch0
              }
            }
          }

          function cloneASTElement (el) {
            return createASTElement(el.tag, el.attrsList.slice(), el.parent)
          }

          var model$1 = {
            preTransformNode: preTransformNode
          };

          var modules$1 = [
            klass$1,
            style$1,
            model$1
          ];

          /*  */

          function text (el, dir) {
            if (dir.value) {
              addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
            }
          }

          /*  */

          function html (el, dir) {
            if (dir.value) {
              addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
            }
          }

          var directives$1 = {
            model: model,
            text: text,
            html: html
          };

          /*  */

          var baseOptions = {
            expectHTML: true,
            modules: modules$1,
            directives: directives$1,
            isPreTag: isPreTag,
            isUnaryTag: isUnaryTag,
            mustUseProp: mustUseProp,
            canBeLeftOpenTag: canBeLeftOpenTag,
            isReservedTag: isReservedTag,
            getTagNamespace: getTagNamespace,
            staticKeys: genStaticKeys(modules$1)
          };

          /*  */

          var isStaticKey;
          var isPlatformReservedTag;

          var genStaticKeysCached = cached(genStaticKeys$1);

          /**
           * Goal of the optimizer: walk the generated template AST tree
           * and detect sub-trees that are purely static, i.e. parts of
           * the DOM that never needs to change.
           *
           * Once we detect these sub-trees, we can:
           *
           * 1. Hoist them into constants, so that we no longer need to
           *    create fresh nodes for them on each re-render;
           * 2. Completely skip them in the patching process.
           */
          function optimize (root, options) {
            if (!root) { return }
            isStaticKey = genStaticKeysCached(options.staticKeys || '');
            isPlatformReservedTag = options.isReservedTag || no;
            // first pass: mark all non-static nodes.
            markStatic$1(root);
            // second pass: mark static roots.
            markStaticRoots(root, false);
          }

          function genStaticKeys$1 (keys) {
            return makeMap(
              'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
              (keys ? ',' + keys : '')
            )
          }

          function markStatic$1 (node) {
            node.static = isStatic(node);
            if (node.type === 1) {
              // do not make component slot content static. this avoids
              // 1. components not able to mutate slot nodes
              // 2. static slot content fails for hot-reloading
              if (
                !isPlatformReservedTag(node.tag) &&
                node.tag !== 'slot' &&
                node.attrsMap['inline-template'] == null
              ) {
                return
              }
              for (var i = 0, l = node.children.length; i < l; i++) {
                var child = node.children[i];
                markStatic$1(child);
                if (!child.static) {
                  node.static = false;
                }
              }
              if (node.ifConditions) {
                for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
                  var block = node.ifConditions[i$1].block;
                  markStatic$1(block);
                  if (!block.static) {
                    node.static = false;
                  }
                }
              }
            }
          }

          function markStaticRoots (node, isInFor) {
            if (node.type === 1) {
              if (node.static || node.once) {
                node.staticInFor = isInFor;
              }
              // For a node to qualify as a static root, it should have children that
              // are not just static text. Otherwise the cost of hoisting out will
              // outweigh the benefits and it's better off to just always render it fresh.
              if (node.static && node.children.length && !(
                node.children.length === 1 &&
                node.children[0].type === 3
              )) {
                node.staticRoot = true;
                return
              } else {
                node.staticRoot = false;
              }
              if (node.children) {
                for (var i = 0, l = node.children.length; i < l; i++) {
                  markStaticRoots(node.children[i], isInFor || !!node.for);
                }
              }
              if (node.ifConditions) {
                for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
                  markStaticRoots(node.ifConditions[i$1].block, isInFor);
                }
              }
            }
          }

          function isStatic (node) {
            if (node.type === 2) { // expression
              return false
            }
            if (node.type === 3) { // text
              return true
            }
            return !!(node.pre || (
              !node.hasBindings && // no dynamic bindings
              !node.if && !node.for && // not v-if or v-for or v-else
              !isBuiltInTag(node.tag) && // not a built-in
              isPlatformReservedTag(node.tag) && // not a component
              !isDirectChildOfTemplateFor(node) &&
              Object.keys(node).every(isStaticKey)
            ))
          }

          function isDirectChildOfTemplateFor (node) {
            while (node.parent) {
              node = node.parent;
              if (node.tag !== 'template') {
                return false
              }
              if (node.for) {
                return true
              }
            }
            return false
          }

          /*  */

          var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
          var fnInvokeRE = /\([^)]*?\);*$/;
          var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
          var keyCodes = {
            esc: 27,
            tab: 9,
            enter: 13,
            space: 32,
            up: 38,
            left: 37,
            right: 39,
            down: 40,
            'delete': [8, 46]
          };

// KeyboardEvent.key aliases
          var keyNames = {
            // #7880: IE11 and Edge use `Esc` for Escape key name.
            esc: ['Esc', 'Escape'],
            tab: 'Tab',
            enter: 'Enter',
            // #9112: IE11 uses `Spacebar` for Space key name.
            space: [' ', 'Spacebar'],
            // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
            up: ['Up', 'ArrowUp'],
            left: ['Left', 'ArrowLeft'],
            right: ['Right', 'ArrowRight'],
            down: ['Down', 'ArrowDown'],
            // #9112: IE11 uses `Del` for Delete key name.
            'delete': ['Backspace', 'Delete', 'Del']
          };

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
          var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

          var modifierCode = {
            stop: '$event.stopPropagation();',
            prevent: '$event.preventDefault();',
            self: genGuard("$event.target !== $event.currentTarget"),
            ctrl: genGuard("!$event.ctrlKey"),
            shift: genGuard("!$event.shiftKey"),
            alt: genGuard("!$event.altKey"),
            meta: genGuard("!$event.metaKey"),
            left: genGuard("'button' in $event && $event.button !== 0"),
            middle: genGuard("'button' in $event && $event.button !== 1"),
            right: genGuard("'button' in $event && $event.button !== 2")
          };

          function genHandlers (
            events,
            isNative
          ) {
            var prefix = isNative ? 'nativeOn:' : 'on:';
            var staticHandlers = "";
            var dynamicHandlers = "";
            for (var name in events) {
              var handlerCode = genHandler(events[name]);
              if (events[name] && events[name].dynamic) {
                dynamicHandlers += name + "," + handlerCode + ",";
              } else {
                staticHandlers += "\"" + name + "\":" + handlerCode + ",";
              }
            }
            staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
            if (dynamicHandlers) {
              return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
            } else {
              return prefix + staticHandlers
            }
          }

          function genHandler (handler) {
            if (!handler) {
              return 'function(){}'
            }

            if (Array.isArray(handler)) {
              return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
            }

            var isMethodPath = simplePathRE.test(handler.value);
            var isFunctionExpression = fnExpRE.test(handler.value);
            var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

            if (!handler.modifiers) {
              if (isMethodPath || isFunctionExpression) {
                return handler.value
              }
              return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
            } else {
              var code = '';
              var genModifierCode = '';
              var keys = [];
              for (var key in handler.modifiers) {
                if (modifierCode[key]) {
                  genModifierCode += modifierCode[key];
                  // left/right
                  if (keyCodes[key]) {
                    keys.push(key);
                  }
                } else if (key === 'exact') {
                  var modifiers = (handler.modifiers);
                  genModifierCode += genGuard(
                    ['ctrl', 'shift', 'alt', 'meta']
                      .filter(function (keyModifier) { return !modifiers[keyModifier]; })
                      .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
                      .join('||')
                  );
                } else {
                  keys.push(key);
                }
              }
              if (keys.length) {
                code += genKeyFilter(keys);
              }
              // Make sure modifiers like prevent and stop get executed after key filtering
              if (genModifierCode) {
                code += genModifierCode;
              }
              var handlerCode = isMethodPath
                ? ("return " + (handler.value) + ".apply(null, arguments)")
                : isFunctionExpression
                  ? ("return (" + (handler.value) + ").apply(null, arguments)")
                  : isFunctionInvocation
                    ? ("return " + (handler.value))
                    : handler.value;
              return ("function($event){" + code + handlerCode + "}")
            }
          }

          function genKeyFilter (keys) {
            return (
              // make sure the key filters only apply to KeyboardEvents
              // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
              // key events that do not have keyCode property...
              "if(!$event.type.indexOf('key')&&" +
              (keys.map(genFilterCode).join('&&')) + ")return null;"
            )
          }

          function genFilterCode (key) {
            var keyVal = parseInt(key, 10);
            if (keyVal) {
              return ("$event.keyCode!==" + keyVal)
            }
            var keyCode = keyCodes[key];
            var keyName = keyNames[key];
            return (
              "_k($event.keyCode," +
              (JSON.stringify(key)) + "," +
              (JSON.stringify(keyCode)) + "," +
              "$event.key," +
              "" + (JSON.stringify(keyName)) +
              ")"
            )
          }

          /*  */

          function on (el, dir) {
            if (false) {}
            el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
          }

          /*  */

          function bind$1 (el, dir) {
            el.wrapData = function (code) {
              return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
            };
          }

          /*  */

          var baseDirectives = {
            on: on,
            bind: bind$1,
            cloak: noop
          };

          /*  */





          var CodegenState = function CodegenState (options) {
            this.options = options;
            this.warn = options.warn || baseWarn;
            this.transforms = pluckModuleFunction(options.modules, 'transformCode');
            this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
            this.directives = extend(extend({}, baseDirectives), options.directives);
            var isReservedTag = options.isReservedTag || no;
            this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
            this.onceId = 0;
            this.staticRenderFns = [];
            this.pre = false;
          };



          function generate (
            ast,
            options
          ) {
            var state = new CodegenState(options);
            // fix #11483, Root level <script> tags should not be rendered.
            var code = ast ? (ast.tag === 'script' ? 'null' : genElement(ast, state)) : '_c("div")';
            return {
              render: ("with(this){return " + code + "}"),
              staticRenderFns: state.staticRenderFns
            }
          }

          function genElement (el, state) {
            if (el.parent) {
              el.pre = el.pre || el.parent.pre;
            }

            if (el.staticRoot && !el.staticProcessed) {
              return genStatic(el, state)
            } else if (el.once && !el.onceProcessed) {
              return genOnce(el, state)
            } else if (el.for && !el.forProcessed) {
              return genFor(el, state)
            } else if (el.if && !el.ifProcessed) {
              return genIf(el, state)
            } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
              return genChildren(el, state) || 'void 0'
            } else if (el.tag === 'slot') {
              return genSlot(el, state)
            } else {
              // component or element
              var code;
              if (el.component) {
                code = genComponent(el.component, el, state);
              } else {
                var data;
                if (!el.plain || (el.pre && state.maybeComponent(el))) {
                  data = genData$2(el, state);
                }

                var children = el.inlineTemplate ? null : genChildren(el, state, true);
                code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
              }
              // module transforms
              for (var i = 0; i < state.transforms.length; i++) {
                code = state.transforms[i](el, code);
              }
              return code
            }
          }

// hoist static sub-trees out
          function genStatic (el, state) {
            el.staticProcessed = true;
            // Some elements (templates) need to behave differently inside of a v-pre
            // node.  All pre nodes are static roots, so we can use this as a location to
            // wrap a state change and reset it upon exiting the pre node.
            var originalPreState = state.pre;
            if (el.pre) {
              state.pre = el.pre;
            }
            state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
            state.pre = originalPreState;
            return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
          }

// v-once
          function genOnce (el, state) {
            el.onceProcessed = true;
            if (el.if && !el.ifProcessed) {
              return genIf(el, state)
            } else if (el.staticInFor) {
              var key = '';
              var parent = el.parent;
              while (parent) {
                if (parent.for) {
                  key = parent.key;
                  break
                }
                parent = parent.parent;
              }
              if (!key) {
                false && false;
                return genElement(el, state)
              }
              return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
            } else {
              return genStatic(el, state)
            }
          }

          function genIf (
            el,
            state,
            altGen,
            altEmpty
          ) {
            el.ifProcessed = true; // avoid recursion
            return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
          }

          function genIfConditions (
            conditions,
            state,
            altGen,
            altEmpty
          ) {
            if (!conditions.length) {
              return altEmpty || '_e()'
            }

            var condition = conditions.shift();
            if (condition.exp) {
              return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
            } else {
              return ("" + (genTernaryExp(condition.block)))
            }

            // v-if with v-once should generate code like (a)?_m(0):_m(1)
            function genTernaryExp (el) {
              return altGen
                ? altGen(el, state)
                : el.once
                  ? genOnce(el, state)
                  : genElement(el, state)
            }
          }

          function genFor (
            el,
            state,
            altGen,
            altHelper
          ) {
            var exp = el.for;
            var alias = el.alias;
            var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
            var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

            if (false
            ) {}

            el.forProcessed = true; // avoid recursion
            return (altHelper || '_l') + "((" + exp + ")," +
              "function(" + alias + iterator1 + iterator2 + "){" +
              "return " + ((altGen || genElement)(el, state)) +
              '})'
          }

          function genData$2 (el, state) {
            var data = '{';

            // directives first.
            // directives may mutate the el's other properties before they are generated.
            var dirs = genDirectives(el, state);
            if (dirs) { data += dirs + ','; }

            // key
            if (el.key) {
              data += "key:" + (el.key) + ",";
            }
            // ref
            if (el.ref) {
              data += "ref:" + (el.ref) + ",";
            }
            if (el.refInFor) {
              data += "refInFor:true,";
            }
            // pre
            if (el.pre) {
              data += "pre:true,";
            }
            // record original tag name for components using "is" attribute
            if (el.component) {
              data += "tag:\"" + (el.tag) + "\",";
            }
            // module data generation functions
            for (var i = 0; i < state.dataGenFns.length; i++) {
              data += state.dataGenFns[i](el);
            }
            // attributes
            if (el.attrs) {
              data += "attrs:" + (genProps(el.attrs)) + ",";
            }
            // DOM props
            if (el.props) {
              data += "domProps:" + (genProps(el.props)) + ",";
            }
            // event handlers
            if (el.events) {
              data += (genHandlers(el.events, false)) + ",";
            }
            if (el.nativeEvents) {
              data += (genHandlers(el.nativeEvents, true)) + ",";
            }
            // slot target
            // only for non-scoped slots
            if (el.slotTarget && !el.slotScope) {
              data += "slot:" + (el.slotTarget) + ",";
            }
            // scoped slots
            if (el.scopedSlots) {
              data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
            }
            // component v-model
            if (el.model) {
              data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
            }
            // inline-template
            if (el.inlineTemplate) {
              var inlineTemplate = genInlineTemplate(el, state);
              if (inlineTemplate) {
                data += inlineTemplate + ",";
              }
            }
            data = data.replace(/,$/, '') + '}';
            // v-bind dynamic argument wrap
            // v-bind with dynamic arguments must be applied using the same v-bind object
            // merge helper so that class/style/mustUseProp attrs are handled correctly.
            if (el.dynamicAttrs) {
              data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
            }
            // v-bind data wrap
            if (el.wrapData) {
              data = el.wrapData(data);
            }
            // v-on data wrap
            if (el.wrapListeners) {
              data = el.wrapListeners(data);
            }
            return data
          }

          function genDirectives (el, state) {
            var dirs = el.directives;
            if (!dirs) { return }
            var res = 'directives:[';
            var hasRuntime = false;
            var i, l, dir, needRuntime;
            for (i = 0, l = dirs.length; i < l; i++) {
              dir = dirs[i];
              needRuntime = true;
              var gen = state.directives[dir.name];
              if (gen) {
                // compile-time directive that manipulates AST.
                // returns true if it also needs a runtime counterpart.
                needRuntime = !!gen(el, dir, state.warn);
              }
              if (needRuntime) {
                hasRuntime = true;
                res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
              }
            }
            if (hasRuntime) {
              return res.slice(0, -1) + ']'
            }
          }

          function genInlineTemplate (el, state) {
            var ast = el.children[0];
            if (false) {}
            if (ast && ast.type === 1) {
              var inlineRenderFns = generate(ast, state.options);
              return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
            }
          }

          function genScopedSlots (
            el,
            slots,
            state
          ) {
            // by default scoped slots are considered "stable", this allows child
            // components with only scoped slots to skip forced updates from parent.
            // but in some cases we have to bail-out of this optimization
            // for example if the slot contains dynamic names, has v-if or v-for on them...
            var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
              var slot = slots[key];
              return (
                slot.slotTargetDynamic ||
                slot.if ||
                slot.for ||
                containsSlotChild(slot) // is passing down slot from parent which may be dynamic
              )
            });

            // #9534: if a component with scoped slots is inside a conditional branch,
            // it's possible for the same component to be reused but with different
            // compiled slot content. To avoid that, we generate a unique key based on
            // the generated code of all the slot contents.
            var needsKey = !!el.if;

            // OR when it is inside another scoped slot or v-for (the reactivity may be
            // disconnected due to the intermediate scope variable)
            // #9438, #9506
            // TODO: this can be further optimized by properly analyzing in-scope bindings
            // and skip force updating ones that do not actually use scope variables.
            if (!needsForceUpdate) {
              var parent = el.parent;
              while (parent) {
                if (
                  (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
                  parent.for
                ) {
                  needsForceUpdate = true;
                  break
                }
                if (parent.if) {
                  needsKey = true;
                }
                parent = parent.parent;
              }
            }

            var generatedSlots = Object.keys(slots)
              .map(function (key) { return genScopedSlot(slots[key], state); })
              .join(',');

            return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
          }

          function hash(str) {
            var hash = 5381;
            var i = str.length;
            while(i) {
              hash = (hash * 33) ^ str.charCodeAt(--i);
            }
            return hash >>> 0
          }

          function containsSlotChild (el) {
            if (el.type === 1) {
              if (el.tag === 'slot') {
                return true
              }
              return el.children.some(containsSlotChild)
            }
            return false
          }

          function genScopedSlot (
            el,
            state
          ) {
            var isLegacySyntax = el.attrsMap['slot-scope'];
            if (el.if && !el.ifProcessed && !isLegacySyntax) {
              return genIf(el, state, genScopedSlot, "null")
            }
            if (el.for && !el.forProcessed) {
              return genFor(el, state, genScopedSlot)
            }
            var slotScope = el.slotScope === emptySlotScopeToken
              ? ""
              : String(el.slotScope);
            var fn = "function(" + slotScope + "){" +
              "return " + (el.tag === 'template'
                ? el.if && isLegacySyntax
                  ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
                  : genChildren(el, state) || 'undefined'
                : genElement(el, state)) + "}";
            // reverse proxy v-slot without scope on this.$slots
            var reverseProxy = slotScope ? "" : ",proxy:true";
            return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
          }

          function genChildren (
            el,
            state,
            checkSkip,
            altGenElement,
            altGenNode
          ) {
            var children = el.children;
            if (children.length) {
              var el$1 = children[0];
              // optimize single v-for
              if (children.length === 1 &&
                el$1.for &&
                el$1.tag !== 'template' &&
                el$1.tag !== 'slot'
              ) {
                var normalizationType = checkSkip
                  ? state.maybeComponent(el$1) ? ",1" : ",0"
                  : "";
                return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
              }
              var normalizationType$1 = checkSkip
                ? getNormalizationType(children, state.maybeComponent)
                : 0;
              var gen = altGenNode || genNode;
              return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
            }
          }

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
          function getNormalizationType (
            children,
            maybeComponent
          ) {
            var res = 0;
            for (var i = 0; i < children.length; i++) {
              var el = children[i];
              if (el.type !== 1) {
                continue
              }
              if (needsNormalization(el) ||
                (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
                res = 2;
                break
              }
              if (maybeComponent(el) ||
                (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
                res = 1;
              }
            }
            return res
          }

          function needsNormalization (el) {
            return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
          }

          function genNode (node, state) {
            if (node.type === 1) {
              return genElement(node, state)
            } else if (node.type === 3 && node.isComment) {
              return genComment(node)
            } else {
              return genText(node)
            }
          }

          function genText (text) {
            return ("_v(" + (text.type === 2
              ? text.expression // no need for () because already wrapped in _s()
              : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
          }

          function genComment (comment) {
            return ("_e(" + (JSON.stringify(comment.text)) + ")")
          }

          function genSlot (el, state) {
            var slotName = el.slotName || '"default"';
            var children = genChildren(el, state);
            var res = "_t(" + slotName + (children ? (",function(){return " + children + "}") : '');
            var attrs = el.attrs || el.dynamicAttrs
              ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
                // slot props are camelized
                name: camelize(attr.name),
                value: attr.value,
                dynamic: attr.dynamic
              }); }))
              : null;
            var bind$$1 = el.attrsMap['v-bind'];
            if ((attrs || bind$$1) && !children) {
              res += ",null";
            }
            if (attrs) {
              res += "," + attrs;
            }
            if (bind$$1) {
              res += (attrs ? '' : ',null') + "," + bind$$1;
            }
            return res + ')'
          }

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
          function genComponent (
            componentName,
            el,
            state
          ) {
            var children = el.inlineTemplate ? null : genChildren(el, state, true);
            return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
          }

          function genProps (props) {
            var staticProps = "";
            var dynamicProps = "";
            for (var i = 0; i < props.length; i++) {
              var prop = props[i];
              var value = transformSpecialNewlines(prop.value);
              if (prop.dynamic) {
                dynamicProps += (prop.name) + "," + value + ",";
              } else {
                staticProps += "\"" + (prop.name) + "\":" + value + ",";
              }
            }
            staticProps = "{" + (staticProps.slice(0, -1)) + "}";
            if (dynamicProps) {
              return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
            } else {
              return staticProps
            }
          }

// #3895, #4268
          function transformSpecialNewlines (text) {
            return text
              .replace(/\u2028/g, '\\u2028')
              .replace(/\u2029/g, '\\u2029')
          }

          /*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
          var prohibitedKeywordRE = new RegExp('\\b' + (
            'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
            'super,throw,while,yield,delete,export,import,return,switch,default,' +
            'extends,finally,continue,debugger,function,arguments'
          ).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
          var unaryOperatorsRE = new RegExp('\\b' + (
            'delete,typeof,void'
          ).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
          var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
          function detectErrors (ast, warn) {
            if (ast) {
              checkNode(ast, warn);
            }
          }

          function checkNode (node, warn) {
            if (node.type === 1) {
              for (var name in node.attrsMap) {
                if (dirRE.test(name)) {
                  var value = node.attrsMap[name];
                  if (value) {
                    var range = node.rawAttrsMap[name];
                    if (name === 'v-for') {
                      checkFor(node, ("v-for=\"" + value + "\""), warn, range);
                    } else if (name === 'v-slot' || name[0] === '#') {
                      checkFunctionParameterExpression(value, (name + "=\"" + value + "\""), warn, range);
                    } else if (onRE.test(name)) {
                      checkEvent(value, (name + "=\"" + value + "\""), warn, range);
                    } else {
                      checkExpression(value, (name + "=\"" + value + "\""), warn, range);
                    }
                  }
                }
              }
              if (node.children) {
                for (var i = 0; i < node.children.length; i++) {
                  checkNode(node.children[i], warn);
                }
              }
            } else if (node.type === 2) {
              checkExpression(node.expression, node.text, warn, node);
            }
          }

          function checkEvent (exp, text, warn, range) {
            var stripped = exp.replace(stripStringRE, '');
            var keywordMatch = stripped.match(unaryOperatorsRE);
            if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {
              warn(
                "avoid using JavaScript unary operator as property name: " +
                "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
                range
              );
            }
            checkExpression(exp, text, warn, range);
          }

          function checkFor (node, text, warn, range) {
            checkExpression(node.for || '', text, warn, range);
            checkIdentifier(node.alias, 'v-for alias', text, warn, range);
            checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
            checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
          }

          function checkIdentifier (
            ident,
            type,
            text,
            warn,
            range
          ) {
            if (typeof ident === 'string') {
              try {
                new Function(("var " + ident + "=_"));
              } catch (e) {
                warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
              }
            }
          }

          function checkExpression (exp, text, warn, range) {
            try {
              new Function(("return " + exp));
            } catch (e) {
              var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
              if (keywordMatch) {
                warn(
                  "avoid using JavaScript keyword as property name: " +
                  "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
                  range
                );
              } else {
                warn(
                  "invalid expression: " + (e.message) + " in\n\n" +
                  "    " + exp + "\n\n" +
                  "  Raw expression: " + (text.trim()) + "\n",
                  range
                );
              }
            }
          }

          function checkFunctionParameterExpression (exp, text, warn, range) {
            try {
              new Function(exp, '');
            } catch (e) {
              warn(
                "invalid function parameter expression: " + (e.message) + " in\n\n" +
                "    " + exp + "\n\n" +
                "  Raw expression: " + (text.trim()) + "\n",
                range
              );
            }
          }

          /*  */

          var range = 2;

          function generateCodeFrame (
            source,
            start,
            end
          ) {
            if ( start === void 0 ) start = 0;
            if ( end === void 0 ) end = source.length;

            var lines = source.split(/\r?\n/);
            var count = 0;
            var res = [];
            for (var i = 0; i < lines.length; i++) {
              count += lines[i].length + 1;
              if (count >= start) {
                for (var j = i - range; j <= i + range || end > count; j++) {
                  if (j < 0 || j >= lines.length) { continue }
                  res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
                  var lineLength = lines[j].length;
                  if (j === i) {
                    // push underline
                    var pad = start - (count - lineLength) + 1;
                    var length = end > count ? lineLength - pad : end - start;
                    res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
                  } else if (j > i) {
                    if (end > count) {
                      var length$1 = Math.min(end - count, lineLength);
                      res.push("   |  " + repeat$1("^", length$1));
                    }
                    count += lineLength + 1;
                  }
                }
                break
              }
            }
            return res.join('\n')
          }

          function repeat$1 (str, n) {
            var result = '';
            if (n > 0) {
              while (true) { // eslint-disable-line
                if (n & 1) { result += str; }
                n >>>= 1;
                if (n <= 0) { break }
                str += str;
              }
            }
            return result
          }

          /*  */



          function createFunction (code, errors) {
            try {
              return new Function(code)
            } catch (err) {
              errors.push({ err: err, code: code });
              return noop
            }
          }

          function createCompileToFunctionFn (compile) {
            var cache = Object.create(null);

            return function compileToFunctions (
              template,
              options,
              vm
            ) {
              options = extend({}, options);
              var warn$$1 = options.warn || warn;
              delete options.warn;

              /* istanbul ignore if */
              if (false) {}

              // check cache
              var key = options.delimiters
                ? String(options.delimiters) + template
                : template;
              if (cache[key]) {
                return cache[key]
              }

              // compile
              var compiled = compile(template, options);

              // check compilation errors/tips
              if (false) {}

              // turn code into functions
              var res = {};
              var fnGenErrors = [];
              res.render = createFunction(compiled.render, fnGenErrors);
              res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
                return createFunction(code, fnGenErrors)
              });

              // check function generation errors.
              // this should only happen if there is a bug in the compiler itself.
              // mostly for codegen development use
              /* istanbul ignore if */
              if (false) {}

              return (cache[key] = res)
            }
          }

          /*  */

          function createCompilerCreator (baseCompile) {
            return function createCompiler (baseOptions) {
              function compile (
                template,
                options
              ) {
                var finalOptions = Object.create(baseOptions);
                var errors = [];
                var tips = [];

                var warn = function (msg, range, tip) {
                  (tip ? tips : errors).push(msg);
                };

                if (options) {
                  if (false) { var leadingSpaceLength; }
                  // merge custom modules
                  if (options.modules) {
                    finalOptions.modules =
                      (baseOptions.modules || []).concat(options.modules);
                  }
                  // merge custom directives
                  if (options.directives) {
                    finalOptions.directives = extend(
                      Object.create(baseOptions.directives || null),
                      options.directives
                    );
                  }
                  // copy other options
                  for (var key in options) {
                    if (key !== 'modules' && key !== 'directives') {
                      finalOptions[key] = options[key];
                    }
                  }
                }

                finalOptions.warn = warn;

                var compiled = baseCompile(template.trim(), finalOptions);
                if (false) {}
                compiled.errors = errors;
                compiled.tips = tips;
                return compiled
              }

              return {
                compile: compile,
                compileToFunctions: createCompileToFunctionFn(compile)
              }
            }
          }

          /*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
          var createCompiler = createCompilerCreator(function baseCompile (
            template,
            options
          ) {
            var ast = parse(template.trim(), options);
            if (options.optimize !== false) {
              optimize(ast, options);
            }
            var code = generate(ast, options);
            return {
              ast: ast,
              render: code.render,
              staticRenderFns: code.staticRenderFns
            }
          });

          /*  */

          var ref$1 = createCompiler(baseOptions);
          var compile = ref$1.compile;
          var compileToFunctions = ref$1.compileToFunctions;

          /*  */

// check whether current browser encodes a char inside attribute values
          var div;
          function getShouldDecode (href) {
            div = div || document.createElement('div');
            div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
            return div.innerHTML.indexOf('&#10;') > 0
          }

// #3663: IE encodes newlines inside attribute values while other browsers don't
          var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
          var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

          /*  */

          var idToTemplate = cached(function (id) {
            var el = query(id);
            return el && el.innerHTML
          });

          var mount = Vue.prototype.$mount;
          Vue.prototype.$mount = function (
            el,
            hydrating
          ) {
            el = el && query(el);

            /* istanbul ignore if */
            if (el === document.body || el === document.documentElement) {
              false && false;
              return this
            }

            var options = this.$options;
            // resolve template/el and convert to render function
            if (!options.render) {
              var template = options.template;
              if (template) {
                if (typeof template === 'string') {
                  if (template.charAt(0) === '#') {
                    template = idToTemplate(template);
                    /* istanbul ignore if */
                    if (false) {}
                  }
                } else if (template.nodeType) {
                  template = template.innerHTML;
                } else {
                  if (false) {}
                  return this
                }
              } else if (el) {
                template = getOuterHTML(el);
              }
              if (template) {
                /* istanbul ignore if */
                if (false) {}

                var ref = compileToFunctions(template, {
                  outputSourceRange: "production" !== 'production',
                  shouldDecodeNewlines: shouldDecodeNewlines,
                  shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
                  delimiters: options.delimiters,
                  comments: options.comments
                }, this);
                var render = ref.render;
                var staticRenderFns = ref.staticRenderFns;
                options.render = render;
                options.staticRenderFns = staticRenderFns;

                /* istanbul ignore if */
                if (false) {}
              }
            }
            return mount.call(this, el, hydrating)
          };

          /**
           * Get outerHTML of elements, taking care
           * of SVG elements in IE as well.
           */
          function getOuterHTML (el) {
            if (el.outerHTML) {
              return el.outerHTML
            } else {
              var container = document.createElement('div');
              container.appendChild(el.cloneNode(true));
              return container.innerHTML
            }
          }

          Vue.compile = compileToFunctions;

          /* harmony default export */ __webpack_exports__["a"] = (Vue);

          /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

        /***/ }),

      /***/ "a04b":
      /***/ (function(module, exports, __webpack_require__) {

        var toPrimitive = __webpack_require__("c04e");
        var isSymbol = __webpack_require__("d9b5");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
        module.exports = function (argument) {
          var key = toPrimitive(argument, 'string');
          return isSymbol(key) ? key : String(key);
        };


        /***/ }),

      /***/ "a4b4":
      /***/ (function(module, exports, __webpack_require__) {

        var userAgent = __webpack_require__("342f");

        module.exports = /web0s(?!.*chrome)/i.test(userAgent);


        /***/ }),

      /***/ "a4d3":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $ = __webpack_require__("23e7");
        var global = __webpack_require__("da84");
        var getBuiltIn = __webpack_require__("d066");
        var IS_PURE = __webpack_require__("c430");
        var DESCRIPTORS = __webpack_require__("83ab");
        var NATIVE_SYMBOL = __webpack_require__("4930");
        var fails = __webpack_require__("d039");
        var has = __webpack_require__("5135");
        var isArray = __webpack_require__("e8b5");
        var isCallable = __webpack_require__("1626");
        var isObject = __webpack_require__("861d");
        var isSymbol = __webpack_require__("d9b5");
        var anObject = __webpack_require__("825a");
        var toObject = __webpack_require__("7b0b");
        var toIndexedObject = __webpack_require__("fc6a");
        var toPropertyKey = __webpack_require__("a04b");
        var $toString = __webpack_require__("577e");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        var nativeObjectCreate = __webpack_require__("7c73");
        var objectKeys = __webpack_require__("df75");
        var getOwnPropertyNamesModule = __webpack_require__("241c");
        var getOwnPropertyNamesExternal = __webpack_require__("057f");
        var getOwnPropertySymbolsModule = __webpack_require__("7418");
        var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
        var definePropertyModule = __webpack_require__("9bf2");
        var propertyIsEnumerableModule = __webpack_require__("d1e7");
        var redefine = __webpack_require__("6eeb");
        var shared = __webpack_require__("5692");
        var sharedKey = __webpack_require__("f772");
        var hiddenKeys = __webpack_require__("d012");
        var uid = __webpack_require__("90e3");
        var wellKnownSymbol = __webpack_require__("b622");
        var wrappedWellKnownSymbolModule = __webpack_require__("e538");
        var defineWellKnownSymbol = __webpack_require__("746f");
        var setToStringTag = __webpack_require__("d44e");
        var InternalStateModule = __webpack_require__("69f3");
        var $forEach = __webpack_require__("b727").forEach;

        var HIDDEN = sharedKey('hidden');
        var SYMBOL = 'Symbol';
        var PROTOTYPE = 'prototype';
        var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(SYMBOL);
        var ObjectPrototype = Object[PROTOTYPE];
        var $Symbol = global.Symbol;
        var $stringify = getBuiltIn('JSON', 'stringify');
        var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        var nativeDefineProperty = definePropertyModule.f;
        var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
        var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
        var AllSymbols = shared('symbols');
        var ObjectPrototypeSymbols = shared('op-symbols');
        var StringToSymbolRegistry = shared('string-to-symbol-registry');
        var SymbolToStringRegistry = shared('symbol-to-string-registry');
        var WellKnownSymbolsStore = shared('wks');
        var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
        var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
        var setSymbolDescriptor = DESCRIPTORS && fails(function () {
          return nativeObjectCreate(nativeDefineProperty({}, 'a', {
            get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
          })).a != 7;
        }) ? function (O, P, Attributes) {
          var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
          if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
          nativeDefineProperty(O, P, Attributes);
          if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
            nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
          }
        } : nativeDefineProperty;

        var wrap = function (tag, description) {
          var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
          setInternalState(symbol, {
            type: SYMBOL,
            tag: tag,
            description: description
          });
          if (!DESCRIPTORS) symbol.description = description;
          return symbol;
        };

        var $defineProperty = function defineProperty(O, P, Attributes) {
          if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
          anObject(O);
          var key = toPropertyKey(P);
          anObject(Attributes);
          if (has(AllSymbols, key)) {
            if (!Attributes.enumerable) {
              if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
              O[HIDDEN][key] = true;
            } else {
              if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
              Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
            } return setSymbolDescriptor(O, key, Attributes);
          } return nativeDefineProperty(O, key, Attributes);
        };

        var $defineProperties = function defineProperties(O, Properties) {
          anObject(O);
          var properties = toIndexedObject(Properties);
          var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
          $forEach(keys, function (key) {
            if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
          });
          return O;
        };

        var $create = function create(O, Properties) {
          return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
        };

        var $propertyIsEnumerable = function propertyIsEnumerable(V) {
          var P = toPropertyKey(V);
          var enumerable = nativePropertyIsEnumerable.call(this, P);
          if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
          return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
        };

        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
          var it = toIndexedObject(O);
          var key = toPropertyKey(P);
          if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
          var descriptor = nativeGetOwnPropertyDescriptor(it, key);
          if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
            descriptor.enumerable = true;
          }
          return descriptor;
        };

        var $getOwnPropertyNames = function getOwnPropertyNames(O) {
          var names = nativeGetOwnPropertyNames(toIndexedObject(O));
          var result = [];
          $forEach(names, function (key) {
            if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
          });
          return result;
        };

        var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
          var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
          var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
          var result = [];
          $forEach(names, function (key) {
            if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
              result.push(AllSymbols[key]);
            }
          });
          return result;
        };

// `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor
        if (!NATIVE_SYMBOL) {
          $Symbol = function Symbol() {
            if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
            var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
            var tag = uid(description);
            var setter = function (value) {
              if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
              if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
              setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
            };
            if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
            return wrap(tag, description);
          };

          redefine($Symbol[PROTOTYPE], 'toString', function toString() {
            return getInternalState(this).tag;
          });

          redefine($Symbol, 'withoutSetter', function (description) {
            return wrap(uid(description), description);
          });

          propertyIsEnumerableModule.f = $propertyIsEnumerable;
          definePropertyModule.f = $defineProperty;
          getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
          getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
          getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

          wrappedWellKnownSymbolModule.f = function (name) {
            return wrap(wellKnownSymbol(name), name);
          };

          if (DESCRIPTORS) {
            // https://github.com/tc39/proposal-Symbol-description
            nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
              configurable: true,
              get: function description() {
                return getInternalState(this).description;
              }
            });
            if (!IS_PURE) {
              redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
            }
          }
        }

        $({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
          Symbol: $Symbol
        });

        $forEach(objectKeys(WellKnownSymbolsStore), function (name) {
          defineWellKnownSymbol(name);
        });

        $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
          // `Symbol.for` method
          // https://tc39.es/ecma262/#sec-symbol.for
          'for': function (key) {
            var string = $toString(key);
            if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
            var symbol = $Symbol(string);
            StringToSymbolRegistry[string] = symbol;
            SymbolToStringRegistry[symbol] = string;
            return symbol;
          },
          // `Symbol.keyFor` method
          // https://tc39.es/ecma262/#sec-symbol.keyfor
          keyFor: function keyFor(sym) {
            if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
            if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
          },
          useSetter: function () { USE_SETTER = true; },
          useSimple: function () { USE_SETTER = false; }
        });

        $({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
          // `Object.create` method
          // https://tc39.es/ecma262/#sec-object.create
          create: $create,
          // `Object.defineProperty` method
          // https://tc39.es/ecma262/#sec-object.defineproperty
          defineProperty: $defineProperty,
          // `Object.defineProperties` method
          // https://tc39.es/ecma262/#sec-object.defineproperties
          defineProperties: $defineProperties,
          // `Object.getOwnPropertyDescriptor` method
          // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
          getOwnPropertyDescriptor: $getOwnPropertyDescriptor
        });

        $({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
          // `Object.getOwnPropertyNames` method
          // https://tc39.es/ecma262/#sec-object.getownpropertynames
          getOwnPropertyNames: $getOwnPropertyNames,
          // `Object.getOwnPropertySymbols` method
          // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
          getOwnPropertySymbols: $getOwnPropertySymbols
        });

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
        $({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {
          getOwnPropertySymbols: function getOwnPropertySymbols(it) {
            return getOwnPropertySymbolsModule.f(toObject(it));
          }
        });

// `JSON.stringify` method behavior with symbols
// https://tc39.es/ecma262/#sec-json.stringify
        if ($stringify) {
          var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
            var symbol = $Symbol();
            // MS Edge converts symbol values to JSON as {}
            return $stringify([symbol]) != '[null]'
              // WebKit converts symbol values to JSON as null
              || $stringify({ a: symbol }) != '{}'
              // V8 throws on boxed symbols
              || $stringify(Object(symbol)) != '{}';
          });

          $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            stringify: function stringify(it, replacer, space) {
              var args = [it];
              var index = 1;
              var $replacer;
              while (arguments.length > index) args.push(arguments[index++]);
              $replacer = replacer;
              if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
              if (!isArray(replacer)) replacer = function (key, value) {
                if (isCallable($replacer)) value = $replacer.call(this, key, value);
                if (!isSymbol(value)) return value;
              };
              args[1] = replacer;
              return $stringify.apply(null, args);
            }
          });
        }

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
        if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
          var valueOf = $Symbol[PROTOTYPE].valueOf;
          redefine($Symbol[PROTOTYPE], TO_PRIMITIVE, function () {
            return valueOf.apply(this, arguments);
          });
        }
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
        setToStringTag($Symbol, SYMBOL);

        hiddenKeys[HIDDEN] = true;


        /***/ }),

      /***/ "a4d7":
      /***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

        /***/ }),

      /***/ "a630":
      /***/ (function(module, exports, __webpack_require__) {

        var $ = __webpack_require__("23e7");
        var from = __webpack_require__("4df4");
        var checkCorrectnessOfIteration = __webpack_require__("1c7e");

        var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
          // eslint-disable-next-line es/no-array-from -- required for testing
          Array.from(iterable);
        });

// `Array.from` method
// https://tc39.es/ecma262/#sec-array.from
        $({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
          from: from
        });


        /***/ }),

      /***/ "a640":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var fails = __webpack_require__("d039");

        module.exports = function (METHOD_NAME, argument) {
          var method = [][METHOD_NAME];
          return !!method && fails(function () {
            // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
            method.call(null, argument || function () { throw 1; }, 1);
          });
        };


        /***/ }),

      /***/ "a691":
      /***/ (function(module, exports) {

        var ceil = Math.ceil;
        var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.es/ecma262/#sec-tointeger
        module.exports = function (argument) {
          return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
        };


        /***/ }),

      /***/ "aa56":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__("c3c0");
        var rotr32 = utils.rotr32;

        function ft_1(s, x, y, z) {
          if (s === 0)
            return ch32(x, y, z);
          if (s === 1 || s === 3)
            return p32(x, y, z);
          if (s === 2)
            return maj32(x, y, z);
        }
        exports.ft_1 = ft_1;

        function ch32(x, y, z) {
          return (x & y) ^ ((~x) & z);
        }
        exports.ch32 = ch32;

        function maj32(x, y, z) {
          return (x & y) ^ (x & z) ^ (y & z);
        }
        exports.maj32 = maj32;

        function p32(x, y, z) {
          return x ^ y ^ z;
        }
        exports.p32 = p32;

        function s0_256(x) {
          return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
        }
        exports.s0_256 = s0_256;

        function s1_256(x) {
          return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
        }
        exports.s1_256 = s1_256;

        function g0_256(x) {
          return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
        }
        exports.g0_256 = g0_256;

        function g1_256(x) {
          return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
        }
        exports.g1_256 = g1_256;


        /***/ }),

      /***/ "ab13":
      /***/ (function(module, exports, __webpack_require__) {

        var wellKnownSymbol = __webpack_require__("b622");

        var MATCH = wellKnownSymbol('match');

        module.exports = function (METHOD_NAME) {
          var regexp = /./;
          try {
            '/./'[METHOD_NAME](regexp);
          } catch (error1) {
            try {
              regexp[MATCH] = false;
              return '/./'[METHOD_NAME](regexp);
            } catch (error2) { /* empty */ }
          } return false;
        };


        /***/ }),

      /***/ "ac1f":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $ = __webpack_require__("23e7");
        var exec = __webpack_require__("9263");

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
        $({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
          exec: exec
        });


        /***/ }),

      /***/ "ad6d":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var anObject = __webpack_require__("825a");

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
        module.exports = function () {
          var that = anObject(this);
          var result = '';
          if (that.global) result += 'g';
          if (that.ignoreCase) result += 'i';
          if (that.multiline) result += 'm';
          if (that.dotAll) result += 's';
          if (that.unicode) result += 'u';
          if (that.sticky) result += 'y';
          return result;
        };


        /***/ }),

      /***/ "ae93":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var fails = __webpack_require__("d039");
        var isCallable = __webpack_require__("1626");
        var create = __webpack_require__("7c73");
        var getPrototypeOf = __webpack_require__("e163");
        var redefine = __webpack_require__("6eeb");
        var wellKnownSymbol = __webpack_require__("b622");
        var IS_PURE = __webpack_require__("c430");

        var ITERATOR = wellKnownSymbol('iterator');
        var BUGGY_SAFARI_ITERATORS = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
        var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

        /* eslint-disable es/no-array-prototype-keys -- safe */
        if ([].keys) {
          arrayIterator = [].keys();
          // Safari 8 has buggy iterators w/o `next`
          if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
          else {
            PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
          }
        }

        var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
          var test = {};
          // FF44- legacy iterators case
          return IteratorPrototype[ITERATOR].call(test) !== test;
        });

        if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
        else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
        if (!isCallable(IteratorPrototype[ITERATOR])) {
          redefine(IteratorPrototype, ITERATOR, function () {
            return this;
          });
        }

        module.exports = {
          IteratorPrototype: IteratorPrototype,
          BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
        };


        /***/ }),

      /***/ "b041":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
        var classof = __webpack_require__("f5df");

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
        module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
          return '[object ' + classof(this) + ']';
        };


        /***/ }),

      /***/ "b048":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony default export */ __webpack_exports__["default"] = (function(e,n){return n=n||{},new Promise(function(t,r){var s=new XMLHttpRequest,o=[],u=[],i={},a=function(){return{ok:2==(s.status/100|0),statusText:s.statusText,status:s.status,url:s.responseURL,text:function(){return Promise.resolve(s.responseText)},json:function(){return Promise.resolve(s.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([s.response]))},clone:a,headers:{keys:function(){return o},entries:function(){return u},get:function(e){return i[e.toLowerCase()]},has:function(e){return e.toLowerCase()in i}}}};for(var l in s.open(n.method||"get",e,!0),s.onload=function(){s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){o.push(n=n.toLowerCase()),u.push([n,t]),i[n]=i[n]?i[n]+","+t:t}),t(a())},s.onerror=r,s.withCredentials="include"==n.credentials,n.headers)s.setRequestHeader(l,n.headers[l]);s.send(n.body||null)})});
//# sourceMappingURL=unfetch.module.js.map


        /***/ }),

      /***/ "b0c0":
      /***/ (function(module, exports, __webpack_require__) {

        var DESCRIPTORS = __webpack_require__("83ab");
        var FUNCTION_NAME_EXISTS = __webpack_require__("5e77").EXISTS;
        var defineProperty = __webpack_require__("9bf2").f;

        var FunctionPrototype = Function.prototype;
        var FunctionPrototypeToString = FunctionPrototype.toString;
        var nameRE = /^\s*function ([^ (]*)/;
        var NAME = 'name';

// Function instances `.name` property
// https://tc39.es/ecma262/#sec-function-instances-name
        if (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {
          defineProperty(FunctionPrototype, NAME, {
            configurable: true,
            get: function () {
              try {
                return FunctionPrototypeToString.call(this).match(nameRE)[1];
              } catch (error) {
                return '';
              }
            }
          });
        }


        /***/ }),

      /***/ "b525":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__("c3c0");
        var common = __webpack_require__("edc9");
        var assert = __webpack_require__("da3e");

        var rotr64_hi = utils.rotr64_hi;
        var rotr64_lo = utils.rotr64_lo;
        var shr64_hi = utils.shr64_hi;
        var shr64_lo = utils.shr64_lo;
        var sum64 = utils.sum64;
        var sum64_hi = utils.sum64_hi;
        var sum64_lo = utils.sum64_lo;
        var sum64_4_hi = utils.sum64_4_hi;
        var sum64_4_lo = utils.sum64_4_lo;
        var sum64_5_hi = utils.sum64_5_hi;
        var sum64_5_lo = utils.sum64_5_lo;

        var BlockHash = common.BlockHash;

        var sha512_K = [
          0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
          0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
          0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
          0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
          0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
          0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
          0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
          0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
          0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
          0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
          0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
          0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
          0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
          0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
          0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
          0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
          0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
          0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
          0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
          0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
          0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
          0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
          0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
          0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
          0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
          0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
          0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
          0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
          0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
          0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
          0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
          0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
          0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
          0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
          0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
          0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
          0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
          0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
          0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
          0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
        ];

        function SHA512() {
          if (!(this instanceof SHA512))
            return new SHA512();

          BlockHash.call(this);
          this.h = [
            0x6a09e667, 0xf3bcc908,
            0xbb67ae85, 0x84caa73b,
            0x3c6ef372, 0xfe94f82b,
            0xa54ff53a, 0x5f1d36f1,
            0x510e527f, 0xade682d1,
            0x9b05688c, 0x2b3e6c1f,
            0x1f83d9ab, 0xfb41bd6b,
            0x5be0cd19, 0x137e2179 ];
          this.k = sha512_K;
          this.W = new Array(160);
        }
        utils.inherits(SHA512, BlockHash);
        module.exports = SHA512;

        SHA512.blockSize = 1024;
        SHA512.outSize = 512;
        SHA512.hmacStrength = 192;
        SHA512.padLength = 128;

        SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
          var W = this.W;

          // 32 x 32bit words
          for (var i = 0; i < 32; i++)
            W[i] = msg[start + i];
          for (; i < W.length; i += 2) {
            var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
            var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
            var c1_hi = W[i - 14];  // i - 7
            var c1_lo = W[i - 13];
            var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
            var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
            var c3_hi = W[i - 32];  // i - 16
            var c3_lo = W[i - 31];

            W[i] = sum64_4_hi(
              c0_hi, c0_lo,
              c1_hi, c1_lo,
              c2_hi, c2_lo,
              c3_hi, c3_lo);
            W[i + 1] = sum64_4_lo(
              c0_hi, c0_lo,
              c1_hi, c1_lo,
              c2_hi, c2_lo,
              c3_hi, c3_lo);
          }
        };

        SHA512.prototype._update = function _update(msg, start) {
          this._prepareBlock(msg, start);

          var W = this.W;

          var ah = this.h[0];
          var al = this.h[1];
          var bh = this.h[2];
          var bl = this.h[3];
          var ch = this.h[4];
          var cl = this.h[5];
          var dh = this.h[6];
          var dl = this.h[7];
          var eh = this.h[8];
          var el = this.h[9];
          var fh = this.h[10];
          var fl = this.h[11];
          var gh = this.h[12];
          var gl = this.h[13];
          var hh = this.h[14];
          var hl = this.h[15];

          assert(this.k.length === W.length);
          for (var i = 0; i < W.length; i += 2) {
            var c0_hi = hh;
            var c0_lo = hl;
            var c1_hi = s1_512_hi(eh, el);
            var c1_lo = s1_512_lo(eh, el);
            var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
            var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
            var c3_hi = this.k[i];
            var c3_lo = this.k[i + 1];
            var c4_hi = W[i];
            var c4_lo = W[i + 1];

            var T1_hi = sum64_5_hi(
              c0_hi, c0_lo,
              c1_hi, c1_lo,
              c2_hi, c2_lo,
              c3_hi, c3_lo,
              c4_hi, c4_lo);
            var T1_lo = sum64_5_lo(
              c0_hi, c0_lo,
              c1_hi, c1_lo,
              c2_hi, c2_lo,
              c3_hi, c3_lo,
              c4_hi, c4_lo);

            c0_hi = s0_512_hi(ah, al);
            c0_lo = s0_512_lo(ah, al);
            c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
            c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

            var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
            var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

            hh = gh;
            hl = gl;

            gh = fh;
            gl = fl;

            fh = eh;
            fl = el;

            eh = sum64_hi(dh, dl, T1_hi, T1_lo);
            el = sum64_lo(dl, dl, T1_hi, T1_lo);

            dh = ch;
            dl = cl;

            ch = bh;
            cl = bl;

            bh = ah;
            bl = al;

            ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
            al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
          }

          sum64(this.h, 0, ah, al);
          sum64(this.h, 2, bh, bl);
          sum64(this.h, 4, ch, cl);
          sum64(this.h, 6, dh, dl);
          sum64(this.h, 8, eh, el);
          sum64(this.h, 10, fh, fl);
          sum64(this.h, 12, gh, gl);
          sum64(this.h, 14, hh, hl);
        };

        SHA512.prototype._digest = function digest(enc) {
          if (enc === 'hex')
            return utils.toHex32(this.h, 'big');
          else
            return utils.split32(this.h, 'big');
        };

        function ch64_hi(xh, xl, yh, yl, zh) {
          var r = (xh & yh) ^ ((~xh) & zh);
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function ch64_lo(xh, xl, yh, yl, zh, zl) {
          var r = (xl & yl) ^ ((~xl) & zl);
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function maj64_hi(xh, xl, yh, yl, zh) {
          var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function maj64_lo(xh, xl, yh, yl, zh, zl) {
          var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function s0_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 28);
          var c1_hi = rotr64_hi(xl, xh, 2);  // 34
          var c2_hi = rotr64_hi(xl, xh, 7);  // 39

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function s0_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 28);
          var c1_lo = rotr64_lo(xl, xh, 2);  // 34
          var c2_lo = rotr64_lo(xl, xh, 7);  // 39

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function s1_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 14);
          var c1_hi = rotr64_hi(xh, xl, 18);
          var c2_hi = rotr64_hi(xl, xh, 9);  // 41

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function s1_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 14);
          var c1_lo = rotr64_lo(xh, xl, 18);
          var c2_lo = rotr64_lo(xl, xh, 9);  // 41

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function g0_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 1);
          var c1_hi = rotr64_hi(xh, xl, 8);
          var c2_hi = shr64_hi(xh, xl, 7);

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function g0_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 1);
          var c1_lo = rotr64_lo(xh, xl, 8);
          var c2_lo = shr64_lo(xh, xl, 7);

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function g1_512_hi(xh, xl) {
          var c0_hi = rotr64_hi(xh, xl, 19);
          var c1_hi = rotr64_hi(xl, xh, 29);  // 61
          var c2_hi = shr64_hi(xh, xl, 6);

          var r = c0_hi ^ c1_hi ^ c2_hi;
          if (r < 0)
            r += 0x100000000;
          return r;
        }

        function g1_512_lo(xh, xl) {
          var c0_lo = rotr64_lo(xh, xl, 19);
          var c1_lo = rotr64_lo(xl, xh, 29);  // 61
          var c2_lo = shr64_lo(xh, xl, 6);

          var r = c0_lo ^ c1_lo ^ c2_lo;
          if (r < 0)
            r += 0x100000000;
          return r;
        }


        /***/ }),

      /***/ "b575":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
        var macrotask = __webpack_require__("2cf4").set;
        var IS_IOS = __webpack_require__("1cdc");
        var IS_IOS_PEBBLE = __webpack_require__("d4c3");
        var IS_WEBOS_WEBKIT = __webpack_require__("a4b4");
        var IS_NODE = __webpack_require__("605d");

        var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
        var document = global.document;
        var process = global.process;
        var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
        var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
        var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

        var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
        if (!queueMicrotask) {
          flush = function () {
            var parent, fn;
            if (IS_NODE && (parent = process.domain)) parent.exit();
            while (head) {
              fn = head.fn;
              head = head.next;
              try {
                fn();
              } catch (error) {
                if (head) notify();
                else last = undefined;
                throw error;
              }
            } last = undefined;
            if (parent) parent.enter();
          };

          // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
          // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
          if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
            toggle = true;
            node = document.createTextNode('');
            new MutationObserver(flush).observe(node, { characterData: true });
            notify = function () {
              node.data = toggle = !toggle;
            };
            // environments with maybe non-completely correct, but existent Promise
          } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
            // Promise.resolve without an argument throws an error in LG WebOS 2
            promise = Promise.resolve(undefined);
            // workaround of WebKit ~ iOS Safari 10.1 bug
            promise.constructor = Promise;
            then = promise.then;
            notify = function () {
              then.call(promise, flush);
            };
            // Node.js without promises
          } else if (IS_NODE) {
            notify = function () {
              process.nextTick(flush);
            };
            // for other environments - macrotask based on:
            // - setImmediate
            // - MessageChannel
            // - window.postMessag
            // - onreadystatechange
            // - setTimeout
          } else {
            notify = function () {
              // strange IE + webpack dev server bug - use .call(global)
              macrotask.call(global, flush);
            };
          }
        }

        module.exports = queueMicrotask || function (fn) {
          var task = { fn: fn, next: undefined };
          if (last) last.next = task;
          if (!head) {
            head = task;
            notify();
          } last = task;
        };


        /***/ }),

      /***/ "b622":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var shared = __webpack_require__("5692");
        var has = __webpack_require__("5135");
        var uid = __webpack_require__("90e3");
        var NATIVE_SYMBOL = __webpack_require__("4930");
        var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

        var WellKnownSymbolsStore = shared('wks');
        var Symbol = global.Symbol;
        var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

        module.exports = function (name) {
          if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
            if (NATIVE_SYMBOL && has(Symbol, name)) {
              WellKnownSymbolsStore[name] = Symbol[name];
            } else {
              WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
            }
          } return WellKnownSymbolsStore[name];
        };


        /***/ }),

      /***/ "b727":
      /***/ (function(module, exports, __webpack_require__) {

        var bind = __webpack_require__("0366");
        var IndexedObject = __webpack_require__("44ad");
        var toObject = __webpack_require__("7b0b");
        var toLength = __webpack_require__("50c4");
        var arraySpeciesCreate = __webpack_require__("65f0");

        var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
        var createMethod = function (TYPE) {
          var IS_MAP = TYPE == 1;
          var IS_FILTER = TYPE == 2;
          var IS_SOME = TYPE == 3;
          var IS_EVERY = TYPE == 4;
          var IS_FIND_INDEX = TYPE == 6;
          var IS_FILTER_REJECT = TYPE == 7;
          var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
          return function ($this, callbackfn, that, specificCreate) {
            var O = toObject($this);
            var self = IndexedObject(O);
            var boundFunction = bind(callbackfn, that, 3);
            var length = toLength(self.length);
            var index = 0;
            var create = specificCreate || arraySpeciesCreate;
            var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
            var value, result;
            for (;length > index; index++) if (NO_HOLES || index in self) {
              value = self[index];
              result = boundFunction(value, index, O);
              if (TYPE) {
                if (IS_MAP) target[index] = result; // map
                else if (result) switch (TYPE) {
                  case 3: return true;              // some
                  case 5: return value;             // find
                  case 6: return index;             // findIndex
                  case 2: push.call(target, value); // filter
                } else switch (TYPE) {
                  case 4: return false;             // every
                  case 7: push.call(target, value); // filterReject
                }
              }
            }
            return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
          };
        };

        module.exports = {
          // `Array.prototype.forEach` method
          // https://tc39.es/ecma262/#sec-array.prototype.foreach
          forEach: createMethod(0),
          // `Array.prototype.map` method
          // https://tc39.es/ecma262/#sec-array.prototype.map
          map: createMethod(1),
          // `Array.prototype.filter` method
          // https://tc39.es/ecma262/#sec-array.prototype.filter
          filter: createMethod(2),
          // `Array.prototype.some` method
          // https://tc39.es/ecma262/#sec-array.prototype.some
          some: createMethod(3),
          // `Array.prototype.every` method
          // https://tc39.es/ecma262/#sec-array.prototype.every
          every: createMethod(4),
          // `Array.prototype.find` method
          // https://tc39.es/ecma262/#sec-array.prototype.find
          find: createMethod(5),
          // `Array.prototype.findIndex` method
          // https://tc39.es/ecma262/#sec-array.prototype.findIndex
          findIndex: createMethod(6),
          // `Array.prototype.filterReject` method
          // https://github.com/tc39/proposal-array-filtering
          filterReject: createMethod(7)
        };


        /***/ }),

      /***/ "bb44":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__("c3c0");
        var common = __webpack_require__("edc9");

        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_3 = utils.sum32_3;
        var sum32_4 = utils.sum32_4;
        var BlockHash = common.BlockHash;

        function RIPEMD160() {
          if (!(this instanceof RIPEMD160))
            return new RIPEMD160();

          BlockHash.call(this);

          this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
          this.endian = 'little';
        }
        utils.inherits(RIPEMD160, BlockHash);
        exports.ripemd160 = RIPEMD160;

        RIPEMD160.blockSize = 512;
        RIPEMD160.outSize = 160;
        RIPEMD160.hmacStrength = 192;
        RIPEMD160.padLength = 64;

        RIPEMD160.prototype._update = function update(msg, start) {
          var A = this.h[0];
          var B = this.h[1];
          var C = this.h[2];
          var D = this.h[3];
          var E = this.h[4];
          var Ah = A;
          var Bh = B;
          var Ch = C;
          var Dh = D;
          var Eh = E;
          for (var j = 0; j < 80; j++) {
            var T = sum32(
              rotl32(
                sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
                s[j]),
              E);
            A = E;
            E = D;
            D = rotl32(C, 10);
            C = B;
            B = T;
            T = sum32(
              rotl32(
                sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
                sh[j]),
              Eh);
            Ah = Eh;
            Eh = Dh;
            Dh = rotl32(Ch, 10);
            Ch = Bh;
            Bh = T;
          }
          T = sum32_3(this.h[1], C, Dh);
          this.h[1] = sum32_3(this.h[2], D, Eh);
          this.h[2] = sum32_3(this.h[3], E, Ah);
          this.h[3] = sum32_3(this.h[4], A, Bh);
          this.h[4] = sum32_3(this.h[0], B, Ch);
          this.h[0] = T;
        };

        RIPEMD160.prototype._digest = function digest(enc) {
          if (enc === 'hex')
            return utils.toHex32(this.h, 'little');
          else
            return utils.split32(this.h, 'little');
        };

        function f(j, x, y, z) {
          if (j <= 15)
            return x ^ y ^ z;
          else if (j <= 31)
            return (x & y) | ((~x) & z);
          else if (j <= 47)
            return (x | (~y)) ^ z;
          else if (j <= 63)
            return (x & z) | (y & (~z));
          else
            return x ^ (y | (~z));
        }

        function K(j) {
          if (j <= 15)
            return 0x00000000;
          else if (j <= 31)
            return 0x5a827999;
          else if (j <= 47)
            return 0x6ed9eba1;
          else if (j <= 63)
            return 0x8f1bbcdc;
          else
            return 0xa953fd4e;
        }

        function Kh(j) {
          if (j <= 15)
            return 0x50a28be6;
          else if (j <= 31)
            return 0x5c4dd124;
          else if (j <= 47)
            return 0x6d703ef3;
          else if (j <= 63)
            return 0x7a6d76e9;
          else
            return 0x00000000;
        }

        var r = [
          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
          7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
          3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
          1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
          4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ];

        var rh = [
          5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
          6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
          15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
          8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
          12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ];

        var s = [
          11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
          7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
          11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
          11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
          9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ];

        var sh = [
          8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
          9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
          9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
          15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
          8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ];


        /***/ }),

      /***/ "bf2b":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'

// pre-compute lookup table
        var ALPHABET_MAP = {}
        for (var z = 0; z < ALPHABET.length; z++) {
          var x = ALPHABET.charAt(z)

          if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
          ALPHABET_MAP[x] = z
        }

        function polymodStep (pre) {
          var b = pre >> 25
          return ((pre & 0x1FFFFFF) << 5) ^
            (-((b >> 0) & 1) & 0x3b6a57b2) ^
            (-((b >> 1) & 1) & 0x26508e6d) ^
            (-((b >> 2) & 1) & 0x1ea119fa) ^
            (-((b >> 3) & 1) & 0x3d4233dd) ^
            (-((b >> 4) & 1) & 0x2a1462b3)
        }

        function prefixChk (prefix) {
          var chk = 1
          for (var i = 0; i < prefix.length; ++i) {
            var c = prefix.charCodeAt(i)
            if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

            chk = polymodStep(chk) ^ (c >> 5)
          }
          chk = polymodStep(chk)

          for (i = 0; i < prefix.length; ++i) {
            var v = prefix.charCodeAt(i)
            chk = polymodStep(chk) ^ (v & 0x1f)
          }
          return chk
        }

        function encode (prefix, words, LIMIT) {
          LIMIT = LIMIT || 90
          if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

          prefix = prefix.toLowerCase()

          // determine chk mod
          var chk = prefixChk(prefix)
          if (typeof chk === 'string') throw new Error(chk)

          var result = prefix + '1'
          for (var i = 0; i < words.length; ++i) {
            var x = words[i]
            if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

            chk = polymodStep(chk) ^ x
            result += ALPHABET.charAt(x)
          }

          for (i = 0; i < 6; ++i) {
            chk = polymodStep(chk)
          }
          chk ^= 1

          for (i = 0; i < 6; ++i) {
            var v = (chk >> ((5 - i) * 5)) & 0x1f
            result += ALPHABET.charAt(v)
          }

          return result
        }

        function __decode (str, LIMIT) {
          LIMIT = LIMIT || 90
          if (str.length < 8) return str + ' too short'
          if (str.length > LIMIT) return 'Exceeds length limit'

          // don't allow mixed case
          var lowered = str.toLowerCase()
          var uppered = str.toUpperCase()
          if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
          str = lowered

          var split = str.lastIndexOf('1')
          if (split === -1) return 'No separator character for ' + str
          if (split === 0) return 'Missing prefix for ' + str

          var prefix = str.slice(0, split)
          var wordChars = str.slice(split + 1)
          if (wordChars.length < 6) return 'Data too short'

          var chk = prefixChk(prefix)
          if (typeof chk === 'string') return chk

          var words = []
          for (var i = 0; i < wordChars.length; ++i) {
            var c = wordChars.charAt(i)
            var v = ALPHABET_MAP[c]
            if (v === undefined) return 'Unknown character ' + c
            chk = polymodStep(chk) ^ v

            // not in the checksum?
            if (i + 6 >= wordChars.length) continue
            words.push(v)
          }

          if (chk !== 1) return 'Invalid checksum for ' + str
          return { prefix: prefix, words: words }
        }

        function decodeUnsafe () {
          var res = __decode.apply(null, arguments)
          if (typeof res === 'object') return res
        }

        function decode (str) {
          var res = __decode.apply(null, arguments)
          if (typeof res === 'object') return res

          throw new Error(res)
        }

        function convert (data, inBits, outBits, pad) {
          var value = 0
          var bits = 0
          var maxV = (1 << outBits) - 1

          var result = []
          for (var i = 0; i < data.length; ++i) {
            value = (value << inBits) | data[i]
            bits += inBits

            while (bits >= outBits) {
              bits -= outBits
              result.push((value >> bits) & maxV)
            }
          }

          if (pad) {
            if (bits > 0) {
              result.push((value << (outBits - bits)) & maxV)
            }
          } else {
            if (bits >= inBits) return 'Excess padding'
            if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
          }

          return result
        }

        function toWordsUnsafe (bytes) {
          var res = convert(bytes, 8, 5, true)
          if (Array.isArray(res)) return res
        }

        function toWords (bytes) {
          var res = convert(bytes, 8, 5, true)
          if (Array.isArray(res)) return res

          throw new Error(res)
        }

        function fromWordsUnsafe (words) {
          var res = convert(words, 5, 8, false)
          if (Array.isArray(res)) return res
        }

        function fromWords (words) {
          var res = convert(words, 5, 8, false)
          if (Array.isArray(res)) return res

          throw new Error(res)
        }

        module.exports = {
          decodeUnsafe: decodeUnsafe,
          decode: decode,
          encode: encode,
          toWordsUnsafe: toWordsUnsafe,
          toWords: toWords,
          fromWordsUnsafe: fromWordsUnsafe,
          fromWords: fromWords
        }


        /***/ }),

      /***/ "c030":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
// ESM COMPAT FLAG
        __webpack_require__.r(__webpack_exports__);

// EXPORTS
        __webpack_require__.d(__webpack_exports__, "ethers", function() { return /* reexport */ ethers_namespaceObject; });
        __webpack_require__.d(__webpack_exports__, "Signer", function() { return /* reexport */ lib_esm_Signer; });
        __webpack_require__.d(__webpack_exports__, "Wallet", function() { return /* reexport */ lib_esm_Wallet; });
        __webpack_require__.d(__webpack_exports__, "VoidSigner", function() { return /* reexport */ lib_esm_VoidSigner; });
        __webpack_require__.d(__webpack_exports__, "getDefaultProvider", function() { return /* reexport */ getDefaultProvider; });
        __webpack_require__.d(__webpack_exports__, "providers", function() { return /* reexport */ providers_lib_esm_namespaceObject; });
        __webpack_require__.d(__webpack_exports__, "BaseContract", function() { return /* reexport */ lib_esm_BaseContract; });
        __webpack_require__.d(__webpack_exports__, "Contract", function() { return /* reexport */ Contract; });
        __webpack_require__.d(__webpack_exports__, "ContractFactory", function() { return /* reexport */ lib_esm_ContractFactory; });
        __webpack_require__.d(__webpack_exports__, "BigNumber", function() { return /* reexport */ bignumber_BigNumber; });
        __webpack_require__.d(__webpack_exports__, "FixedNumber", function() { return /* reexport */ fixednumber_FixedNumber; });
        __webpack_require__.d(__webpack_exports__, "constants", function() { return /* reexport */ constants_lib_esm_namespaceObject; });
        __webpack_require__.d(__webpack_exports__, "errors", function() { return /* reexport */ logger_lib_esm["a" /* ErrorCode */]; });
        __webpack_require__.d(__webpack_exports__, "logger", function() { return /* reexport */ ethers_logger; });
        __webpack_require__.d(__webpack_exports__, "utils", function() { return /* reexport */ lib_esm_utils_namespaceObject; });
        __webpack_require__.d(__webpack_exports__, "wordlists", function() { return /* reexport */ wordlists; });
        __webpack_require__.d(__webpack_exports__, "version", function() { return /* reexport */ ethers_lib_esm_version_version; });
        __webpack_require__.d(__webpack_exports__, "Wordlist", function() { return /* reexport */ wordlist_Wordlist; });

// NAMESPACE OBJECT: ./node_modules/@ethersproject/rlp/lib.esm/index.js
        var rlp_lib_esm_namespaceObject = {};
        __webpack_require__.r(rlp_lib_esm_namespaceObject);
        __webpack_require__.d(rlp_lib_esm_namespaceObject, "encode", function() { return encode; });
        __webpack_require__.d(rlp_lib_esm_namespaceObject, "decode", function() { return decode; });

// NAMESPACE OBJECT: ./node_modules/@ethersproject/constants/lib.esm/index.js
        var constants_lib_esm_namespaceObject = {};
        __webpack_require__.r(constants_lib_esm_namespaceObject);
        __webpack_require__.d(constants_lib_esm_namespaceObject, "AddressZero", function() { return AddressZero; });
        __webpack_require__.d(constants_lib_esm_namespaceObject, "NegativeOne", function() { return NegativeOne; });
        __webpack_require__.d(constants_lib_esm_namespaceObject, "Zero", function() { return Zero; });
        __webpack_require__.d(constants_lib_esm_namespaceObject, "One", function() { return One; });
        __webpack_require__.d(constants_lib_esm_namespaceObject, "Two", function() { return Two; });
        __webpack_require__.d(constants_lib_esm_namespaceObject, "WeiPerEther", function() { return WeiPerEther; });
        __webpack_require__.d(constants_lib_esm_namespaceObject, "MaxUint256", function() { return MaxUint256; });
        __webpack_require__.d(constants_lib_esm_namespaceObject, "MinInt256", function() { return MinInt256; });
        __webpack_require__.d(constants_lib_esm_namespaceObject, "MaxInt256", function() { return MaxInt256; });
        __webpack_require__.d(constants_lib_esm_namespaceObject, "HashZero", function() { return HashZero; });
        __webpack_require__.d(constants_lib_esm_namespaceObject, "EtherSymbol", function() { return EtherSymbol; });

// NAMESPACE OBJECT: ./node_modules/@ethersproject/providers/lib.esm/index.js
        var providers_lib_esm_namespaceObject = {};
        __webpack_require__.r(providers_lib_esm_namespaceObject);
        __webpack_require__.d(providers_lib_esm_namespaceObject, "Provider", function() { return lib_esm_Provider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "BaseProvider", function() { return base_provider_BaseProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "Resolver", function() { return base_provider_Resolver; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "UrlJsonRpcProvider", function() { return url_json_rpc_provider_UrlJsonRpcProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "FallbackProvider", function() { return fallback_provider_FallbackProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "AlchemyProvider", function() { return alchemy_provider_AlchemyProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "AlchemyWebSocketProvider", function() { return alchemy_provider_AlchemyWebSocketProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "CloudflareProvider", function() { return cloudflare_provider_CloudflareProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "EtherscanProvider", function() { return etherscan_provider_EtherscanProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "InfuraProvider", function() { return infura_provider_InfuraProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "InfuraWebSocketProvider", function() { return infura_provider_InfuraWebSocketProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "JsonRpcProvider", function() { return json_rpc_provider_JsonRpcProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "JsonRpcBatchProvider", function() { return json_rpc_batch_provider_JsonRpcBatchProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "NodesmithProvider", function() { return nodesmith_provider_NodesmithProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "PocketProvider", function() { return pocket_provider_PocketProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "StaticJsonRpcProvider", function() { return url_json_rpc_provider_StaticJsonRpcProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "Web3Provider", function() { return web3_provider_Web3Provider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "WebSocketProvider", function() { return websocket_provider_WebSocketProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "IpcProvider", function() { return IpcProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "JsonRpcSigner", function() { return json_rpc_provider_JsonRpcSigner; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "getDefaultProvider", function() { return getDefaultProvider; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "getNetwork", function() { return lib_esm_getNetwork; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "isCommunityResource", function() { return isCommunityResource; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "isCommunityResourcable", function() { return isCommunityResourcable; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "showThrottleMessage", function() { return showThrottleMessage; });
        __webpack_require__.d(providers_lib_esm_namespaceObject, "Formatter", function() { return formatter_Formatter; });

// NAMESPACE OBJECT: ./node_modules/@ethersproject/base64/lib.esm/index.js
        var base64_lib_esm_namespaceObject = {};
        __webpack_require__.r(base64_lib_esm_namespaceObject);
        __webpack_require__.d(base64_lib_esm_namespaceObject, "decode", function() { return base64_decode; });
        __webpack_require__.d(base64_lib_esm_namespaceObject, "encode", function() { return base64_encode; });

// NAMESPACE OBJECT: ./node_modules/ethers/lib.esm/utils.js
        var lib_esm_utils_namespaceObject = {};
        __webpack_require__.r(lib_esm_utils_namespaceObject);
        __webpack_require__.d(lib_esm_utils_namespaceObject, "AbiCoder", function() { return abi_coder_AbiCoder; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "defaultAbiCoder", function() { return defaultAbiCoder; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "Fragment", function() { return fragments_Fragment; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "ConstructorFragment", function() { return fragments_ConstructorFragment; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "ErrorFragment", function() { return ErrorFragment; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "EventFragment", function() { return EventFragment; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "FunctionFragment", function() { return fragments_FunctionFragment; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "ParamType", function() { return fragments_ParamType; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "FormatTypes", function() { return FormatTypes; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "checkResultErrors", function() { return checkResultErrors; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "Logger", function() { return logger_lib_esm["b" /* Logger */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "RLP", function() { return rlp_lib_esm_namespaceObject; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "_fetchData", function() { return _fetchData; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "fetchJson", function() { return fetchJson; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "poll", function() { return poll; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "checkProperties", function() { return checkProperties; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "deepCopy", function() { return deepCopy; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "defineReadOnly", function() { return defineReadOnly; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "getStatic", function() { return getStatic; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "resolveProperties", function() { return resolveProperties; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "shallowCopy", function() { return shallowCopy; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "arrayify", function() { return lib_esm["a" /* arrayify */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "concat", function() { return lib_esm["b" /* concat */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "stripZeros", function() { return lib_esm["o" /* stripZeros */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "zeroPad", function() { return lib_esm["p" /* zeroPad */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "isBytes", function() { return lib_esm["j" /* isBytes */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "isBytesLike", function() { return lib_esm["k" /* isBytesLike */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "defaultPath", function() { return defaultPath; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "HDNode", function() { return lib_esm_HDNode; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "SigningKey", function() { return lib_esm_SigningKey; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "Interface", function() { return interface_Interface; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "LogDescription", function() { return interface_LogDescription; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "TransactionDescription", function() { return interface_TransactionDescription; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "base58", function() { return Base58; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "base64", function() { return base64_lib_esm_namespaceObject; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "hexlify", function() { return lib_esm["i" /* hexlify */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "isHexString", function() { return lib_esm["l" /* isHexString */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "hexConcat", function() { return lib_esm["c" /* hexConcat */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "hexStripZeros", function() { return lib_esm["f" /* hexStripZeros */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "hexValue", function() { return lib_esm["g" /* hexValue */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "hexZeroPad", function() { return lib_esm["h" /* hexZeroPad */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "hexDataLength", function() { return lib_esm["d" /* hexDataLength */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "hexDataSlice", function() { return lib_esm["e" /* hexDataSlice */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "nameprep", function() { return nameprep; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "_toEscapedUtf8String", function() { return _toEscapedUtf8String; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "toUtf8Bytes", function() { return toUtf8Bytes; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "toUtf8CodePoints", function() { return toUtf8CodePoints; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "toUtf8String", function() { return toUtf8String; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "Utf8ErrorFuncs", function() { return Utf8ErrorFuncs; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "formatBytes32String", function() { return formatBytes32String; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "parseBytes32String", function() { return parseBytes32String; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "hashMessage", function() { return hashMessage; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "namehash", function() { return namehash; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "isValidName", function() { return isValidName; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "id", function() { return id_id; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "_TypedDataEncoder", function() { return typed_data_TypedDataEncoder; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "getAddress", function() { return getAddress; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "getIcapAddress", function() { return getIcapAddress; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "getContractAddress", function() { return getContractAddress; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "getCreate2Address", function() { return getCreate2Address; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "isAddress", function() { return isAddress; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "formatEther", function() { return formatEther; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "parseEther", function() { return parseEther; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "formatUnits", function() { return formatUnits; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "parseUnits", function() { return parseUnits; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "commify", function() { return commify; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "computeHmac", function() { return computeHmac; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "keccak256", function() { return keccak256; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "ripemd160", function() { return ripemd160; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "sha256", function() { return sha256; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "sha512", function() { return sha512; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "randomBytes", function() { return random["a" /* randomBytes */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "shuffled", function() { return shuffled; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "solidityPack", function() { return lib_esm_pack; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "solidityKeccak256", function() { return lib_esm_keccak256; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "soliditySha256", function() { return lib_esm_sha256; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "splitSignature", function() { return lib_esm["n" /* splitSignature */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "joinSignature", function() { return lib_esm["m" /* joinSignature */]; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "accessListify", function() { return accessListify; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "parseTransaction", function() { return parse; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "serializeTransaction", function() { return lib_esm_serialize; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "TransactionTypes", function() { return TransactionTypes; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "getJsonWalletAddress", function() { return getJsonWalletAddress; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "computeAddress", function() { return computeAddress; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "recoverAddress", function() { return recoverAddress; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "computePublicKey", function() { return computePublicKey; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "recoverPublicKey", function() { return recoverPublicKey; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "verifyMessage", function() { return verifyMessage; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "verifyTypedData", function() { return verifyTypedData; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "getAccountPath", function() { return getAccountPath; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "mnemonicToEntropy", function() { return mnemonicToEntropy; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "entropyToMnemonic", function() { return entropyToMnemonic; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "isValidMnemonic", function() { return isValidMnemonic; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "mnemonicToSeed", function() { return mnemonicToSeed; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "SupportedAlgorithm", function() { return SupportedAlgorithm; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "UnicodeNormalizationForm", function() { return UnicodeNormalizationForm; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "Utf8ErrorReason", function() { return Utf8ErrorReason; });
        __webpack_require__.d(lib_esm_utils_namespaceObject, "Indexed", function() { return interface_Indexed; });

// NAMESPACE OBJECT: ./node_modules/ethers/lib.esm/ethers.js
        var ethers_namespaceObject = {};
        __webpack_require__.r(ethers_namespaceObject);
        __webpack_require__.d(ethers_namespaceObject, "Signer", function() { return lib_esm_Signer; });
        __webpack_require__.d(ethers_namespaceObject, "Wallet", function() { return lib_esm_Wallet; });
        __webpack_require__.d(ethers_namespaceObject, "VoidSigner", function() { return lib_esm_VoidSigner; });
        __webpack_require__.d(ethers_namespaceObject, "getDefaultProvider", function() { return getDefaultProvider; });
        __webpack_require__.d(ethers_namespaceObject, "providers", function() { return providers_lib_esm_namespaceObject; });
        __webpack_require__.d(ethers_namespaceObject, "BaseContract", function() { return lib_esm_BaseContract; });
        __webpack_require__.d(ethers_namespaceObject, "Contract", function() { return Contract; });
        __webpack_require__.d(ethers_namespaceObject, "ContractFactory", function() { return lib_esm_ContractFactory; });
        __webpack_require__.d(ethers_namespaceObject, "BigNumber", function() { return bignumber_BigNumber; });
        __webpack_require__.d(ethers_namespaceObject, "FixedNumber", function() { return fixednumber_FixedNumber; });
        __webpack_require__.d(ethers_namespaceObject, "constants", function() { return constants_lib_esm_namespaceObject; });
        __webpack_require__.d(ethers_namespaceObject, "errors", function() { return logger_lib_esm["a" /* ErrorCode */]; });
        __webpack_require__.d(ethers_namespaceObject, "logger", function() { return ethers_logger; });
        __webpack_require__.d(ethers_namespaceObject, "utils", function() { return lib_esm_utils_namespaceObject; });
        __webpack_require__.d(ethers_namespaceObject, "wordlists", function() { return wordlists; });
        __webpack_require__.d(ethers_namespaceObject, "version", function() { return ethers_lib_esm_version_version; });
        __webpack_require__.d(ethers_namespaceObject, "Wordlist", function() { return wordlist_Wordlist; });

// EXTERNAL MODULE: ./node_modules/@ethersproject/bytes/lib.esm/index.js + 1 modules
        var lib_esm = __webpack_require__("549e");

// EXTERNAL MODULE: ./node_modules/bn.js/lib/bn.js
        var bn = __webpack_require__("399f");
        var bn_default = /*#__PURE__*/__webpack_require__.n(bn);

// EXTERNAL MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js + 1 modules
        var logger_lib_esm = __webpack_require__("ffb2");

// CONCATENATED MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/_version.js
        const _version_version = "bignumber/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js

        /**
         *  BigNumber
         *
         *  A wrapper around the BN.js object. We use the BN.js library
         *  because it is used by elliptic, so it is required regardless.
         *
         */

        var BN = bn_default.a.BN;



        const bignumber_logger = new logger_lib_esm["b" /* Logger */](_version_version);
        const _constructorGuard = {};
        const MAX_SAFE = 0x1fffffffffffff;
        function isBigNumberish(value) {
          return (value != null) && (bignumber_BigNumber.isBigNumber(value) ||
            (typeof (value) === "number" && (value % 1) === 0) ||
            (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
            Object(lib_esm["l" /* isHexString */])(value) ||
            (typeof (value) === "bigint") ||
            Object(lib_esm["j" /* isBytes */])(value));
        }
// Only warn about passing 10 into radix once
        let _warnedToStringRadix = false;
        class bignumber_BigNumber {
          constructor(constructorGuard, hex) {
            bignumber_logger.checkNew(new.target, bignumber_BigNumber);
            if (constructorGuard !== _constructorGuard) {
              bignumber_logger.throwError("cannot call constructor directly; use BigNumber.from", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "new (BigNumber)"
              });
            }
            this._hex = hex;
            this._isBigNumber = true;
            Object.freeze(this);
          }
          fromTwos(value) {
            return toBigNumber(toBN(this).fromTwos(value));
          }
          toTwos(value) {
            return toBigNumber(toBN(this).toTwos(value));
          }
          abs() {
            if (this._hex[0] === "-") {
              return bignumber_BigNumber.from(this._hex.substring(1));
            }
            return this;
          }
          add(other) {
            return toBigNumber(toBN(this).add(toBN(other)));
          }
          sub(other) {
            return toBigNumber(toBN(this).sub(toBN(other)));
          }
          div(other) {
            const o = bignumber_BigNumber.from(other);
            if (o.isZero()) {
              throwFault("division by zero", "div");
            }
            return toBigNumber(toBN(this).div(toBN(other)));
          }
          mul(other) {
            return toBigNumber(toBN(this).mul(toBN(other)));
          }
          mod(other) {
            const value = toBN(other);
            if (value.isNeg()) {
              throwFault("cannot modulo negative values", "mod");
            }
            return toBigNumber(toBN(this).umod(value));
          }
          pow(other) {
            const value = toBN(other);
            if (value.isNeg()) {
              throwFault("cannot raise to negative values", "pow");
            }
            return toBigNumber(toBN(this).pow(value));
          }
          and(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
              throwFault("cannot 'and' negative values", "and");
            }
            return toBigNumber(toBN(this).and(value));
          }
          or(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
              throwFault("cannot 'or' negative values", "or");
            }
            return toBigNumber(toBN(this).or(value));
          }
          xor(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
              throwFault("cannot 'xor' negative values", "xor");
            }
            return toBigNumber(toBN(this).xor(value));
          }
          mask(value) {
            if (this.isNegative() || value < 0) {
              throwFault("cannot mask negative values", "mask");
            }
            return toBigNumber(toBN(this).maskn(value));
          }
          shl(value) {
            if (this.isNegative() || value < 0) {
              throwFault("cannot shift negative values", "shl");
            }
            return toBigNumber(toBN(this).shln(value));
          }
          shr(value) {
            if (this.isNegative() || value < 0) {
              throwFault("cannot shift negative values", "shr");
            }
            return toBigNumber(toBN(this).shrn(value));
          }
          eq(other) {
            return toBN(this).eq(toBN(other));
          }
          lt(other) {
            return toBN(this).lt(toBN(other));
          }
          lte(other) {
            return toBN(this).lte(toBN(other));
          }
          gt(other) {
            return toBN(this).gt(toBN(other));
          }
          gte(other) {
            return toBN(this).gte(toBN(other));
          }
          isNegative() {
            return (this._hex[0] === "-");
          }
          isZero() {
            return toBN(this).isZero();
          }
          toNumber() {
            try {
              return toBN(this).toNumber();
            }
            catch (error) {
              throwFault("overflow", "toNumber", this.toString());
            }
            return null;
          }
          toBigInt() {
            try {
              return BigInt(this.toString());
            }
            catch (e) { }
            return bignumber_logger.throwError("this platform does not support BigInt", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
              value: this.toString()
            });
          }
          toString() {
            // Lots of people expect this, which we do not support, so check (See: #889)
            if (arguments.length > 0) {
              if (arguments[0] === 10) {
                if (!_warnedToStringRadix) {
                  _warnedToStringRadix = true;
                  bignumber_logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                }
              }
              else if (arguments[0] === 16) {
                bignumber_logger.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", logger_lib_esm["b" /* Logger */].errors.UNEXPECTED_ARGUMENT, {});
              }
              else {
                bignumber_logger.throwError("BigNumber.toString does not accept parameters", logger_lib_esm["b" /* Logger */].errors.UNEXPECTED_ARGUMENT, {});
              }
            }
            return toBN(this).toString(10);
          }
          toHexString() {
            return this._hex;
          }
          toJSON(key) {
            return { type: "BigNumber", hex: this.toHexString() };
          }
          static from(value) {
            if (value instanceof bignumber_BigNumber) {
              return value;
            }
            if (typeof (value) === "string") {
              if (value.match(/^-?0x[0-9a-f]+$/i)) {
                return new bignumber_BigNumber(_constructorGuard, toHex(value));
              }
              if (value.match(/^-?[0-9]+$/)) {
                return new bignumber_BigNumber(_constructorGuard, toHex(new BN(value)));
              }
              return bignumber_logger.throwArgumentError("invalid BigNumber string", "value", value);
            }
            if (typeof (value) === "number") {
              if (value % 1) {
                throwFault("underflow", "BigNumber.from", value);
              }
              if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                throwFault("overflow", "BigNumber.from", value);
              }
              return bignumber_BigNumber.from(String(value));
            }
            const anyValue = value;
            if (typeof (anyValue) === "bigint") {
              return bignumber_BigNumber.from(anyValue.toString());
            }
            if (Object(lib_esm["j" /* isBytes */])(anyValue)) {
              return bignumber_BigNumber.from(Object(lib_esm["i" /* hexlify */])(anyValue));
            }
            if (anyValue) {
              // Hexable interface (takes priority)
              if (anyValue.toHexString) {
                const hex = anyValue.toHexString();
                if (typeof (hex) === "string") {
                  return bignumber_BigNumber.from(hex);
                }
              }
              else {
                // For now, handle legacy JSON-ified values (goes away in v6)
                let hex = anyValue._hex;
                // New-form JSON
                if (hex == null && anyValue.type === "BigNumber") {
                  hex = anyValue.hex;
                }
                if (typeof (hex) === "string") {
                  if (Object(lib_esm["l" /* isHexString */])(hex) || (hex[0] === "-" && Object(lib_esm["l" /* isHexString */])(hex.substring(1)))) {
                    return bignumber_BigNumber.from(hex);
                  }
                }
              }
            }
            return bignumber_logger.throwArgumentError("invalid BigNumber value", "value", value);
          }
          static isBigNumber(value) {
            return !!(value && value._isBigNumber);
          }
        }
// Normalize the hex string
        function toHex(value) {
          // For BN, call on the hex string
          if (typeof (value) !== "string") {
            return toHex(value.toString(16));
          }
          // If negative, prepend the negative sign to the normalized positive value
          if (value[0] === "-") {
            // Strip off the negative sign
            value = value.substring(1);
            // Cannot have multiple negative signs (e.g. "--0x04")
            if (value[0] === "-") {
              bignumber_logger.throwArgumentError("invalid hex", "value", value);
            }
            // Call toHex on the positive component
            value = toHex(value);
            // Do not allow "-0x00"
            if (value === "0x00") {
              return value;
            }
            // Negate the value
            return "-" + value;
          }
          // Add a "0x" prefix if missing
          if (value.substring(0, 2) !== "0x") {
            value = "0x" + value;
          }
          // Normalize zero
          if (value === "0x") {
            return "0x00";
          }
          // Make the string even length
          if (value.length % 2) {
            value = "0x0" + value.substring(2);
          }
          // Trim to smallest even-length string
          while (value.length > 4 && value.substring(0, 4) === "0x00") {
            value = "0x" + value.substring(4);
          }
          return value;
        }
        function toBigNumber(value) {
          return bignumber_BigNumber.from(toHex(value));
        }
        function toBN(value) {
          const hex = bignumber_BigNumber.from(value).toHexString();
          if (hex[0] === "-") {
            return (new BN("-" + hex.substring(3), 16));
          }
          return new BN(hex.substring(2), 16);
        }
        function throwFault(fault, operation, value) {
          const params = { fault: fault, operation: operation };
          if (value != null) {
            params.value = value;
          }
          return bignumber_logger.throwError(fault, logger_lib_esm["b" /* Logger */].errors.NUMERIC_FAULT, params);
        }
// value should have no prefix
        function _base36To16(value) {
          return (new BN(value, 36)).toString(16);
        }
// value should have no prefix
        function _base16To36(value) {
          return (new BN(value, 16)).toString(36);
        }
//# sourceMappingURL=bignumber.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/properties/lib.esm/_version.js
        const lib_esm_version_version = "properties/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/properties/lib.esm/index.js

        var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };


        const lib_esm_logger = new logger_lib_esm["b" /* Logger */](lib_esm_version_version);
        function defineReadOnly(object, name, value) {
          Object.defineProperty(object, name, {
            enumerable: true,
            value: value,
            writable: false,
          });
        }
// Crawl up the constructor chain to find a static method
        function getStatic(ctor, key) {
          for (let i = 0; i < 32; i++) {
            if (ctor[key]) {
              return ctor[key];
            }
            if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
              break;
            }
            ctor = Object.getPrototypeOf(ctor.prototype).constructor;
          }
          return null;
        }
        function resolveProperties(object) {
          return __awaiter(this, void 0, void 0, function* () {
            const promises = Object.keys(object).map((key) => {
              const value = object[key];
              return Promise.resolve(value).then((v) => ({ key: key, value: v }));
            });
            const results = yield Promise.all(promises);
            return results.reduce((accum, result) => {
              accum[(result.key)] = result.value;
              return accum;
            }, {});
          });
        }
        function checkProperties(object, properties) {
          if (!object || typeof (object) !== "object") {
            lib_esm_logger.throwArgumentError("invalid object", "object", object);
          }
          Object.keys(object).forEach((key) => {
            if (!properties[key]) {
              lib_esm_logger.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
            }
          });
        }
        function shallowCopy(object) {
          const result = {};
          for (const key in object) {
            result[key] = object[key];
          }
          return result;
        }
        const opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
        function _isFrozen(object) {
          // Opaque objects are not mutable, so safe to copy by assignment
          if (object === undefined || object === null || opaque[typeof (object)]) {
            return true;
          }
          if (Array.isArray(object) || typeof (object) === "object") {
            if (!Object.isFrozen(object)) {
              return false;
            }
            const keys = Object.keys(object);
            for (let i = 0; i < keys.length; i++) {
              let value = null;
              try {
                value = object[keys[i]];
              }
              catch (error) {
                // If accessing a value triggers an error, it is a getter
                // designed to do so (e.g. Result) and is therefore "frozen"
                continue;
              }
              if (!_isFrozen(value)) {
                return false;
              }
            }
            return true;
          }
          return lib_esm_logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
        }
// Returns a new copy of object, such that no properties may be replaced.
// New properties may be added only to objects.
        function _deepCopy(object) {
          if (_isFrozen(object)) {
            return object;
          }
          // Arrays are mutable, so we need to create a copy
          if (Array.isArray(object)) {
            return Object.freeze(object.map((item) => deepCopy(item)));
          }
          if (typeof (object) === "object") {
            const result = {};
            for (const key in object) {
              const value = object[key];
              if (value === undefined) {
                continue;
              }
              defineReadOnly(result, key, deepCopy(value));
            }
            return result;
          }
          return lib_esm_logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
        }
        function deepCopy(object) {
          return _deepCopy(object);
        }
        class Description {
          constructor(info) {
            for (const key in info) {
              this[key] = deepCopy(info[key]);
            }
          }
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/_version.js
        const abi_lib_esm_version_version = "abi/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js






        const abstract_coder_logger = new logger_lib_esm["b" /* Logger */](abi_lib_esm_version_version);
        function checkResultErrors(result) {
          // Find the first error (if any)
          const errors = [];
          const checkErrors = function (path, object) {
            if (!Array.isArray(object)) {
              return;
            }
            for (let key in object) {
              const childPath = path.slice();
              childPath.push(key);
              try {
                checkErrors(childPath, object[key]);
              }
              catch (error) {
                errors.push({ path: childPath, error: error });
              }
            }
          };
          checkErrors([], result);
          return errors;
        }
        class Coder {
          constructor(name, type, localName, dynamic) {
            // @TODO: defineReadOnly these
            this.name = name;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
          }
          _throwError(message, value) {
            abstract_coder_logger.throwArgumentError(message, this.localName, value);
          }
        }
        class abstract_coder_Writer {
          constructor(wordSize) {
            defineReadOnly(this, "wordSize", wordSize || 32);
            this._data = [];
            this._dataLength = 0;
            this._padding = new Uint8Array(wordSize);
          }
          get data() {
            return Object(lib_esm["c" /* hexConcat */])(this._data);
          }
          get length() { return this._dataLength; }
          _writeData(data) {
            this._data.push(data);
            this._dataLength += data.length;
            return data.length;
          }
          appendWriter(writer) {
            return this._writeData(Object(lib_esm["b" /* concat */])(writer._data));
          }
          // Arrayish items; padded on the right to wordSize
          writeBytes(value) {
            let bytes = Object(lib_esm["a" /* arrayify */])(value);
            const paddingOffset = bytes.length % this.wordSize;
            if (paddingOffset) {
              bytes = Object(lib_esm["b" /* concat */])([bytes, this._padding.slice(paddingOffset)]);
            }
            return this._writeData(bytes);
          }
          _getValue(value) {
            let bytes = Object(lib_esm["a" /* arrayify */])(bignumber_BigNumber.from(value));
            if (bytes.length > this.wordSize) {
              abstract_coder_logger.throwError("value out-of-bounds", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {
                length: this.wordSize,
                offset: bytes.length
              });
            }
            if (bytes.length % this.wordSize) {
              bytes = Object(lib_esm["b" /* concat */])([this._padding.slice(bytes.length % this.wordSize), bytes]);
            }
            return bytes;
          }
          // BigNumberish items; padded on the left to wordSize
          writeValue(value) {
            return this._writeData(this._getValue(value));
          }
          writeUpdatableValue() {
            const offset = this._data.length;
            this._data.push(this._padding);
            this._dataLength += this.wordSize;
            return (value) => {
              this._data[offset] = this._getValue(value);
            };
          }
        }
        class abstract_coder_Reader {
          constructor(data, wordSize, coerceFunc, allowLoose) {
            defineReadOnly(this, "_data", Object(lib_esm["a" /* arrayify */])(data));
            defineReadOnly(this, "wordSize", wordSize || 32);
            defineReadOnly(this, "_coerceFunc", coerceFunc);
            defineReadOnly(this, "allowLoose", allowLoose);
            this._offset = 0;
          }
          get data() { return Object(lib_esm["i" /* hexlify */])(this._data); }
          get consumed() { return this._offset; }
          // The default Coerce function
          static coerce(name, value) {
            let match = name.match("^u?int([0-9]+)$");
            if (match && parseInt(match[1]) <= 48) {
              value = value.toNumber();
            }
            return value;
          }
          coerce(name, value) {
            if (this._coerceFunc) {
              return this._coerceFunc(name, value);
            }
            return abstract_coder_Reader.coerce(name, value);
          }
          _peekBytes(offset, length, loose) {
            let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
            if (this._offset + alignedLength > this._data.length) {
              if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                alignedLength = length;
              }
              else {
                abstract_coder_logger.throwError("data out-of-bounds", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {
                  length: this._data.length,
                  offset: this._offset + alignedLength
                });
              }
            }
            return this._data.slice(this._offset, this._offset + alignedLength);
          }
          subReader(offset) {
            return new abstract_coder_Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
          }
          readBytes(length, loose) {
            let bytes = this._peekBytes(0, length, !!loose);
            this._offset += bytes.length;
            // @TODO: Make sure the length..end bytes are all 0?
            return bytes.slice(0, length);
          }
          readValue() {
            return bignumber_BigNumber.from(this.readBytes(this.wordSize));
          }
        }
//# sourceMappingURL=abstract-coder.js.map
// EXTERNAL MODULE: ./node_modules/js-sha3/src/sha3.js
        var sha3 = __webpack_require__("1c55");
        var sha3_default = /*#__PURE__*/__webpack_require__.n(sha3);

// CONCATENATED MODULE: ./node_modules/@ethersproject/keccak256/lib.esm/index.js



        function keccak256(data) {
          return '0x' + sha3_default.a.keccak_256(Object(lib_esm["a" /* arrayify */])(data));
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/rlp/lib.esm/_version.js
        const rlp_lib_esm_version_version = "rlp/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/rlp/lib.esm/index.js

//See: https://github.com/ethereum/wiki/wiki/RLP



        const rlp_lib_esm_logger = new logger_lib_esm["b" /* Logger */](rlp_lib_esm_version_version);
        function arrayifyInteger(value) {
          const result = [];
          while (value) {
            result.unshift(value & 0xff);
            value >>= 8;
          }
          return result;
        }
        function unarrayifyInteger(data, offset, length) {
          let result = 0;
          for (let i = 0; i < length; i++) {
            result = (result * 256) + data[offset + i];
          }
          return result;
        }
        function _encode(object) {
          if (Array.isArray(object)) {
            let payload = [];
            object.forEach(function (child) {
              payload = payload.concat(_encode(child));
            });
            if (payload.length <= 55) {
              payload.unshift(0xc0 + payload.length);
              return payload;
            }
            const length = arrayifyInteger(payload.length);
            length.unshift(0xf7 + length.length);
            return length.concat(payload);
          }
          if (!Object(lib_esm["k" /* isBytesLike */])(object)) {
            rlp_lib_esm_logger.throwArgumentError("RLP object must be BytesLike", "object", object);
          }
          const data = Array.prototype.slice.call(Object(lib_esm["a" /* arrayify */])(object));
          if (data.length === 1 && data[0] <= 0x7f) {
            return data;
          }
          else if (data.length <= 55) {
            data.unshift(0x80 + data.length);
            return data;
          }
          const length = arrayifyInteger(data.length);
          length.unshift(0xb7 + length.length);
          return length.concat(data);
        }
        function encode(object) {
          return Object(lib_esm["i" /* hexlify */])(_encode(object));
        }
        function _decodeChildren(data, offset, childOffset, length) {
          const result = [];
          while (childOffset < offset + 1 + length) {
            const decoded = _decode(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            if (childOffset > offset + 1 + length) {
              rlp_lib_esm_logger.throwError("child data too short", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {});
            }
          }
          return { consumed: (1 + length), result: result };
        }
// returns { consumed: number, result: Object }
        function _decode(data, offset) {
          if (data.length === 0) {
            rlp_lib_esm_logger.throwError("data too short", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {});
          }
          // Array with extra length prefix
          if (data[offset] >= 0xf8) {
            const lengthLength = data[offset] - 0xf7;
            if (offset + 1 + lengthLength > data.length) {
              rlp_lib_esm_logger.throwError("data short segment too short", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
              rlp_lib_esm_logger.throwError("data long segment too short", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
          }
          else if (data[offset] >= 0xc0) {
            const length = data[offset] - 0xc0;
            if (offset + 1 + length > data.length) {
              rlp_lib_esm_logger.throwError("data array too short", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1, length);
          }
          else if (data[offset] >= 0xb8) {
            const lengthLength = data[offset] - 0xb7;
            if (offset + 1 + lengthLength > data.length) {
              rlp_lib_esm_logger.throwError("data array too short", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
              rlp_lib_esm_logger.throwError("data array too short", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {});
            }
            const result = Object(lib_esm["i" /* hexlify */])(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
            return { consumed: (1 + lengthLength + length), result: result };
          }
          else if (data[offset] >= 0x80) {
            const length = data[offset] - 0x80;
            if (offset + 1 + length > data.length) {
              rlp_lib_esm_logger.throwError("data too short", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {});
            }
            const result = Object(lib_esm["i" /* hexlify */])(data.slice(offset + 1, offset + 1 + length));
            return { consumed: (1 + length), result: result };
          }
          return { consumed: 1, result: Object(lib_esm["i" /* hexlify */])(data[offset]) };
        }
        function decode(data) {
          const bytes = Object(lib_esm["a" /* arrayify */])(data);
          const decoded = _decode(bytes, 0);
          if (decoded.consumed !== bytes.length) {
            rlp_lib_esm_logger.throwArgumentError("invalid rlp data", "data", data);
          }
          return decoded.result;
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/address/lib.esm/_version.js
        const address_lib_esm_version_version = "address/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/address/lib.esm/index.js







        const address_lib_esm_logger = new logger_lib_esm["b" /* Logger */](address_lib_esm_version_version);
        function getChecksumAddress(address) {
          if (!Object(lib_esm["l" /* isHexString */])(address, 20)) {
            address_lib_esm_logger.throwArgumentError("invalid address", "address", address);
          }
          address = address.toLowerCase();
          const chars = address.substring(2).split("");
          const expanded = new Uint8Array(40);
          for (let i = 0; i < 40; i++) {
            expanded[i] = chars[i].charCodeAt(0);
          }
          const hashed = Object(lib_esm["a" /* arrayify */])(keccak256(expanded));
          for (let i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
              chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
              chars[i + 1] = chars[i + 1].toUpperCase();
            }
          }
          return "0x" + chars.join("");
        }
// Shims for environments that are missing some required constants and functions
        const MAX_SAFE_INTEGER = 0x1fffffffffffff;
        function log10(x) {
          if (Math.log10) {
            return Math.log10(x);
          }
          return Math.log(x) / Math.LN10;
        }
// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
// Create lookup table
        const ibanLookup = {};
        for (let i = 0; i < 10; i++) {
          ibanLookup[String(i)] = String(i);
        }
        for (let i = 0; i < 26; i++) {
          ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
        }
// How many decimal digits can we process? (for 64-bit float, this is 15)
        const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
        function ibanChecksum(address) {
          address = address.toUpperCase();
          address = address.substring(4) + address.substring(0, 2) + "00";
          let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
          // Javascript can handle integers safely up to 15 (decimal) digits
          while (expanded.length >= safeDigits) {
            let block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
          }
          let checksum = String(98 - (parseInt(expanded, 10) % 97));
          while (checksum.length < 2) {
            checksum = "0" + checksum;
          }
          return checksum;
        }
        ;
        function getAddress(address) {
          let result = null;
          if (typeof (address) !== "string") {
            address_lib_esm_logger.throwArgumentError("invalid address", "address", address);
          }
          if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (address.substring(0, 2) !== "0x") {
              address = "0x" + address;
            }
            result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
              address_lib_esm_logger.throwArgumentError("bad address checksum", "address", address);
            }
            // Maybe ICAP? (we only support direct mode)
          }
          else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            if (address.substring(2, 4) !== ibanChecksum(address)) {
              address_lib_esm_logger.throwArgumentError("bad icap checksum", "address", address);
            }
            result = _base36To16(address.substring(4));
            while (result.length < 40) {
              result = "0" + result;
            }
            result = getChecksumAddress("0x" + result);
          }
          else {
            address_lib_esm_logger.throwArgumentError("invalid address", "address", address);
          }
          return result;
        }
        function isAddress(address) {
          try {
            getAddress(address);
            return true;
          }
          catch (error) { }
          return false;
        }
        function getIcapAddress(address) {
          let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
          while (base36.length < 30) {
            base36 = "0" + base36;
          }
          return "XE" + ibanChecksum("XE00" + base36) + base36;
        }
// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
        function getContractAddress(transaction) {
          let from = null;
          try {
            from = getAddress(transaction.from);
          }
          catch (error) {
            address_lib_esm_logger.throwArgumentError("missing from address", "transaction", transaction);
          }
          const nonce = Object(lib_esm["o" /* stripZeros */])(Object(lib_esm["a" /* arrayify */])(bignumber_BigNumber.from(transaction.nonce).toHexString()));
          return getAddress(Object(lib_esm["e" /* hexDataSlice */])(keccak256(encode([from, nonce])), 12));
        }
        function getCreate2Address(from, salt, initCodeHash) {
          if (Object(lib_esm["d" /* hexDataLength */])(salt) !== 32) {
            address_lib_esm_logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
          }
          if (Object(lib_esm["d" /* hexDataLength */])(initCodeHash) !== 32) {
            address_lib_esm_logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
          }
          return getAddress(Object(lib_esm["e" /* hexDataSlice */])(keccak256(Object(lib_esm["b" /* concat */])(["0xff", getAddress(from), salt, initCodeHash])), 12));
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/strings/lib.esm/_version.js
        const strings_lib_esm_version_version = "strings/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/strings/lib.esm/utf8.js




        const utf8_logger = new logger_lib_esm["b" /* Logger */](strings_lib_esm_version_version);
///////////////////////////////
        var UnicodeNormalizationForm;
        (function (UnicodeNormalizationForm) {
          UnicodeNormalizationForm["current"] = "";
          UnicodeNormalizationForm["NFC"] = "NFC";
          UnicodeNormalizationForm["NFD"] = "NFD";
          UnicodeNormalizationForm["NFKC"] = "NFKC";
          UnicodeNormalizationForm["NFKD"] = "NFKD";
        })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
        ;
        var Utf8ErrorReason;
        (function (Utf8ErrorReason) {
          // A continuation byte was present where there was nothing to continue
          // - offset = the index the codepoint began in
          Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
          // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
          // - offset = the index the codepoint began in
          Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
          // The string is too short to process the expected codepoint
          // - offset = the index the codepoint began in
          Utf8ErrorReason["OVERRUN"] = "string overrun";
          // A missing continuation byte was expected but not found
          // - offset = the index the continuation byte was expected at
          Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
          // The computed code point is outside the range for UTF-8
          // - offset       = start of this codepoint
          // - badCodepoint = the computed codepoint; outside the UTF-8 range
          Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
          // UTF-8 strings may not contain UTF-16 surrogate pairs
          // - offset       = start of this codepoint
          // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
          Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
          // The string is an overlong representation
          // - offset       = start of this codepoint
          // - badCodepoint = the computed codepoint; already bounds checked
          Utf8ErrorReason["OVERLONG"] = "overlong representation";
        })(Utf8ErrorReason || (Utf8ErrorReason = {}));
        ;
        function errorFunc(reason, offset, bytes, output, badCodepoint) {
          return utf8_logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
        }
        function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
          // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
          if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
            let i = 0;
            for (let o = offset + 1; o < bytes.length; o++) {
              if (bytes[o] >> 6 !== 0x02) {
                break;
              }
              i++;
            }
            return i;
          }
          // This byte runs us past the end of the string, so just jump to the end
          // (but the first byte was read already read and therefore skipped)
          if (reason === Utf8ErrorReason.OVERRUN) {
            return bytes.length - offset - 1;
          }
          // Nothing to skip
          return 0;
        }
        function replaceFunc(reason, offset, bytes, output, badCodepoint) {
          // Overlong representations are otherwise "valid" code points; just non-deistingtished
          if (reason === Utf8ErrorReason.OVERLONG) {
            output.push(badCodepoint);
            return 0;
          }
          // Put the replacement character into the output
          output.push(0xfffd);
          // Otherwise, process as if ignoring errors
          return ignoreFunc(reason, offset, bytes, output, badCodepoint);
        }
// Common error handing strategies
        const Utf8ErrorFuncs = Object.freeze({
          error: errorFunc,
          ignore: ignoreFunc,
          replace: replaceFunc
        });
// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
        function getUtf8CodePoints(bytes, onError) {
          if (onError == null) {
            onError = Utf8ErrorFuncs.error;
          }
          bytes = Object(lib_esm["a" /* arrayify */])(bytes);
          const result = [];
          let i = 0;
          // Invalid bytes are ignored
          while (i < bytes.length) {
            const c = bytes[i++];
            // 0xxx xxxx
            if (c >> 7 === 0) {
              result.push(c);
              continue;
            }
            // Multibyte; how many bytes left for this character?
            let extraLength = null;
            let overlongMask = null;
            // 110x xxxx 10xx xxxx
            if ((c & 0xe0) === 0xc0) {
              extraLength = 1;
              overlongMask = 0x7f;
              // 1110 xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf0) === 0xe0) {
              extraLength = 2;
              overlongMask = 0x7ff;
              // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf8) === 0xf0) {
              extraLength = 3;
              overlongMask = 0xffff;
            }
            else {
              if ((c & 0xc0) === 0x80) {
                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
              }
              else {
                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
              }
              continue;
            }
            // Do we have enough bytes in our data?
            if (i - 1 + extraLength >= bytes.length) {
              i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
              continue;
            }
            // Remove the length prefix from the char
            let res = c & ((1 << (8 - extraLength - 1)) - 1);
            for (let j = 0; j < extraLength; j++) {
              let nextChar = bytes[i];
              // Invalid continuation byte
              if ((nextChar & 0xc0) != 0x80) {
                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                res = null;
                break;
              }
              ;
              res = (res << 6) | (nextChar & 0x3f);
              i++;
            }
            // See above loop for invalid continuation byte
            if (res === null) {
              continue;
            }
            // Maximum code point
            if (res > 0x10ffff) {
              i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
              continue;
            }
            // Reserved for UTF-16 surrogate halves
            if (res >= 0xd800 && res <= 0xdfff) {
              i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
              continue;
            }
            // Check for overlong sequences (more bytes than needed)
            if (res <= overlongMask) {
              i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
              continue;
            }
            result.push(res);
          }
          return result;
        }
// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
        function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
          if (form != UnicodeNormalizationForm.current) {
            utf8_logger.checkNormalize();
            str = str.normalize(form);
          }
          let result = [];
          for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c < 0x80) {
              result.push(c);
            }
            else if (c < 0x800) {
              result.push((c >> 6) | 0xc0);
              result.push((c & 0x3f) | 0x80);
            }
            else if ((c & 0xfc00) == 0xd800) {
              i++;
              const c2 = str.charCodeAt(i);
              if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                throw new Error("invalid utf-8 string");
              }
              // Surrogate Pair
              const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
              result.push((pair >> 18) | 0xf0);
              result.push(((pair >> 12) & 0x3f) | 0x80);
              result.push(((pair >> 6) & 0x3f) | 0x80);
              result.push((pair & 0x3f) | 0x80);
            }
            else {
              result.push((c >> 12) | 0xe0);
              result.push(((c >> 6) & 0x3f) | 0x80);
              result.push((c & 0x3f) | 0x80);
            }
          }
          return Object(lib_esm["a" /* arrayify */])(result);
        }
        ;
        function escapeChar(value) {
          const hex = ("0000" + value.toString(16));
          return "\\u" + hex.substring(hex.length - 4);
        }
        function _toEscapedUtf8String(bytes, onError) {
          return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
            if (codePoint < 256) {
              switch (codePoint) {
                case 8: return "\\b";
                case 9: return "\\t";
                case 10: return "\\n";
                case 13: return "\\r";
                case 34: return "\\\"";
                case 92: return "\\\\";
              }
              if (codePoint >= 32 && codePoint < 127) {
                return String.fromCharCode(codePoint);
              }
            }
            if (codePoint <= 0xffff) {
              return escapeChar(codePoint);
            }
            codePoint -= 0x10000;
            return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
          }).join("") + '"';
        }
        function _toUtf8String(codePoints) {
          return codePoints.map((codePoint) => {
            if (codePoint <= 0xffff) {
              return String.fromCharCode(codePoint);
            }
            codePoint -= 0x10000;
            return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
          }).join("");
        }
        function toUtf8String(bytes, onError) {
          return _toUtf8String(getUtf8CodePoints(bytes, onError));
        }
        function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
          return getUtf8CodePoints(toUtf8Bytes(str, form));
        }
//# sourceMappingURL=utf8.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/id.js


        function id_id(text) {
          return keccak256(toUtf8Bytes(text));
        }
//# sourceMappingURL=id.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/address.js




        class address_AddressCoder extends Coder {
          constructor(localName) {
            super("address", "address", localName, false);
          }
          defaultValue() {
            return "0x0000000000000000000000000000000000000000";
          }
          encode(writer, value) {
            try {
              value = getAddress(value);
            }
            catch (error) {
              this._throwError(error.message, value);
            }
            return writer.writeValue(value);
          }
          decode(reader) {
            return getAddress(Object(lib_esm["h" /* hexZeroPad */])(reader.readValue().toHexString(), 20));
          }
        }
//# sourceMappingURL=address.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js


// Clones the functionality of an existing Coder, but without a localName
        class anonymous_AnonymousCoder extends Coder {
          constructor(coder) {
            super(coder.name, coder.type, undefined, coder.dynamic);
            this.coder = coder;
          }
          defaultValue() {
            return this.coder.defaultValue();
          }
          encode(writer, value) {
            return this.coder.encode(writer, value);
          }
          decode(reader) {
            return this.coder.decode(reader);
          }
        }
//# sourceMappingURL=anonymous.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/array.js



        const array_logger = new logger_lib_esm["b" /* Logger */](abi_lib_esm_version_version);


        function pack(writer, coders, values) {
          let arrayValues = null;
          if (Array.isArray(values)) {
            arrayValues = values;
          }
          else if (values && typeof (values) === "object") {
            let unique = {};
            arrayValues = coders.map((coder) => {
              const name = coder.localName;
              if (!name) {
                array_logger.throwError("cannot encode object for signature with missing names", logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT, {
                  argument: "values",
                  coder: coder,
                  value: values
                });
              }
              if (unique[name]) {
                array_logger.throwError("cannot encode object for signature with duplicate names", logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT, {
                  argument: "values",
                  coder: coder,
                  value: values
                });
              }
              unique[name] = true;
              return values[name];
            });
          }
          else {
            array_logger.throwArgumentError("invalid tuple value", "tuple", values);
          }
          if (coders.length !== arrayValues.length) {
            array_logger.throwArgumentError("types/value length mismatch", "tuple", values);
          }
          let staticWriter = new abstract_coder_Writer(writer.wordSize);
          let dynamicWriter = new abstract_coder_Writer(writer.wordSize);
          let updateFuncs = [];
          coders.forEach((coder, index) => {
            let value = arrayValues[index];
            if (coder.dynamic) {
              // Get current dynamic offset (for the future pointer)
              let dynamicOffset = dynamicWriter.length;
              // Encode the dynamic value into the dynamicWriter
              coder.encode(dynamicWriter, value);
              // Prepare to populate the correct offset once we are done
              let updateFunc = staticWriter.writeUpdatableValue();
              updateFuncs.push((baseOffset) => {
                updateFunc(baseOffset + dynamicOffset);
              });
            }
            else {
              coder.encode(staticWriter, value);
            }
          });
          // Backfill all the dynamic offsets, now that we know the static length
          updateFuncs.forEach((func) => { func(staticWriter.length); });
          let length = writer.appendWriter(staticWriter);
          length += writer.appendWriter(dynamicWriter);
          return length;
        }
        function unpack(reader, coders) {
          let values = [];
          // A reader anchored to this base
          let baseReader = reader.subReader(0);
          coders.forEach((coder) => {
            let value = null;
            if (coder.dynamic) {
              let offset = reader.readValue();
              let offsetReader = baseReader.subReader(offset.toNumber());
              try {
                value = coder.decode(offsetReader);
              }
              catch (error) {
                // Cannot recover from this
                if (error.code === logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN) {
                  throw error;
                }
                value = error;
                value.baseType = coder.name;
                value.name = coder.localName;
                value.type = coder.type;
              }
            }
            else {
              try {
                value = coder.decode(reader);
              }
              catch (error) {
                // Cannot recover from this
                if (error.code === logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN) {
                  throw error;
                }
                value = error;
                value.baseType = coder.name;
                value.name = coder.localName;
                value.type = coder.type;
              }
            }
            if (value != undefined) {
              values.push(value);
            }
          });
          // We only output named properties for uniquely named coders
          const uniqueNames = coders.reduce((accum, coder) => {
            const name = coder.localName;
            if (name) {
              if (!accum[name]) {
                accum[name] = 0;
              }
              accum[name]++;
            }
            return accum;
          }, {});
          // Add any named parameters (i.e. tuples)
          coders.forEach((coder, index) => {
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
              return;
            }
            if (name === "length") {
              name = "_length";
            }
            if (values[name] != null) {
              return;
            }
            const value = values[index];
            if (value instanceof Error) {
              Object.defineProperty(values, name, {
                enumerable: true,
                get: () => { throw value; }
              });
            }
            else {
              values[name] = value;
            }
          });
          for (let i = 0; i < values.length; i++) {
            const value = values[i];
            if (value instanceof Error) {
              Object.defineProperty(values, i, {
                enumerable: true,
                get: () => { throw value; }
              });
            }
          }
          return Object.freeze(values);
        }
        class array_ArrayCoder extends Coder {
          constructor(coder, length, localName) {
            const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
            const dynamic = (length === -1 || coder.dynamic);
            super("array", type, localName, dynamic);
            this.coder = coder;
            this.length = length;
          }
          defaultValue() {
            // Verifies the child coder is valid (even if the array is dynamic or 0-length)
            const defaultChild = this.coder.defaultValue();
            const result = [];
            for (let i = 0; i < this.length; i++) {
              result.push(defaultChild);
            }
            return result;
          }
          encode(writer, value) {
            if (!Array.isArray(value)) {
              this._throwError("expected array value", value);
            }
            let count = this.length;
            if (count === -1) {
              count = value.length;
              writer.writeValue(value.length);
            }
            array_logger.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
            let coders = [];
            for (let i = 0; i < value.length; i++) {
              coders.push(this.coder);
            }
            return pack(writer, coders, value);
          }
          decode(reader) {
            let count = this.length;
            if (count === -1) {
              count = reader.readValue().toNumber();
              // Check that there is *roughly* enough data to ensure
              // stray random data is not being read as a length. Each
              // slot requires at least 32 bytes for their value (or 32
              // bytes as a link to the data). This could use a much
              // tighter bound, but we are erroring on the side of safety.
              if (count * 32 > reader._data.length) {
                array_logger.throwError("insufficient data length", logger_lib_esm["b" /* Logger */].errors.BUFFER_OVERRUN, {
                  length: reader._data.length,
                  count: count
                });
              }
            }
            let coders = [];
            for (let i = 0; i < count; i++) {
              coders.push(new anonymous_AnonymousCoder(this.coder));
            }
            return reader.coerce(this.name, unpack(reader, coders));
          }
        }
//# sourceMappingURL=array.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js


        class boolean_BooleanCoder extends Coder {
          constructor(localName) {
            super("bool", "bool", localName, false);
          }
          defaultValue() {
            return false;
          }
          encode(writer, value) {
            return writer.writeValue(value ? 1 : 0);
          }
          decode(reader) {
            return reader.coerce(this.type, !reader.readValue().isZero());
          }
        }
//# sourceMappingURL=boolean.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js



        class bytes_DynamicBytesCoder extends Coder {
          constructor(type, localName) {
            super(type, type, localName, true);
          }
          defaultValue() {
            return "0x";
          }
          encode(writer, value) {
            value = Object(lib_esm["a" /* arrayify */])(value);
            let length = writer.writeValue(value.length);
            length += writer.writeBytes(value);
            return length;
          }
          decode(reader) {
            return reader.readBytes(reader.readValue().toNumber(), true);
          }
        }
        class bytes_BytesCoder extends bytes_DynamicBytesCoder {
          constructor(localName) {
            super("bytes", localName);
          }
          decode(reader) {
            return reader.coerce(this.name, Object(lib_esm["i" /* hexlify */])(super.decode(reader)));
          }
        }
//# sourceMappingURL=bytes.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js



// @TODO: Merge this with bytes
        class fixed_bytes_FixedBytesCoder extends Coder {
          constructor(size, localName) {
            let name = "bytes" + String(size);
            super(name, name, localName, false);
            this.size = size;
          }
          defaultValue() {
            return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
          }
          encode(writer, value) {
            let data = Object(lib_esm["a" /* arrayify */])(value);
            if (data.length !== this.size) {
              this._throwError("incorrect data length", value);
            }
            return writer.writeBytes(data);
          }
          decode(reader) {
            return reader.coerce(this.name, Object(lib_esm["i" /* hexlify */])(reader.readBytes(this.size)));
          }
        }
//# sourceMappingURL=fixed-bytes.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/null.js


        class null_NullCoder extends Coder {
          constructor(localName) {
            super("null", "", localName, false);
          }
          defaultValue() {
            return null;
          }
          encode(writer, value) {
            if (value != null) {
              this._throwError("not null", value);
            }
            return writer.writeBytes([]);
          }
          decode(reader) {
            reader.readBytes(0);
            return reader.coerce(this.name, null);
          }
        }
//# sourceMappingURL=null.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/constants/lib.esm/bignumbers.js

        const NegativeOne = ( /*#__PURE__*/bignumber_BigNumber.from(-1));
        const Zero = ( /*#__PURE__*/bignumber_BigNumber.from(0));
        const One = ( /*#__PURE__*/bignumber_BigNumber.from(1));
        const Two = ( /*#__PURE__*/bignumber_BigNumber.from(2));
        const WeiPerEther = ( /*#__PURE__*/bignumber_BigNumber.from("1000000000000000000"));
        const MaxUint256 = ( /*#__PURE__*/bignumber_BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
        const MinInt256 = ( /*#__PURE__*/bignumber_BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000"));
        const MaxInt256 = ( /*#__PURE__*/bignumber_BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));

//# sourceMappingURL=bignumbers.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/number.js




        class number_NumberCoder extends Coder {
          constructor(size, signed, localName) {
            const name = ((signed ? "int" : "uint") + (size * 8));
            super(name, name, localName, false);
            this.size = size;
            this.signed = signed;
          }
          defaultValue() {
            return 0;
          }
          encode(writer, value) {
            let v = bignumber_BigNumber.from(value);
            // Check bounds are safe for encoding
            let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
            if (this.signed) {
              let bounds = maxUintValue.mask(this.size * 8 - 1);
              if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {
                this._throwError("value out-of-bounds", value);
              }
            }
            else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
              this._throwError("value out-of-bounds", value);
            }
            v = v.toTwos(this.size * 8).mask(this.size * 8);
            if (this.signed) {
              v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
            }
            return writer.writeValue(v);
          }
          decode(reader) {
            let value = reader.readValue().mask(this.size * 8);
            if (this.signed) {
              value = value.fromTwos(this.size * 8);
            }
            return reader.coerce(this.name, value);
          }
        }
//# sourceMappingURL=number.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/string.js



        class string_StringCoder extends bytes_DynamicBytesCoder {
          constructor(localName) {
            super("string", localName);
          }
          defaultValue() {
            return "";
          }
          encode(writer, value) {
            return super.encode(writer, toUtf8Bytes(value));
          }
          decode(reader) {
            return toUtf8String(super.decode(reader));
          }
        }
//# sourceMappingURL=string.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js



        class tuple_TupleCoder extends Coder {
          constructor(coders, localName) {
            let dynamic = false;
            const types = [];
            coders.forEach((coder) => {
              if (coder.dynamic) {
                dynamic = true;
              }
              types.push(coder.type);
            });
            const type = ("tuple(" + types.join(",") + ")");
            super("tuple", type, localName, dynamic);
            this.coders = coders;
          }
          defaultValue() {
            const values = [];
            this.coders.forEach((coder) => {
              values.push(coder.defaultValue());
            });
            // We only output named properties for uniquely named coders
            const uniqueNames = this.coders.reduce((accum, coder) => {
              const name = coder.localName;
              if (name) {
                if (!accum[name]) {
                  accum[name] = 0;
                }
                accum[name]++;
              }
              return accum;
            }, {});
            // Add named values
            this.coders.forEach((coder, index) => {
              let name = coder.localName;
              if (!name || uniqueNames[name] !== 1) {
                return;
              }
              if (name === "length") {
                name = "_length";
              }
              if (values[name] != null) {
                return;
              }
              values[name] = values[index];
            });
            return Object.freeze(values);
          }
          encode(writer, value) {
            return pack(writer, this.coders, value);
          }
          decode(reader) {
            return reader.coerce(this.name, unpack(reader, this.coders));
          }
        }
//# sourceMappingURL=tuple.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/fragments.js





        const fragments_logger = new logger_lib_esm["b" /* Logger */](abi_lib_esm_version_version);
        ;
        const fragments_constructorGuard = {};
        let ModifiersBytes = { calldata: true, memory: true, storage: true };
        let ModifiersNest = { calldata: true, memory: true };
        function checkModifier(type, name) {
          if (type === "bytes" || type === "string") {
            if (ModifiersBytes[name]) {
              return true;
            }
          }
          else if (type === "address") {
            if (name === "payable") {
              return true;
            }
          }
          else if (type.indexOf("[") >= 0 || type === "tuple") {
            if (ModifiersNest[name]) {
              return true;
            }
          }
          if (ModifiersBytes[name] || name === "payable") {
            fragments_logger.throwArgumentError("invalid modifier", "name", name);
          }
          return false;
        }
// @TODO: Make sure that children of an indexed tuple are marked with a null indexed
        function parseParamType(param, allowIndexed) {
          let originalParam = param;
          function throwError(i) {
            fragments_logger.throwArgumentError(`unexpected character at position ${i}`, "param", param);
          }
          param = param.replace(/\s/g, " ");
          function newNode(parent) {
            let node = { type: "", name: "", parent: parent, state: { allowType: true } };
            if (allowIndexed) {
              node.indexed = false;
            }
            return node;
          }
          let parent = { type: "", name: "", state: { allowType: true } };
          let node = parent;
          for (let i = 0; i < param.length; i++) {
            let c = param[i];
            switch (c) {
              case "(":
                if (node.state.allowType && node.type === "") {
                  node.type = "tuple";
                }
                else if (!node.state.allowParams) {
                  throwError(i);
                }
                node.state.allowType = false;
                node.type = verifyType(node.type);
                node.components = [newNode(node)];
                node = node.components[0];
                break;
              case ")":
                delete node.state;
                if (node.name === "indexed") {
                  if (!allowIndexed) {
                    throwError(i);
                  }
                  node.indexed = true;
                  node.name = "";
                }
                if (checkModifier(node.type, node.name)) {
                  node.name = "";
                }
                node.type = verifyType(node.type);
                let child = node;
                node = node.parent;
                if (!node) {
                  throwError(i);
                }
                delete child.parent;
                node.state.allowParams = false;
                node.state.allowName = true;
                node.state.allowArray = true;
                break;
              case ",":
                delete node.state;
                if (node.name === "indexed") {
                  if (!allowIndexed) {
                    throwError(i);
                  }
                  node.indexed = true;
                  node.name = "";
                }
                if (checkModifier(node.type, node.name)) {
                  node.name = "";
                }
                node.type = verifyType(node.type);
                let sibling = newNode(node.parent);
                //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                node.parent.components.push(sibling);
                delete node.parent;
                node = sibling;
                break;
              // Hit a space...
              case " ":
                // If reading type, the type is done and may read a param or name
                if (node.state.allowType) {
                  if (node.type !== "") {
                    node.type = verifyType(node.type);
                    delete node.state.allowType;
                    node.state.allowName = true;
                    node.state.allowParams = true;
                  }
                }
                // If reading name, the name is done
                if (node.state.allowName) {
                  if (node.name !== "") {
                    if (node.name === "indexed") {
                      if (!allowIndexed) {
                        throwError(i);
                      }
                      if (node.indexed) {
                        throwError(i);
                      }
                      node.indexed = true;
                      node.name = "";
                    }
                    else if (checkModifier(node.type, node.name)) {
                      node.name = "";
                    }
                    else {
                      node.state.allowName = false;
                    }
                  }
                }
                break;
              case "[":
                if (!node.state.allowArray) {
                  throwError(i);
                }
                node.type += c;
                node.state.allowArray = false;
                node.state.allowName = false;
                node.state.readArray = true;
                break;
              case "]":
                if (!node.state.readArray) {
                  throwError(i);
                }
                node.type += c;
                node.state.readArray = false;
                node.state.allowArray = true;
                node.state.allowName = true;
                break;
              default:
                if (node.state.allowType) {
                  node.type += c;
                  node.state.allowParams = true;
                  node.state.allowArray = true;
                }
                else if (node.state.allowName) {
                  node.name += c;
                  delete node.state.allowArray;
                }
                else if (node.state.readArray) {
                  node.type += c;
                }
                else {
                  throwError(i);
                }
            }
          }
          if (node.parent) {
            fragments_logger.throwArgumentError("unexpected eof", "param", param);
          }
          delete parent.state;
          if (node.name === "indexed") {
            if (!allowIndexed) {
              throwError(originalParam.length - 7);
            }
            if (node.indexed) {
              throwError(originalParam.length - 7);
            }
            node.indexed = true;
            node.name = "";
          }
          else if (checkModifier(node.type, node.name)) {
            node.name = "";
          }
          parent.type = verifyType(parent.type);
          return parent;
        }
        function populate(object, params) {
          for (let key in params) {
            defineReadOnly(object, key, params[key]);
          }
        }
        const FormatTypes = Object.freeze({
          // Bare formatting, as is needed for computing a sighash of an event or function
          sighash: "sighash",
          // Human-Readable with Minimal spacing and without names (compact human-readable)
          minimal: "minimal",
          // Human-Readable with nice spacing, including all names
          full: "full",
          // JSON-format a la Solidity
          json: "json"
        });
        const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
        class fragments_ParamType {
          constructor(constructorGuard, params) {
            if (constructorGuard !== fragments_constructorGuard) {
              fragments_logger.throwError("use fromString", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "new ParamType()"
              });
            }
            populate(this, params);
            let match = this.type.match(paramTypeArray);
            if (match) {
              populate(this, {
                arrayLength: parseInt(match[2] || "-1"),
                arrayChildren: fragments_ParamType.fromObject({
                  type: match[1],
                  components: this.components
                }),
                baseType: "array"
              });
            }
            else {
              populate(this, {
                arrayLength: null,
                arrayChildren: null,
                baseType: ((this.components != null) ? "tuple" : this.type)
              });
            }
            this._isParamType = true;
            Object.freeze(this);
          }
          // Format the parameter fragment
          //   - sighash: "(uint256,address)"
          //   - minimal: "tuple(uint256,address) indexed"
          //   - full:    "tuple(uint256 foo, address bar) indexed baz"
          format(format) {
            if (!format) {
              format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
              fragments_logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
              let result = {
                type: ((this.baseType === "tuple") ? "tuple" : this.type),
                name: (this.name || undefined)
              };
              if (typeof (this.indexed) === "boolean") {
                result.indexed = this.indexed;
              }
              if (this.components) {
                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
              }
              return JSON.stringify(result);
            }
            let result = "";
            // Array
            if (this.baseType === "array") {
              result += this.arrayChildren.format(format);
              result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
            }
            else {
              if (this.baseType === "tuple") {
                if (format !== FormatTypes.sighash) {
                  result += this.type;
                }
                result += "(" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ")";
              }
              else {
                result += this.type;
              }
            }
            if (format !== FormatTypes.sighash) {
              if (this.indexed === true) {
                result += " indexed";
              }
              if (format === FormatTypes.full && this.name) {
                result += " " + this.name;
              }
            }
            return result;
          }
          static from(value, allowIndexed) {
            if (typeof (value) === "string") {
              return fragments_ParamType.fromString(value, allowIndexed);
            }
            return fragments_ParamType.fromObject(value);
          }
          static fromObject(value) {
            if (fragments_ParamType.isParamType(value)) {
              return value;
            }
            return new fragments_ParamType(fragments_constructorGuard, {
              name: (value.name || null),
              type: verifyType(value.type),
              indexed: ((value.indexed == null) ? null : !!value.indexed),
              components: (value.components ? value.components.map(fragments_ParamType.fromObject) : null)
            });
          }
          static fromString(value, allowIndexed) {
            function ParamTypify(node) {
              return fragments_ParamType.fromObject({
                name: node.name,
                type: node.type,
                indexed: node.indexed,
                components: node.components
              });
            }
            return ParamTypify(parseParamType(value, !!allowIndexed));
          }
          static isParamType(value) {
            return !!(value != null && value._isParamType);
          }
        }
        ;
        function parseParams(value, allowIndex) {
          return splitNesting(value).map((param) => fragments_ParamType.fromString(param, allowIndex));
        }
        class fragments_Fragment {
          constructor(constructorGuard, params) {
            if (constructorGuard !== fragments_constructorGuard) {
              fragments_logger.throwError("use a static from method", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "new Fragment()"
              });
            }
            populate(this, params);
            this._isFragment = true;
            Object.freeze(this);
          }
          static from(value) {
            if (fragments_Fragment.isFragment(value)) {
              return value;
            }
            if (typeof (value) === "string") {
              return fragments_Fragment.fromString(value);
            }
            return fragments_Fragment.fromObject(value);
          }
          static fromObject(value) {
            if (fragments_Fragment.isFragment(value)) {
              return value;
            }
            switch (value.type) {
              case "function":
                return fragments_FunctionFragment.fromObject(value);
              case "event":
                return EventFragment.fromObject(value);
              case "constructor":
                return fragments_ConstructorFragment.fromObject(value);
              case "error":
                return ErrorFragment.fromObject(value);
              case "fallback":
              case "receive":
                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
                return null;
            }
            return fragments_logger.throwArgumentError("invalid fragment object", "value", value);
          }
          static fromString(value) {
            // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
            value = value.replace(/\s/g, " ");
            value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
            value = value.trim();
            if (value.split(" ")[0] === "event") {
              return EventFragment.fromString(value.substring(5).trim());
            }
            else if (value.split(" ")[0] === "function") {
              return fragments_FunctionFragment.fromString(value.substring(8).trim());
            }
            else if (value.split("(")[0].trim() === "constructor") {
              return fragments_ConstructorFragment.fromString(value.trim());
            }
            else if (value.split(" ")[0] === "error") {
              return ErrorFragment.fromString(value.substring(5).trim());
            }
            return fragments_logger.throwArgumentError("unsupported fragment", "value", value);
          }
          static isFragment(value) {
            return !!(value && value._isFragment);
          }
        }
        class EventFragment extends fragments_Fragment {
          format(format) {
            if (!format) {
              format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
              fragments_logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
              return JSON.stringify({
                type: "event",
                anonymous: this.anonymous,
                name: this.name,
                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
              });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
              result += "event ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
              if (this.anonymous) {
                result += "anonymous ";
              }
            }
            return result.trim();
          }
          static from(value) {
            if (typeof (value) === "string") {
              return EventFragment.fromString(value);
            }
            return EventFragment.fromObject(value);
          }
          static fromObject(value) {
            if (EventFragment.isEventFragment(value)) {
              return value;
            }
            if (value.type !== "event") {
              fragments_logger.throwArgumentError("invalid event object", "value", value);
            }
            const params = {
              name: verifyIdentifier(value.name),
              anonymous: value.anonymous,
              inputs: (value.inputs ? value.inputs.map(fragments_ParamType.fromObject) : []),
              type: "event"
            };
            return new EventFragment(fragments_constructorGuard, params);
          }
          static fromString(value) {
            let match = value.match(regexParen);
            if (!match) {
              fragments_logger.throwArgumentError("invalid event string", "value", value);
            }
            let anonymous = false;
            match[3].split(" ").forEach((modifier) => {
              switch (modifier.trim()) {
                case "anonymous":
                  anonymous = true;
                  break;
                case "":
                  break;
                default:
                  fragments_logger.warn("unknown modifier: " + modifier);
              }
            });
            return EventFragment.fromObject({
              name: match[1].trim(),
              anonymous: anonymous,
              inputs: parseParams(match[2], true),
              type: "event"
            });
          }
          static isEventFragment(value) {
            return (value && value._isFragment && value.type === "event");
          }
        }
        function parseGas(value, params) {
          params.gas = null;
          let comps = value.split("@");
          if (comps.length !== 1) {
            if (comps.length > 2) {
              fragments_logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
            }
            if (!comps[1].match(/^[0-9]+$/)) {
              fragments_logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
            }
            params.gas = bignumber_BigNumber.from(comps[1]);
            return comps[0];
          }
          return value;
        }
        function parseModifiers(value, params) {
          params.constant = false;
          params.payable = false;
          params.stateMutability = "nonpayable";
          value.split(" ").forEach((modifier) => {
            switch (modifier.trim()) {
              case "constant":
                params.constant = true;
                break;
              case "payable":
                params.payable = true;
                params.stateMutability = "payable";
                break;
              case "nonpayable":
                params.payable = false;
                params.stateMutability = "nonpayable";
                break;
              case "pure":
                params.constant = true;
                params.stateMutability = "pure";
                break;
              case "view":
                params.constant = true;
                params.stateMutability = "view";
                break;
              case "external":
              case "public":
              case "":
                break;
              default:
                console.log("unknown modifier: " + modifier);
            }
          });
        }
        function verifyState(value) {
          let result = {
            constant: false,
            payable: true,
            stateMutability: "payable"
          };
          if (value.stateMutability != null) {
            result.stateMutability = value.stateMutability;
            // Set (and check things are consistent) the constant property
            result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
            if (value.constant != null) {
              if ((!!value.constant) !== result.constant) {
                fragments_logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
              }
            }
            // Set (and check things are consistent) the payable property
            result.payable = (result.stateMutability === "payable");
            if (value.payable != null) {
              if ((!!value.payable) !== result.payable) {
                fragments_logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
              }
            }
          }
          else if (value.payable != null) {
            result.payable = !!value.payable;
            // If payable we can assume non-constant; otherwise we can't assume
            if (value.constant == null && !result.payable && value.type !== "constructor") {
              fragments_logger.throwArgumentError("unable to determine stateMutability", "value", value);
            }
            result.constant = !!value.constant;
            if (result.constant) {
              result.stateMutability = "view";
            }
            else {
              result.stateMutability = (result.payable ? "payable" : "nonpayable");
            }
            if (result.payable && result.constant) {
              fragments_logger.throwArgumentError("cannot have constant payable function", "value", value);
            }
          }
          else if (value.constant != null) {
            result.constant = !!value.constant;
            result.payable = !result.constant;
            result.stateMutability = (result.constant ? "view" : "payable");
          }
          else if (value.type !== "constructor") {
            fragments_logger.throwArgumentError("unable to determine stateMutability", "value", value);
          }
          return result;
        }
        class fragments_ConstructorFragment extends fragments_Fragment {
          format(format) {
            if (!format) {
              format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
              fragments_logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
              return JSON.stringify({
                type: "constructor",
                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                payable: this.payable,
                gas: (this.gas ? this.gas.toNumber() : undefined),
                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
              });
            }
            if (format === FormatTypes.sighash) {
              fragments_logger.throwError("cannot format a constructor for sighash", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "format(sighash)"
              });
            }
            let result = "constructor(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (this.stateMutability && this.stateMutability !== "nonpayable") {
              result += this.stateMutability + " ";
            }
            return result.trim();
          }
          static from(value) {
            if (typeof (value) === "string") {
              return fragments_ConstructorFragment.fromString(value);
            }
            return fragments_ConstructorFragment.fromObject(value);
          }
          static fromObject(value) {
            if (fragments_ConstructorFragment.isConstructorFragment(value)) {
              return value;
            }
            if (value.type !== "constructor") {
              fragments_logger.throwArgumentError("invalid constructor object", "value", value);
            }
            let state = verifyState(value);
            if (state.constant) {
              fragments_logger.throwArgumentError("constructor cannot be constant", "value", value);
            }
            const params = {
              name: null,
              type: value.type,
              inputs: (value.inputs ? value.inputs.map(fragments_ParamType.fromObject) : []),
              payable: state.payable,
              stateMutability: state.stateMutability,
              gas: (value.gas ? bignumber_BigNumber.from(value.gas) : null)
            };
            return new fragments_ConstructorFragment(fragments_constructorGuard, params);
          }
          static fromString(value) {
            let params = { type: "constructor" };
            value = parseGas(value, params);
            let parens = value.match(regexParen);
            if (!parens || parens[1].trim() !== "constructor") {
              fragments_logger.throwArgumentError("invalid constructor string", "value", value);
            }
            params.inputs = parseParams(parens[2].trim(), false);
            parseModifiers(parens[3].trim(), params);
            return fragments_ConstructorFragment.fromObject(params);
          }
          static isConstructorFragment(value) {
            return (value && value._isFragment && value.type === "constructor");
          }
        }
        class fragments_FunctionFragment extends fragments_ConstructorFragment {
          format(format) {
            if (!format) {
              format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
              fragments_logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
              return JSON.stringify({
                type: "function",
                name: this.name,
                constant: this.constant,
                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                payable: this.payable,
                gas: (this.gas ? this.gas.toNumber() : undefined),
                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),
              });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
              result += "function ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
              if (this.stateMutability) {
                if (this.stateMutability !== "nonpayable") {
                  result += (this.stateMutability + " ");
                }
              }
              else if (this.constant) {
                result += "view ";
              }
              if (this.outputs && this.outputs.length) {
                result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
              }
              if (this.gas != null) {
                result += "@" + this.gas.toString() + " ";
              }
            }
            return result.trim();
          }
          static from(value) {
            if (typeof (value) === "string") {
              return fragments_FunctionFragment.fromString(value);
            }
            return fragments_FunctionFragment.fromObject(value);
          }
          static fromObject(value) {
            if (fragments_FunctionFragment.isFunctionFragment(value)) {
              return value;
            }
            if (value.type !== "function") {
              fragments_logger.throwArgumentError("invalid function object", "value", value);
            }
            let state = verifyState(value);
            const params = {
              type: value.type,
              name: verifyIdentifier(value.name),
              constant: state.constant,
              inputs: (value.inputs ? value.inputs.map(fragments_ParamType.fromObject) : []),
              outputs: (value.outputs ? value.outputs.map(fragments_ParamType.fromObject) : []),
              payable: state.payable,
              stateMutability: state.stateMutability,
              gas: (value.gas ? bignumber_BigNumber.from(value.gas) : null)
            };
            return new fragments_FunctionFragment(fragments_constructorGuard, params);
          }
          static fromString(value) {
            let params = { type: "function" };
            value = parseGas(value, params);
            let comps = value.split(" returns ");
            if (comps.length > 2) {
              fragments_logger.throwArgumentError("invalid function string", "value", value);
            }
            let parens = comps[0].match(regexParen);
            if (!parens) {
              fragments_logger.throwArgumentError("invalid function signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
              verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            parseModifiers(parens[3].trim(), params);
            // We have outputs
            if (comps.length > 1) {
              let returns = comps[1].match(regexParen);
              if (returns[1].trim() != "" || returns[3].trim() != "") {
                fragments_logger.throwArgumentError("unexpected tokens", "value", value);
              }
              params.outputs = parseParams(returns[2], false);
            }
            else {
              params.outputs = [];
            }
            return fragments_FunctionFragment.fromObject(params);
          }
          static isFunctionFragment(value) {
            return (value && value._isFragment && value.type === "function");
          }
        }
//export class StructFragment extends Fragment {
//}
        function checkForbidden(fragment) {
          const sig = fragment.format();
          if (sig === "Error(string)" || sig === "Panic(uint256)") {
            fragments_logger.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
          }
          return fragment;
        }
        class ErrorFragment extends fragments_Fragment {
          format(format) {
            if (!format) {
              format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
              fragments_logger.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
              return JSON.stringify({
                type: "error",
                name: this.name,
                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
              });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
              result += "error ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            return result.trim();
          }
          static from(value) {
            if (typeof (value) === "string") {
              return ErrorFragment.fromString(value);
            }
            return ErrorFragment.fromObject(value);
          }
          static fromObject(value) {
            if (ErrorFragment.isErrorFragment(value)) {
              return value;
            }
            if (value.type !== "error") {
              fragments_logger.throwArgumentError("invalid error object", "value", value);
            }
            const params = {
              type: value.type,
              name: verifyIdentifier(value.name),
              inputs: (value.inputs ? value.inputs.map(fragments_ParamType.fromObject) : [])
            };
            return checkForbidden(new ErrorFragment(fragments_constructorGuard, params));
          }
          static fromString(value) {
            let params = { type: "error" };
            let parens = value.match(regexParen);
            if (!parens) {
              fragments_logger.throwArgumentError("invalid error signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
              verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            return checkForbidden(ErrorFragment.fromObject(params));
          }
          static isErrorFragment(value) {
            return (value && value._isFragment && value.type === "error");
          }
        }
        function verifyType(type) {
          // These need to be transformed to their full description
          if (type.match(/^uint($|[^1-9])/)) {
            type = "uint256" + type.substring(4);
          }
          else if (type.match(/^int($|[^1-9])/)) {
            type = "int256" + type.substring(3);
          }
          // @TODO: more verification
          return type;
        }
// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
        const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
        function verifyIdentifier(value) {
          if (!value || !value.match(regexIdentifier)) {
            fragments_logger.throwArgumentError(`invalid identifier "${value}"`, "value", value);
          }
          return value;
        }
        const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
        function splitNesting(value) {
          value = value.trim();
          let result = [];
          let accum = "";
          let depth = 0;
          for (let offset = 0; offset < value.length; offset++) {
            let c = value[offset];
            if (c === "," && depth === 0) {
              result.push(accum);
              accum = "";
            }
            else {
              accum += c;
              if (c === "(") {
                depth++;
              }
              else if (c === ")") {
                depth--;
                if (depth === -1) {
                  fragments_logger.throwArgumentError("unbalanced parenthesis", "value", value);
                }
              }
            }
          }
          if (accum) {
            result.push(accum);
          }
          return result;
        }
//# sourceMappingURL=fragments.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/abi-coder.js

// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI




        const abi_coder_logger = new logger_lib_esm["b" /* Logger */](abi_lib_esm_version_version);











        const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
        const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
        class abi_coder_AbiCoder {
          constructor(coerceFunc) {
            abi_coder_logger.checkNew(new.target, abi_coder_AbiCoder);
            defineReadOnly(this, "coerceFunc", coerceFunc || null);
          }
          _getCoder(param) {
            switch (param.baseType) {
              case "address":
                return new address_AddressCoder(param.name);
              case "bool":
                return new boolean_BooleanCoder(param.name);
              case "string":
                return new string_StringCoder(param.name);
              case "bytes":
                return new bytes_BytesCoder(param.name);
              case "array":
                return new array_ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
              case "tuple":
                return new tuple_TupleCoder((param.components || []).map((component) => {
                  return this._getCoder(component);
                }), param.name);
              case "":
                return new null_NullCoder(param.name);
            }
            // u?int[0-9]*
            let match = param.type.match(paramTypeNumber);
            if (match) {
              let size = parseInt(match[2] || "256");
              if (size === 0 || size > 256 || (size % 8) !== 0) {
                abi_coder_logger.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
              }
              return new number_NumberCoder(size / 8, (match[1] === "int"), param.name);
            }
            // bytes[0-9]+
            match = param.type.match(paramTypeBytes);
            if (match) {
              let size = parseInt(match[1]);
              if (size === 0 || size > 32) {
                abi_coder_logger.throwArgumentError("invalid bytes length", "param", param);
              }
              return new fixed_bytes_FixedBytesCoder(size, param.name);
            }
            return abi_coder_logger.throwArgumentError("invalid type", "type", param.type);
          }
          _getWordSize() { return 32; }
          _getReader(data, allowLoose) {
            return new abstract_coder_Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
          }
          _getWriter() {
            return new abstract_coder_Writer(this._getWordSize());
          }
          getDefaultValue(types) {
            const coders = types.map((type) => this._getCoder(fragments_ParamType.from(type)));
            const coder = new tuple_TupleCoder(coders, "_");
            return coder.defaultValue();
          }
          encode(types, values) {
            if (types.length !== values.length) {
              abi_coder_logger.throwError("types/values length mismatch", logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT, {
                count: { types: types.length, values: values.length },
                value: { types: types, values: values }
              });
            }
            const coders = types.map((type) => this._getCoder(fragments_ParamType.from(type)));
            const coder = (new tuple_TupleCoder(coders, "_"));
            const writer = this._getWriter();
            coder.encode(writer, values);
            return writer.data;
          }
          decode(types, data, loose) {
            const coders = types.map((type) => this._getCoder(fragments_ParamType.from(type)));
            const coder = new tuple_TupleCoder(coders, "_");
            return coder.decode(this._getReader(Object(lib_esm["a" /* arrayify */])(data), loose));
          }
        }
        const defaultAbiCoder = new abi_coder_AbiCoder();
//# sourceMappingURL=abi-coder.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/interface.js












        const interface_logger = new logger_lib_esm["b" /* Logger */](abi_lib_esm_version_version);

        class interface_LogDescription extends Description {
        }
        class interface_TransactionDescription extends Description {
        }
        class interface_ErrorDescription extends Description {
        }
        class interface_Indexed extends Description {
          static isIndexed(value) {
            return !!(value && value._isIndexed);
          }
        }
        const BuiltinErrors = {
          "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
          "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
        };
        function wrapAccessError(property, error) {
          const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
          wrap.error = error;
          return wrap;
        }
        /*
function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
    params.reduce((accum, param) => {
        if (param.name) {
            if (accum[param.name]) {
                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
            }
            accum[param.name] = true;
        }
        return accum;
    }, <{ [ name: string ]: boolean }>{ });
}
*/
        class interface_Interface {
          constructor(fragments) {
            interface_logger.checkNew(new.target, interface_Interface);
            let abi = [];
            if (typeof (fragments) === "string") {
              abi = JSON.parse(fragments);
            }
            else {
              abi = fragments;
            }
            defineReadOnly(this, "fragments", abi.map((fragment) => {
              return fragments_Fragment.from(fragment);
            }).filter((fragment) => (fragment != null)));
            defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "errors", {});
            defineReadOnly(this, "events", {});
            defineReadOnly(this, "structs", {});
            // Add all fragments by their signature
            this.fragments.forEach((fragment) => {
              let bucket = null;
              switch (fragment.type) {
                case "constructor":
                  if (this.deploy) {
                    interface_logger.warn("duplicate definition - constructor");
                    return;
                  }
                  //checkNames(fragment, "input", fragment.inputs);
                  defineReadOnly(this, "deploy", fragment);
                  return;
                case "function":
                  //checkNames(fragment, "input", fragment.inputs);
                  //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                  bucket = this.functions;
                  break;
                case "event":
                  //checkNames(fragment, "input", fragment.inputs);
                  bucket = this.events;
                  break;
                case "error":
                  bucket = this.errors;
                  break;
                default:
                  return;
              }
              let signature = fragment.format();
              if (bucket[signature]) {
                interface_logger.warn("duplicate definition - " + signature);
                return;
              }
              bucket[signature] = fragment;
            });
            // If we do not have a constructor add a default
            if (!this.deploy) {
              defineReadOnly(this, "deploy", fragments_ConstructorFragment.from({
                payable: false,
                type: "constructor"
              }));
            }
            defineReadOnly(this, "_isInterface", true);
          }
          format(format) {
            if (!format) {
              format = FormatTypes.full;
            }
            if (format === FormatTypes.sighash) {
              interface_logger.throwArgumentError("interface does not support formatting sighash", "format", format);
            }
            const abi = this.fragments.map((fragment) => fragment.format(format));
            // We need to re-bundle the JSON fragments a bit
            if (format === FormatTypes.json) {
              return JSON.stringify(abi.map((j) => JSON.parse(j)));
            }
            return abi;
          }
          // Sub-classes can override these to handle other blockchains
          static getAbiCoder() {
            return defaultAbiCoder;
          }
          static getAddress(address) {
            return getAddress(address);
          }
          static getSighash(fragment) {
            return Object(lib_esm["e" /* hexDataSlice */])(id_id(fragment.format()), 0, 4);
          }
          static getEventTopic(eventFragment) {
            return id_id(eventFragment.format());
          }
          // Find a function definition by any means necessary (unless it is ambiguous)
          getFunction(nameOrSignatureOrSighash) {
            if (Object(lib_esm["l" /* isHexString */])(nameOrSignatureOrSighash)) {
              for (const name in this.functions) {
                if (nameOrSignatureOrSighash === this.getSighash(name)) {
                  return this.functions[name];
                }
              }
              interface_logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
              const name = nameOrSignatureOrSighash.trim();
              const matching = Object.keys(this.functions).filter((f) => (f.split("(" /* fix:) */)[0] === name));
              if (matching.length === 0) {
                interface_logger.throwArgumentError("no matching function", "name", name);
              }
              else if (matching.length > 1) {
                interface_logger.throwArgumentError("multiple matching functions", "name", name);
              }
              return this.functions[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.functions[fragments_FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
              interface_logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
            }
            return result;
          }
          // Find an event definition by any means necessary (unless it is ambiguous)
          getEvent(nameOrSignatureOrTopic) {
            if (Object(lib_esm["l" /* isHexString */])(nameOrSignatureOrTopic)) {
              const topichash = nameOrSignatureOrTopic.toLowerCase();
              for (const name in this.events) {
                if (topichash === this.getEventTopic(name)) {
                  return this.events[name];
                }
              }
              interface_logger.throwArgumentError("no matching event", "topichash", topichash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrTopic.indexOf("(") === -1) {
              const name = nameOrSignatureOrTopic.trim();
              const matching = Object.keys(this.events).filter((f) => (f.split("(" /* fix:) */)[0] === name));
              if (matching.length === 0) {
                interface_logger.throwArgumentError("no matching event", "name", name);
              }
              else if (matching.length > 1) {
                interface_logger.throwArgumentError("multiple matching events", "name", name);
              }
              return this.events[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
            if (!result) {
              interface_logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
            }
            return result;
          }
          // Find a function definition by any means necessary (unless it is ambiguous)
          getError(nameOrSignatureOrSighash) {
            if (Object(lib_esm["l" /* isHexString */])(nameOrSignatureOrSighash)) {
              const getSighash = getStatic(this.constructor, "getSighash");
              for (const name in this.errors) {
                const error = this.errors[name];
                if (nameOrSignatureOrSighash === getSighash(error)) {
                  return this.errors[name];
                }
              }
              interface_logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
              const name = nameOrSignatureOrSighash.trim();
              const matching = Object.keys(this.errors).filter((f) => (f.split("(" /* fix:) */)[0] === name));
              if (matching.length === 0) {
                interface_logger.throwArgumentError("no matching error", "name", name);
              }
              else if (matching.length > 1) {
                interface_logger.throwArgumentError("multiple matching errors", "name", name);
              }
              return this.errors[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.errors[fragments_FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
              interface_logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
            }
            return result;
          }
          // Get the sighash (the bytes4 selector) used by Solidity to identify a function
          getSighash(fragment) {
            if (typeof (fragment) === "string") {
              try {
                fragment = this.getFunction(fragment);
              }
              catch (error) {
                try {
                  fragment = this.getError(fragment);
                }
                catch (_) {
                  throw error;
                }
              }
            }
            return getStatic(this.constructor, "getSighash")(fragment);
          }
          // Get the topic (the bytes32 hash) used by Solidity to identify an event
          getEventTopic(eventFragment) {
            if (typeof (eventFragment) === "string") {
              eventFragment = this.getEvent(eventFragment);
            }
            return getStatic(this.constructor, "getEventTopic")(eventFragment);
          }
          _decodeParams(params, data) {
            return this._abiCoder.decode(params, data);
          }
          _encodeParams(params, values) {
            return this._abiCoder.encode(params, values);
          }
          encodeDeploy(values) {
            return this._encodeParams(this.deploy.inputs, values || []);
          }
          decodeErrorResult(fragment, data) {
            if (typeof (fragment) === "string") {
              fragment = this.getError(fragment);
            }
            const bytes = Object(lib_esm["a" /* arrayify */])(data);
            if (Object(lib_esm["i" /* hexlify */])(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
              interface_logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", Object(lib_esm["i" /* hexlify */])(bytes));
            }
            return this._decodeParams(fragment.inputs, bytes.slice(4));
          }
          encodeErrorResult(fragment, values) {
            if (typeof (fragment) === "string") {
              fragment = this.getError(fragment);
            }
            return Object(lib_esm["i" /* hexlify */])(Object(lib_esm["b" /* concat */])([
              this.getSighash(fragment),
              this._encodeParams(fragment.inputs, values || [])
            ]));
          }
          // Decode the data for a function call (e.g. tx.data)
          decodeFunctionData(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
              functionFragment = this.getFunction(functionFragment);
            }
            const bytes = Object(lib_esm["a" /* arrayify */])(data);
            if (Object(lib_esm["i" /* hexlify */])(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
              interface_logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", Object(lib_esm["i" /* hexlify */])(bytes));
            }
            return this._decodeParams(functionFragment.inputs, bytes.slice(4));
          }
          // Encode the data for a function call (e.g. tx.data)
          encodeFunctionData(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
              functionFragment = this.getFunction(functionFragment);
            }
            return Object(lib_esm["i" /* hexlify */])(Object(lib_esm["b" /* concat */])([
              this.getSighash(functionFragment),
              this._encodeParams(functionFragment.inputs, values || [])
            ]));
          }
          // Decode the result from a function call (e.g. from eth_call)
          decodeFunctionResult(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
              functionFragment = this.getFunction(functionFragment);
            }
            let bytes = Object(lib_esm["a" /* arrayify */])(data);
            let reason = null;
            let errorArgs = null;
            let errorName = null;
            let errorSignature = null;
            switch (bytes.length % this._abiCoder._getWordSize()) {
              case 0:
                try {
                  return this._abiCoder.decode(functionFragment.outputs, bytes);
                }
                catch (error) { }
                break;
              case 4: {
                const selector = Object(lib_esm["i" /* hexlify */])(bytes.slice(0, 4));
                const builtin = BuiltinErrors[selector];
                if (builtin) {
                  errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
                  errorName = builtin.name;
                  errorSignature = builtin.signature;
                  if (builtin.reason) {
                    reason = errorArgs[0];
                  }
                }
                else {
                  try {
                    const error = this.getError(selector);
                    errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                    errorName = error.name;
                    errorSignature = error.format();
                  }
                  catch (error) {
                    console.log(error);
                  }
                }
                break;
              }
            }
            return interface_logger.throwError("call revert exception", logger_lib_esm["b" /* Logger */].errors.CALL_EXCEPTION, {
              method: functionFragment.format(),
              errorArgs, errorName, errorSignature, reason
            });
          }
          // Encode the result for a function call (e.g. for eth_call)
          encodeFunctionResult(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
              functionFragment = this.getFunction(functionFragment);
            }
            return Object(lib_esm["i" /* hexlify */])(this._abiCoder.encode(functionFragment.outputs, values || []));
          }
          // Create the filter for the event with search criteria (e.g. for eth_filterLog)
          encodeFilterTopics(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
              eventFragment = this.getEvent(eventFragment);
            }
            if (values.length > eventFragment.inputs.length) {
              interface_logger.throwError("too many arguments for " + eventFragment.format(), logger_lib_esm["b" /* Logger */].errors.UNEXPECTED_ARGUMENT, {
                argument: "values",
                value: values
              });
            }
            let topics = [];
            if (!eventFragment.anonymous) {
              topics.push(this.getEventTopic(eventFragment));
            }
            const encodeTopic = (param, value) => {
              if (param.type === "string") {
                return id_id(value);
              }
              else if (param.type === "bytes") {
                return keccak256(Object(lib_esm["i" /* hexlify */])(value));
              }
              // Check addresses are valid
              if (param.type === "address") {
                this._abiCoder.encode(["address"], [value]);
              }
              return Object(lib_esm["h" /* hexZeroPad */])(Object(lib_esm["i" /* hexlify */])(value), 32);
            };
            values.forEach((value, index) => {
              let param = eventFragment.inputs[index];
              if (!param.indexed) {
                if (value != null) {
                  interface_logger.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
                }
                return;
              }
              if (value == null) {
                topics.push(null);
              }
              else if (param.baseType === "array" || param.baseType === "tuple") {
                interface_logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
              }
              else if (Array.isArray(value)) {
                topics.push(value.map((value) => encodeTopic(param, value)));
              }
              else {
                topics.push(encodeTopic(param, value));
              }
            });
            // Trim off trailing nulls
            while (topics.length && topics[topics.length - 1] === null) {
              topics.pop();
            }
            return topics;
          }
          encodeEventLog(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
              eventFragment = this.getEvent(eventFragment);
            }
            const topics = [];
            const dataTypes = [];
            const dataValues = [];
            if (!eventFragment.anonymous) {
              topics.push(this.getEventTopic(eventFragment));
            }
            if (values.length !== eventFragment.inputs.length) {
              interface_logger.throwArgumentError("event arguments/values mismatch", "values", values);
            }
            eventFragment.inputs.forEach((param, index) => {
              const value = values[index];
              if (param.indexed) {
                if (param.type === "string") {
                  topics.push(id_id(value));
                }
                else if (param.type === "bytes") {
                  topics.push(keccak256(value));
                }
                else if (param.baseType === "tuple" || param.baseType === "array") {
                  // @TODO
                  throw new Error("not implemented");
                }
                else {
                  topics.push(this._abiCoder.encode([param.type], [value]));
                }
              }
              else {
                dataTypes.push(param);
                dataValues.push(value);
              }
            });
            return {
              data: this._abiCoder.encode(dataTypes, dataValues),
              topics: topics
            };
          }
          // Decode a filter for the event and the search criteria
          decodeEventLog(eventFragment, data, topics) {
            if (typeof (eventFragment) === "string") {
              eventFragment = this.getEvent(eventFragment);
            }
            if (topics != null && !eventFragment.anonymous) {
              let topicHash = this.getEventTopic(eventFragment);
              if (!Object(lib_esm["l" /* isHexString */])(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                interface_logger.throwError("fragment/topic mismatch", logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
              }
              topics = topics.slice(1);
            }
            let indexed = [];
            let nonIndexed = [];
            let dynamic = [];
            eventFragment.inputs.forEach((param, index) => {
              if (param.indexed) {
                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                  indexed.push(fragments_ParamType.fromObject({ type: "bytes32", name: param.name }));
                  dynamic.push(true);
                }
                else {
                  indexed.push(param);
                  dynamic.push(false);
                }
              }
              else {
                nonIndexed.push(param);
                dynamic.push(false);
              }
            });
            let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, Object(lib_esm["b" /* concat */])(topics)) : null;
            let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
            let result = [];
            let nonIndexedIndex = 0, indexedIndex = 0;
            eventFragment.inputs.forEach((param, index) => {
              if (param.indexed) {
                if (resultIndexed == null) {
                  result[index] = new interface_Indexed({ _isIndexed: true, hash: null });
                }
                else if (dynamic[index]) {
                  result[index] = new interface_Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
                }
                else {
                  try {
                    result[index] = resultIndexed[indexedIndex++];
                  }
                  catch (error) {
                    result[index] = error;
                  }
                }
              }
              else {
                try {
                  result[index] = resultNonIndexed[nonIndexedIndex++];
                }
                catch (error) {
                  result[index] = error;
                }
              }
              // Add the keyword argument if named and safe
              if (param.name && result[param.name] == null) {
                const value = result[index];
                // Make error named values throw on access
                if (value instanceof Error) {
                  Object.defineProperty(result, param.name, {
                    enumerable: true,
                    get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }
                  });
                }
                else {
                  result[param.name] = value;
                }
              }
            });
            // Make all error indexed values throw on access
            for (let i = 0; i < result.length; i++) {
              const value = result[i];
              if (value instanceof Error) {
                Object.defineProperty(result, i, {
                  enumerable: true,
                  get: () => { throw wrapAccessError(`index ${i}`, value); }
                });
              }
            }
            return Object.freeze(result);
          }
          // Given a transaction, find the matching function fragment (if any) and
          // determine all its properties and call parameters
          parseTransaction(tx) {
            let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
            if (!fragment) {
              return null;
            }
            return new interface_TransactionDescription({
              args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
              functionFragment: fragment,
              name: fragment.name,
              signature: fragment.format(),
              sighash: this.getSighash(fragment),
              value: bignumber_BigNumber.from(tx.value || "0"),
            });
          }
          // @TODO
          //parseCallResult(data: BytesLike): ??
          // Given an event log, find the matching event fragment (if any) and
          // determine all its properties and values
          parseLog(log) {
            let fragment = this.getEvent(log.topics[0]);
            if (!fragment || fragment.anonymous) {
              return null;
            }
            // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
            //        Probably not, because just because it is the only event in the ABI does
            //        not mean we have the full ABI; maybe just a fragment?
            return new interface_LogDescription({
              eventFragment: fragment,
              name: fragment.name,
              signature: fragment.format(),
              topic: this.getEventTopic(fragment),
              args: this.decodeEventLog(fragment, log.data, log.topics)
            });
          }
          parseError(data) {
            const hexData = Object(lib_esm["i" /* hexlify */])(data);
            let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
            if (!fragment) {
              return null;
            }
            return new interface_ErrorDescription({
              args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
              errorFragment: fragment,
              name: fragment.name,
              signature: fragment.format(),
              sighash: this.getSighash(fragment),
            });
          }
          /*
    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
        if (Interface.isInterface(value)) {
            return value;
        }
        if (typeof(value) === "string") {
            return new Interface(JSON.parse(value));
        }
        return new Interface(value);
    }
    */
          static isInterface(value) {
            return !!(value && value._isInterface);
          }
        }
//# sourceMappingURL=interface.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abstract-provider/lib.esm/_version.js
        const abstract_provider_lib_esm_version_version = "abstract-provider/5.5.1";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abstract-provider/lib.esm/index.js

        var lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };





        const abstract_provider_lib_esm_logger = new logger_lib_esm["b" /* Logger */](abstract_provider_lib_esm_version_version);
        ;
        ;
//export type CallTransactionable = {
//    call(transaction: TransactionRequest): Promise<TransactionResponse>;
//};
        class lib_esm_ForkEvent extends Description {
          static isForkEvent(value) {
            return !!(value && value._isForkEvent);
          }
        }
        class lib_esm_BlockForkEvent extends lib_esm_ForkEvent {
          constructor(blockHash, expiry) {
            if (!Object(lib_esm["l" /* isHexString */])(blockHash, 32)) {
              abstract_provider_lib_esm_logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
            }
            super({
              _isForkEvent: true,
              _isBlockForkEvent: true,
              expiry: (expiry || 0),
              blockHash: blockHash
            });
          }
        }
        class lib_esm_TransactionForkEvent extends lib_esm_ForkEvent {
          constructor(hash, expiry) {
            if (!Object(lib_esm["l" /* isHexString */])(hash, 32)) {
              abstract_provider_lib_esm_logger.throwArgumentError("invalid transaction hash", "hash", hash);
            }
            super({
              _isForkEvent: true,
              _isTransactionForkEvent: true,
              expiry: (expiry || 0),
              hash: hash
            });
          }
        }
        class lib_esm_TransactionOrderForkEvent extends lib_esm_ForkEvent {
          constructor(beforeHash, afterHash, expiry) {
            if (!Object(lib_esm["l" /* isHexString */])(beforeHash, 32)) {
              abstract_provider_lib_esm_logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
            }
            if (!Object(lib_esm["l" /* isHexString */])(afterHash, 32)) {
              abstract_provider_lib_esm_logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
            }
            super({
              _isForkEvent: true,
              _isTransactionOrderForkEvent: true,
              expiry: (expiry || 0),
              beforeHash: beforeHash,
              afterHash: afterHash
            });
          }
        }
///////////////////////////////
// Exported Abstracts
        class lib_esm_Provider {
          constructor() {
            abstract_provider_lib_esm_logger.checkAbstract(new.target, lib_esm_Provider);
            defineReadOnly(this, "_isProvider", true);
          }
          getFeeData() {
            return lib_esm_awaiter(this, void 0, void 0, function* () {
              const { block, gasPrice } = yield resolveProperties({
                block: this.getBlock("latest"),
                gasPrice: this.getGasPrice().catch((error) => {
                  // @TODO: Why is this now failing on Calaveras?
                  //console.log(error);
                  return null;
                })
              });
              let maxFeePerGas = null, maxPriorityFeePerGas = null;
              if (block && block.baseFeePerGas) {
                // We may want to compute this more accurately in the future,
                // using the formula "check if the base fee is correct".
                // See: https://eips.ethereum.org/EIPS/eip-1559
                maxPriorityFeePerGas = bignumber_BigNumber.from("2500000000");
                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
              }
              return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };
            });
          }
          // Alias for "on"
          addListener(eventName, listener) {
            return this.on(eventName, listener);
          }
          // Alias for "off"
          removeListener(eventName, listener) {
            return this.off(eventName, listener);
          }
          static isProvider(value) {
            return !!(value && value._isProvider);
          }
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abstract-signer/lib.esm/_version.js
        const abstract_signer_lib_esm_version_version = "abstract-signer/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/abstract-signer/lib.esm/index.js

        var abstract_signer_lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };



        const abstract_signer_lib_esm_logger = new logger_lib_esm["b" /* Logger */](abstract_signer_lib_esm_version_version);
        const allowedTransactionKeys = [
          "accessList", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"
        ];
        const forwardErrors = [
          logger_lib_esm["b" /* Logger */].errors.INSUFFICIENT_FUNDS,
          logger_lib_esm["b" /* Logger */].errors.NONCE_EXPIRED,
          logger_lib_esm["b" /* Logger */].errors.REPLACEMENT_UNDERPRICED,
        ];
        ;
        ;
        class lib_esm_Signer {
          ///////////////////
          // Sub-classes MUST call super
          constructor() {
            abstract_signer_lib_esm_logger.checkAbstract(new.target, lib_esm_Signer);
            defineReadOnly(this, "_isSigner", true);
          }
          ///////////////////
          // Sub-classes MAY override these
          getBalance(blockTag) {
            return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
              this._checkProvider("getBalance");
              return yield this.provider.getBalance(this.getAddress(), blockTag);
            });
          }
          getTransactionCount(blockTag) {
            return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
              this._checkProvider("getTransactionCount");
              return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
            });
          }
          // Populates "from" if unspecified, and estimates the gas for the transaction
          estimateGas(transaction) {
            return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
              this._checkProvider("estimateGas");
              const tx = yield resolveProperties(this.checkTransaction(transaction));
              return yield this.provider.estimateGas(tx);
            });
          }
          // Populates "from" if unspecified, and calls with the transaction
          call(transaction, blockTag) {
            return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
              this._checkProvider("call");
              const tx = yield resolveProperties(this.checkTransaction(transaction));
              return yield this.provider.call(tx, blockTag);
            });
          }
          // Populates all fields in a transaction, signs it and sends it to the network
          sendTransaction(transaction) {
            return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
              this._checkProvider("sendTransaction");
              const tx = yield this.populateTransaction(transaction);
              const signedTx = yield this.signTransaction(tx);
              return yield this.provider.sendTransaction(signedTx);
            });
          }
          getChainId() {
            return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
              this._checkProvider("getChainId");
              const network = yield this.provider.getNetwork();
              return network.chainId;
            });
          }
          getGasPrice() {
            return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
              this._checkProvider("getGasPrice");
              return yield this.provider.getGasPrice();
            });
          }
          getFeeData() {
            return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
              this._checkProvider("getFeeData");
              return yield this.provider.getFeeData();
            });
          }
          resolveName(name) {
            return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
              this._checkProvider("resolveName");
              return yield this.provider.resolveName(name);
            });
          }
          // Checks a transaction does not contain invalid keys and if
          // no "from" is provided, populates it.
          // - does NOT require a provider
          // - adds "from" is not present
          // - returns a COPY (safe to mutate the result)
          // By default called from: (overriding these prevents it)
          //   - call
          //   - estimateGas
          //   - populateTransaction (and therefor sendTransaction)
          checkTransaction(transaction) {
            for (const key in transaction) {
              if (allowedTransactionKeys.indexOf(key) === -1) {
                abstract_signer_lib_esm_logger.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
              }
            }
            const tx = shallowCopy(transaction);
            if (tx.from == null) {
              tx.from = this.getAddress();
            }
            else {
              // Make sure any provided address matches this signer
              tx.from = Promise.all([
                Promise.resolve(tx.from),
                this.getAddress()
              ]).then((result) => {
                if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                  abstract_signer_lib_esm_logger.throwArgumentError("from address mismatch", "transaction", transaction);
                }
                return result[0];
              });
            }
            return tx;
          }
          // Populates ALL keys for a transaction and checks that "from" matches
          // this Signer. Should be used by sendTransaction but NOT by signTransaction.
          // By default called from: (overriding these prevents it)
          //   - sendTransaction
          //
          // Notes:
          //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
          populateTransaction(transaction) {
            return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
              const tx = yield resolveProperties(this.checkTransaction(transaction));
              if (tx.to != null) {
                tx.to = Promise.resolve(tx.to).then((to) => abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {
                  if (to == null) {
                    return null;
                  }
                  const address = yield this.resolveName(to);
                  if (address == null) {
                    abstract_signer_lib_esm_logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                  }
                  return address;
                }));
                // Prevent this error from causing an UnhandledPromiseException
                tx.to.catch((error) => { });
              }
              // Do not allow mixing pre-eip-1559 and eip-1559 properties
              const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);
              if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                abstract_signer_lib_esm_logger.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
              }
              else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                abstract_signer_lib_esm_logger.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
              }
              if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
                // Fully-formed EIP-1559 transaction (skip getFeeData)
                tx.type = 2;
              }
              else if (tx.type === 0 || tx.type === 1) {
                // Explicit Legacy or EIP-2930 transaction
                // Populate missing gasPrice
                if (tx.gasPrice == null) {
                  tx.gasPrice = this.getGasPrice();
                }
              }
              else {
                // We need to get fee data to determine things
                const feeData = yield this.getFeeData();
                if (tx.type == null) {
                  // We need to auto-detect the intended type of this transaction...
                  if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                    // The network supports EIP-1559!
                    // Upgrade transaction from null to eip-1559
                    tx.type = 2;
                    if (tx.gasPrice != null) {
                      // Using legacy gasPrice property on an eip-1559 network,
                      // so use gasPrice as both fee properties
                      const gasPrice = tx.gasPrice;
                      delete tx.gasPrice;
                      tx.maxFeePerGas = gasPrice;
                      tx.maxPriorityFeePerGas = gasPrice;
                    }
                    else {
                      // Populate missing fee data
                      if (tx.maxFeePerGas == null) {
                        tx.maxFeePerGas = feeData.maxFeePerGas;
                      }
                      if (tx.maxPriorityFeePerGas == null) {
                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                      }
                    }
                  }
                  else if (feeData.gasPrice != null) {
                    // Network doesn't support EIP-1559...
                    // ...but they are trying to use EIP-1559 properties
                    if (hasEip1559) {
                      abstract_signer_lib_esm_logger.throwError("network does not support EIP-1559", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                        operation: "populateTransaction"
                      });
                    }
                    // Populate missing fee data
                    if (tx.gasPrice == null) {
                      tx.gasPrice = feeData.gasPrice;
                    }
                    // Explicitly set untyped transaction to legacy
                    tx.type = 0;
                  }
                  else {
                    // getFeeData has failed us.
                    abstract_signer_lib_esm_logger.throwError("failed to get consistent fee data", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                      operation: "signer.getFeeData"
                    });
                  }
                }
                else if (tx.type === 2) {
                  // Explicitly using EIP-1559
                  // Populate missing fee data
                  if (tx.maxFeePerGas == null) {
                    tx.maxFeePerGas = feeData.maxFeePerGas;
                  }
                  if (tx.maxPriorityFeePerGas == null) {
                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                  }
                }
              }
              if (tx.nonce == null) {
                tx.nonce = this.getTransactionCount("pending");
              }
              if (tx.gasLimit == null) {
                tx.gasLimit = this.estimateGas(tx).catch((error) => {
                  if (forwardErrors.indexOf(error.code) >= 0) {
                    throw error;
                  }
                  return abstract_signer_lib_esm_logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_lib_esm["b" /* Logger */].errors.UNPREDICTABLE_GAS_LIMIT, {
                    error: error,
                    tx: tx
                  });
                });
              }
              if (tx.chainId == null) {
                tx.chainId = this.getChainId();
              }
              else {
                tx.chainId = Promise.all([
                  Promise.resolve(tx.chainId),
                  this.getChainId()
                ]).then((results) => {
                  if (results[1] !== 0 && results[0] !== results[1]) {
                    abstract_signer_lib_esm_logger.throwArgumentError("chainId address mismatch", "transaction", transaction);
                  }
                  return results[0];
                });
              }
              return yield resolveProperties(tx);
            });
          }
          ///////////////////
          // Sub-classes SHOULD leave these alone
          _checkProvider(operation) {
            if (!this.provider) {
              abstract_signer_lib_esm_logger.throwError("missing provider", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: (operation || "_checkProvider")
              });
            }
          }
          static isSigner(value) {
            return !!(value && value._isSigner);
          }
        }
        class lib_esm_VoidSigner extends lib_esm_Signer {
          constructor(address, provider) {
            abstract_signer_lib_esm_logger.checkNew(new.target, lib_esm_VoidSigner);
            super();
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "provider", provider || null);
          }
          getAddress() {
            return Promise.resolve(this.address);
          }
          _fail(message, operation) {
            return Promise.resolve().then(() => {
              abstract_signer_lib_esm_logger.throwError(message, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, { operation: operation });
            });
          }
          signMessage(message) {
            return this._fail("VoidSigner cannot sign messages", "signMessage");
          }
          signTransaction(transaction) {
            return this._fail("VoidSigner cannot sign transactions", "signTransaction");
          }
          _signTypedData(domain, types, value) {
            return this._fail("VoidSigner cannot sign typed data", "signTypedData");
          }
          connect(provider) {
            return new lib_esm_VoidSigner(this.address, provider);
          }
        }
//# sourceMappingURL=index.js.map
// EXTERNAL MODULE: ./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
        var elliptic = __webpack_require__("c24b");

// CONCATENATED MODULE: ./node_modules/@ethersproject/signing-key/lib.esm/_version.js
        const signing_key_lib_esm_version_version = "signing-key/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/signing-key/lib.esm/index.js






        const signing_key_lib_esm_logger = new logger_lib_esm["b" /* Logger */](signing_key_lib_esm_version_version);
        let _curve = null;
        function getCurve() {
          if (!_curve) {
            _curve = new elliptic["a" /* EC */]("secp256k1");
          }
          return _curve;
        }
        class lib_esm_SigningKey {
          constructor(privateKey) {
            defineReadOnly(this, "curve", "secp256k1");
            defineReadOnly(this, "privateKey", Object(lib_esm["i" /* hexlify */])(privateKey));
            const keyPair = getCurve().keyFromPrivate(Object(lib_esm["a" /* arrayify */])(this.privateKey));
            defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
            defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
            defineReadOnly(this, "_isSigningKey", true);
          }
          _addPoint(other) {
            const p0 = getCurve().keyFromPublic(Object(lib_esm["a" /* arrayify */])(this.publicKey));
            const p1 = getCurve().keyFromPublic(Object(lib_esm["a" /* arrayify */])(other));
            return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
          }
          signDigest(digest) {
            const keyPair = getCurve().keyFromPrivate(Object(lib_esm["a" /* arrayify */])(this.privateKey));
            const digestBytes = Object(lib_esm["a" /* arrayify */])(digest);
            if (digestBytes.length !== 32) {
              signing_key_lib_esm_logger.throwArgumentError("bad digest length", "digest", digest);
            }
            const signature = keyPair.sign(digestBytes, { canonical: true });
            return Object(lib_esm["n" /* splitSignature */])({
              recoveryParam: signature.recoveryParam,
              r: Object(lib_esm["h" /* hexZeroPad */])("0x" + signature.r.toString(16), 32),
              s: Object(lib_esm["h" /* hexZeroPad */])("0x" + signature.s.toString(16), 32),
            });
          }
          computeSharedSecret(otherKey) {
            const keyPair = getCurve().keyFromPrivate(Object(lib_esm["a" /* arrayify */])(this.privateKey));
            const otherKeyPair = getCurve().keyFromPublic(Object(lib_esm["a" /* arrayify */])(computePublicKey(otherKey)));
            return Object(lib_esm["h" /* hexZeroPad */])("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
          }
          static isSigningKey(value) {
            return !!(value && value._isSigningKey);
          }
        }
        function recoverPublicKey(digest, signature) {
          const sig = Object(lib_esm["n" /* splitSignature */])(signature);
          const rs = { r: Object(lib_esm["a" /* arrayify */])(sig.r), s: Object(lib_esm["a" /* arrayify */])(sig.s) };
          return "0x" + getCurve().recoverPubKey(Object(lib_esm["a" /* arrayify */])(digest), rs, sig.recoveryParam).encode("hex", false);
        }
        function computePublicKey(key, compressed) {
          const bytes = Object(lib_esm["a" /* arrayify */])(key);
          if (bytes.length === 32) {
            const signingKey = new lib_esm_SigningKey(bytes);
            if (compressed) {
              return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
            }
            return signingKey.publicKey;
          }
          else if (bytes.length === 33) {
            if (compressed) {
              return Object(lib_esm["i" /* hexlify */])(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
          }
          else if (bytes.length === 65) {
            if (!compressed) {
              return Object(lib_esm["i" /* hexlify */])(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
          }
          return signing_key_lib_esm_logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/transactions/lib.esm/_version.js
        const transactions_lib_esm_version_version = "transactions/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/transactions/lib.esm/index.js











        const transactions_lib_esm_logger = new logger_lib_esm["b" /* Logger */](transactions_lib_esm_version_version);
        var TransactionTypes;
        (function (TransactionTypes) {
          TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
          TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
          TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
        })(TransactionTypes || (TransactionTypes = {}));
        ;
///////////////////////////////
        function handleAddress(value) {
          if (value === "0x") {
            return null;
          }
          return getAddress(value);
        }
        function handleNumber(value) {
          if (value === "0x") {
            return Zero;
          }
          return bignumber_BigNumber.from(value);
        }
// Legacy Transaction Fields
        const transactionFields = [
          { name: "nonce", maxLength: 32, numeric: true },
          { name: "gasPrice", maxLength: 32, numeric: true },
          { name: "gasLimit", maxLength: 32, numeric: true },
          { name: "to", length: 20 },
          { name: "value", maxLength: 32, numeric: true },
          { name: "data" },
        ];
        const lib_esm_allowedTransactionKeys = {
          chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
        };
        function computeAddress(key) {
          const publicKey = computePublicKey(key);
          return getAddress(Object(lib_esm["e" /* hexDataSlice */])(keccak256(Object(lib_esm["e" /* hexDataSlice */])(publicKey, 1)), 12));
        }
        function recoverAddress(digest, signature) {
          return computeAddress(recoverPublicKey(Object(lib_esm["a" /* arrayify */])(digest), signature));
        }
        function formatNumber(value, name) {
          const result = Object(lib_esm["o" /* stripZeros */])(bignumber_BigNumber.from(value).toHexString());
          if (result.length > 32) {
            transactions_lib_esm_logger.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
          }
          return result;
        }
        function accessSetify(addr, storageKeys) {
          return {
            address: getAddress(addr),
            storageKeys: (storageKeys || []).map((storageKey, index) => {
              if (Object(lib_esm["d" /* hexDataLength */])(storageKey) !== 32) {
                transactions_lib_esm_logger.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
              }
              return storageKey.toLowerCase();
            })
          };
        }
        function accessListify(value) {
          if (Array.isArray(value)) {
            return value.map((set, index) => {
              if (Array.isArray(set)) {
                if (set.length > 2) {
                  transactions_lib_esm_logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
                }
                return accessSetify(set[0], set[1]);
              }
              return accessSetify(set.address, set.storageKeys);
            });
          }
          const result = Object.keys(value).map((addr) => {
            const storageKeys = value[addr].reduce((accum, storageKey) => {
              accum[storageKey] = true;
              return accum;
            }, {});
            return accessSetify(addr, Object.keys(storageKeys).sort());
          });
          result.sort((a, b) => (a.address.localeCompare(b.address)));
          return result;
        }
        function formatAccessList(value) {
          return accessListify(value).map((set) => [set.address, set.storageKeys]);
        }
        function _serializeEip1559(transaction, signature) {
          // If there is an explicit gasPrice, make sure it matches the
          // EIP-1559 fees; otherwise they may not understand what they
          // think they are setting in terms of fee.
          if (transaction.gasPrice != null) {
            const gasPrice = bignumber_BigNumber.from(transaction.gasPrice);
            const maxFeePerGas = bignumber_BigNumber.from(transaction.maxFeePerGas || 0);
            if (!gasPrice.eq(maxFeePerGas)) {
              transactions_lib_esm_logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                gasPrice, maxFeePerGas
              });
            }
          }
          const fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
            formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
          ];
          if (signature) {
            const sig = Object(lib_esm["n" /* splitSignature */])(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(Object(lib_esm["o" /* stripZeros */])(sig.r));
            fields.push(Object(lib_esm["o" /* stripZeros */])(sig.s));
          }
          return Object(lib_esm["c" /* hexConcat */])(["0x02", encode(fields)]);
        }
        function _serializeEip2930(transaction, signature) {
          const fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.gasPrice || 0, "gasPrice"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
          ];
          if (signature) {
            const sig = Object(lib_esm["n" /* splitSignature */])(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(Object(lib_esm["o" /* stripZeros */])(sig.r));
            fields.push(Object(lib_esm["o" /* stripZeros */])(sig.s));
          }
          return Object(lib_esm["c" /* hexConcat */])(["0x01", encode(fields)]);
        }
// Legacy Transactions and EIP-155
        function _serialize(transaction, signature) {
          checkProperties(transaction, lib_esm_allowedTransactionKeys);
          const raw = [];
          transactionFields.forEach(function (fieldInfo) {
            let value = transaction[fieldInfo.name] || ([]);
            const options = {};
            if (fieldInfo.numeric) {
              options.hexPad = "left";
            }
            value = Object(lib_esm["a" /* arrayify */])(Object(lib_esm["i" /* hexlify */])(value, options));
            // Fixed-width field
            if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
              transactions_lib_esm_logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
            }
            // Variable-width (with a maximum)
            if (fieldInfo.maxLength) {
              value = Object(lib_esm["o" /* stripZeros */])(value);
              if (value.length > fieldInfo.maxLength) {
                transactions_lib_esm_logger.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
              }
            }
            raw.push(Object(lib_esm["i" /* hexlify */])(value));
          });
          let chainId = 0;
          if (transaction.chainId != null) {
            // A chainId was provided; if non-zero we'll use EIP-155
            chainId = transaction.chainId;
            if (typeof (chainId) !== "number") {
              transactions_lib_esm_logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
            }
          }
          else if (signature && !Object(lib_esm["k" /* isBytesLike */])(signature) && signature.v > 28) {
            // No chainId provided, but the signature is signing with EIP-155; derive chainId
            chainId = Math.floor((signature.v - 35) / 2);
          }
          // We have an EIP-155 transaction (chainId was specified and non-zero)
          if (chainId !== 0) {
            raw.push(Object(lib_esm["i" /* hexlify */])(chainId)); // @TODO: hexValue?
            raw.push("0x");
            raw.push("0x");
          }
          // Requesting an unsigned transaction
          if (!signature) {
            return encode(raw);
          }
          // The splitSignature will ensure the transaction has a recoveryParam in the
          // case that the signTransaction function only adds a v.
          const sig = Object(lib_esm["n" /* splitSignature */])(signature);
          // We pushed a chainId and null r, s on for hashing only; remove those
          let v = 27 + sig.recoveryParam;
          if (chainId !== 0) {
            raw.pop();
            raw.pop();
            raw.pop();
            v += chainId * 2 + 8;
            // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
            if (sig.v > 28 && sig.v !== v) {
              transactions_lib_esm_logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
            }
          }
          else if (sig.v !== v) {
            transactions_lib_esm_logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
          }
          raw.push(Object(lib_esm["i" /* hexlify */])(v));
          raw.push(Object(lib_esm["o" /* stripZeros */])(Object(lib_esm["a" /* arrayify */])(sig.r)));
          raw.push(Object(lib_esm["o" /* stripZeros */])(Object(lib_esm["a" /* arrayify */])(sig.s)));
          return encode(raw);
        }
        function lib_esm_serialize(transaction, signature) {
          // Legacy and EIP-155 Transactions
          if (transaction.type == null || transaction.type === 0) {
            if (transaction.accessList != null) {
              transactions_lib_esm_logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
            }
            return _serialize(transaction, signature);
          }
          // Typed Transactions (EIP-2718)
          switch (transaction.type) {
            case 1:
              return _serializeEip2930(transaction, signature);
            case 2:
              return _serializeEip1559(transaction, signature);
            default:
              break;
          }
          return transactions_lib_esm_logger.throwError(`unsupported transaction type: ${transaction.type}`, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
            operation: "serializeTransaction",
            transactionType: transaction.type
          });
        }
        function _parseEipSignature(tx, fields, serialize) {
          try {
            const recid = handleNumber(fields[0]).toNumber();
            if (recid !== 0 && recid !== 1) {
              throw new Error("bad recid");
            }
            tx.v = recid;
          }
          catch (error) {
            transactions_lib_esm_logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
          }
          tx.r = Object(lib_esm["h" /* hexZeroPad */])(fields[1], 32);
          tx.s = Object(lib_esm["h" /* hexZeroPad */])(fields[2], 32);
          try {
            const digest = keccak256(serialize(tx));
            tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
          }
          catch (error) {
            console.log(error);
          }
        }
        function _parseEip1559(payload) {
          const transaction = decode(payload.slice(1));
          if (transaction.length !== 9 && transaction.length !== 12) {
            transactions_lib_esm_logger.throwArgumentError("invalid component count for transaction type: 2", "payload", Object(lib_esm["i" /* hexlify */])(payload));
          }
          const maxPriorityFeePerGas = handleNumber(transaction[2]);
          const maxFeePerGas = handleNumber(transaction[3]);
          const tx = {
            type: 2,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            maxPriorityFeePerGas: maxPriorityFeePerGas,
            maxFeePerGas: maxFeePerGas,
            gasPrice: null,
            gasLimit: handleNumber(transaction[4]),
            to: handleAddress(transaction[5]),
            value: handleNumber(transaction[6]),
            data: transaction[7],
            accessList: accessListify(transaction[8]),
          };
          // Unsigned EIP-1559 Transaction
          if (transaction.length === 9) {
            return tx;
          }
          tx.hash = keccak256(payload);
          _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
          return tx;
        }
        function _parseEip2930(payload) {
          const transaction = decode(payload.slice(1));
          if (transaction.length !== 8 && transaction.length !== 11) {
            transactions_lib_esm_logger.throwArgumentError("invalid component count for transaction type: 1", "payload", Object(lib_esm["i" /* hexlify */])(payload));
          }
          const tx = {
            type: 1,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            gasPrice: handleNumber(transaction[2]),
            gasLimit: handleNumber(transaction[3]),
            to: handleAddress(transaction[4]),
            value: handleNumber(transaction[5]),
            data: transaction[6],
            accessList: accessListify(transaction[7])
          };
          // Unsigned EIP-2930 Transaction
          if (transaction.length === 8) {
            return tx;
          }
          tx.hash = keccak256(payload);
          _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
          return tx;
        }
// Legacy Transactions and EIP-155
        function _parse(rawTransaction) {
          const transaction = decode(rawTransaction);
          if (transaction.length !== 9 && transaction.length !== 6) {
            transactions_lib_esm_logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
          }
          const tx = {
            nonce: handleNumber(transaction[0]).toNumber(),
            gasPrice: handleNumber(transaction[1]),
            gasLimit: handleNumber(transaction[2]),
            to: handleAddress(transaction[3]),
            value: handleNumber(transaction[4]),
            data: transaction[5],
            chainId: 0
          };
          // Legacy unsigned transaction
          if (transaction.length === 6) {
            return tx;
          }
          try {
            tx.v = bignumber_BigNumber.from(transaction[6]).toNumber();
          }
          catch (error) {
            console.log(error);
            return tx;
          }
          tx.r = Object(lib_esm["h" /* hexZeroPad */])(transaction[7], 32);
          tx.s = Object(lib_esm["h" /* hexZeroPad */])(transaction[8], 32);
          if (bignumber_BigNumber.from(tx.r).isZero() && bignumber_BigNumber.from(tx.s).isZero()) {
            // EIP-155 unsigned transaction
            tx.chainId = tx.v;
            tx.v = 0;
          }
          else {
            // Signed Transaction
            tx.chainId = Math.floor((tx.v - 35) / 2);
            if (tx.chainId < 0) {
              tx.chainId = 0;
            }
            let recoveryParam = tx.v - 27;
            const raw = transaction.slice(0, 6);
            if (tx.chainId !== 0) {
              raw.push(Object(lib_esm["i" /* hexlify */])(tx.chainId));
              raw.push("0x");
              raw.push("0x");
              recoveryParam -= tx.chainId * 2 + 8;
            }
            const digest = keccak256(encode(raw));
            try {
              tx.from = recoverAddress(digest, { r: Object(lib_esm["i" /* hexlify */])(tx.r), s: Object(lib_esm["i" /* hexlify */])(tx.s), recoveryParam: recoveryParam });
            }
            catch (error) {
              console.log(error);
            }
            tx.hash = keccak256(rawTransaction);
          }
          tx.type = null;
          return tx;
        }
        function parse(rawTransaction) {
          const payload = Object(lib_esm["a" /* arrayify */])(rawTransaction);
          // Legacy and EIP-155 Transactions
          if (payload[0] > 0x7f) {
            return _parse(payload);
          }
          // Typed Transaction (EIP-2718)
          switch (payload[0]) {
            case 1:
              return _parseEip2930(payload);
            case 2:
              return _parseEip1559(payload);
            default:
              break;
          }
          return transactions_lib_esm_logger.throwError(`unsupported transaction type: ${payload[0]}`, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
            operation: "parseTransaction",
            transactionType: payload[0]
          });
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/contracts/lib.esm/_version.js
        const contracts_lib_esm_version_version = "contracts/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/contracts/lib.esm/index.js

        var contracts_lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };










        const contracts_lib_esm_logger = new logger_lib_esm["b" /* Logger */](contracts_lib_esm_version_version);
        ;
        ;
///////////////////////////////
        const contracts_lib_esm_allowedTransactionKeys = {
          chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
          type: true, accessList: true,
          maxFeePerGas: true, maxPriorityFeePerGas: true,
          customData: true
        };
        function lib_esm_resolveName(resolver, nameOrPromise) {
          return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {
            const name = yield nameOrPromise;
            if (typeof (name) !== "string") {
              contracts_lib_esm_logger.throwArgumentError("invalid address or ENS name", "name", name);
            }
            // If it is already an address, just use it (after adding checksum)
            try {
              return getAddress(name);
            }
            catch (error) { }
            if (!resolver) {
              contracts_lib_esm_logger.throwError("a provider or signer is needed to resolve ENS names", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "resolveName"
              });
            }
            const address = yield resolver.resolveName(name);
            if (address == null) {
              contracts_lib_esm_logger.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
            }
            return address;
          });
        }
// Recursively replaces ENS names with promises to resolve the name and resolves all properties
        function resolveAddresses(resolver, value, paramType) {
          return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {
            if (Array.isArray(paramType)) {
              return yield Promise.all(paramType.map((paramType, index) => {
                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);
              }));
            }
            if (paramType.type === "address") {
              return yield lib_esm_resolveName(resolver, value);
            }
            if (paramType.type === "tuple") {
              return yield resolveAddresses(resolver, value, paramType.components);
            }
            if (paramType.baseType === "array") {
              if (!Array.isArray(value)) {
                return Promise.reject(contracts_lib_esm_logger.makeError("invalid value for array", logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT, {
                  argument: "value",
                  value
                }));
              }
              return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));
            }
            return value;
          });
        }
        function populateTransaction(contract, fragment, args) {
          return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {
            // If an extra argument is given, it is overrides
            let overrides = {};
            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
              overrides = shallowCopy(args.pop());
            }
            // Make sure the parameter count matches
            contracts_lib_esm_logger.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
            // Populate "from" override (allow promises)
            if (contract.signer) {
              if (overrides.from) {
                // Contracts with a Signer are from the Signer's frame-of-reference;
                // but we allow overriding "from" if it matches the signer
                overrides.from = resolveProperties({
                  override: lib_esm_resolveName(contract.signer, overrides.from),
                  signer: contract.signer.getAddress()
                }).then((check) => contracts_lib_esm_awaiter(this, void 0, void 0, function* () {
                  if (getAddress(check.signer) !== check.override) {
                    contracts_lib_esm_logger.throwError("Contract with a Signer cannot override from", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                      operation: "overrides.from"
                    });
                  }
                  return check.override;
                }));
              }
              else {
                overrides.from = contract.signer.getAddress();
              }
            }
            else if (overrides.from) {
              overrides.from = lib_esm_resolveName(contract.provider, overrides.from);
              //} else {
              // Contracts without a signer can override "from", and if
              // unspecified the zero address is used
              //overrides.from = AddressZero;
            }
            // Wait for all dependencies to be resolved (prefer the signer over the provider)
            const resolved = yield resolveProperties({
              args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
              address: contract.resolvedAddress,
              overrides: (resolveProperties(overrides) || {})
            });
            // The ABI coded transaction
            const data = contract.interface.encodeFunctionData(fragment, resolved.args);
            const tx = {
              data: data,
              to: resolved.address
            };
            // Resolved Overrides
            const ro = resolved.overrides;
            // Populate simple overrides
            if (ro.nonce != null) {
              tx.nonce = bignumber_BigNumber.from(ro.nonce).toNumber();
            }
            if (ro.gasLimit != null) {
              tx.gasLimit = bignumber_BigNumber.from(ro.gasLimit);
            }
            if (ro.gasPrice != null) {
              tx.gasPrice = bignumber_BigNumber.from(ro.gasPrice);
            }
            if (ro.maxFeePerGas != null) {
              tx.maxFeePerGas = bignumber_BigNumber.from(ro.maxFeePerGas);
            }
            if (ro.maxPriorityFeePerGas != null) {
              tx.maxPriorityFeePerGas = bignumber_BigNumber.from(ro.maxPriorityFeePerGas);
            }
            if (ro.from != null) {
              tx.from = ro.from;
            }
            if (ro.type != null) {
              tx.type = ro.type;
            }
            if (ro.accessList != null) {
              tx.accessList = accessListify(ro.accessList);
            }
            // If there was no "gasLimit" override, but the ABI specifies a default, use it
            if (tx.gasLimit == null && fragment.gas != null) {
              // Compute the intrinsic gas cost for this transaction
              // @TODO: This is based on the yellow paper as of Petersburg; this is something
              // we may wish to parameterize in v6 as part of the Network object. Since this
              // is always a non-nil to address, we can ignore G_create, but may wish to add
              // similar logic to the ContractFactory.
              let intrinsic = 21000;
              const bytes = Object(lib_esm["a" /* arrayify */])(data);
              for (let i = 0; i < bytes.length; i++) {
                intrinsic += 4;
                if (bytes[i]) {
                  intrinsic += 64;
                }
              }
              tx.gasLimit = bignumber_BigNumber.from(fragment.gas).add(intrinsic);
            }
            // Populate "value" override
            if (ro.value) {
              const roValue = bignumber_BigNumber.from(ro.value);
              if (!roValue.isZero() && !fragment.payable) {
                contracts_lib_esm_logger.throwError("non-payable method cannot override value", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                  operation: "overrides.value",
                  value: overrides.value
                });
              }
              tx.value = roValue;
            }
            if (ro.customData) {
              tx.customData = shallowCopy(ro.customData);
            }
            // Remove the overrides
            delete overrides.nonce;
            delete overrides.gasLimit;
            delete overrides.gasPrice;
            delete overrides.from;
            delete overrides.value;
            delete overrides.type;
            delete overrides.accessList;
            delete overrides.maxFeePerGas;
            delete overrides.maxPriorityFeePerGas;
            delete overrides.customData;
            // Make sure there are no stray overrides, which may indicate a
            // typo or using an unsupported key.
            const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));
            if (leftovers.length) {
              contracts_lib_esm_logger.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(",")}`, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "overrides",
                overrides: leftovers
              });
            }
            return tx;
          });
        }
        function buildPopulate(contract, fragment) {
          return function (...args) {
            return populateTransaction(contract, fragment, args);
          };
        }
        function buildEstimate(contract, fragment) {
          const signerOrProvider = (contract.signer || contract.provider);
          return function (...args) {
            return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {
              if (!signerOrProvider) {
                contracts_lib_esm_logger.throwError("estimate require a provider or signer", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                  operation: "estimateGas"
                });
              }
              const tx = yield populateTransaction(contract, fragment, args);
              return yield signerOrProvider.estimateGas(tx);
            });
          };
        }
        function addContractWait(contract, tx) {
          const wait = tx.wait.bind(tx);
          tx.wait = (confirmations) => {
            return wait(confirmations).then((receipt) => {
              receipt.events = receipt.logs.map((log) => {
                let event = deepCopy(log);
                let parsed = null;
                try {
                  parsed = contract.interface.parseLog(log);
                }
                catch (e) { }
                // Successfully parsed the event log; include it
                if (parsed) {
                  event.args = parsed.args;
                  event.decode = (data, topics) => {
                    return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                  };
                  event.event = parsed.name;
                  event.eventSignature = parsed.signature;
                }
                // Useful operations
                event.removeListener = () => { return contract.provider; };
                event.getBlock = () => {
                  return contract.provider.getBlock(receipt.blockHash);
                };
                event.getTransaction = () => {
                  return contract.provider.getTransaction(receipt.transactionHash);
                };
                event.getTransactionReceipt = () => {
                  return Promise.resolve(receipt);
                };
                return event;
              });
              return receipt;
            });
          };
        }
        function buildCall(contract, fragment, collapseSimple) {
          const signerOrProvider = (contract.signer || contract.provider);
          return function (...args) {
            return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {
              // Extract the "blockTag" override if present
              let blockTag = undefined;
              if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                const overrides = shallowCopy(args.pop());
                if (overrides.blockTag != null) {
                  blockTag = yield overrides.blockTag;
                }
                delete overrides.blockTag;
                args.push(overrides);
              }
              // If the contract was just deployed, wait until it is mined
              if (contract.deployTransaction != null) {
                yield contract._deployed(blockTag);
              }
              // Call a node and get the result
              const tx = yield populateTransaction(contract, fragment, args);
              const result = yield signerOrProvider.call(tx, blockTag);
              try {
                let value = contract.interface.decodeFunctionResult(fragment, result);
                if (collapseSimple && fragment.outputs.length === 1) {
                  value = value[0];
                }
                return value;
              }
              catch (error) {
                if (error.code === logger_lib_esm["b" /* Logger */].errors.CALL_EXCEPTION) {
                  error.address = contract.address;
                  error.args = args;
                  error.transaction = tx;
                }
                throw error;
              }
            });
          };
        }
        function buildSend(contract, fragment) {
          return function (...args) {
            return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {
              if (!contract.signer) {
                contracts_lib_esm_logger.throwError("sending a transaction requires a signer", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                  operation: "sendTransaction"
                });
              }
              // If the contract was just deployed, wait until it is mined
              if (contract.deployTransaction != null) {
                yield contract._deployed();
              }
              const txRequest = yield populateTransaction(contract, fragment, args);
              const tx = yield contract.signer.sendTransaction(txRequest);
              // Tweak the tx.wait so the receipt has extra properties
              addContractWait(contract, tx);
              return tx;
            });
          };
        }
        function buildDefault(contract, fragment, collapseSimple) {
          if (fragment.constant) {
            return buildCall(contract, fragment, collapseSimple);
          }
          return buildSend(contract, fragment);
        }
        function getEventTag(filter) {
          if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
            return "*";
          }
          return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
            if (Array.isArray(topic)) {
              return topic.join("|");
            }
            return topic;
          }).join(":") : "");
        }
        class lib_esm_RunningEvent {
          constructor(tag, filter) {
            defineReadOnly(this, "tag", tag);
            defineReadOnly(this, "filter", filter);
            this._listeners = [];
          }
          addListener(listener, once) {
            this._listeners.push({ listener: listener, once: once });
          }
          removeListener(listener) {
            let done = false;
            this._listeners = this._listeners.filter((item) => {
              if (done || item.listener !== listener) {
                return true;
              }
              done = true;
              return false;
            });
          }
          removeAllListeners() {
            this._listeners = [];
          }
          listeners() {
            return this._listeners.map((i) => i.listener);
          }
          listenerCount() {
            return this._listeners.length;
          }
          run(args) {
            const listenerCount = this.listenerCount();
            this._listeners = this._listeners.filter((item) => {
              const argsCopy = args.slice();
              // Call the callback in the next event loop
              setTimeout(() => {
                item.listener.apply(this, argsCopy);
              }, 0);
              // Reschedule it if it not "once"
              return !(item.once);
            });
            return listenerCount;
          }
          prepareEvent(event) {
          }
          // Returns the array that will be applied to an emit
          getEmit(event) {
            return [event];
          }
        }
        class ErrorRunningEvent extends lib_esm_RunningEvent {
          constructor() {
            super("error", null);
          }
        }
// @TODO Fragment should inherit Wildcard? and just override getEmit?
//       or have a common abstract super class, with enough constructor
//       options to configure both.
// A Fragment Event will populate all the properties that Wildcard
// will, and additionally dereference the arguments when emitting
        class lib_esm_FragmentRunningEvent extends lib_esm_RunningEvent {
          constructor(address, contractInterface, fragment, topics) {
            const filter = {
              address: address
            };
            let topic = contractInterface.getEventTopic(fragment);
            if (topics) {
              if (topic !== topics[0]) {
                contracts_lib_esm_logger.throwArgumentError("topic mismatch", "topics", topics);
              }
              filter.topics = topics.slice();
            }
            else {
              filter.topics = [topic];
            }
            super(getEventTag(filter), filter);
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "interface", contractInterface);
            defineReadOnly(this, "fragment", fragment);
          }
          prepareEvent(event) {
            super.prepareEvent(event);
            event.event = this.fragment.name;
            event.eventSignature = this.fragment.format();
            event.decode = (data, topics) => {
              return this.interface.decodeEventLog(this.fragment, data, topics);
            };
            try {
              event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
            }
            catch (error) {
              event.args = null;
              event.decodeError = error;
            }
          }
          getEmit(event) {
            const errors = checkResultErrors(event.args);
            if (errors.length) {
              throw errors[0].error;
            }
            const args = (event.args || []).slice();
            args.push(event);
            return args;
          }
        }
// A Wildcard Event will attempt to populate:
//  - event            The name of the event name
//  - eventSignature   The full signature of the event
//  - decode           A function to decode data and topics
//  - args             The decoded data and topics
        class lib_esm_WildcardRunningEvent extends lib_esm_RunningEvent {
          constructor(address, contractInterface) {
            super("*", { address: address });
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "interface", contractInterface);
          }
          prepareEvent(event) {
            super.prepareEvent(event);
            try {
              const parsed = this.interface.parseLog(event);
              event.event = parsed.name;
              event.eventSignature = parsed.signature;
              event.decode = (data, topics) => {
                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
              };
              event.args = parsed.args;
            }
            catch (error) {
              // No matching event
            }
          }
        }
        class lib_esm_BaseContract {
          constructor(addressOrName, contractInterface, signerOrProvider) {
            contracts_lib_esm_logger.checkNew(new.target, Contract);
            // @TODO: Maybe still check the addressOrName looks like a valid address or name?
            //address = getAddress(address);
            defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
            if (signerOrProvider == null) {
              defineReadOnly(this, "provider", null);
              defineReadOnly(this, "signer", null);
            }
            else if (lib_esm_Signer.isSigner(signerOrProvider)) {
              defineReadOnly(this, "provider", signerOrProvider.provider || null);
              defineReadOnly(this, "signer", signerOrProvider);
            }
            else if (lib_esm_Provider.isProvider(signerOrProvider)) {
              defineReadOnly(this, "provider", signerOrProvider);
              defineReadOnly(this, "signer", null);
            }
            else {
              contracts_lib_esm_logger.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
            }
            defineReadOnly(this, "callStatic", {});
            defineReadOnly(this, "estimateGas", {});
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "populateTransaction", {});
            defineReadOnly(this, "filters", {});
            {
              const uniqueFilters = {};
              Object.keys(this.interface.events).forEach((eventSignature) => {
                const event = this.interface.events[eventSignature];
                defineReadOnly(this.filters, eventSignature, (...args) => {
                  return {
                    address: this.address,
                    topics: this.interface.encodeFilterTopics(event, args)
                  };
                });
                if (!uniqueFilters[event.name]) {
                  uniqueFilters[event.name] = [];
                }
                uniqueFilters[event.name].push(eventSignature);
              });
              Object.keys(uniqueFilters).forEach((name) => {
                const filters = uniqueFilters[name];
                if (filters.length === 1) {
                  defineReadOnly(this.filters, name, this.filters[filters[0]]);
                }
                else {
                  contracts_lib_esm_logger.warn(`Duplicate definition of ${name} (${filters.join(", ")})`);
                }
              });
            }
            defineReadOnly(this, "_runningEvents", {});
            defineReadOnly(this, "_wrappedEmits", {});
            if (addressOrName == null) {
              contracts_lib_esm_logger.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
            }
            defineReadOnly(this, "address", addressOrName);
            if (this.provider) {
              defineReadOnly(this, "resolvedAddress", lib_esm_resolveName(this.provider, addressOrName));
            }
            else {
              try {
                defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
              }
              catch (error) {
                // Without a provider, we cannot use ENS names
                contracts_lib_esm_logger.throwError("provider is required to use ENS name as contract address", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                  operation: "new Contract"
                });
              }
            }
            const uniqueNames = {};
            const uniqueSignatures = {};
            Object.keys(this.interface.functions).forEach((signature) => {
              const fragment = this.interface.functions[signature];
              // Check that the signature is unique; if not the ABI generation has
              // not been cleaned or may be incorrectly generated
              if (uniqueSignatures[signature]) {
                contracts_lib_esm_logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);
                return;
              }
              uniqueSignatures[signature] = true;
              // Track unique names; we only expose bare named functions if they
              // are ambiguous
              {
                const name = fragment.name;
                if (!uniqueNames[`%${name}`]) {
                  uniqueNames[`%${name}`] = [];
                }
                uniqueNames[`%${name}`].push(signature);
              }
              if (this[signature] == null) {
                defineReadOnly(this, signature, buildDefault(this, fragment, true));
              }
              // We do not collapse simple calls on this bucket, which allows
              // frameworks to safely use this without introspection as well as
              // allows decoding error recovery.
              if (this.functions[signature] == null) {
                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));
              }
              if (this.callStatic[signature] == null) {
                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));
              }
              if (this.populateTransaction[signature] == null) {
                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));
              }
              if (this.estimateGas[signature] == null) {
                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));
              }
            });
            Object.keys(uniqueNames).forEach((name) => {
              // Ambiguous names to not get attached as bare names
              const signatures = uniqueNames[name];
              if (signatures.length > 1) {
                return;
              }
              // Strip off the leading "%" used for prototype protection
              name = name.substring(1);
              const signature = signatures[0];
              // If overwriting a member property that is null, swallow the error
              try {
                if (this[name] == null) {
                  defineReadOnly(this, name, this[signature]);
                }
              }
              catch (e) { }
              if (this.functions[name] == null) {
                defineReadOnly(this.functions, name, this.functions[signature]);
              }
              if (this.callStatic[name] == null) {
                defineReadOnly(this.callStatic, name, this.callStatic[signature]);
              }
              if (this.populateTransaction[name] == null) {
                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);
              }
              if (this.estimateGas[name] == null) {
                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);
              }
            });
          }
          static getContractAddress(transaction) {
            return getContractAddress(transaction);
          }
          static getInterface(contractInterface) {
            if (interface_Interface.isInterface(contractInterface)) {
              return contractInterface;
            }
            return new interface_Interface(contractInterface);
          }
          // @TODO: Allow timeout?
          deployed() {
            return this._deployed();
          }
          _deployed(blockTag) {
            if (!this._deployedPromise) {
              // If we were just deployed, we know the transaction we should occur in
              if (this.deployTransaction) {
                this._deployedPromise = this.deployTransaction.wait().then(() => {
                  return this;
                });
              }
              else {
                // @TODO: Once we allow a timeout to be passed in, we will wait
                // up to that many blocks for getCode
                // Otherwise, poll for our code to be deployed
                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
                  if (code === "0x") {
                    contracts_lib_esm_logger.throwError("contract not deployed", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                      contractAddress: this.address,
                      operation: "getDeployed"
                    });
                  }
                  return this;
                });
              }
            }
            return this._deployedPromise;
          }
          // @TODO:
          // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
          // @TODO:
          // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
          fallback(overrides) {
            if (!this.signer) {
              contracts_lib_esm_logger.throwError("sending a transactions require a signer", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
            }
            const tx = shallowCopy(overrides || {});
            ["from", "to"].forEach(function (key) {
              if (tx[key] == null) {
                return;
              }
              contracts_lib_esm_logger.throwError("cannot override " + key, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            tx.to = this.resolvedAddress;
            return this.deployed().then(() => {
              return this.signer.sendTransaction(tx);
            });
          }
          // Reconnect to a different signer or provider
          connect(signerOrProvider) {
            if (typeof (signerOrProvider) === "string") {
              signerOrProvider = new lib_esm_VoidSigner(signerOrProvider, this.provider);
            }
            const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);
            if (this.deployTransaction) {
              defineReadOnly(contract, "deployTransaction", this.deployTransaction);
            }
            return contract;
          }
          // Re-attach to a different on-chain instance of this contract
          attach(addressOrName) {
            return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);
          }
          static isIndexed(value) {
            return interface_Indexed.isIndexed(value);
          }
          _normalizeRunningEvent(runningEvent) {
            // Already have an instance of this event running; we can re-use it
            if (this._runningEvents[runningEvent.tag]) {
              return this._runningEvents[runningEvent.tag];
            }
            return runningEvent;
          }
          _getRunningEvent(eventName) {
            if (typeof (eventName) === "string") {
              // Listen for "error" events (if your contract has an error event, include
              // the full signature to bypass this special event keyword)
              if (eventName === "error") {
                return this._normalizeRunningEvent(new ErrorRunningEvent());
              }
              // Listen for any event that is registered
              if (eventName === "event") {
                return this._normalizeRunningEvent(new lib_esm_RunningEvent("event", null));
              }
              // Listen for any event
              if (eventName === "*") {
                return this._normalizeRunningEvent(new lib_esm_WildcardRunningEvent(this.address, this.interface));
              }
              // Get the event Fragment (throws if ambiguous/unknown event)
              const fragment = this.interface.getEvent(eventName);
              return this._normalizeRunningEvent(new lib_esm_FragmentRunningEvent(this.address, this.interface, fragment));
            }
            // We have topics to filter by...
            if (eventName.topics && eventName.topics.length > 0) {
              // Is it a known topichash? (throws if no matching topichash)
              try {
                const topic = eventName.topics[0];
                if (typeof (topic) !== "string") {
                  throw new Error("invalid topic"); // @TODO: May happen for anonymous events
                }
                const fragment = this.interface.getEvent(topic);
                return this._normalizeRunningEvent(new lib_esm_FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
              }
              catch (error) { }
              // Filter by the unknown topichash
              const filter = {
                address: this.address,
                topics: eventName.topics
              };
              return this._normalizeRunningEvent(new lib_esm_RunningEvent(getEventTag(filter), filter));
            }
            return this._normalizeRunningEvent(new lib_esm_WildcardRunningEvent(this.address, this.interface));
          }
          _checkRunningEvents(runningEvent) {
            if (runningEvent.listenerCount() === 0) {
              delete this._runningEvents[runningEvent.tag];
              // If we have a poller for this, remove it
              const emit = this._wrappedEmits[runningEvent.tag];
              if (emit && runningEvent.filter) {
                this.provider.off(runningEvent.filter, emit);
                delete this._wrappedEmits[runningEvent.tag];
              }
            }
          }
          // Subclasses can override this to gracefully recover
          // from parse errors if they wish
          _wrapEvent(runningEvent, log, listener) {
            const event = deepCopy(log);
            event.removeListener = () => {
              if (!listener) {
                return;
              }
              runningEvent.removeListener(listener);
              this._checkRunningEvents(runningEvent);
            };
            event.getBlock = () => { return this.provider.getBlock(log.blockHash); };
            event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };
            event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };
            // This may throw if the topics and data mismatch the signature
            runningEvent.prepareEvent(event);
            return event;
          }
          _addEventListener(runningEvent, listener, once) {
            if (!this.provider) {
              contracts_lib_esm_logger.throwError("events require a provider or a signer with a provider", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, { operation: "once" });
            }
            runningEvent.addListener(listener, once);
            // Track this running event and its listeners (may already be there; but no hard in updating)
            this._runningEvents[runningEvent.tag] = runningEvent;
            // If we are not polling the provider, start polling
            if (!this._wrappedEmits[runningEvent.tag]) {
              const wrappedEmit = (log) => {
                let event = this._wrapEvent(runningEvent, log, listener);
                // Try to emit the result for the parameterized event...
                if (event.decodeError == null) {
                  try {
                    const args = runningEvent.getEmit(event);
                    this.emit(runningEvent.filter, ...args);
                  }
                  catch (error) {
                    event.decodeError = error.error;
                  }
                }
                // Always emit "event" for fragment-base events
                if (runningEvent.filter != null) {
                  this.emit("event", event);
                }
                // Emit "error" if there was an error
                if (event.decodeError != null) {
                  this.emit("error", event.decodeError, event);
                }
              };
              this._wrappedEmits[runningEvent.tag] = wrappedEmit;
              // Special events, like "error" do not have a filter
              if (runningEvent.filter != null) {
                this.provider.on(runningEvent.filter, wrappedEmit);
              }
            }
          }
          queryFilter(event, fromBlockOrBlockhash, toBlock) {
            const runningEvent = this._getRunningEvent(event);
            const filter = shallowCopy(runningEvent.filter);
            if (typeof (fromBlockOrBlockhash) === "string" && Object(lib_esm["l" /* isHexString */])(fromBlockOrBlockhash, 32)) {
              if (toBlock != null) {
                contracts_lib_esm_logger.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
              }
              filter.blockHash = fromBlockOrBlockhash;
            }
            else {
              filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);
              filter.toBlock = ((toBlock != null) ? toBlock : "latest");
            }
            return this.provider.getLogs(filter).then((logs) => {
              return logs.map((log) => this._wrapEvent(runningEvent, log, null));
            });
          }
          on(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, false);
            return this;
          }
          once(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, true);
            return this;
          }
          emit(eventName, ...args) {
            if (!this.provider) {
              return false;
            }
            const runningEvent = this._getRunningEvent(eventName);
            const result = (runningEvent.run(args) > 0);
            // May have drained all the "once" events; check for living events
            this._checkRunningEvents(runningEvent);
            return result;
          }
          listenerCount(eventName) {
            if (!this.provider) {
              return 0;
            }
            if (eventName == null) {
              return Object.keys(this._runningEvents).reduce((accum, key) => {
                return accum + this._runningEvents[key].listenerCount();
              }, 0);
            }
            return this._getRunningEvent(eventName).listenerCount();
          }
          listeners(eventName) {
            if (!this.provider) {
              return [];
            }
            if (eventName == null) {
              const result = [];
              for (let tag in this._runningEvents) {
                this._runningEvents[tag].listeners().forEach((listener) => {
                  result.push(listener);
                });
              }
              return result;
            }
            return this._getRunningEvent(eventName).listeners();
          }
          removeAllListeners(eventName) {
            if (!this.provider) {
              return this;
            }
            if (eventName == null) {
              for (const tag in this._runningEvents) {
                const runningEvent = this._runningEvents[tag];
                runningEvent.removeAllListeners();
                this._checkRunningEvents(runningEvent);
              }
              return this;
            }
            // Delete any listeners
            const runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeAllListeners();
            this._checkRunningEvents(runningEvent);
            return this;
          }
          off(eventName, listener) {
            if (!this.provider) {
              return this;
            }
            const runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
            return this;
          }
          removeListener(eventName, listener) {
            return this.off(eventName, listener);
          }
        }
        class Contract extends lib_esm_BaseContract {
        }
        class lib_esm_ContractFactory {
          constructor(contractInterface, bytecode, signer) {
            let bytecodeHex = null;
            if (typeof (bytecode) === "string") {
              bytecodeHex = bytecode;
            }
            else if (Object(lib_esm["j" /* isBytes */])(bytecode)) {
              bytecodeHex = Object(lib_esm["i" /* hexlify */])(bytecode);
            }
            else if (bytecode && typeof (bytecode.object) === "string") {
              // Allow the bytecode object from the Solidity compiler
              bytecodeHex = bytecode.object;
            }
            else {
              // Crash in the next verification step
              bytecodeHex = "!";
            }
            // Make sure it is 0x prefixed
            if (bytecodeHex.substring(0, 2) !== "0x") {
              bytecodeHex = "0x" + bytecodeHex;
            }
            // Make sure the final result is valid bytecode
            if (!Object(lib_esm["l" /* isHexString */])(bytecodeHex) || (bytecodeHex.length % 2)) {
              contracts_lib_esm_logger.throwArgumentError("invalid bytecode", "bytecode", bytecode);
            }
            // If we have a signer, make sure it is valid
            if (signer && !lib_esm_Signer.isSigner(signer)) {
              contracts_lib_esm_logger.throwArgumentError("invalid signer", "signer", signer);
            }
            defineReadOnly(this, "bytecode", bytecodeHex);
            defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
            defineReadOnly(this, "signer", signer || null);
          }
          // @TODO: Future; rename to populateTransaction?
          getDeployTransaction(...args) {
            let tx = {};
            // If we have 1 additional argument, we allow transaction overrides
            if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
              tx = shallowCopy(args.pop());
              for (const key in tx) {
                if (!contracts_lib_esm_allowedTransactionKeys[key]) {
                  throw new Error("unknown transaction override " + key);
                }
              }
            }
            // Do not allow these to be overridden in a deployment transaction
            ["data", "from", "to"].forEach((key) => {
              if (tx[key] == null) {
                return;
              }
              contracts_lib_esm_logger.throwError("cannot override " + key, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            if (tx.value) {
              const value = bignumber_BigNumber.from(tx.value);
              if (!value.isZero() && !this.interface.deploy.payable) {
                contracts_lib_esm_logger.throwError("non-payable constructor cannot override value", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                  operation: "overrides.value",
                  value: tx.value
                });
              }
            }
            // Make sure the call matches the constructor signature
            contracts_lib_esm_logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
            // Set the data to the bytecode + the encoded constructor arguments
            tx.data = Object(lib_esm["i" /* hexlify */])(Object(lib_esm["b" /* concat */])([
              this.bytecode,
              this.interface.encodeDeploy(args)
            ]));
            return tx;
          }
          deploy(...args) {
            return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {
              let overrides = {};
              // If 1 extra parameter was passed in, it contains overrides
              if (args.length === this.interface.deploy.inputs.length + 1) {
                overrides = args.pop();
              }
              // Make sure the call matches the constructor signature
              contracts_lib_esm_logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
              // Resolve ENS names and promises in the arguments
              const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
              params.push(overrides);
              // Get the deployment transaction (with optional overrides)
              const unsignedTx = this.getDeployTransaction(...params);
              // Send the deployment transaction
              const tx = yield this.signer.sendTransaction(unsignedTx);
              const address = getStatic(this.constructor, "getContractAddress")(tx);
              const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
              // Add the modified wait that wraps events
              addContractWait(contract, tx);
              defineReadOnly(contract, "deployTransaction", tx);
              return contract;
            });
          }
          attach(address) {
            return (this.constructor).getContract(address, this.interface, this.signer);
          }
          connect(signer) {
            return new (this.constructor)(this.interface, this.bytecode, signer);
          }
          static fromSolidity(compilerOutput, signer) {
            if (compilerOutput == null) {
              contracts_lib_esm_logger.throwError("missing compiler output", logger_lib_esm["b" /* Logger */].errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
            }
            if (typeof (compilerOutput) === "string") {
              compilerOutput = JSON.parse(compilerOutput);
            }
            const abi = compilerOutput.abi;
            let bytecode = null;
            if (compilerOutput.bytecode) {
              bytecode = compilerOutput.bytecode;
            }
            else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
              bytecode = compilerOutput.evm.bytecode;
            }
            return new this(abi, bytecode, signer);
          }
          static getInterface(contractInterface) {
            return Contract.getInterface(contractInterface);
          }
          static getContractAddress(tx) {
            return getContractAddress(tx);
          }
          static getContract(address, contractInterface, signer) {
            return new Contract(address, contractInterface, signer);
          }
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js




        const fixednumber_logger = new logger_lib_esm["b" /* Logger */](_version_version);

        const fixednumber_constructorGuard = {};
        const fixednumber_Zero = bignumber_BigNumber.from(0);
        const fixednumber_NegativeOne = bignumber_BigNumber.from(-1);
        function fixednumber_throwFault(message, fault, operation, value) {
          const params = { fault: fault, operation: operation };
          if (value !== undefined) {
            params.value = value;
          }
          return fixednumber_logger.throwError(message, logger_lib_esm["b" /* Logger */].errors.NUMERIC_FAULT, params);
        }
// Constant to pull zeros from for multipliers
        let zeros = "0";
        while (zeros.length < 256) {
          zeros += zeros;
        }
// Returns a string "1" followed by decimal "0"s
        function getMultiplier(decimals) {
          if (typeof (decimals) !== "number") {
            try {
              decimals = bignumber_BigNumber.from(decimals).toNumber();
            }
            catch (e) { }
          }
          if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
            return ("1" + zeros.substring(0, decimals));
          }
          return fixednumber_logger.throwArgumentError("invalid decimal size", "decimals", decimals);
        }
        function formatFixed(value, decimals) {
          if (decimals == null) {
            decimals = 0;
          }
          const multiplier = getMultiplier(decimals);
          // Make sure wei is a big number (convert as necessary)
          value = bignumber_BigNumber.from(value);
          const negative = value.lt(fixednumber_Zero);
          if (negative) {
            value = value.mul(fixednumber_NegativeOne);
          }
          let fraction = value.mod(multiplier).toString();
          while (fraction.length < multiplier.length - 1) {
            fraction = "0" + fraction;
          }
          // Strip training 0
          fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
          const whole = value.div(multiplier).toString();
          if (multiplier.length === 1) {
            value = whole;
          }
          else {
            value = whole + "." + fraction;
          }
          if (negative) {
            value = "-" + value;
          }
          return value;
        }
        function parseFixed(value, decimals) {
          if (decimals == null) {
            decimals = 0;
          }
          const multiplier = getMultiplier(decimals);
          if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
            fixednumber_logger.throwArgumentError("invalid decimal value", "value", value);
          }
          // Is it negative?
          const negative = (value.substring(0, 1) === "-");
          if (negative) {
            value = value.substring(1);
          }
          if (value === ".") {
            fixednumber_logger.throwArgumentError("missing value", "value", value);
          }
          // Split it into a whole and fractional part
          const comps = value.split(".");
          if (comps.length > 2) {
            fixednumber_logger.throwArgumentError("too many decimal points", "value", value);
          }
          let whole = comps[0], fraction = comps[1];
          if (!whole) {
            whole = "0";
          }
          if (!fraction) {
            fraction = "0";
          }
          // Trim trailing zeros
          while (fraction[fraction.length - 1] === "0") {
            fraction = fraction.substring(0, fraction.length - 1);
          }
          // Check the fraction doesn't exceed our decimals size
          if (fraction.length > multiplier.length - 1) {
            fixednumber_throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
          }
          // If decimals is 0, we have an empty string for fraction
          if (fraction === "") {
            fraction = "0";
          }
          // Fully pad the string with zeros to get to wei
          while (fraction.length < multiplier.length - 1) {
            fraction += "0";
          }
          const wholeValue = bignumber_BigNumber.from(whole);
          const fractionValue = bignumber_BigNumber.from(fraction);
          let wei = (wholeValue.mul(multiplier)).add(fractionValue);
          if (negative) {
            wei = wei.mul(fixednumber_NegativeOne);
          }
          return wei;
        }
        class fixednumber_FixedFormat {
          constructor(constructorGuard, signed, width, decimals) {
            if (constructorGuard !== fixednumber_constructorGuard) {
              fixednumber_logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "new FixedFormat"
              });
            }
            this.signed = signed;
            this.width = width;
            this.decimals = decimals;
            this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
            this._multiplier = getMultiplier(decimals);
            Object.freeze(this);
          }
          static from(value) {
            if (value instanceof fixednumber_FixedFormat) {
              return value;
            }
            if (typeof (value) === "number") {
              value = `fixed128x${value}`;
            }
            let signed = true;
            let width = 128;
            let decimals = 18;
            if (typeof (value) === "string") {
              if (value === "fixed") {
                // defaults...
              }
              else if (value === "ufixed") {
                signed = false;
              }
              else {
                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                if (!match) {
                  fixednumber_logger.throwArgumentError("invalid fixed format", "format", value);
                }
                signed = (match[1] !== "u");
                width = parseInt(match[2]);
                decimals = parseInt(match[3]);
              }
            }
            else if (value) {
              const check = (key, type, defaultValue) => {
                if (value[key] == null) {
                  return defaultValue;
                }
                if (typeof (value[key]) !== type) {
                  fixednumber_logger.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                }
                return value[key];
              };
              signed = check("signed", "boolean", signed);
              width = check("width", "number", width);
              decimals = check("decimals", "number", decimals);
            }
            if (width % 8) {
              fixednumber_logger.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
            }
            if (decimals > 80) {
              fixednumber_logger.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
            }
            return new fixednumber_FixedFormat(fixednumber_constructorGuard, signed, width, decimals);
          }
        }
        class fixednumber_FixedNumber {
          constructor(constructorGuard, hex, value, format) {
            fixednumber_logger.checkNew(new.target, fixednumber_FixedNumber);
            if (constructorGuard !== fixednumber_constructorGuard) {
              fixednumber_logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "new FixedFormat"
              });
            }
            this.format = format;
            this._hex = hex;
            this._value = value;
            this._isFixedNumber = true;
            Object.freeze(this);
          }
          _checkFormat(other) {
            if (this.format.name !== other.format.name) {
              fixednumber_logger.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
            }
          }
          addUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return fixednumber_FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
          }
          subUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return fixednumber_FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
          }
          mulUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return fixednumber_FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
          }
          divUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return fixednumber_FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
          }
          floor() {
            const comps = this.toString().split(".");
            if (comps.length === 1) {
              comps.push("0");
            }
            let result = fixednumber_FixedNumber.from(comps[0], this.format);
            const hasFraction = !comps[1].match(/^(0*)$/);
            if (this.isNegative() && hasFraction) {
              result = result.subUnsafe(ONE.toFormat(result.format));
            }
            return result;
          }
          ceiling() {
            const comps = this.toString().split(".");
            if (comps.length === 1) {
              comps.push("0");
            }
            let result = fixednumber_FixedNumber.from(comps[0], this.format);
            const hasFraction = !comps[1].match(/^(0*)$/);
            if (!this.isNegative() && hasFraction) {
              result = result.addUnsafe(ONE.toFormat(result.format));
            }
            return result;
          }
          // @TODO: Support other rounding algorithms
          round(decimals) {
            if (decimals == null) {
              decimals = 0;
            }
            // If we are already in range, we're done
            const comps = this.toString().split(".");
            if (comps.length === 1) {
              comps.push("0");
            }
            if (decimals < 0 || decimals > 80 || (decimals % 1)) {
              fixednumber_logger.throwArgumentError("invalid decimal count", "decimals", decimals);
            }
            if (comps[1].length <= decimals) {
              return this;
            }
            const factor = fixednumber_FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
            const bump = BUMP.toFormat(this.format);
            return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
          }
          isZero() {
            return (this._value === "0.0" || this._value === "0");
          }
          isNegative() {
            return (this._value[0] === "-");
          }
          toString() { return this._value; }
          toHexString(width) {
            if (width == null) {
              return this._hex;
            }
            if (width % 8) {
              fixednumber_logger.throwArgumentError("invalid byte width", "width", width);
            }
            const hex = bignumber_BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
            return Object(lib_esm["h" /* hexZeroPad */])(hex, width / 8);
          }
          toUnsafeFloat() { return parseFloat(this.toString()); }
          toFormat(format) {
            return fixednumber_FixedNumber.fromString(this._value, format);
          }
          static fromValue(value, decimals, format) {
            // If decimals looks more like a format, and there is no format, shift the parameters
            if (format == null && decimals != null && !isBigNumberish(decimals)) {
              format = decimals;
              decimals = null;
            }
            if (decimals == null) {
              decimals = 0;
            }
            if (format == null) {
              format = "fixed";
            }
            return fixednumber_FixedNumber.fromString(formatFixed(value, decimals), fixednumber_FixedFormat.from(format));
          }
          static fromString(value, format) {
            if (format == null) {
              format = "fixed";
            }
            const fixedFormat = fixednumber_FixedFormat.from(format);
            const numeric = parseFixed(value, fixedFormat.decimals);
            if (!fixedFormat.signed && numeric.lt(fixednumber_Zero)) {
              fixednumber_throwFault("unsigned value cannot be negative", "overflow", "value", value);
            }
            let hex = null;
            if (fixedFormat.signed) {
              hex = numeric.toTwos(fixedFormat.width).toHexString();
            }
            else {
              hex = numeric.toHexString();
              hex = Object(lib_esm["h" /* hexZeroPad */])(hex, fixedFormat.width / 8);
            }
            const decimal = formatFixed(numeric, fixedFormat.decimals);
            return new fixednumber_FixedNumber(fixednumber_constructorGuard, hex, decimal, fixedFormat);
          }
          static fromBytes(value, format) {
            if (format == null) {
              format = "fixed";
            }
            const fixedFormat = fixednumber_FixedFormat.from(format);
            if (Object(lib_esm["a" /* arrayify */])(value).length > fixedFormat.width / 8) {
              throw new Error("overflow");
            }
            let numeric = bignumber_BigNumber.from(value);
            if (fixedFormat.signed) {
              numeric = numeric.fromTwos(fixedFormat.width);
            }
            const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
            const decimal = formatFixed(numeric, fixedFormat.decimals);
            return new fixednumber_FixedNumber(fixednumber_constructorGuard, hex, decimal, fixedFormat);
          }
          static from(value, format) {
            if (typeof (value) === "string") {
              return fixednumber_FixedNumber.fromString(value, format);
            }
            if (Object(lib_esm["j" /* isBytes */])(value)) {
              return fixednumber_FixedNumber.fromBytes(value, format);
            }
            try {
              return fixednumber_FixedNumber.fromValue(value, 0, format);
            }
            catch (error) {
              // Allow NUMERIC_FAULT to bubble up
              if (error.code !== logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT) {
                throw error;
              }
            }
            return fixednumber_logger.throwArgumentError("invalid FixedNumber value", "value", value);
          }
          static isFixedNumber(value) {
            return !!(value && value._isFixedNumber);
          }
        }
        const ONE = fixednumber_FixedNumber.from(1);
        const BUMP = fixednumber_FixedNumber.from("0.5");
//# sourceMappingURL=fixednumber.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/message.js



        const messagePrefix = "\x19Ethereum Signed Message:\n";
        function hashMessage(message) {
          if (typeof (message) === "string") {
            message = toUtf8Bytes(message);
          }
          return keccak256(Object(lib_esm["b" /* concat */])([
            toUtf8Bytes(messagePrefix),
            toUtf8Bytes(String(message.length)),
            message
          ]));
        }
//# sourceMappingURL=message.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/_version.js
        const hash_lib_esm_version_version = "hash/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/typed-data.js
        var typed_data_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };







        const typed_data_logger = new logger_lib_esm["b" /* Logger */](hash_lib_esm_version_version);

        const padding = new Uint8Array(32);
        padding.fill(0);
        const typed_data_NegativeOne = bignumber_BigNumber.from(-1);
        const typed_data_Zero = bignumber_BigNumber.from(0);
        const typed_data_One = bignumber_BigNumber.from(1);
        const typed_data_MaxUint256 = bignumber_BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        function hexPadRight(value) {
          const bytes = Object(lib_esm["a" /* arrayify */])(value);
          const padOffset = bytes.length % 32;
          if (padOffset) {
            return Object(lib_esm["c" /* hexConcat */])([bytes, padding.slice(padOffset)]);
          }
          return Object(lib_esm["i" /* hexlify */])(bytes);
        }
        const hexTrue = Object(lib_esm["h" /* hexZeroPad */])(typed_data_One.toHexString(), 32);
        const hexFalse = Object(lib_esm["h" /* hexZeroPad */])(typed_data_Zero.toHexString(), 32);
        const domainFieldTypes = {
          name: "string",
          version: "string",
          chainId: "uint256",
          verifyingContract: "address",
          salt: "bytes32"
        };
        const domainFieldNames = [
          "name", "version", "chainId", "verifyingContract", "salt"
        ];
        function checkString(key) {
          return function (value) {
            if (typeof (value) !== "string") {
              typed_data_logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
            }
            return value;
          };
        }
        const domainChecks = {
          name: checkString("name"),
          version: checkString("version"),
          chainId: function (value) {
            try {
              return bignumber_BigNumber.from(value).toString();
            }
            catch (error) { }
            return typed_data_logger.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
          },
          verifyingContract: function (value) {
            try {
              return getAddress(value).toLowerCase();
            }
            catch (error) { }
            return typed_data_logger.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
          },
          salt: function (value) {
            try {
              const bytes = Object(lib_esm["a" /* arrayify */])(value);
              if (bytes.length !== 32) {
                throw new Error("bad length");
              }
              return Object(lib_esm["i" /* hexlify */])(bytes);
            }
            catch (error) { }
            return typed_data_logger.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
          }
        };
        function getBaseEncoder(type) {
          // intXX and uintXX
          {
            const match = type.match(/^(u?)int(\d*)$/);
            if (match) {
              const signed = (match[1] === "");
              const width = parseInt(match[2] || "256");
              if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {
                typed_data_logger.throwArgumentError("invalid numeric width", "type", type);
              }
              const boundsUpper = typed_data_MaxUint256.mask(signed ? (width - 1) : width);
              const boundsLower = signed ? boundsUpper.add(typed_data_One).mul(typed_data_NegativeOne) : typed_data_Zero;
              return function (value) {
                const v = bignumber_BigNumber.from(value);
                if (v.lt(boundsLower) || v.gt(boundsUpper)) {
                  typed_data_logger.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
                }
                return Object(lib_esm["h" /* hexZeroPad */])(v.toTwos(256).toHexString(), 32);
              };
            }
          }
          // bytesXX
          {
            const match = type.match(/^bytes(\d+)$/);
            if (match) {
              const width = parseInt(match[1]);
              if (width === 0 || width > 32 || match[1] !== String(width)) {
                typed_data_logger.throwArgumentError("invalid bytes width", "type", type);
              }
              return function (value) {
                const bytes = Object(lib_esm["a" /* arrayify */])(value);
                if (bytes.length !== width) {
                  typed_data_logger.throwArgumentError(`invalid length for ${type}`, "value", value);
                }
                return hexPadRight(value);
              };
            }
          }
          switch (type) {
            case "address": return function (value) {
              return Object(lib_esm["h" /* hexZeroPad */])(getAddress(value), 32);
            };
            case "bool": return function (value) {
              return ((!value) ? hexFalse : hexTrue);
            };
            case "bytes": return function (value) {
              return keccak256(value);
            };
            case "string": return function (value) {
              return id_id(value);
            };
          }
          return null;
        }
        function encodeType(name, fields) {
          return `${name}(${fields.map(({ name, type }) => (type + " " + name)).join(",")})`;
        }
        class typed_data_TypedDataEncoder {
          constructor(types) {
            defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
            defineReadOnly(this, "_encoderCache", {});
            defineReadOnly(this, "_types", {});
            // Link struct types to their direct child structs
            const links = {};
            // Link structs to structs which contain them as a child
            const parents = {};
            // Link all subtypes within a given struct
            const subtypes = {};
            Object.keys(types).forEach((type) => {
              links[type] = {};
              parents[type] = [];
              subtypes[type] = {};
            });
            for (const name in types) {
              const uniqueNames = {};
              types[name].forEach((field) => {
                // Check each field has a unique name
                if (uniqueNames[field.name]) {
                  typed_data_logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
                }
                uniqueNames[field.name] = true;
                // Get the base type (drop any array specifiers)
                const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                if (baseType === name) {
                  typed_data_logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
                }
                // Is this a base encoding type?
                const encoder = getBaseEncoder(baseType);
                if (encoder) {
                  return;
                }
                if (!parents[baseType]) {
                  typed_data_logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
                }
                // Add linkage
                parents[baseType].push(name);
                links[name][baseType] = true;
              });
            }
            // Deduce the primary type
            const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));
            if (primaryTypes.length === 0) {
              typed_data_logger.throwArgumentError("missing primary type", "types", types);
            }
            else if (primaryTypes.length > 1) {
              typed_data_logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(", ")}`, "types", types);
            }
            defineReadOnly(this, "primaryType", primaryTypes[0]);
            // Check for circular type references
            function checkCircular(type, found) {
              if (found[type]) {
                typed_data_logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
              }
              found[type] = true;
              Object.keys(links[type]).forEach((child) => {
                if (!parents[child]) {
                  return;
                }
                // Recursively check children
                checkCircular(child, found);
                // Mark all ancestors as having this decendant
                Object.keys(found).forEach((subtype) => {
                  subtypes[subtype][child] = true;
                });
              });
              delete found[type];
            }
            checkCircular(this.primaryType, {});
            // Compute each fully describe type
            for (const name in subtypes) {
              const st = Object.keys(subtypes[name]);
              st.sort();
              this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join("");
            }
          }
          getEncoder(type) {
            let encoder = this._encoderCache[type];
            if (!encoder) {
              encoder = this._encoderCache[type] = this._getEncoder(type);
            }
            return encoder;
          }
          _getEncoder(type) {
            // Basic encoder type (address, bool, uint256, etc)
            {
              const encoder = getBaseEncoder(type);
              if (encoder) {
                return encoder;
              }
            }
            // Array
            const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
              const subtype = match[1];
              const subEncoder = this.getEncoder(subtype);
              const length = parseInt(match[3]);
              return (value) => {
                if (length >= 0 && value.length !== length) {
                  typed_data_logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                }
                let result = value.map(subEncoder);
                if (this._types[subtype]) {
                  result = result.map(keccak256);
                }
                return keccak256(Object(lib_esm["c" /* hexConcat */])(result));
              };
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
              const encodedType = id_id(this._types[type]);
              return (value) => {
                const values = fields.map(({ name, type }) => {
                  const result = this.getEncoder(type)(value[name]);
                  if (this._types[type]) {
                    return keccak256(result);
                  }
                  return result;
                });
                values.unshift(encodedType);
                return Object(lib_esm["c" /* hexConcat */])(values);
              };
            }
            return typed_data_logger.throwArgumentError(`unknown type: ${type}`, "type", type);
          }
          encodeType(name) {
            const result = this._types[name];
            if (!result) {
              typed_data_logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, "name", name);
            }
            return result;
          }
          encodeData(type, value) {
            return this.getEncoder(type)(value);
          }
          hashStruct(name, value) {
            return keccak256(this.encodeData(name, value));
          }
          encode(value) {
            return this.encodeData(this.primaryType, value);
          }
          hash(value) {
            return this.hashStruct(this.primaryType, value);
          }
          _visit(type, value, callback) {
            // Basic encoder type (address, bool, uint256, etc)
            {
              const encoder = getBaseEncoder(type);
              if (encoder) {
                return callback(type, value);
              }
            }
            // Array
            const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
              const subtype = match[1];
              const length = parseInt(match[3]);
              if (length >= 0 && value.length !== length) {
                typed_data_logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
              }
              return value.map((v) => this._visit(subtype, v, callback));
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
              return fields.reduce((accum, { name, type }) => {
                accum[name] = this._visit(type, value[name], callback);
                return accum;
              }, {});
            }
            return typed_data_logger.throwArgumentError(`unknown type: ${type}`, "type", type);
          }
          visit(value, callback) {
            return this._visit(this.primaryType, value, callback);
          }
          static from(types) {
            return new typed_data_TypedDataEncoder(types);
          }
          static getPrimaryType(types) {
            return typed_data_TypedDataEncoder.from(types).primaryType;
          }
          static hashStruct(name, types, value) {
            return typed_data_TypedDataEncoder.from(types).hashStruct(name, value);
          }
          static hashDomain(domain) {
            const domainFields = [];
            for (const name in domain) {
              const type = domainFieldTypes[name];
              if (!type) {
                typed_data_logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
              }
              domainFields.push({ name, type });
            }
            domainFields.sort((a, b) => {
              return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
            });
            return typed_data_TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
          }
          static encode(domain, types, value) {
            return Object(lib_esm["c" /* hexConcat */])([
              "0x1901",
              typed_data_TypedDataEncoder.hashDomain(domain),
              typed_data_TypedDataEncoder.from(types).hash(value)
            ]);
          }
          static hash(domain, types, value) {
            return keccak256(typed_data_TypedDataEncoder.encode(domain, types, value));
          }
          // Replaces all address types with ENS names with their looked up address
          static resolveNames(domain, types, value, resolveName) {
            return typed_data_awaiter(this, void 0, void 0, function* () {
              // Make a copy to isolate it from the object passed in
              domain = shallowCopy(domain);
              // Look up all ENS names
              const ensCache = {};
              // Do we need to look up the domain's verifyingContract?
              if (domain.verifyingContract && !Object(lib_esm["l" /* isHexString */])(domain.verifyingContract, 20)) {
                ensCache[domain.verifyingContract] = "0x";
              }
              // We are going to use the encoder to visit all the base values
              const encoder = typed_data_TypedDataEncoder.from(types);
              // Get a list of all the addresses
              encoder.visit(value, (type, value) => {
                if (type === "address" && !Object(lib_esm["l" /* isHexString */])(value, 20)) {
                  ensCache[value] = "0x";
                }
                return value;
              });
              // Lookup each name
              for (const name in ensCache) {
                ensCache[name] = yield resolveName(name);
              }
              // Replace the domain verifyingContract if needed
              if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                domain.verifyingContract = ensCache[domain.verifyingContract];
              }
              // Replace all ENS names with their address
              value = encoder.visit(value, (type, value) => {
                if (type === "address" && ensCache[value]) {
                  return ensCache[value];
                }
                return value;
              });
              return { domain, value };
            });
          }
          static getPayload(domain, types, value) {
            // Validate the domain fields
            typed_data_TypedDataEncoder.hashDomain(domain);
            // Derive the EIP712Domain Struct reference type
            const domainValues = {};
            const domainTypes = [];
            domainFieldNames.forEach((name) => {
              const value = domain[name];
              if (value == null) {
                return;
              }
              domainValues[name] = domainChecks[name](value);
              domainTypes.push({ name, type: domainFieldTypes[name] });
            });
            const encoder = typed_data_TypedDataEncoder.from(types);
            const typesWithDomain = shallowCopy(types);
            if (typesWithDomain.EIP712Domain) {
              typed_data_logger.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
            }
            else {
              typesWithDomain.EIP712Domain = domainTypes;
            }
            // Validate the data structures and types
            encoder.encode(value);
            return {
              types: typesWithDomain,
              domain: domainValues,
              primaryType: encoder.primaryType,
              message: encoder.visit(value, (type, value) => {
                // bytes
                if (type.match(/^bytes(\d*)/)) {
                  return Object(lib_esm["i" /* hexlify */])(Object(lib_esm["a" /* arrayify */])(value));
                }
                // uint or int
                if (type.match(/^u?int/)) {
                  return bignumber_BigNumber.from(value).toString();
                }
                switch (type) {
                  case "address":
                    return value.toLowerCase();
                  case "bool":
                    return !!value;
                  case "string":
                    if (typeof (value) !== "string") {
                      typed_data_logger.throwArgumentError(`invalid string`, "value", value);
                    }
                    return value;
                }
                return typed_data_logger.throwArgumentError("unsupported type", "type", type);
              })
            };
          }
        }
//# sourceMappingURL=typed-data.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/basex/lib.esm/index.js
        /**
         * var basex = require("base-x");
         *
         * This implementation is heavily based on base-x. The main reason to
         * deviate was to prevent the dependency of Buffer.
         *
         * Contributors:
         *
         * base-x encoding
         * Forked from https://github.com/cryptocoinjs/bs58
         * Originally written by Mike Hearn for BitcoinJ
         * Copyright (c) 2011 Google Inc
         * Ported to JavaScript by Stefan Thomas
         * Merged Buffer refactorings from base58-native by Stephen Pair
         * Copyright (c) 2013 BitPay Inc
         *
         * The MIT License (MIT)
         *
         * Copyright base-x contributors (c) 2016
         *
         * Permission is hereby granted, free of charge, to any person obtaining a
         * copy of this software and associated documentation files (the "Software"),
         * to deal in the Software without restriction, including without limitation
         * the rights to use, copy, modify, merge, publish, distribute, sublicense,
         * and/or sell copies of the Software, and to permit persons to whom the
         * Software is furnished to do so, subject to the following conditions:
         *
         * The above copyright notice and this permission notice shall be included in
         * all copies or substantial portions of the Software.

         * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
         * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
         * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
         * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
         * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
         * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
         * IN THE SOFTWARE.
         *
         */


        class lib_esm_BaseX {
          constructor(alphabet) {
            defineReadOnly(this, "alphabet", alphabet);
            defineReadOnly(this, "base", alphabet.length);
            defineReadOnly(this, "_alphabetMap", {});
            defineReadOnly(this, "_leader", alphabet.charAt(0));
            // pre-compute lookup table
            for (let i = 0; i < alphabet.length; i++) {
              this._alphabetMap[alphabet.charAt(i)] = i;
            }
          }
          encode(value) {
            let source = Object(lib_esm["a" /* arrayify */])(value);
            if (source.length === 0) {
              return "";
            }
            let digits = [0];
            for (let i = 0; i < source.length; ++i) {
              let carry = source[i];
              for (let j = 0; j < digits.length; ++j) {
                carry += digits[j] << 8;
                digits[j] = carry % this.base;
                carry = (carry / this.base) | 0;
              }
              while (carry > 0) {
                digits.push(carry % this.base);
                carry = (carry / this.base) | 0;
              }
            }
            let string = "";
            // deal with leading zeros
            for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
              string += this._leader;
            }
            // convert digits to a string
            for (let q = digits.length - 1; q >= 0; --q) {
              string += this.alphabet[digits[q]];
            }
            return string;
          }
          decode(value) {
            if (typeof (value) !== "string") {
              throw new TypeError("Expected String");
            }
            let bytes = [];
            if (value.length === 0) {
              return new Uint8Array(bytes);
            }
            bytes.push(0);
            for (let i = 0; i < value.length; i++) {
              let byte = this._alphabetMap[value[i]];
              if (byte === undefined) {
                throw new Error("Non-base" + this.base + " character");
              }
              let carry = byte;
              for (let j = 0; j < bytes.length; ++j) {
                carry += bytes[j] * this.base;
                bytes[j] = carry & 0xff;
                carry >>= 8;
              }
              while (carry > 0) {
                bytes.push(carry & 0xff);
                carry >>= 8;
              }
            }
            // deal with leading zeros
            for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
              bytes.push(0);
            }
            return Object(lib_esm["a" /* arrayify */])(new Uint8Array(bytes.reverse()));
          }
        }
        const Base32 = new lib_esm_BaseX("abcdefghijklmnopqrstuvwxyz234567");
        const Base58 = new lib_esm_BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");

//console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
//console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))
//# sourceMappingURL=index.js.map
// EXTERNAL MODULE: ./node_modules/hash.js/lib/hash.js
        var lib_hash = __webpack_require__("7d92");
        var hash_default = /*#__PURE__*/__webpack_require__.n(lib_hash);

// CONCATENATED MODULE: ./node_modules/@ethersproject/sha2/lib.esm/types.js
        var SupportedAlgorithm;
        (function (SupportedAlgorithm) {
          SupportedAlgorithm["sha256"] = "sha256";
          SupportedAlgorithm["sha512"] = "sha512";
        })(SupportedAlgorithm || (SupportedAlgorithm = {}));
        ;
//# sourceMappingURL=types.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/sha2/lib.esm/_version.js
        const sha2_lib_esm_version_version = "sha2/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/sha2/lib.esm/sha2.js


//const _ripemd160 = _hash.ripemd160;




        const sha2_logger = new logger_lib_esm["b" /* Logger */](sha2_lib_esm_version_version);
        function ripemd160(data) {
          return "0x" + (hash_default.a.ripemd160().update(Object(lib_esm["a" /* arrayify */])(data)).digest("hex"));
        }
        function sha256(data) {
          return "0x" + (hash_default.a.sha256().update(Object(lib_esm["a" /* arrayify */])(data)).digest("hex"));
        }
        function sha512(data) {
          return "0x" + (hash_default.a.sha512().update(Object(lib_esm["a" /* arrayify */])(data)).digest("hex"));
        }
        function computeHmac(algorithm, key, data) {
          if (!SupportedAlgorithm[algorithm]) {
            sha2_logger.throwError("unsupported algorithm " + algorithm, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
              operation: "hmac",
              algorithm: algorithm
            });
          }
          return "0x" + hash_default.a.hmac(hash_default.a[algorithm], Object(lib_esm["a" /* arrayify */])(key)).update(Object(lib_esm["a" /* arrayify */])(data)).digest("hex");
        }
//# sourceMappingURL=sha2.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js



        function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
          password = Object(lib_esm["a" /* arrayify */])(password);
          salt = Object(lib_esm["a" /* arrayify */])(salt);
          let hLen;
          let l = 1;
          const DK = new Uint8Array(keylen);
          const block1 = new Uint8Array(salt.length + 4);
          block1.set(salt);
          //salt.copy(block1, 0, 0, salt.length)
          let r;
          let T;
          for (let i = 1; i <= l; i++) {
            //block1.writeUInt32BE(i, salt.length)
            block1[salt.length] = (i >> 24) & 0xff;
            block1[salt.length + 1] = (i >> 16) & 0xff;
            block1[salt.length + 2] = (i >> 8) & 0xff;
            block1[salt.length + 3] = i & 0xff;
            //let U = createHmac(password).update(block1).digest();
            let U = Object(lib_esm["a" /* arrayify */])(computeHmac(hashAlgorithm, password, block1));
            if (!hLen) {
              hLen = U.length;
              T = new Uint8Array(hLen);
              l = Math.ceil(keylen / hLen);
              r = keylen - (l - 1) * hLen;
            }
            //U.copy(T, 0, 0, hLen)
            T.set(U);
            for (let j = 1; j < iterations; j++) {
              //U = createHmac(password).update(U).digest();
              U = Object(lib_esm["a" /* arrayify */])(computeHmac(hashAlgorithm, password, U));
              for (let k = 0; k < hLen; k++)
                T[k] ^= U[k];
            }
            const destPos = (i - 1) * hLen;
            const len = (i === l ? r : hLen);
            //T.copy(DK, destPos, 0, len)
            DK.set(Object(lib_esm["a" /* arrayify */])(T).slice(0, len), destPos);
          }
          return Object(lib_esm["i" /* hexlify */])(DK);
        }
//# sourceMappingURL=pbkdf2.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/wordlists/lib.esm/_version.js
        const wordlists_lib_esm_version_version = "wordlists/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/wordlists/lib.esm/wordlist.js

// This gets overridden by rollup
        const exportWordlist = false;




        const wordlist_logger = new logger_lib_esm["b" /* Logger */](wordlists_lib_esm_version_version);
        class wordlist_Wordlist {
          constructor(locale) {
            wordlist_logger.checkAbstract(new.target, wordlist_Wordlist);
            defineReadOnly(this, "locale", locale);
          }
          // Subclasses may override this
          split(mnemonic) {
            return mnemonic.toLowerCase().split(/ +/g);
          }
          // Subclasses may override this
          join(words) {
            return words.join(" ");
          }
          static check(wordlist) {
            const words = [];
            for (let i = 0; i < 2048; i++) {
              const word = wordlist.getWord(i);
              /* istanbul ignore if */
              if (i !== wordlist.getWordIndex(word)) {
                return "0x";
              }
              words.push(word);
            }
            return id_id(words.join("\n") + "\n");
          }
          static register(lang, name) {
            if (!name) {
              name = lang.locale;
            }
            /* istanbul ignore if */
            if (exportWordlist) {
              try {
                const anyGlobal = window;
                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {
                  if (!anyGlobal._ethers.wordlists[name]) {
                    defineReadOnly(anyGlobal._ethers.wordlists, name, lang);
                  }
                }
              }
              catch (error) { }
            }
          }
        }
//# sourceMappingURL=wordlist.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/wordlists/lib.esm/lang-en.js


        const lang_en_words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
        let lang_en_wordlist = null;
        function loadWords(lang) {
          if (lang_en_wordlist != null) {
            return;
          }
          lang_en_wordlist = lang_en_words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
          // Verify the computed list matches the official list
          /* istanbul ignore if */
          if (wordlist_Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
            lang_en_wordlist = null;
            throw new Error("BIP39 Wordlist for en (English) FAILED");
          }
        }
        class lang_en_LangEn extends wordlist_Wordlist {
          constructor() {
            super("en");
          }
          getWord(index) {
            loadWords(this);
            return lang_en_wordlist[index];
          }
          getWordIndex(word) {
            loadWords(this);
            return lang_en_wordlist.indexOf(word);
          }
        }
        const langEn = new lang_en_LangEn();
        wordlist_Wordlist.register(langEn);

//# sourceMappingURL=lang-en.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/wordlists/lib.esm/wordlists.js


        const wordlists = {
          en: langEn
        };
//# sourceMappingURL=wordlists.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/hdnode/lib.esm/_version.js
        const hdnode_lib_esm_version_version = "hdnode/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/hdnode/lib.esm/index.js













        const hdnode_lib_esm_logger = new logger_lib_esm["b" /* Logger */](hdnode_lib_esm_version_version);
        const lib_esm_N = bignumber_BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
// "Bitcoin seed"
        const MasterSecret = toUtf8Bytes("Bitcoin seed");
        const HardenedBit = 0x80000000;
// Returns a byte with the MSB bits set
        function getUpperMask(bits) {
          return ((1 << bits) - 1) << (8 - bits);
        }
// Returns a byte with the LSB bits set
        function getLowerMask(bits) {
          return (1 << bits) - 1;
        }
        function bytes32(value) {
          return Object(lib_esm["h" /* hexZeroPad */])(Object(lib_esm["i" /* hexlify */])(value), 32);
        }
        function base58check(data) {
          return Base58.encode(Object(lib_esm["b" /* concat */])([data, Object(lib_esm["e" /* hexDataSlice */])(sha256(sha256(data)), 0, 4)]));
        }
        function getWordlist(wordlist) {
          if (wordlist == null) {
            return wordlists["en"];
          }
          if (typeof (wordlist) === "string") {
            const words = wordlists[wordlist];
            if (words == null) {
              hdnode_lib_esm_logger.throwArgumentError("unknown locale", "wordlist", wordlist);
            }
            return words;
          }
          return wordlist;
        }
        const lib_esm_constructorGuard = {};
        const defaultPath = "m/44'/60'/0'/0/0";
        ;
        class lib_esm_HDNode {
          /**
           *  This constructor should not be called directly.
           *
           *  Please use:
           *   - fromMnemonic
           *   - fromSeed
           */
          constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
            hdnode_lib_esm_logger.checkNew(new.target, lib_esm_HDNode);
            /* istanbul ignore if */
            if (constructorGuard !== lib_esm_constructorGuard) {
              throw new Error("HDNode constructor cannot be called directly");
            }
            if (privateKey) {
              const signingKey = new lib_esm_SigningKey(privateKey);
              defineReadOnly(this, "privateKey", signingKey.privateKey);
              defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
            }
            else {
              defineReadOnly(this, "privateKey", null);
              defineReadOnly(this, "publicKey", Object(lib_esm["i" /* hexlify */])(publicKey));
            }
            defineReadOnly(this, "parentFingerprint", parentFingerprint);
            defineReadOnly(this, "fingerprint", Object(lib_esm["e" /* hexDataSlice */])(ripemd160(sha256(this.publicKey)), 0, 4));
            defineReadOnly(this, "address", computeAddress(this.publicKey));
            defineReadOnly(this, "chainCode", chainCode);
            defineReadOnly(this, "index", index);
            defineReadOnly(this, "depth", depth);
            if (mnemonicOrPath == null) {
              // From a source that does not preserve the path (e.g. extended keys)
              defineReadOnly(this, "mnemonic", null);
              defineReadOnly(this, "path", null);
            }
            else if (typeof (mnemonicOrPath) === "string") {
              // From a source that does not preserve the mnemonic (e.g. neutered)
              defineReadOnly(this, "mnemonic", null);
              defineReadOnly(this, "path", mnemonicOrPath);
            }
            else {
              // From a fully qualified source
              defineReadOnly(this, "mnemonic", mnemonicOrPath);
              defineReadOnly(this, "path", mnemonicOrPath.path);
            }
          }
          get extendedKey() {
            // We only support the mainnet values for now, but if anyone needs
            // testnet values, let me know. I believe current sentiment is that
            // we should always use mainnet, and use BIP-44 to derive the network
            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
            //   - Testnet: public=0x043587CF, private=0x04358394
            if (this.depth >= 256) {
              throw new Error("Depth too large!");
            }
            return base58check(Object(lib_esm["b" /* concat */])([
              ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
              Object(lib_esm["i" /* hexlify */])(this.depth),
              this.parentFingerprint,
              Object(lib_esm["h" /* hexZeroPad */])(Object(lib_esm["i" /* hexlify */])(this.index), 4),
              this.chainCode,
              ((this.privateKey != null) ? Object(lib_esm["b" /* concat */])(["0x00", this.privateKey]) : this.publicKey),
            ]));
          }
          neuter() {
            return new lib_esm_HDNode(lib_esm_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
          }
          _derive(index) {
            if (index > 0xffffffff) {
              throw new Error("invalid index - " + String(index));
            }
            // Base path
            let path = this.path;
            if (path) {
              path += "/" + (index & ~HardenedBit);
            }
            const data = new Uint8Array(37);
            if (index & HardenedBit) {
              if (!this.privateKey) {
                throw new Error("cannot derive child of neutered node");
              }
              // Data = 0x00 || ser_256(k_par)
              data.set(Object(lib_esm["a" /* arrayify */])(this.privateKey), 1);
              // Hardened path
              if (path) {
                path += "'";
              }
            }
            else {
              // Data = ser_p(point(k_par))
              data.set(Object(lib_esm["a" /* arrayify */])(this.publicKey));
            }
            // Data += ser_32(i)
            for (let i = 24; i >= 0; i -= 8) {
              data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
            }
            const I = Object(lib_esm["a" /* arrayify */])(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
            const IL = I.slice(0, 32);
            const IR = I.slice(32);
            // The private key
            let ki = null;
            // The public key
            let Ki = null;
            if (this.privateKey) {
              ki = bytes32(bignumber_BigNumber.from(IL).add(this.privateKey).mod(lib_esm_N));
            }
            else {
              const ek = new lib_esm_SigningKey(Object(lib_esm["i" /* hexlify */])(IL));
              Ki = ek._addPoint(this.publicKey);
            }
            let mnemonicOrPath = path;
            const srcMnemonic = this.mnemonic;
            if (srcMnemonic) {
              mnemonicOrPath = Object.freeze({
                phrase: srcMnemonic.phrase,
                path: path,
                locale: (srcMnemonic.locale || "en")
              });
            }
            return new lib_esm_HDNode(lib_esm_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
          }
          derivePath(path) {
            const components = path.split("/");
            if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
              throw new Error("invalid path - " + path);
            }
            if (components[0] === "m") {
              components.shift();
            }
            let result = this;
            for (let i = 0; i < components.length; i++) {
              const component = components[i];
              if (component.match(/^[0-9]+'$/)) {
                const index = parseInt(component.substring(0, component.length - 1));
                if (index >= HardenedBit) {
                  throw new Error("invalid path index - " + component);
                }
                result = result._derive(HardenedBit + index);
              }
              else if (component.match(/^[0-9]+$/)) {
                const index = parseInt(component);
                if (index >= HardenedBit) {
                  throw new Error("invalid path index - " + component);
                }
                result = result._derive(index);
              }
              else {
                throw new Error("invalid path component - " + component);
              }
            }
            return result;
          }
          static _fromSeed(seed, mnemonic) {
            const seedArray = Object(lib_esm["a" /* arrayify */])(seed);
            if (seedArray.length < 16 || seedArray.length > 64) {
              throw new Error("invalid seed");
            }
            const I = Object(lib_esm["a" /* arrayify */])(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
            return new lib_esm_HDNode(lib_esm_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
          }
          static fromMnemonic(mnemonic, password, wordlist) {
            // If a locale name was passed in, find the associated wordlist
            wordlist = getWordlist(wordlist);
            // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
            mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
            return lib_esm_HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
              phrase: mnemonic,
              path: "m",
              locale: wordlist.locale
            });
          }
          static fromSeed(seed) {
            return lib_esm_HDNode._fromSeed(seed, null);
          }
          static fromExtendedKey(extendedKey) {
            const bytes = Base58.decode(extendedKey);
            if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
              hdnode_lib_esm_logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
            }
            const depth = bytes[4];
            const parentFingerprint = Object(lib_esm["i" /* hexlify */])(bytes.slice(5, 9));
            const index = parseInt(Object(lib_esm["i" /* hexlify */])(bytes.slice(9, 13)).substring(2), 16);
            const chainCode = Object(lib_esm["i" /* hexlify */])(bytes.slice(13, 45));
            const key = bytes.slice(45, 78);
            switch (Object(lib_esm["i" /* hexlify */])(bytes.slice(0, 4))) {
              // Public Key
              case "0x0488b21e":
              case "0x043587cf":
                return new lib_esm_HDNode(lib_esm_constructorGuard, null, Object(lib_esm["i" /* hexlify */])(key), parentFingerprint, chainCode, index, depth, null);
              // Private Key
              case "0x0488ade4":
              case "0x04358394 ":
                if (key[0] !== 0) {
                  break;
                }
                return new lib_esm_HDNode(lib_esm_constructorGuard, Object(lib_esm["i" /* hexlify */])(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
            }
            return hdnode_lib_esm_logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
          }
        }
        function mnemonicToSeed(mnemonic, password) {
          if (!password) {
            password = "";
          }
          const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
          return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
        }
        function mnemonicToEntropy(mnemonic, wordlist) {
          wordlist = getWordlist(wordlist);
          hdnode_lib_esm_logger.checkNormalize();
          const words = wordlist.split(mnemonic);
          if ((words.length % 3) !== 0) {
            throw new Error("invalid mnemonic");
          }
          const entropy = Object(lib_esm["a" /* arrayify */])(new Uint8Array(Math.ceil(11 * words.length / 8)));
          let offset = 0;
          for (let i = 0; i < words.length; i++) {
            let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
            if (index === -1) {
              throw new Error("invalid mnemonic");
            }
            for (let bit = 0; bit < 11; bit++) {
              if (index & (1 << (10 - bit))) {
                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
              }
              offset++;
            }
          }
          const entropyBits = 32 * words.length / 3;
          const checksumBits = words.length / 3;
          const checksumMask = getUpperMask(checksumBits);
          const checksum = Object(lib_esm["a" /* arrayify */])(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
          if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
            throw new Error("invalid checksum");
          }
          return Object(lib_esm["i" /* hexlify */])(entropy.slice(0, entropyBits / 8));
        }
        function entropyToMnemonic(entropy, wordlist) {
          wordlist = getWordlist(wordlist);
          entropy = Object(lib_esm["a" /* arrayify */])(entropy);
          if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
            throw new Error("invalid entropy");
          }
          const indices = [0];
          let remainingBits = 11;
          for (let i = 0; i < entropy.length; i++) {
            // Consume the whole byte (with still more to go)
            if (remainingBits > 8) {
              indices[indices.length - 1] <<= 8;
              indices[indices.length - 1] |= entropy[i];
              remainingBits -= 8;
              // This byte will complete an 11-bit index
            }
            else {
              indices[indices.length - 1] <<= remainingBits;
              indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
              // Start the next word
              indices.push(entropy[i] & getLowerMask(8 - remainingBits));
              remainingBits += 3;
            }
          }
          // Compute the checksum bits
          const checksumBits = entropy.length / 4;
          const checksum = Object(lib_esm["a" /* arrayify */])(sha256(entropy))[0] & getUpperMask(checksumBits);
          // Shift the checksum into the word indices
          indices[indices.length - 1] <<= checksumBits;
          indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
          return wordlist.join(indices.map((index) => wordlist.getWord(index)));
        }
        function isValidMnemonic(mnemonic, wordlist) {
          try {
            mnemonicToEntropy(mnemonic, wordlist);
            return true;
          }
          catch (error) { }
          return false;
        }
        function getAccountPath(index) {
          if (typeof (index) !== "number" || index < 0 || index >= HardenedBit || index % 1) {
            hdnode_lib_esm_logger.throwArgumentError("invalid account index", "index", index);
          }
          return `m/44'/60'/${index}'/0/0`;
        }
//# sourceMappingURL=index.js.map
// EXTERNAL MODULE: ./node_modules/@ethersproject/random/lib.esm/random.js
        var random = __webpack_require__("6e45");

// EXTERNAL MODULE: ./node_modules/aes-js/index.js
        var aes_js = __webpack_require__("7247");
        var aes_js_default = /*#__PURE__*/__webpack_require__.n(aes_js);

// EXTERNAL MODULE: ./node_modules/scrypt-js/scrypt.js
        var scrypt = __webpack_require__("9f6a");
        var scrypt_default = /*#__PURE__*/__webpack_require__.n(scrypt);

// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/utils.js



        function looseArrayify(hexString) {
          if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
            hexString = '0x' + hexString;
          }
          return Object(lib_esm["a" /* arrayify */])(hexString);
        }
        function zpad(value, length) {
          value = String(value);
          while (value.length < length) {
            value = '0' + value;
          }
          return value;
        }
        function getPassword(password) {
          if (typeof (password) === 'string') {
            return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
          }
          return Object(lib_esm["a" /* arrayify */])(password);
        }
        function searchPath(object, path) {
          let currentChild = object;
          const comps = path.toLowerCase().split('/');
          for (let i = 0; i < comps.length; i++) {
            // Search for a child object with a case-insensitive matching key
            let matchingChild = null;
            for (const key in currentChild) {
              if (key.toLowerCase() === comps[i]) {
                matchingChild = currentChild[key];
                break;
              }
            }
            // Didn't find one. :'(
            if (matchingChild === null) {
              return null;
            }
            // Now check this child...
            currentChild = matchingChild;
          }
          return currentChild;
        }
// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
        function uuidV4(randomBytes) {
          const bytes = Object(lib_esm["a" /* arrayify */])(randomBytes);
          // Section: 4.1.3:
          // - time_hi_and_version[12:16] = 0b0100
          bytes[6] = (bytes[6] & 0x0f) | 0x40;
          // Section 4.4
          // - clock_seq_hi_and_reserved[6] = 0b0
          // - clock_seq_hi_and_reserved[7] = 0b1
          bytes[8] = (bytes[8] & 0x3f) | 0x80;
          const value = Object(lib_esm["i" /* hexlify */])(bytes);
          return [
            value.substring(2, 10),
            value.substring(10, 14),
            value.substring(14, 18),
            value.substring(18, 22),
            value.substring(22, 34),
          ].join("-");
        }
//# sourceMappingURL=utils.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/_version.js
        const json_wallets_lib_esm_version_version = "json-wallets/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/keystore.js

        var keystore_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };













        const keystore_logger = new logger_lib_esm["b" /* Logger */](json_wallets_lib_esm_version_version);
// Exported Types
        function hasMnemonic(value) {
          return (value != null && value.mnemonic && value.mnemonic.phrase);
        }
        class keystore_KeystoreAccount extends Description {
          isKeystoreAccount(value) {
            return !!(value && value._isKeystoreAccount);
          }
        }
        function _decrypt(data, key, ciphertext) {
          const cipher = searchPath(data, "crypto/cipher");
          if (cipher === "aes-128-ctr") {
            const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
            const counter = new aes_js_default.a.Counter(iv);
            const aesCtr = new aes_js_default.a.ModeOfOperation.ctr(key, counter);
            return Object(lib_esm["a" /* arrayify */])(aesCtr.decrypt(ciphertext));
          }
          return null;
        }
        function _getAccount(data, key) {
          const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
          const computedMAC = Object(lib_esm["i" /* hexlify */])(keccak256(Object(lib_esm["b" /* concat */])([key.slice(16, 32), ciphertext]))).substring(2);
          if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
            throw new Error("invalid password");
          }
          const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
          if (!privateKey) {
            keystore_logger.throwError("unsupported cipher", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
              operation: "decrypt"
            });
          }
          const mnemonicKey = key.slice(32, 64);
          const address = computeAddress(privateKey);
          if (data.address) {
            let check = data.address.toLowerCase();
            if (check.substring(0, 2) !== "0x") {
              check = "0x" + check;
            }
            if (getAddress(check) !== address) {
              throw new Error("address mismatch");
            }
          }
          const account = {
            _isKeystoreAccount: true,
            address: address,
            privateKey: Object(lib_esm["i" /* hexlify */])(privateKey)
          };
          // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
          if (searchPath(data, "x-ethers/version") === "0.1") {
            const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
            const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
            const mnemonicCounter = new aes_js_default.a.Counter(mnemonicIv);
            const mnemonicAesCtr = new aes_js_default.a.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            const path = searchPath(data, "x-ethers/path") || defaultPath;
            const locale = searchPath(data, "x-ethers/locale") || "en";
            const entropy = Object(lib_esm["a" /* arrayify */])(mnemonicAesCtr.decrypt(mnemonicCiphertext));
            try {
              const mnemonic = entropyToMnemonic(entropy, locale);
              const node = lib_esm_HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
              if (node.privateKey != account.privateKey) {
                throw new Error("mnemonic mismatch");
              }
              account.mnemonic = node.mnemonic;
            }
            catch (error) {
              // If we don't have the locale wordlist installed to
              // read this mnemonic, just bail and don't set the
              // mnemonic
              if (error.code !== logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
                throw error;
              }
            }
          }
          return new keystore_KeystoreAccount(account);
        }
        function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
          return Object(lib_esm["a" /* arrayify */])(pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));
        }
        function keystore_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
          return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
        }
        function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
          const passwordBytes = getPassword(password);
          const kdf = searchPath(data, "crypto/kdf");
          if (kdf && typeof (kdf) === "string") {
            const throwError = function (name, value) {
              return keystore_logger.throwArgumentError("invalid key-derivation function parameters", name, value);
            };
            if (kdf.toLowerCase() === "scrypt") {
              const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
              const N = parseInt(searchPath(data, "crypto/kdfparams/n"));
              const r = parseInt(searchPath(data, "crypto/kdfparams/r"));
              const p = parseInt(searchPath(data, "crypto/kdfparams/p"));
              // Check for all required parameters
              if (!N || !r || !p) {
                throwError("kdf", kdf);
              }
              // Make sure N is a power of 2
              if ((N & (N - 1)) !== 0) {
                throwError("N", N);
              }
              const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
              if (dkLen !== 32) {
                throwError("dklen", dkLen);
              }
              return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
            }
            else if (kdf.toLowerCase() === "pbkdf2") {
              const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
              let prfFunc = null;
              const prf = searchPath(data, "crypto/kdfparams/prf");
              if (prf === "hmac-sha256") {
                prfFunc = "sha256";
              }
              else if (prf === "hmac-sha512") {
                prfFunc = "sha512";
              }
              else {
                throwError("prf", prf);
              }
              const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
              const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
              if (dkLen !== 32) {
                throwError("dklen", dkLen);
              }
              return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
            }
          }
          return keystore_logger.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
        }
        function decryptSync(json, password) {
          const data = JSON.parse(json);
          const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt_default.a.syncScrypt);
          return _getAccount(data, key);
        }
        function decrypt(json, password, progressCallback) {
          return keystore_awaiter(this, void 0, void 0, function* () {
            const data = JSON.parse(json);
            const key = yield _computeKdfKey(data, password, keystore_pbkdf2, scrypt_default.a.scrypt, progressCallback);
            return _getAccount(data, key);
          });
        }
        function encrypt(account, password, options, progressCallback) {
          try {
            // Check the address matches the private key
            if (getAddress(account.address) !== computeAddress(account.privateKey)) {
              throw new Error("address/privateKey mismatch");
            }
            // Check the mnemonic (if any) matches the private key
            if (hasMnemonic(account)) {
              const mnemonic = account.mnemonic;
              const node = lib_esm_HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
              if (node.privateKey != account.privateKey) {
                throw new Error("mnemonic mismatch");
              }
            }
          }
          catch (e) {
            return Promise.reject(e);
          }
          // The options are optional, so adjust the call as needed
          if (typeof (options) === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
          }
          if (!options) {
            options = {};
          }
          const privateKey = Object(lib_esm["a" /* arrayify */])(account.privateKey);
          const passwordBytes = getPassword(password);
          let entropy = null;
          let path = null;
          let locale = null;
          if (hasMnemonic(account)) {
            const srcMnemonic = account.mnemonic;
            entropy = Object(lib_esm["a" /* arrayify */])(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
            path = srcMnemonic.path || defaultPath;
            locale = srcMnemonic.locale || "en";
          }
          let client = options.client;
          if (!client) {
            client = "ethers.js";
          }
          // Check/generate the salt
          let salt = null;
          if (options.salt) {
            salt = Object(lib_esm["a" /* arrayify */])(options.salt);
          }
          else {
            salt = Object(random["a" /* randomBytes */])(32);
            ;
          }
          // Override initialization vector
          let iv = null;
          if (options.iv) {
            iv = Object(lib_esm["a" /* arrayify */])(options.iv);
            if (iv.length !== 16) {
              throw new Error("invalid iv");
            }
          }
          else {
            iv = Object(random["a" /* randomBytes */])(16);
          }
          // Override the uuid
          let uuidRandom = null;
          if (options.uuid) {
            uuidRandom = Object(lib_esm["a" /* arrayify */])(options.uuid);
            if (uuidRandom.length !== 16) {
              throw new Error("invalid uuid");
            }
          }
          else {
            uuidRandom = Object(random["a" /* randomBytes */])(16);
          }
          // Override the scrypt password-based key derivation function parameters
          let N = (1 << 17), r = 8, p = 1;
          if (options.scrypt) {
            if (options.scrypt.N) {
              N = options.scrypt.N;
            }
            if (options.scrypt.r) {
              r = options.scrypt.r;
            }
            if (options.scrypt.p) {
              p = options.scrypt.p;
            }
          }
          // We take 64 bytes:
          //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
          //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
          return scrypt_default.a.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {
            key = Object(lib_esm["a" /* arrayify */])(key);
            // This will be used to encrypt the wallet (as per Web3 secret storage)
            const derivedKey = key.slice(0, 16);
            const macPrefix = key.slice(16, 32);
            // This will be used to encrypt the mnemonic phrase (if any)
            const mnemonicKey = key.slice(32, 64);
            // Encrypt the private key
            const counter = new aes_js_default.a.Counter(iv);
            const aesCtr = new aes_js_default.a.ModeOfOperation.ctr(derivedKey, counter);
            const ciphertext = Object(lib_esm["a" /* arrayify */])(aesCtr.encrypt(privateKey));
            // Compute the message authentication code, used to check the password
            const mac = keccak256(Object(lib_esm["b" /* concat */])([macPrefix, ciphertext]));
            // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
            const data = {
              address: account.address.substring(2).toLowerCase(),
              id: uuidV4(uuidRandom),
              version: 3,
              Crypto: {
                cipher: "aes-128-ctr",
                cipherparams: {
                  iv: Object(lib_esm["i" /* hexlify */])(iv).substring(2),
                },
                ciphertext: Object(lib_esm["i" /* hexlify */])(ciphertext).substring(2),
                kdf: "scrypt",
                kdfparams: {
                  salt: Object(lib_esm["i" /* hexlify */])(salt).substring(2),
                  n: N,
                  dklen: 32,
                  p: p,
                  r: r
                },
                mac: mac.substring(2)
              }
            };
            // If we have a mnemonic, encrypt it into the JSON wallet
            if (entropy) {
              const mnemonicIv = Object(random["a" /* randomBytes */])(16);
              const mnemonicCounter = new aes_js_default.a.Counter(mnemonicIv);
              const mnemonicAesCtr = new aes_js_default.a.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
              const mnemonicCiphertext = Object(lib_esm["a" /* arrayify */])(mnemonicAesCtr.encrypt(entropy));
              const now = new Date();
              const timestamp = (now.getUTCFullYear() + "-" +
                zpad(now.getUTCMonth() + 1, 2) + "-" +
                zpad(now.getUTCDate(), 2) + "T" +
                zpad(now.getUTCHours(), 2) + "-" +
                zpad(now.getUTCMinutes(), 2) + "-" +
                zpad(now.getUTCSeconds(), 2) + ".0Z");
              data["x-ethers"] = {
                client: client,
                gethFilename: ("UTC--" + timestamp + "--" + data.address),
                mnemonicCounter: Object(lib_esm["i" /* hexlify */])(mnemonicIv).substring(2),
                mnemonicCiphertext: Object(lib_esm["i" /* hexlify */])(mnemonicCiphertext).substring(2),
                path: path,
                locale: locale,
                version: "0.1"
              };
            }
            return JSON.stringify(data);
          });
        }
//# sourceMappingURL=keystore.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js










        const crowdsale_logger = new logger_lib_esm["b" /* Logger */](json_wallets_lib_esm_version_version);

        class crowdsale_CrowdsaleAccount extends Description {
          isCrowdsaleAccount(value) {
            return !!(value && value._isCrowdsaleAccount);
          }
        }
// See: https://github.com/ethereum/pyethsaletool
        function crowdsale_decrypt(json, password) {
          const data = JSON.parse(json);
          password = getPassword(password);
          // Ethereum Address
          const ethaddr = getAddress(searchPath(data, "ethaddr"));
          // Encrypted Seed
          const encseed = looseArrayify(searchPath(data, "encseed"));
          if (!encseed || (encseed.length % 16) !== 0) {
            crowdsale_logger.throwArgumentError("invalid encseed", "json", json);
          }
          const key = Object(lib_esm["a" /* arrayify */])(pbkdf2(password, password, 2000, 32, "sha256")).slice(0, 16);
          const iv = encseed.slice(0, 16);
          const encryptedSeed = encseed.slice(16);
          // Decrypt the seed
          const aesCbc = new aes_js_default.a.ModeOfOperation.cbc(key, iv);
          const seed = aes_js_default.a.padding.pkcs7.strip(Object(lib_esm["a" /* arrayify */])(aesCbc.decrypt(encryptedSeed)));
          // This wallet format is weird... Convert the binary encoded hex to a string.
          let seedHex = "";
          for (let i = 0; i < seed.length; i++) {
            seedHex += String.fromCharCode(seed[i]);
          }
          const seedHexBytes = toUtf8Bytes(seedHex);
          const privateKey = keccak256(seedHexBytes);
          return new crowdsale_CrowdsaleAccount({
            _isCrowdsaleAccount: true,
            address: ethaddr,
            privateKey: privateKey
          });
        }
//# sourceMappingURL=crowdsale.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/inspect.js


        function isCrowdsaleWallet(json) {
          let data = null;
          try {
            data = JSON.parse(json);
          }
          catch (error) {
            return false;
          }
          return (data.encseed && data.ethaddr);
        }
        function isKeystoreWallet(json) {
          let data = null;
          try {
            data = JSON.parse(json);
          }
          catch (error) {
            return false;
          }
          if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
            return false;
          }
          // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
          return true;
        }
//export function isJsonWallet(json: string): boolean {
//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
//}
        function getJsonWalletAddress(json) {
          if (isCrowdsaleWallet(json)) {
            try {
              return getAddress(JSON.parse(json).ethaddr);
            }
            catch (error) {
              return null;
            }
          }
          if (isKeystoreWallet(json)) {
            try {
              return getAddress(JSON.parse(json).address);
            }
            catch (error) {
              return null;
            }
          }
          return null;
        }
//# sourceMappingURL=inspect.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/json-wallets/lib.esm/index.js




        function decryptJsonWallet(json, password, progressCallback) {
          if (isCrowdsaleWallet(json)) {
            if (progressCallback) {
              progressCallback(0);
            }
            const account = crowdsale_decrypt(json, password);
            if (progressCallback) {
              progressCallback(1);
            }
            return Promise.resolve(account);
          }
          if (isKeystoreWallet(json)) {
            return decrypt(json, password, progressCallback);
          }
          return Promise.reject(new Error("invalid JSON wallet"));
        }
        function decryptJsonWalletSync(json, password) {
          if (isCrowdsaleWallet(json)) {
            return crowdsale_decrypt(json, password);
          }
          if (isKeystoreWallet(json)) {
            return decryptSync(json, password);
          }
          throw new Error("invalid JSON wallet");
        }

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/wallet/lib.esm/_version.js
        const wallet_lib_esm_version_version = "wallet/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/wallet/lib.esm/index.js

        var wallet_lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };














        const wallet_lib_esm_logger = new logger_lib_esm["b" /* Logger */](wallet_lib_esm_version_version);
        function isAccount(value) {
          return (value != null && Object(lib_esm["l" /* isHexString */])(value.privateKey, 32) && value.address != null);
        }
        function lib_esm_hasMnemonic(value) {
          const mnemonic = value.mnemonic;
          return (mnemonic && mnemonic.phrase);
        }
        class lib_esm_Wallet extends lib_esm_Signer {
          constructor(privateKey, provider) {
            wallet_lib_esm_logger.checkNew(new.target, lib_esm_Wallet);
            super();
            if (isAccount(privateKey)) {
              const signingKey = new lib_esm_SigningKey(privateKey.privateKey);
              defineReadOnly(this, "_signingKey", () => signingKey);
              defineReadOnly(this, "address", computeAddress(this.publicKey));
              if (this.address !== getAddress(privateKey.address)) {
                wallet_lib_esm_logger.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
              }
              if (lib_esm_hasMnemonic(privateKey)) {
                const srcMnemonic = privateKey.mnemonic;
                defineReadOnly(this, "_mnemonic", () => ({
                  phrase: srcMnemonic.phrase,
                  path: srcMnemonic.path || defaultPath,
                  locale: srcMnemonic.locale || "en"
                }));
                const mnemonic = this.mnemonic;
                const node = lib_esm_HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                if (computeAddress(node.privateKey) !== this.address) {
                  wallet_lib_esm_logger.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                }
              }
              else {
                defineReadOnly(this, "_mnemonic", () => null);
              }
            }
            else {
              if (lib_esm_SigningKey.isSigningKey(privateKey)) {
                /* istanbul ignore if */
                if (privateKey.curve !== "secp256k1") {
                  wallet_lib_esm_logger.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                }
                defineReadOnly(this, "_signingKey", () => privateKey);
              }
              else {
                // A lot of common tools do not prefix private keys with a 0x (see: #1166)
                if (typeof (privateKey) === "string") {
                  if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                    privateKey = "0x" + privateKey;
                  }
                }
                const signingKey = new lib_esm_SigningKey(privateKey);
                defineReadOnly(this, "_signingKey", () => signingKey);
              }
              defineReadOnly(this, "_mnemonic", () => null);
              defineReadOnly(this, "address", computeAddress(this.publicKey));
            }
            /* istanbul ignore if */
            if (provider && !lib_esm_Provider.isProvider(provider)) {
              wallet_lib_esm_logger.throwArgumentError("invalid provider", "provider", provider);
            }
            defineReadOnly(this, "provider", provider || null);
          }
          get mnemonic() { return this._mnemonic(); }
          get privateKey() { return this._signingKey().privateKey; }
          get publicKey() { return this._signingKey().publicKey; }
          getAddress() {
            return Promise.resolve(this.address);
          }
          connect(provider) {
            return new lib_esm_Wallet(this, provider);
          }
          signTransaction(transaction) {
            return resolveProperties(transaction).then((tx) => {
              if (tx.from != null) {
                if (getAddress(tx.from) !== this.address) {
                  wallet_lib_esm_logger.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                }
                delete tx.from;
              }
              const signature = this._signingKey().signDigest(keccak256(lib_esm_serialize(tx)));
              return lib_esm_serialize(tx, signature);
            });
          }
          signMessage(message) {
            return wallet_lib_esm_awaiter(this, void 0, void 0, function* () {
              return Object(lib_esm["m" /* joinSignature */])(this._signingKey().signDigest(hashMessage(message)));
            });
          }
          _signTypedData(domain, types, value) {
            return wallet_lib_esm_awaiter(this, void 0, void 0, function* () {
              // Populate any ENS names
              const populated = yield typed_data_TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                if (this.provider == null) {
                  wallet_lib_esm_logger.throwError("cannot resolve ENS names without a provider", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                    operation: "resolveName",
                    value: name
                  });
                }
                return this.provider.resolveName(name);
              });
              return Object(lib_esm["m" /* joinSignature */])(this._signingKey().signDigest(typed_data_TypedDataEncoder.hash(populated.domain, types, populated.value)));
            });
          }
          encrypt(password, options, progressCallback) {
            if (typeof (options) === "function" && !progressCallback) {
              progressCallback = options;
              options = {};
            }
            if (progressCallback && typeof (progressCallback) !== "function") {
              throw new Error("invalid callback");
            }
            if (!options) {
              options = {};
            }
            return encrypt(this, password, options, progressCallback);
          }
          /**
           *  Static methods to create Wallet instances.
           */
          static createRandom(options) {
            let entropy = Object(random["a" /* randomBytes */])(16);
            if (!options) {
              options = {};
            }
            if (options.extraEntropy) {
              entropy = Object(lib_esm["a" /* arrayify */])(Object(lib_esm["e" /* hexDataSlice */])(keccak256(Object(lib_esm["b" /* concat */])([entropy, options.extraEntropy])), 0, 16));
            }
            const mnemonic = entropyToMnemonic(entropy, options.locale);
            return lib_esm_Wallet.fromMnemonic(mnemonic, options.path, options.locale);
          }
          static fromEncryptedJson(json, password, progressCallback) {
            return decryptJsonWallet(json, password, progressCallback).then((account) => {
              return new lib_esm_Wallet(account);
            });
          }
          static fromEncryptedJsonSync(json, password) {
            return new lib_esm_Wallet(decryptJsonWalletSync(json, password));
          }
          static fromMnemonic(mnemonic, path, wordlist) {
            if (!path) {
              path = defaultPath;
            }
            return new lib_esm_Wallet(lib_esm_HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
          }
        }
        function verifyMessage(message, signature) {
          return recoverAddress(hashMessage(message), signature);
        }
        function verifyTypedData(domain, types, value, signature) {
          return recoverAddress(typed_data_TypedDataEncoder.hash(domain, types, value), signature);
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/constants/lib.esm/addresses.js
        const AddressZero = "0x0000000000000000000000000000000000000000";
//# sourceMappingURL=addresses.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/constants/lib.esm/hashes.js
        const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
//# sourceMappingURL=hashes.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/constants/lib.esm/strings.js
// NFKC (composed)             // (decomposed)
        const EtherSymbol = "\u039e"; // "\uD835\uDF63";
//# sourceMappingURL=strings.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/constants/lib.esm/index.js





//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/networks/lib.esm/_version.js
        const networks_lib_esm_version_version = "networks/5.5.1";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/networks/lib.esm/index.js



        const networks_lib_esm_logger = new logger_lib_esm["b" /* Logger */](networks_lib_esm_version_version);
        ;
        function isRenetworkable(value) {
          return (value && typeof (value.renetwork) === "function");
        }
        function ethDefaultProvider(network) {
          const func = function (providers, options) {
            if (options == null) {
              options = {};
            }
            const providerList = [];
            if (providers.InfuraProvider) {
              try {
                providerList.push(new providers.InfuraProvider(network, options.infura));
              }
              catch (error) { }
            }
            if (providers.EtherscanProvider) {
              try {
                providerList.push(new providers.EtherscanProvider(network, options.etherscan));
              }
              catch (error) { }
            }
            if (providers.AlchemyProvider) {
              try {
                providerList.push(new providers.AlchemyProvider(network, options.alchemy));
              }
              catch (error) { }
            }
            if (providers.PocketProvider) {
              // These networks are currently faulty on Pocket as their
              // network does not handle the Berlin hardfork, which is
              // live on these ones.
              // @TODO: This goes away once Pocket has upgraded their nodes
              const skip = ["goerli", "ropsten", "rinkeby"];
              try {
                const provider = new providers.PocketProvider(network);
                if (provider.network && skip.indexOf(provider.network.name) === -1) {
                  providerList.push(provider);
                }
              }
              catch (error) { }
            }
            if (providers.CloudflareProvider) {
              try {
                providerList.push(new providers.CloudflareProvider(network));
              }
              catch (error) { }
            }
            if (providerList.length === 0) {
              return null;
            }
            if (providers.FallbackProvider) {
              let quorum = 1;
              if (options.quorum != null) {
                quorum = options.quorum;
              }
              else if (network === "homestead") {
                quorum = 2;
              }
              return new providers.FallbackProvider(providerList, quorum);
            }
            return providerList[0];
          };
          func.renetwork = function (network) {
            return ethDefaultProvider(network);
          };
          return func;
        }
        function etcDefaultProvider(url, network) {
          const func = function (providers, options) {
            if (providers.JsonRpcProvider) {
              return new providers.JsonRpcProvider(url, network);
            }
            return null;
          };
          func.renetwork = function (network) {
            return etcDefaultProvider(url, network);
          };
          return func;
        }
        const homestead = {
          chainId: 1,
          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          name: "homestead",
          _defaultProvider: ethDefaultProvider("homestead")
        };
        const ropsten = {
          chainId: 3,
          ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
          name: "ropsten",
          _defaultProvider: ethDefaultProvider("ropsten")
        };
        const classicMordor = {
          chainId: 63,
          name: "classicMordor",
          _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
        };
// See: https://chainlist.org
        const networks = {
          unspecified: { chainId: 0, name: "unspecified" },
          homestead: homestead,
          mainnet: homestead,
          morden: { chainId: 2, name: "morden" },
          ropsten: ropsten,
          testnet: ropsten,
          rinkeby: {
            chainId: 4,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "rinkeby",
            _defaultProvider: ethDefaultProvider("rinkeby")
          },
          kovan: {
            chainId: 42,
            name: "kovan",
            _defaultProvider: ethDefaultProvider("kovan")
          },
          goerli: {
            chainId: 5,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "goerli",
            _defaultProvider: ethDefaultProvider("goerli")
          },
          // ETC (See: #351)
          classic: {
            chainId: 61,
            name: "classic",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
          },
          classicMorden: { chainId: 62, name: "classicMorden" },
          classicMordor: classicMordor,
          classicTestnet: classicMordor,
          classicKotti: {
            chainId: 6,
            name: "classicKotti",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
          },
          xdai: { chainId: 100, name: "xdai" },
          matic: { chainId: 137, name: "matic" },
          maticmum: { chainId: 80001, name: "maticmum" },
          optimism: { chainId: 10, name: "optimism" },
          "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
          "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
          arbitrum: { chainId: 42161, name: "arbitrum" },
          "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
          bnb: { chainId: 56, name: "bnb" },
          bnbt: { chainId: 97, name: "bnbt" },
        };
        /**
         *  getNetwork
         *
         *  Converts a named common networks or chain ID (network ID) to a Network
         *  and verifies a network is a valid Network..
         */
        function lib_esm_getNetwork(network) {
          // No network (null)
          if (network == null) {
            return null;
          }
          if (typeof (network) === "number") {
            for (const name in networks) {
              const standard = networks[name];
              if (standard.chainId === network) {
                return {
                  name: standard.name,
                  chainId: standard.chainId,
                  ensAddress: (standard.ensAddress || null),
                  _defaultProvider: (standard._defaultProvider || null)
                };
              }
            }
            return {
              chainId: network,
              name: "unknown"
            };
          }
          if (typeof (network) === "string") {
            const standard = networks[network];
            if (standard == null) {
              return null;
            }
            return {
              name: standard.name,
              chainId: standard.chainId,
              ensAddress: standard.ensAddress,
              _defaultProvider: (standard._defaultProvider || null)
            };
          }
          const standard = networks[network.name];
          // Not a standard network; check that it is a valid network in general
          if (!standard) {
            if (typeof (network.chainId) !== "number") {
              networks_lib_esm_logger.throwArgumentError("invalid network chainId", "network", network);
            }
            return network;
          }
          // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
          if (network.chainId !== 0 && network.chainId !== standard.chainId) {
            networks_lib_esm_logger.throwArgumentError("network chainId mismatch", "network", network);
          }
          // @TODO: In the next major version add an attach function to a defaultProvider
          // class and move the _defaultProvider internal to this file (extend Network)
          let defaultProvider = network._defaultProvider || null;
          if (defaultProvider == null && standard._defaultProvider) {
            if (isRenetworkable(standard._defaultProvider)) {
              defaultProvider = standard._defaultProvider.renetwork(network);
            }
            else {
              defaultProvider = standard._defaultProvider;
            }
          }
          // Standard Network (allow overriding the ENS address)
          return {
            name: network.name,
            chainId: standard.chainId,
            ensAddress: (network.ensAddress || standard.ensAddress || null),
            _defaultProvider: defaultProvider
          };
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/strings/lib.esm/idna.js


        function bytes2(data) {
          if ((data.length % 4) !== 0) {
            throw new Error("bad data");
          }
          let result = [];
          for (let i = 0; i < data.length; i += 4) {
            result.push(parseInt(data.substring(i, i + 4), 16));
          }
          return result;
        }
        function createTable(data, func) {
          if (!func) {
            func = function (value) { return [parseInt(value, 16)]; };
          }
          let lo = 0;
          let result = {};
          data.split(",").forEach((pair) => {
            let comps = pair.split(":");
            lo += parseInt(comps[0], 16);
            result[lo] = func(comps[1]);
          });
          return result;
        }
        function createRangeTable(data) {
          let hi = 0;
          return data.split(",").map((v) => {
            let comps = v.split("-");
            if (comps.length === 1) {
              comps[1] = "0";
            }
            else if (comps[1] === "") {
              comps[1] = "1";
            }
            let lo = hi + parseInt(comps[0], 16);
            hi = parseInt(comps[1], 16);
            return { l: lo, h: hi };
          });
        }
        function matchMap(value, ranges) {
          let lo = 0;
          for (let i = 0; i < ranges.length; i++) {
            let range = ranges[i];
            lo += range.l;
            if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {
              if (range.e && range.e.indexOf(value - lo) !== -1) {
                continue;
              }
              return range;
            }
          }
          return null;
        }
        const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
// @TODO: Make this relative...
        const Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
        const Table_B_2_ranges = [
          { h: 25, s: 32, l: 65 },
          { h: 30, s: 32, e: [23], l: 127 },
          { h: 54, s: 1, e: [48], l: 64, d: 2 },
          { h: 14, s: 1, l: 57, d: 2 },
          { h: 44, s: 1, l: 17, d: 2 },
          { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
          { h: 16, s: 1, l: 68, d: 2 },
          { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
          { h: 26, s: 32, e: [17], l: 435 },
          { h: 22, s: 1, l: 71, d: 2 },
          { h: 15, s: 80, l: 40 },
          { h: 31, s: 32, l: 16 },
          { h: 32, s: 1, l: 80, d: 2 },
          { h: 52, s: 1, l: 42, d: 2 },
          { h: 12, s: 1, l: 55, d: 2 },
          { h: 40, s: 1, e: [38], l: 15, d: 2 },
          { h: 14, s: 1, l: 48, d: 2 },
          { h: 37, s: 48, l: 49 },
          { h: 148, s: 1, l: 6351, d: 2 },
          { h: 88, s: 1, l: 160, d: 2 },
          { h: 15, s: 16, l: 704 },
          { h: 25, s: 26, l: 854 },
          { h: 25, s: 32, l: 55915 },
          { h: 37, s: 40, l: 1247 },
          { h: 25, s: -119711, l: 53248 },
          { h: 25, s: -119763, l: 52 },
          { h: 25, s: -119815, l: 52 },
          { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
          { h: 25, s: -119919, l: 52 },
          { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
          { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
          { h: 25, s: -120075, l: 52 },
          { h: 25, s: -120127, l: 52 },
          { h: 25, s: -120179, l: 52 },
          { h: 25, s: -120231, l: 52 },
          { h: 25, s: -120283, l: 52 },
          { h: 25, s: -120335, l: 52 },
          { h: 24, s: -119543, e: [17], l: 56 },
          { h: 24, s: -119601, e: [17], l: 58 },
          { h: 24, s: -119659, e: [17], l: 58 },
          { h: 24, s: -119717, e: [17], l: 58 },
          { h: 24, s: -119775, e: [17], l: 58 }
        ];
        const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
        const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
        const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
        const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
        function flatten(values) {
          return values.reduce((accum, value) => {
            value.forEach((value) => { accum.push(value); });
            return accum;
          }, []);
        }
        function _nameprepTableA1(codepoint) {
          return !!matchMap(codepoint, Table_A_1_ranges);
        }
        function _nameprepTableB2(codepoint) {
          let range = matchMap(codepoint, Table_B_2_ranges);
          if (range) {
            return [codepoint + range.s];
          }
          let codes = Table_B_2_lut_abs[codepoint];
          if (codes) {
            return codes;
          }
          let shift = Table_B_2_lut_rel[codepoint];
          if (shift) {
            return [codepoint + shift[0]];
          }
          let complex = Table_B_2_complex[codepoint];
          if (complex) {
            return complex;
          }
          return null;
        }
        function _nameprepTableC(codepoint) {
          return !!matchMap(codepoint, Table_C_ranges);
        }
        function nameprep(value) {
          // This allows platforms with incomplete normalize to bypass
          // it for very basic names which the built-in toLowerCase
          // will certainly handle correctly
          if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
            return value.toLowerCase();
          }
          // Get the code points (keeping the current normalization)
          let codes = toUtf8CodePoints(value);
          codes = flatten(codes.map((code) => {
            // Substitute Table B.1 (Maps to Nothing)
            if (Table_B_1_flags.indexOf(code) >= 0) {
              return [];
            }
            if (code >= 0xfe00 && code <= 0xfe0f) {
              return [];
            }
            // Substitute Table B.2 (Case Folding)
            let codesTableB2 = _nameprepTableB2(code);
            if (codesTableB2) {
              return codesTableB2;
            }
            // No Substitution
            return [code];
          }));
          // Normalize using form KC
          codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
          // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
          codes.forEach((code) => {
            if (_nameprepTableC(code)) {
              throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
            }
          });
          // Prohibit Unassigned Code Points (Table A.1)
          codes.forEach((code) => {
            if (_nameprepTableA1(code)) {
              throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
            }
          });
          // IDNA extras
          let name = _toUtf8String(codes);
          // IDNA: 4.2.3.1
          if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
            throw new Error("invalid hyphen");
          }
          // IDNA: 4.2.4
          if (name.length > 63) {
            throw new Error("too long");
          }
          return name;
        }
//# sourceMappingURL=idna.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/namehash.js





        const namehash_logger = new logger_lib_esm["b" /* Logger */](hash_lib_esm_version_version);
        const Zeros = new Uint8Array(32);
        Zeros.fill(0);
        const Partition = new RegExp("^((.*)\\.)?([^.]+)$");
        function isValidName(name) {
          try {
            const comps = name.split(".");
            for (let i = 0; i < comps.length; i++) {
              if (nameprep(comps[i]).length === 0) {
                throw new Error("empty");
              }
            }
            return true;
          }
          catch (error) { }
          return false;
        }
        function namehash(name) {
          /* istanbul ignore if */
          if (typeof (name) !== "string") {
            namehash_logger.throwArgumentError("invalid ENS name; not a string", "name", name);
          }
          let current = name;
          let result = Zeros;
          while (current.length) {
            const partition = current.match(Partition);
            if (partition == null || partition[2] === "") {
              namehash_logger.throwArgumentError("invalid ENS address; missing component", "name", name);
            }
            const label = toUtf8Bytes(nameprep(partition[3]));
            result = keccak256(Object(lib_esm["b" /* concat */])([result, keccak256(label)]));
            current = partition[2] || "";
          }
          return Object(lib_esm["i" /* hexlify */])(result);
        }
//# sourceMappingURL=namehash.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/base64/lib.esm/base64.js


        function base64_decode(textData) {
          textData = atob(textData);
          const data = [];
          for (let i = 0; i < textData.length; i++) {
            data.push(textData.charCodeAt(i));
          }
          return Object(lib_esm["a" /* arrayify */])(data);
        }
        function base64_encode(data) {
          data = Object(lib_esm["a" /* arrayify */])(data);
          let textData = "";
          for (let i = 0; i < data.length; i++) {
            textData += String.fromCharCode(data[i]);
          }
          return btoa(textData);
        }
//# sourceMappingURL=base64.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/web/lib.esm/_version.js
        const web_lib_esm_version_version = "web/5.5.1";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/web/lib.esm/geturl.js

        var geturl_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

        function getUrl(href, options) {
          return geturl_awaiter(this, void 0, void 0, function* () {
            if (options == null) {
              options = {};
            }
            const request = {
              method: (options.method || "GET"),
              headers: (options.headers || {}),
              body: (options.body || undefined),
            };
            if (options.skipFetchSetup !== true) {
              request.mode = "cors"; // no-cors, cors, *same-origin
              request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
              request.credentials = "same-origin"; // include, *same-origin, omit
              request.redirect = "follow"; // manual, *follow, error
              request.referrer = "client"; // no-referrer, *client
            }
            ;
            const response = yield fetch(href, request);
            const body = yield response.arrayBuffer();
            const headers = {};
            if (response.headers.forEach) {
              response.headers.forEach((value, key) => {
                headers[key.toLowerCase()] = value;
              });
            }
            else {
              ((response.headers).keys)().forEach((key) => {
                headers[key.toLowerCase()] = response.headers.get(key);
              });
            }
            return {
              headers: headers,
              statusCode: response.status,
              statusMessage: response.statusText,
              body: Object(lib_esm["a" /* arrayify */])(new Uint8Array(body)),
            };
          });
        }
//# sourceMappingURL=geturl.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/web/lib.esm/index.js

        var web_lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };






        const web_lib_esm_logger = new logger_lib_esm["b" /* Logger */](web_lib_esm_version_version);

        function staller(duration) {
          return new Promise((resolve) => {
            setTimeout(resolve, duration);
          });
        }
        function bodyify(value, type) {
          if (value == null) {
            return null;
          }
          if (typeof (value) === "string") {
            return value;
          }
          if (Object(lib_esm["k" /* isBytesLike */])(value)) {
            if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
              try {
                return toUtf8String(value);
              }
              catch (error) { }
              ;
            }
            return Object(lib_esm["i" /* hexlify */])(value);
          }
          return value;
        }
// This API is still a work in progress; the future changes will likely be:
// - ConnectionInfo => FetchDataRequest<T = any>
// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
// For this reason, it should be considered internal until the API is finalized
        function _fetchData(connection, body, processFunc) {
          // How many times to retry in the event of a throttle
          const attemptLimit = (typeof (connection) === "object" && connection.throttleLimit != null) ? connection.throttleLimit : 12;
          web_lib_esm_logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
          const throttleCallback = ((typeof (connection) === "object") ? connection.throttleCallback : null);
          const throttleSlotInterval = ((typeof (connection) === "object" && typeof (connection.throttleSlotInterval) === "number") ? connection.throttleSlotInterval : 100);
          web_lib_esm_logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
          const headers = {};
          let url = null;
          // @TODO: Allow ConnectionInfo to override some of these values
          const options = {
            method: "GET",
          };
          let allow304 = false;
          let timeout = 2 * 60 * 1000;
          if (typeof (connection) === "string") {
            url = connection;
          }
          else if (typeof (connection) === "object") {
            if (connection == null || connection.url == null) {
              web_lib_esm_logger.throwArgumentError("missing URL", "connection.url", connection);
            }
            url = connection.url;
            if (typeof (connection.timeout) === "number" && connection.timeout > 0) {
              timeout = connection.timeout;
            }
            if (connection.headers) {
              for (const key in connection.headers) {
                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
                if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
                  allow304 = true;
                }
              }
            }
            options.allowGzip = !!connection.allowGzip;
            if (connection.user != null && connection.password != null) {
              if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
                web_lib_esm_logger.throwError("basic authentication requires a secure https url", logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT, { argument: "url", url: url, user: connection.user, password: "[REDACTED]" });
              }
              const authorization = connection.user + ":" + connection.password;
              headers["authorization"] = {
                key: "Authorization",
                value: "Basic " + base64_encode(toUtf8Bytes(authorization))
              };
            }
          }
          const reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
          const dataMatch = ((url) ? url.match(reData) : null);
          if (dataMatch) {
            try {
              const response = {
                statusCode: 200,
                statusMessage: "OK",
                headers: { "content-type": dataMatch[1] },
                body: base64_decode(dataMatch[2])
              };
              let result = response.body;
              if (processFunc) {
                result = processFunc(response.body, response);
              }
              return Promise.resolve(result);
            }
            catch (error) {
              web_lib_esm_logger.throwError("processing response error", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                body: bodyify(dataMatch[1], dataMatch[2]),
                error: error,
                requestBody: null,
                requestMethod: "GET",
                url: url
              });
            }
          }
          if (body) {
            options.method = "POST";
            options.body = body;
            if (headers["content-type"] == null) {
              headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
            }
            if (headers["content-length"] == null) {
              headers["content-length"] = { key: "Content-Length", value: String(body.length) };
            }
          }
          const flatHeaders = {};
          Object.keys(headers).forEach((key) => {
            const header = headers[key];
            flatHeaders[header.key] = header.value;
          });
          options.headers = flatHeaders;
          const runningTimeout = (function () {
            let timer = null;
            const promise = new Promise(function (resolve, reject) {
              if (timeout) {
                timer = setTimeout(() => {
                  if (timer == null) {
                    return;
                  }
                  timer = null;
                  reject(web_lib_esm_logger.makeError("timeout", logger_lib_esm["b" /* Logger */].errors.TIMEOUT, {
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    timeout: timeout,
                    url: url
                  }));
                }, timeout);
              }
            });
            const cancel = function () {
              if (timer == null) {
                return;
              }
              clearTimeout(timer);
              timer = null;
            };
            return { promise, cancel };
          })();
          const runningFetch = (function () {
            return web_lib_esm_awaiter(this, void 0, void 0, function* () {
              for (let attempt = 0; attempt < attemptLimit; attempt++) {
                let response = null;
                try {
                  response = yield getUrl(url, options);
                  if (attempt < attemptLimit) {
                    if (response.statusCode === 301 || response.statusCode === 302) {
                      // Redirection; for now we only support absolute locataions
                      const location = response.headers.location || "";
                      if (options.method === "GET" && location.match(/^https:/)) {
                        url = response.headers.location;
                        continue;
                      }
                    }
                    else if (response.statusCode === 429) {
                      // Exponential back-off throttling
                      let tryAgain = true;
                      if (throttleCallback) {
                        tryAgain = yield throttleCallback(attempt, url);
                      }
                      if (tryAgain) {
                        let stall = 0;
                        const retryAfter = response.headers["retry-after"];
                        if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                          stall = parseInt(retryAfter) * 1000;
                        }
                        else {
                          stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                        }
                        //console.log("Stalling 429");
                        yield staller(stall);
                        continue;
                      }
                    }
                  }
                }
                catch (error) {
                  response = error.response;
                  if (response == null) {
                    runningTimeout.cancel();
                    web_lib_esm_logger.throwError("missing response", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                      requestBody: bodyify(options.body, flatHeaders["content-type"]),
                      requestMethod: options.method,
                      serverError: error,
                      url: url
                    });
                  }
                }
                let body = response.body;
                if (allow304 && response.statusCode === 304) {
                  body = null;
                }
                else if (response.statusCode < 200 || response.statusCode >= 300) {
                  runningTimeout.cancel();
                  web_lib_esm_logger.throwError("bad response", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                    status: response.statusCode,
                    headers: response.headers,
                    body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    url: url
                  });
                }
                if (processFunc) {
                  try {
                    const result = yield processFunc(body, response);
                    runningTimeout.cancel();
                    return result;
                  }
                  catch (error) {
                    // Allow the processFunc to trigger a throttle
                    if (error.throttleRetry && attempt < attemptLimit) {
                      let tryAgain = true;
                      if (throttleCallback) {
                        tryAgain = yield throttleCallback(attempt, url);
                      }
                      if (tryAgain) {
                        const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                        //console.log("Stalling callback");
                        yield staller(timeout);
                        continue;
                      }
                    }
                    runningTimeout.cancel();
                    web_lib_esm_logger.throwError("processing response error", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                      body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                      error: error,
                      requestBody: bodyify(options.body, flatHeaders["content-type"]),
                      requestMethod: options.method,
                      url: url
                    });
                  }
                }
                runningTimeout.cancel();
                // If we had a processFunc, it either returned a T or threw above.
                // The "body" is now a Uint8Array.
                return body;
              }
              return web_lib_esm_logger.throwError("failed response", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                requestMethod: options.method,
                url: url
              });
            });
          })();
          return Promise.race([runningTimeout.promise, runningFetch]);
        }
        function fetchJson(connection, json, processFunc) {
          let processJsonFunc = (value, response) => {
            let result = null;
            if (value != null) {
              try {
                result = JSON.parse(toUtf8String(value));
              }
              catch (error) {
                web_lib_esm_logger.throwError("invalid JSON", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                  body: value,
                  error: error
                });
              }
            }
            if (processFunc) {
              result = processFunc(result, response);
            }
            return result;
          };
          // If we have json to send, we must
          // - add content-type of application/json (unless already overridden)
          // - convert the json to bytes
          let body = null;
          if (json != null) {
            body = toUtf8Bytes(json);
            // Create a connection with the content-type set for JSON
            const updated = (typeof (connection) === "string") ? ({ url: connection }) : shallowCopy(connection);
            if (updated.headers) {
              const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === "content-type")).length) !== 0;
              if (!hasContentType) {
                updated.headers = shallowCopy(updated.headers);
                updated.headers["content-type"] = "application/json";
              }
            }
            else {
              updated.headers = { "content-type": "application/json" };
            }
            connection = updated;
          }
          return _fetchData(connection, body, processJsonFunc);
        }
        function poll(func, options) {
          if (!options) {
            options = {};
          }
          options = shallowCopy(options);
          if (options.floor == null) {
            options.floor = 0;
          }
          if (options.ceiling == null) {
            options.ceiling = 10000;
          }
          if (options.interval == null) {
            options.interval = 250;
          }
          return new Promise(function (resolve, reject) {
            let timer = null;
            let done = false;
            // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
            const cancel = () => {
              if (done) {
                return false;
              }
              done = true;
              if (timer) {
                clearTimeout(timer);
              }
              return true;
            };
            if (options.timeout) {
              timer = setTimeout(() => {
                if (cancel()) {
                  reject(new Error("timeout"));
                }
              }, options.timeout);
            }
            const retryLimit = options.retryLimit;
            let attempt = 0;
            function check() {
              return func().then(function (result) {
                // If we have a result, or are allowed null then we're done
                if (result !== undefined) {
                  if (cancel()) {
                    resolve(result);
                  }
                }
                else if (options.oncePoll) {
                  options.oncePoll.once("poll", check);
                }
                else if (options.onceBlock) {
                  options.onceBlock.once("block", check);
                  // Otherwise, exponential back-off (up to 10s) our next request
                }
                else if (!done) {
                  attempt++;
                  if (attempt > retryLimit) {
                    if (cancel()) {
                      reject(new Error("retry limit reached"));
                    }
                    return;
                  }
                  let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                  if (timeout < options.floor) {
                    timeout = options.floor;
                  }
                  if (timeout > options.ceiling) {
                    timeout = options.ceiling;
                  }
                  setTimeout(check, timeout);
                }
                return null;
              }, function (error) {
                if (cancel()) {
                  reject(error);
                }
              });
            }
            check();
          });
        }
//# sourceMappingURL=index.js.map
// EXTERNAL MODULE: ./node_modules/bech32/index.js
        var bech32 = __webpack_require__("bf2b");
        var bech32_default = /*#__PURE__*/__webpack_require__.n(bech32);

// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/_version.js
        const providers_lib_esm_version_version = "providers/5.5.1";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/formatter.js









        const formatter_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);
        class formatter_Formatter {
          constructor() {
            formatter_logger.checkNew(new.target, formatter_Formatter);
            this.formats = this.getDefaultFormats();
          }
          getDefaultFormats() {
            const formats = ({});
            const address = this.address.bind(this);
            const bigNumber = this.bigNumber.bind(this);
            const blockTag = this.blockTag.bind(this);
            const data = this.data.bind(this);
            const hash = this.hash.bind(this);
            const hex = this.hex.bind(this);
            const number = this.number.bind(this);
            const type = this.type.bind(this);
            const strictData = (v) => { return this.data(v, true); };
            formats.transaction = {
              hash: hash,
              type: type,
              accessList: formatter_Formatter.allowNull(this.accessList.bind(this), null),
              blockHash: formatter_Formatter.allowNull(hash, null),
              blockNumber: formatter_Formatter.allowNull(number, null),
              transactionIndex: formatter_Formatter.allowNull(number, null),
              confirmations: formatter_Formatter.allowNull(number, null),
              from: address,
              // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
              // must be set
              gasPrice: formatter_Formatter.allowNull(bigNumber),
              maxPriorityFeePerGas: formatter_Formatter.allowNull(bigNumber),
              maxFeePerGas: formatter_Formatter.allowNull(bigNumber),
              gasLimit: bigNumber,
              to: formatter_Formatter.allowNull(address, null),
              value: bigNumber,
              nonce: number,
              data: data,
              r: formatter_Formatter.allowNull(this.uint256),
              s: formatter_Formatter.allowNull(this.uint256),
              v: formatter_Formatter.allowNull(number),
              creates: formatter_Formatter.allowNull(address, null),
              raw: formatter_Formatter.allowNull(data),
            };
            formats.transactionRequest = {
              from: formatter_Formatter.allowNull(address),
              nonce: formatter_Formatter.allowNull(number),
              gasLimit: formatter_Formatter.allowNull(bigNumber),
              gasPrice: formatter_Formatter.allowNull(bigNumber),
              maxPriorityFeePerGas: formatter_Formatter.allowNull(bigNumber),
              maxFeePerGas: formatter_Formatter.allowNull(bigNumber),
              to: formatter_Formatter.allowNull(address),
              value: formatter_Formatter.allowNull(bigNumber),
              data: formatter_Formatter.allowNull(strictData),
              type: formatter_Formatter.allowNull(number),
              accessList: formatter_Formatter.allowNull(this.accessList.bind(this), null),
            };
            formats.receiptLog = {
              transactionIndex: number,
              blockNumber: number,
              transactionHash: hash,
              address: address,
              topics: formatter_Formatter.arrayOf(hash),
              data: data,
              logIndex: number,
              blockHash: hash,
            };
            formats.receipt = {
              to: formatter_Formatter.allowNull(this.address, null),
              from: formatter_Formatter.allowNull(this.address, null),
              contractAddress: formatter_Formatter.allowNull(address, null),
              transactionIndex: number,
              // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
              root: formatter_Formatter.allowNull(hex),
              gasUsed: bigNumber,
              logsBloom: formatter_Formatter.allowNull(data),
              blockHash: hash,
              transactionHash: hash,
              logs: formatter_Formatter.arrayOf(this.receiptLog.bind(this)),
              blockNumber: number,
              confirmations: formatter_Formatter.allowNull(number, null),
              cumulativeGasUsed: bigNumber,
              effectiveGasPrice: formatter_Formatter.allowNull(bigNumber),
              status: formatter_Formatter.allowNull(number),
              type: type
            };
            formats.block = {
              hash: hash,
              parentHash: hash,
              number: number,
              timestamp: number,
              nonce: formatter_Formatter.allowNull(hex),
              difficulty: this.difficulty.bind(this),
              gasLimit: bigNumber,
              gasUsed: bigNumber,
              miner: address,
              extraData: data,
              transactions: formatter_Formatter.allowNull(formatter_Formatter.arrayOf(hash)),
              baseFeePerGas: formatter_Formatter.allowNull(bigNumber)
            };
            formats.blockWithTransactions = shallowCopy(formats.block);
            formats.blockWithTransactions.transactions = formatter_Formatter.allowNull(formatter_Formatter.arrayOf(this.transactionResponse.bind(this)));
            formats.filter = {
              fromBlock: formatter_Formatter.allowNull(blockTag, undefined),
              toBlock: formatter_Formatter.allowNull(blockTag, undefined),
              blockHash: formatter_Formatter.allowNull(hash, undefined),
              address: formatter_Formatter.allowNull(address, undefined),
              topics: formatter_Formatter.allowNull(this.topics.bind(this), undefined),
            };
            formats.filterLog = {
              blockNumber: formatter_Formatter.allowNull(number),
              blockHash: formatter_Formatter.allowNull(hash),
              transactionIndex: number,
              removed: formatter_Formatter.allowNull(this.boolean.bind(this)),
              address: address,
              data: formatter_Formatter.allowFalsish(data, "0x"),
              topics: formatter_Formatter.arrayOf(hash),
              transactionHash: hash,
              logIndex: number,
            };
            return formats;
          }
          accessList(accessList) {
            return accessListify(accessList || []);
          }
          // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
          // Strict! Used on input.
          number(number) {
            if (number === "0x") {
              return 0;
            }
            return bignumber_BigNumber.from(number).toNumber();
          }
          type(number) {
            if (number === "0x" || number == null) {
              return 0;
            }
            return bignumber_BigNumber.from(number).toNumber();
          }
          // Strict! Used on input.
          bigNumber(value) {
            return bignumber_BigNumber.from(value);
          }
          // Requires a boolean, "true" or  "false"; returns a boolean
          boolean(value) {
            if (typeof (value) === "boolean") {
              return value;
            }
            if (typeof (value) === "string") {
              value = value.toLowerCase();
              if (value === "true") {
                return true;
              }
              if (value === "false") {
                return false;
              }
            }
            throw new Error("invalid boolean - " + value);
          }
          hex(value, strict) {
            if (typeof (value) === "string") {
              if (!strict && value.substring(0, 2) !== "0x") {
                value = "0x" + value;
              }
              if (Object(lib_esm["l" /* isHexString */])(value)) {
                return value.toLowerCase();
              }
            }
            return formatter_logger.throwArgumentError("invalid hash", "value", value);
          }
          data(value, strict) {
            const result = this.hex(value, strict);
            if ((result.length % 2) !== 0) {
              throw new Error("invalid data; odd-length - " + value);
            }
            return result;
          }
          // Requires an address
          // Strict! Used on input.
          address(value) {
            return getAddress(value);
          }
          callAddress(value) {
            if (!Object(lib_esm["l" /* isHexString */])(value, 32)) {
              return null;
            }
            const address = getAddress(Object(lib_esm["e" /* hexDataSlice */])(value, 12));
            return (address === AddressZero) ? null : address;
          }
          contractAddress(value) {
            return getContractAddress(value);
          }
          // Strict! Used on input.
          blockTag(blockTag) {
            if (blockTag == null) {
              return "latest";
            }
            if (blockTag === "earliest") {
              return "0x0";
            }
            if (blockTag === "latest" || blockTag === "pending") {
              return blockTag;
            }
            if (typeof (blockTag) === "number" || Object(lib_esm["l" /* isHexString */])(blockTag)) {
              return Object(lib_esm["g" /* hexValue */])(blockTag);
            }
            throw new Error("invalid blockTag");
          }
          // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
          hash(value, strict) {
            const result = this.hex(value, strict);
            if (Object(lib_esm["d" /* hexDataLength */])(result) !== 32) {
              return formatter_logger.throwArgumentError("invalid hash", "value", value);
            }
            return result;
          }
          // Returns the difficulty as a number, or if too large (i.e. PoA network) null
          difficulty(value) {
            if (value == null) {
              return null;
            }
            const v = bignumber_BigNumber.from(value);
            try {
              return v.toNumber();
            }
            catch (error) { }
            return null;
          }
          uint256(value) {
            if (!Object(lib_esm["l" /* isHexString */])(value)) {
              throw new Error("invalid uint256");
            }
            return Object(lib_esm["h" /* hexZeroPad */])(value, 32);
          }
          _block(value, format) {
            if (value.author != null && value.miner == null) {
              value.miner = value.author;
            }
            // The difficulty may need to come from _difficulty in recursed blocks
            const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;
            const result = formatter_Formatter.check(format, value);
            result._difficulty = ((difficulty == null) ? null : bignumber_BigNumber.from(difficulty));
            return result;
          }
          block(value) {
            return this._block(value, this.formats.block);
          }
          blockWithTransactions(value) {
            return this._block(value, this.formats.blockWithTransactions);
          }
          // Strict! Used on input.
          transactionRequest(value) {
            return formatter_Formatter.check(this.formats.transactionRequest, value);
          }
          transactionResponse(transaction) {
            // Rename gas to gasLimit
            if (transaction.gas != null && transaction.gasLimit == null) {
              transaction.gasLimit = transaction.gas;
            }
            // Some clients (TestRPC) do strange things like return 0x0 for the
            // 0 address; correct this to be a real address
            if (transaction.to && bignumber_BigNumber.from(transaction.to).isZero()) {
              transaction.to = "0x0000000000000000000000000000000000000000";
            }
            // Rename input to data
            if (transaction.input != null && transaction.data == null) {
              transaction.data = transaction.input;
            }
            // If to and creates are empty, populate the creates from the transaction
            if (transaction.to == null && transaction.creates == null) {
              transaction.creates = this.contractAddress(transaction);
            }
            if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
              transaction.accessList = [];
            }
            const result = formatter_Formatter.check(this.formats.transaction, transaction);
            if (transaction.chainId != null) {
              let chainId = transaction.chainId;
              if (Object(lib_esm["l" /* isHexString */])(chainId)) {
                chainId = bignumber_BigNumber.from(chainId).toNumber();
              }
              result.chainId = chainId;
            }
            else {
              let chainId = transaction.networkId;
              // geth-etc returns chainId
              if (chainId == null && result.v == null) {
                chainId = transaction.chainId;
              }
              if (Object(lib_esm["l" /* isHexString */])(chainId)) {
                chainId = bignumber_BigNumber.from(chainId).toNumber();
              }
              if (typeof (chainId) !== "number" && result.v != null) {
                chainId = (result.v - 35) / 2;
                if (chainId < 0) {
                  chainId = 0;
                }
                chainId = parseInt(chainId);
              }
              if (typeof (chainId) !== "number") {
                chainId = 0;
              }
              result.chainId = chainId;
            }
            // 0x0000... should actually be null
            if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
              result.blockHash = null;
            }
            return result;
          }
          transaction(value) {
            return parse(value);
          }
          receiptLog(value) {
            return formatter_Formatter.check(this.formats.receiptLog, value);
          }
          receipt(value) {
            const result = formatter_Formatter.check(this.formats.receipt, value);
            // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
            if (result.root != null) {
              if (result.root.length <= 4) {
                // Could be 0x00, 0x0, 0x01 or 0x1
                const value = bignumber_BigNumber.from(result.root).toNumber();
                if (value === 0 || value === 1) {
                  // Make sure if both are specified, they match
                  if (result.status != null && (result.status !== value)) {
                    formatter_logger.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
                  }
                  result.status = value;
                  delete result.root;
                }
                else {
                  formatter_logger.throwArgumentError("invalid alt-root-status", "value.root", result.root);
                }
              }
              else if (result.root.length !== 66) {
                // Must be a valid bytes32
                formatter_logger.throwArgumentError("invalid root hash", "value.root", result.root);
              }
            }
            if (result.status != null) {
              result.byzantium = true;
            }
            return result;
          }
          topics(value) {
            if (Array.isArray(value)) {
              return value.map((v) => this.topics(v));
            }
            else if (value != null) {
              return this.hash(value, true);
            }
            return null;
          }
          filter(value) {
            return formatter_Formatter.check(this.formats.filter, value);
          }
          filterLog(value) {
            return formatter_Formatter.check(this.formats.filterLog, value);
          }
          static check(format, object) {
            const result = {};
            for (const key in format) {
              try {
                const value = format[key](object[key]);
                if (value !== undefined) {
                  result[key] = value;
                }
              }
              catch (error) {
                error.checkKey = key;
                error.checkValue = object[key];
                throw error;
              }
            }
            return result;
          }
          // if value is null-ish, nullValue is returned
          static allowNull(format, nullValue) {
            return (function (value) {
              if (value == null) {
                return nullValue;
              }
              return format(value);
            });
          }
          // If value is false-ish, replaceValue is returned
          static allowFalsish(format, replaceValue) {
            return (function (value) {
              if (!value) {
                return replaceValue;
              }
              return format(value);
            });
          }
          // Requires an Array satisfying check
          static arrayOf(format) {
            return (function (array) {
              if (!Array.isArray(array)) {
                throw new Error("not an array");
              }
              const result = [];
              array.forEach(function (value) {
                result.push(format(value));
              });
              return result;
            });
          }
        }
        function isCommunityResourcable(value) {
          return (value && typeof (value.isCommunityResource) === "function");
        }
        function isCommunityResource(value) {
          return (isCommunityResourcable(value) && value.isCommunityResource());
        }
// Show the throttle message only once
        let throttleMessage = false;
        function showThrottleMessage() {
          if (throttleMessage) {
            return;
          }
          throttleMessage = true;
          console.log("========= NOTICE =========");
          console.log("Request-Rate Exceeded  (this message will not be repeated)");
          console.log("");
          console.log("The default API keys for each service are provided as a highly-throttled,");
          console.log("community resource for low-traffic projects and early prototyping.");
          console.log("");
          console.log("While your application will continue to function, we highly recommended");
          console.log("signing up for your own API keys to improve performance, increase your");
          console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
          console.log("");
          console.log("For more details: https:/\/docs.ethers.io/api-keys/");
          console.log("==========================");
        }
//# sourceMappingURL=formatter.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/base-provider.js

        var base_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };














        const base_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);

//////////////////////////////
// Event Serializeing
        function checkTopic(topic) {
          if (topic == null) {
            return "null";
          }
          if (Object(lib_esm["d" /* hexDataLength */])(topic) !== 32) {
            base_provider_logger.throwArgumentError("invalid topic", "topic", topic);
          }
          return topic.toLowerCase();
        }
        function serializeTopics(topics) {
          // Remove trailing null AND-topics; they are redundant
          topics = topics.slice();
          while (topics.length > 0 && topics[topics.length - 1] == null) {
            topics.pop();
          }
          return topics.map((topic) => {
            if (Array.isArray(topic)) {
              // Only track unique OR-topics
              const unique = {};
              topic.forEach((topic) => {
                unique[checkTopic(topic)] = true;
              });
              // The order of OR-topics does not matter
              const sorted = Object.keys(unique);
              sorted.sort();
              return sorted.join("|");
            }
            else {
              return checkTopic(topic);
            }
          }).join("&");
        }
        function deserializeTopics(data) {
          if (data === "") {
            return [];
          }
          return data.split(/&/g).map((topic) => {
            if (topic === "") {
              return [];
            }
            const comps = topic.split("|").map((topic) => {
              return ((topic === "null") ? null : topic);
            });
            return ((comps.length === 1) ? comps[0] : comps);
          });
        }
        function base_provider_getEventTag(eventName) {
          if (typeof (eventName) === "string") {
            eventName = eventName.toLowerCase();
            if (Object(lib_esm["d" /* hexDataLength */])(eventName) === 32) {
              return "tx:" + eventName;
            }
            if (eventName.indexOf(":") === -1) {
              return eventName;
            }
          }
          else if (Array.isArray(eventName)) {
            return "filter:*:" + serializeTopics(eventName);
          }
          else if (lib_esm_ForkEvent.isForkEvent(eventName)) {
            base_provider_logger.warn("not implemented");
            throw new Error("not implemented");
          }
          else if (eventName && typeof (eventName) === "object") {
            return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
          }
          throw new Error("invalid event - " + eventName);
        }
//////////////////////////////
// Helper Object
        function getTime() {
          return (new Date()).getTime();
        }
        function stall(duration) {
          return new Promise((resolve) => {
            setTimeout(resolve, duration);
          });
        }
//////////////////////////////
// Provider Object
        /**
         *  EventType
         *   - "block"
         *   - "poll"
         *   - "didPoll"
         *   - "pending"
         *   - "error"
         *   - "network"
         *   - filter
         *   - topics array
         *   - transaction hash
         */
        const PollableEvents = ["block", "network", "pending", "poll"];
        class base_provider_Event {
          constructor(tag, listener, once) {
            defineReadOnly(this, "tag", tag);
            defineReadOnly(this, "listener", listener);
            defineReadOnly(this, "once", once);
          }
          get event() {
            switch (this.type) {
              case "tx":
                return this.hash;
              case "filter":
                return this.filter;
            }
            return this.tag;
          }
          get type() {
            return this.tag.split(":")[0];
          }
          get hash() {
            const comps = this.tag.split(":");
            if (comps[0] !== "tx") {
              return null;
            }
            return comps[1];
          }
          get filter() {
            const comps = this.tag.split(":");
            if (comps[0] !== "filter") {
              return null;
            }
            const address = comps[1];
            const topics = deserializeTopics(comps[2]);
            const filter = {};
            if (topics.length > 0) {
              filter.topics = topics;
            }
            if (address && address !== "*") {
              filter.address = address;
            }
            return filter;
          }
          pollable() {
            return (this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0);
          }
        }
        ;
// https://github.com/satoshilabs/slips/blob/master/slip-0044.md
        const coinInfos = {
          "0": { symbol: "btc", p2pkh: 0x00, p2sh: 0x05, prefix: "bc" },
          "2": { symbol: "ltc", p2pkh: 0x30, p2sh: 0x32, prefix: "ltc" },
          "3": { symbol: "doge", p2pkh: 0x1e, p2sh: 0x16 },
          "60": { symbol: "eth", ilk: "eth" },
          "61": { symbol: "etc", ilk: "eth" },
          "700": { symbol: "xdai", ilk: "eth" },
        };
        function bytes32ify(value) {
          return Object(lib_esm["h" /* hexZeroPad */])(bignumber_BigNumber.from(value).toHexString(), 32);
        }
// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
        function base58Encode(data) {
          return Base58.encode(Object(lib_esm["b" /* concat */])([data, Object(lib_esm["e" /* hexDataSlice */])(sha256(sha256(data)), 0, 4)]));
        }
        const matchers = [
          new RegExp("^(https):/\/(.*)$", "i"),
          new RegExp("^(data):(.*)$", "i"),
          new RegExp("^(ipfs):/\/(.*)$", "i"),
          new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
        ];
        function _parseString(result) {
          try {
            return toUtf8String(_parseBytes(result));
          }
          catch (error) { }
          return null;
        }
        function _parseBytes(result) {
          if (result === "0x") {
            return null;
          }
          const offset = bignumber_BigNumber.from(Object(lib_esm["e" /* hexDataSlice */])(result, 0, 32)).toNumber();
          const length = bignumber_BigNumber.from(Object(lib_esm["e" /* hexDataSlice */])(result, offset, offset + 32)).toNumber();
          return Object(lib_esm["e" /* hexDataSlice */])(result, offset + 32, offset + 32 + length);
        }
        class base_provider_Resolver {
          // The resolvedAddress is only for creating a ReverseLookup resolver
          constructor(provider, address, name, resolvedAddress) {
            defineReadOnly(this, "provider", provider);
            defineReadOnly(this, "name", name);
            defineReadOnly(this, "address", provider.formatter.address(address));
            defineReadOnly(this, "_resolvedAddress", resolvedAddress);
          }
          _fetchBytes(selector, parameters) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              // e.g. keccak256("addr(bytes32,uint256)")
              const tx = {
                to: this.address,
                data: Object(lib_esm["c" /* hexConcat */])([selector, namehash(this.name), (parameters || "0x")])
              };
              try {
                return _parseBytes(yield this.provider.call(tx));
              }
              catch (error) {
                if (error.code === logger_lib_esm["b" /* Logger */].errors.CALL_EXCEPTION) {
                  return null;
                }
                return null;
              }
            });
          }
          _getAddress(coinType, hexBytes) {
            const coinInfo = coinInfos[String(coinType)];
            if (coinInfo == null) {
              base_provider_logger.throwError(`unsupported coin type: ${coinType}`, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: `getAddress(${coinType})`
              });
            }
            if (coinInfo.ilk === "eth") {
              return this.provider.formatter.address(hexBytes);
            }
            const bytes = Object(lib_esm["a" /* arrayify */])(hexBytes);
            // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
            if (coinInfo.p2pkh != null) {
              const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
              if (p2pkh) {
                const length = parseInt(p2pkh[1], 16);
                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
                  return base58Encode(Object(lib_esm["b" /* concat */])([[coinInfo.p2pkh], ("0x" + p2pkh[2])]));
                }
              }
            }
            // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
            if (coinInfo.p2sh != null) {
              const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
              if (p2sh) {
                const length = parseInt(p2sh[1], 16);
                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
                  return base58Encode(Object(lib_esm["b" /* concat */])([[coinInfo.p2sh], ("0x" + p2sh[2])]));
                }
              }
            }
            // Bech32
            if (coinInfo.prefix != null) {
              const length = bytes[1];
              // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
              let version = bytes[0];
              if (version === 0x00) {
                if (length !== 20 && length !== 32) {
                  version = -1;
                }
              }
              else {
                version = -1;
              }
              if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
                const words = bech32_default.a.toWords(bytes.slice(2));
                words.unshift(version);
                return bech32_default.a.encode(coinInfo.prefix, words);
              }
            }
            return null;
          }
          getAddress(coinType) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              if (coinType == null) {
                coinType = 60;
              }
              // If Ethereum, use the standard `addr(bytes32)`
              if (coinType === 60) {
                try {
                  // keccak256("addr(bytes32)")
                  const transaction = {
                    to: this.address,
                    data: ("0x3b3b57de" + namehash(this.name).substring(2))
                  };
                  const hexBytes = yield this.provider.call(transaction);
                  // No address
                  if (hexBytes === "0x" || hexBytes === HashZero) {
                    return null;
                  }
                  return this.provider.formatter.callAddress(hexBytes);
                }
                catch (error) {
                  if (error.code === logger_lib_esm["b" /* Logger */].errors.CALL_EXCEPTION) {
                    return null;
                  }
                  throw error;
                }
              }
              // keccak256("addr(bytes32,uint256")
              const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
              // No address
              if (hexBytes == null || hexBytes === "0x") {
                return null;
              }
              // Compute the address
              const address = this._getAddress(coinType, hexBytes);
              if (address == null) {
                base_provider_logger.throwError(`invalid or unsupported coin data`, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                  operation: `getAddress(${coinType})`,
                  coinType: coinType,
                  data: hexBytes
                });
              }
              return address;
            });
          }
          getAvatar() {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              const linkage = [];
              try {
                // test data for ricmoo.eth
                //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
                const avatar = yield this.getText("avatar");
                if (avatar == null) {
                  return null;
                }
                for (let i = 0; i < matchers.length; i++) {
                  const match = avatar.match(matchers[i]);
                  if (match == null) {
                    continue;
                  }
                  switch (match[1]) {
                    case "https":
                      linkage.push({ type: "url", content: avatar });
                      return { linkage, url: avatar };
                    case "data":
                      linkage.push({ type: "data", content: avatar });
                      return { linkage, url: avatar };
                    case "ipfs":
                      linkage.push({ type: "ipfs", content: avatar });
                      return { linkage, url: `https:/\/gateway.ipfs.io/ipfs/${avatar.substring(7)}` };
                    case "erc721":
                    case "erc1155": {
                      // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                      const selector = (match[1] === "erc721") ? "0xc87b56dd" : "0x0e89341c";
                      linkage.push({ type: match[1], content: avatar });
                      // The owner of this name
                      const owner = (this._resolvedAddress || (yield this.getAddress()));
                      const comps = (match[2] || "").split("/");
                      if (comps.length !== 2) {
                        return null;
                      }
                      const addr = yield this.provider.formatter.address(comps[0]);
                      const tokenId = Object(lib_esm["h" /* hexZeroPad */])(bignumber_BigNumber.from(comps[1]).toHexString(), 32);
                      // Check that this account owns the token
                      if (match[1] === "erc721") {
                        // ownerOf(uint256 tokenId)
                        const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                          to: addr, data: Object(lib_esm["c" /* hexConcat */])(["0x6352211e", tokenId])
                        }));
                        if (owner !== tokenOwner) {
                          return null;
                        }
                        linkage.push({ type: "owner", content: tokenOwner });
                      }
                      else if (match[1] === "erc1155") {
                        // balanceOf(address owner, uint256 tokenId)
                        const balance = bignumber_BigNumber.from(yield this.provider.call({
                          to: addr, data: Object(lib_esm["c" /* hexConcat */])(["0x00fdd58e", Object(lib_esm["h" /* hexZeroPad */])(owner, 32), tokenId])
                        }));
                        if (balance.isZero()) {
                          return null;
                        }
                        linkage.push({ type: "balance", content: balance.toString() });
                      }
                      // Call the token contract for the metadata URL
                      const tx = {
                        to: this.provider.formatter.address(comps[0]),
                        data: Object(lib_esm["c" /* hexConcat */])([selector, tokenId])
                      };
                      let metadataUrl = _parseString(yield this.provider.call(tx));
                      if (metadataUrl == null) {
                        return null;
                      }
                      linkage.push({ type: "metadata-url", content: metadataUrl });
                      // ERC-1155 allows a generic {id} in the URL
                      if (match[1] === "erc1155") {
                        metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                      }
                      // Get the token metadata
                      const metadata = yield fetchJson(metadataUrl);
                      // Pull the image URL out
                      if (!metadata || typeof (metadata.image) !== "string" || !metadata.image.match(/^(https:\/\/|data:)/i)) {
                        return null;
                      }
                      linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                      linkage.push({ type: "url", content: metadata.image });
                      return { linkage, url: metadata.image };
                    }
                  }
                }
              }
              catch (error) { }
              return null;
            });
          }
          getContentHash() {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              // keccak256("contenthash()")
              const hexBytes = yield this._fetchBytes("0xbc1c58d1");
              // No contenthash
              if (hexBytes == null || hexBytes === "0x") {
                return null;
              }
              // IPFS (CID: 1, Type: DAG-PB)
              const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
              if (ipfs) {
                const length = parseInt(ipfs[3], 16);
                if (ipfs[4].length === length * 2) {
                  return "ipfs:/\/" + Base58.encode("0x" + ipfs[1]);
                }
              }
              // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
              const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
              if (swarm) {
                if (swarm[1].length === (32 * 2)) {
                  return "bzz:/\/" + swarm[1];
                }
              }
              return base_provider_logger.throwError(`invalid or unsupported content hash data`, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "getContentHash()",
                data: hexBytes
              });
            });
          }
          getText(key) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              // The key encoded as parameter to fetchBytes
              let keyBytes = toUtf8Bytes(key);
              // The nodehash consumes the first slot, so the string pointer targets
              // offset 64, with the length at offset 64 and data starting at offset 96
              keyBytes = Object(lib_esm["b" /* concat */])([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
              // Pad to word-size (32 bytes)
              if ((keyBytes.length % 32) !== 0) {
                keyBytes = Object(lib_esm["b" /* concat */])([keyBytes, Object(lib_esm["h" /* hexZeroPad */])("0x", 32 - (key.length % 32))]);
              }
              const hexBytes = yield this._fetchBytes("0x59d1d43c", Object(lib_esm["i" /* hexlify */])(keyBytes));
              if (hexBytes == null || hexBytes === "0x") {
                return null;
              }
              return toUtf8String(hexBytes);
            });
          }
        }
        let defaultFormatter = null;
        let nextPollId = 1;
        class base_provider_BaseProvider extends lib_esm_Provider {
          /**
           *  ready
           *
           *  A Promise<Network> that resolves only once the provider is ready.
           *
           *  Sub-classes that call the super with a network without a chainId
           *  MUST set this. Standard named networks have a known chainId.
           *
           */
          constructor(network) {
            base_provider_logger.checkNew(new.target, lib_esm_Provider);
            super();
            // Events being listened to
            this._events = [];
            this._emitted = { block: -2 };
            this.formatter = new.target.getFormatter();
            // If network is any, this Provider allows the underlying
            // network to change dynamically, and we auto-detect the
            // current network
            defineReadOnly(this, "anyNetwork", (network === "any"));
            if (this.anyNetwork) {
              network = this.detectNetwork();
            }
            if (network instanceof Promise) {
              this._networkPromise = network;
              // Squash any "unhandled promise" errors; that do not need to be handled
              network.catch((error) => { });
              // Trigger initial network setting (async)
              this._ready().catch((error) => { });
            }
            else {
              const knownNetwork = getStatic(new.target, "getNetwork")(network);
              if (knownNetwork) {
                defineReadOnly(this, "_network", knownNetwork);
                this.emit("network", knownNetwork, null);
              }
              else {
                base_provider_logger.throwArgumentError("invalid network", "network", network);
              }
            }
            this._maxInternalBlockNumber = -1024;
            this._lastBlockNumber = -2;
            this._pollingInterval = 4000;
            this._fastQueryDate = 0;
          }
          _ready() {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              if (this._network == null) {
                let network = null;
                if (this._networkPromise) {
                  try {
                    network = yield this._networkPromise;
                  }
                  catch (error) { }
                }
                // Try the Provider's network detection (this MUST throw if it cannot)
                if (network == null) {
                  network = yield this.detectNetwork();
                }
                // This should never happen; every Provider sub-class should have
                // suggested a network by here (or have thrown).
                if (!network) {
                  base_provider_logger.throwError("no network detected", logger_lib_esm["b" /* Logger */].errors.UNKNOWN_ERROR, {});
                }
                // Possible this call stacked so do not call defineReadOnly again
                if (this._network == null) {
                  if (this.anyNetwork) {
                    this._network = network;
                  }
                  else {
                    defineReadOnly(this, "_network", network);
                  }
                  this.emit("network", network, null);
                }
              }
              return this._network;
            });
          }
          // This will always return the most recently established network.
          // For "any", this can change (a "network" event is emitted before
          // any change is reflected); otherwise this cannot change
          get ready() {
            return poll(() => {
              return this._ready().then((network) => {
                return network;
              }, (error) => {
                // If the network isn't running yet, we will wait
                if (error.code === logger_lib_esm["b" /* Logger */].errors.NETWORK_ERROR && error.event === "noNetwork") {
                  return undefined;
                }
                throw error;
              });
            });
          }
          // @TODO: Remove this and just create a singleton formatter
          static getFormatter() {
            if (defaultFormatter == null) {
              defaultFormatter = new formatter_Formatter();
            }
            return defaultFormatter;
          }
          // @TODO: Remove this and just use getNetwork
          static getNetwork(network) {
            return lib_esm_getNetwork((network == null) ? "homestead" : network);
          }
          // Fetches the blockNumber, but will reuse any result that is less
          // than maxAge old or has been requested since the last request
          _getInternalBlockNumber(maxAge) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this._ready();
              // Allowing stale data up to maxAge old
              if (maxAge > 0) {
                // While there are pending internal block requests...
                while (this._internalBlockNumber) {
                  // ..."remember" which fetch we started with
                  const internalBlockNumber = this._internalBlockNumber;
                  try {
                    // Check the result is not too stale
                    const result = yield internalBlockNumber;
                    if ((getTime() - result.respTime) <= maxAge) {
                      return result.blockNumber;
                    }
                    // Too old; fetch a new value
                    break;
                  }
                  catch (error) {
                    // The fetch rejected; if we are the first to get the
                    // rejection, drop through so we replace it with a new
                    // fetch; all others blocked will then get that fetch
                    // which won't match the one they "remembered" and loop
                    if (this._internalBlockNumber === internalBlockNumber) {
                      break;
                    }
                  }
                }
              }
              const reqTime = getTime();
              const checkInternalBlockNumber = resolveProperties({
                blockNumber: this.perform("getBlockNumber", {}),
                networkError: this.getNetwork().then((network) => (null), (error) => (error))
              }).then(({ blockNumber, networkError }) => {
                if (networkError) {
                  // Unremember this bad internal block number
                  if (this._internalBlockNumber === checkInternalBlockNumber) {
                    this._internalBlockNumber = null;
                  }
                  throw networkError;
                }
                const respTime = getTime();
                blockNumber = bignumber_BigNumber.from(blockNumber).toNumber();
                if (blockNumber < this._maxInternalBlockNumber) {
                  blockNumber = this._maxInternalBlockNumber;
                }
                this._maxInternalBlockNumber = blockNumber;
                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                return { blockNumber, reqTime, respTime };
              });
              this._internalBlockNumber = checkInternalBlockNumber;
              // Swallow unhandled exceptions; if needed they are handled else where
              checkInternalBlockNumber.catch((error) => {
                // Don't null the dead (rejected) fetch, if it has already been updated
                if (this._internalBlockNumber === checkInternalBlockNumber) {
                  this._internalBlockNumber = null;
                }
              });
              return (yield checkInternalBlockNumber).blockNumber;
            });
          }
          poll() {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              const pollId = nextPollId++;
              // Track all running promises, so we can trigger a post-poll once they are complete
              const runners = [];
              let blockNumber = null;
              try {
                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
              }
              catch (error) {
                this.emit("error", error);
                return;
              }
              this._setFastBlockNumber(blockNumber);
              // Emit a poll event after we have the latest (fast) block number
              this.emit("poll", pollId, blockNumber);
              // If the block has not changed, meh.
              if (blockNumber === this._lastBlockNumber) {
                this.emit("didPoll", pollId);
                return;
              }
              // First polling cycle, trigger a "block" events
              if (this._emitted.block === -2) {
                this._emitted.block = blockNumber - 1;
              }
              if (Math.abs((this._emitted.block) - blockNumber) > 1000) {
                base_provider_logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
                this.emit("error", base_provider_logger.makeError("network block skew detected", logger_lib_esm["b" /* Logger */].errors.NETWORK_ERROR, {
                  blockNumber: blockNumber,
                  event: "blockSkew",
                  previousBlockNumber: this._emitted.block
                }));
                this.emit("block", blockNumber);
              }
              else {
                // Notify all listener for each block that has passed
                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
                  this.emit("block", i);
                }
              }
              // The emitted block was updated, check for obsolete events
              if (this._emitted.block !== blockNumber) {
                this._emitted.block = blockNumber;
                Object.keys(this._emitted).forEach((key) => {
                  // The block event does not expire
                  if (key === "block") {
                    return;
                  }
                  // The block we were at when we emitted this event
                  const eventBlockNumber = this._emitted[key];
                  // We cannot garbage collect pending transactions or blocks here
                  // They should be garbage collected by the Provider when setting
                  // "pending" events
                  if (eventBlockNumber === "pending") {
                    return;
                  }
                  // Evict any transaction hashes or block hashes over 12 blocks
                  // old, since they should not return null anyways
                  if (blockNumber - eventBlockNumber > 12) {
                    delete this._emitted[key];
                  }
                });
              }
              // First polling cycle
              if (this._lastBlockNumber === -2) {
                this._lastBlockNumber = blockNumber - 1;
              }
              // Find all transaction hashes we are waiting on
              this._events.forEach((event) => {
                switch (event.type) {
                  case "tx": {
                    const hash = event.hash;
                    let runner = this.getTransactionReceipt(hash).then((receipt) => {
                      if (!receipt || receipt.blockNumber == null) {
                        return null;
                      }
                      this._emitted["t:" + hash] = receipt.blockNumber;
                      this.emit(hash, receipt);
                      return null;
                    }).catch((error) => { this.emit("error", error); });
                    runners.push(runner);
                    break;
                  }
                  case "filter": {
                    const filter = event.filter;
                    filter.fromBlock = this._lastBlockNumber + 1;
                    filter.toBlock = blockNumber;
                    const runner = this.getLogs(filter).then((logs) => {
                      if (logs.length === 0) {
                        return;
                      }
                      logs.forEach((log) => {
                        this._emitted["b:" + log.blockHash] = log.blockNumber;
                        this._emitted["t:" + log.transactionHash] = log.blockNumber;
                        this.emit(filter, log);
                      });
                    }).catch((error) => { this.emit("error", error); });
                    runners.push(runner);
                    break;
                  }
                }
              });
              this._lastBlockNumber = blockNumber;
              // Once all events for this loop have been processed, emit "didPoll"
              Promise.all(runners).then(() => {
                this.emit("didPoll", pollId);
              }).catch((error) => { this.emit("error", error); });
              return;
            });
          }
          // Deprecated; do not use this
          resetEventsBlock(blockNumber) {
            this._lastBlockNumber = blockNumber - 1;
            if (this.polling) {
              this.poll();
            }
          }
          get network() {
            return this._network;
          }
          // This method should query the network if the underlying network
          // can change, such as when connected to a JSON-RPC backend
          detectNetwork() {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              return base_provider_logger.throwError("provider does not support network detection", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "provider.detectNetwork"
              });
            });
          }
          getNetwork() {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              const network = yield this._ready();
              // Make sure we are still connected to the same network; this is
              // only an external call for backends which can have the underlying
              // network change spontaneously
              const currentNetwork = yield this.detectNetwork();
              if (network.chainId !== currentNetwork.chainId) {
                // We are allowing network changes, things can get complex fast;
                // make sure you know what you are doing if you use "any"
                if (this.anyNetwork) {
                  this._network = currentNetwork;
                  // Reset all internal block number guards and caches
                  this._lastBlockNumber = -2;
                  this._fastBlockNumber = null;
                  this._fastBlockNumberPromise = null;
                  this._fastQueryDate = 0;
                  this._emitted.block = -2;
                  this._maxInternalBlockNumber = -1024;
                  this._internalBlockNumber = null;
                  // The "network" event MUST happen before this method resolves
                  // so any events have a chance to unregister, so we stall an
                  // additional event loop before returning from /this/ call
                  this.emit("network", currentNetwork, network);
                  yield stall(0);
                  return this._network;
                }
                const error = base_provider_logger.makeError("underlying network changed", logger_lib_esm["b" /* Logger */].errors.NETWORK_ERROR, {
                  event: "changed",
                  network: network,
                  detectedNetwork: currentNetwork
                });
                this.emit("error", error);
                throw error;
              }
              return network;
            });
          }
          get blockNumber() {
            this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
              this._setFastBlockNumber(blockNumber);
            }, (error) => { });
            return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;
          }
          get polling() {
            return (this._poller != null);
          }
          set polling(value) {
            if (value && !this._poller) {
              this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);
              if (!this._bootstrapPoll) {
                this._bootstrapPoll = setTimeout(() => {
                  this.poll();
                  // We block additional polls until the polling interval
                  // is done, to prevent overwhelming the poll function
                  this._bootstrapPoll = setTimeout(() => {
                    // If polling was disabled, something may require a poke
                    // since starting the bootstrap poll and it was disabled
                    if (!this._poller) {
                      this.poll();
                    }
                    // Clear out the bootstrap so we can do another
                    this._bootstrapPoll = null;
                  }, this.pollingInterval);
                }, 0);
              }
            }
            else if (!value && this._poller) {
              clearInterval(this._poller);
              this._poller = null;
            }
          }
          get pollingInterval() {
            return this._pollingInterval;
          }
          set pollingInterval(value) {
            if (typeof (value) !== "number" || value <= 0 || parseInt(String(value)) != value) {
              throw new Error("invalid polling interval");
            }
            this._pollingInterval = value;
            if (this._poller) {
              clearInterval(this._poller);
              this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);
            }
          }
          _getFastBlockNumber() {
            const now = getTime();
            // Stale block number, request a newer value
            if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
              this._fastQueryDate = now;
              this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                  this._fastBlockNumber = blockNumber;
                }
                return this._fastBlockNumber;
              });
            }
            return this._fastBlockNumberPromise;
          }
          _setFastBlockNumber(blockNumber) {
            // Older block, maybe a stale request
            if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
              return;
            }
            // Update the time we updated the blocknumber
            this._fastQueryDate = getTime();
            // Newer block number, use  it
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
              this._fastBlockNumber = blockNumber;
              this._fastBlockNumberPromise = Promise.resolve(blockNumber);
            }
          }
          waitForTransaction(transactionHash, confirmations, timeout) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);
            });
          }
          _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              const receipt = yield this.getTransactionReceipt(transactionHash);
              // Receipt is already good
              if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                return receipt;
              }
              // Poll until the receipt is good...
              return new Promise((resolve, reject) => {
                const cancelFuncs = [];
                let done = false;
                const alreadyDone = function () {
                  if (done) {
                    return true;
                  }
                  done = true;
                  cancelFuncs.forEach((func) => { func(); });
                  return false;
                };
                const minedHandler = (receipt) => {
                  if (receipt.confirmations < confirmations) {
                    return;
                  }
                  if (alreadyDone()) {
                    return;
                  }
                  resolve(receipt);
                };
                this.on(transactionHash, minedHandler);
                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });
                if (replaceable) {
                  let lastBlockNumber = replaceable.startBlock;
                  let scannedBlock = null;
                  const replaceHandler = (blockNumber) => base_provider_awaiter(this, void 0, void 0, function* () {
                    if (done) {
                      return;
                    }
                    // Wait 1 second; this is only used in the case of a fault, so
                    // we will trade off a little bit of latency for more consistent
                    // results and fewer JSON-RPC calls
                    yield stall(1000);
                    this.getTransactionCount(replaceable.from).then((nonce) => base_provider_awaiter(this, void 0, void 0, function* () {
                      if (done) {
                        return;
                      }
                      if (nonce <= replaceable.nonce) {
                        lastBlockNumber = blockNumber;
                      }
                      else {
                        // First check if the transaction was mined
                        {
                          const mined = yield this.getTransaction(transactionHash);
                          if (mined && mined.blockNumber != null) {
                            return;
                          }
                        }
                        // First time scanning. We start a little earlier for some
                        // wiggle room here to handle the eventually consistent nature
                        // of blockchain (e.g. the getTransactionCount was for a
                        // different block)
                        if (scannedBlock == null) {
                          scannedBlock = lastBlockNumber - 3;
                          if (scannedBlock < replaceable.startBlock) {
                            scannedBlock = replaceable.startBlock;
                          }
                        }
                        while (scannedBlock <= blockNumber) {
                          if (done) {
                            return;
                          }
                          const block = yield this.getBlockWithTransactions(scannedBlock);
                          for (let ti = 0; ti < block.transactions.length; ti++) {
                            const tx = block.transactions[ti];
                            // Successfully mined!
                            if (tx.hash === transactionHash) {
                              return;
                            }
                            // Matches our transaction from and nonce; its a replacement
                            if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                              if (done) {
                                return;
                              }
                              // Get the receipt of the replacement
                              const receipt = yield this.waitForTransaction(tx.hash, confirmations);
                              // Already resolved or rejected (prolly a timeout)
                              if (alreadyDone()) {
                                return;
                              }
                              // The reason we were replaced
                              let reason = "replaced";
                              if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                reason = "repriced";
                              }
                              else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                reason = "cancelled";
                              }
                              // Explain why we were replaced
                              reject(base_provider_logger.makeError("transaction was replaced", logger_lib_esm["b" /* Logger */].errors.TRANSACTION_REPLACED, {
                                cancelled: (reason === "replaced" || reason === "cancelled"),
                                reason,
                                replacement: this._wrapTransaction(tx),
                                hash: transactionHash,
                                receipt
                              }));
                              return;
                            }
                          }
                          scannedBlock++;
                        }
                      }
                      if (done) {
                        return;
                      }
                      this.once("block", replaceHandler);
                    }), (error) => {
                      if (done) {
                        return;
                      }
                      this.once("block", replaceHandler);
                    });
                  });
                  if (done) {
                    return;
                  }
                  this.once("block", replaceHandler);
                  cancelFuncs.push(() => {
                    this.removeListener("block", replaceHandler);
                  });
                }
                if (typeof (timeout) === "number" && timeout > 0) {
                  const timer = setTimeout(() => {
                    if (alreadyDone()) {
                      return;
                    }
                    reject(base_provider_logger.makeError("timeout exceeded", logger_lib_esm["b" /* Logger */].errors.TIMEOUT, { timeout: timeout }));
                  }, timeout);
                  if (timer.unref) {
                    timer.unref();
                  }
                  cancelFuncs.push(() => { clearTimeout(timer); });
                }
              });
            });
          }
          getBlockNumber() {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              return this._getInternalBlockNumber(0);
            });
          }
          getGasPrice() {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              const result = yield this.perform("getGasPrice", {});
              try {
                return bignumber_BigNumber.from(result);
              }
              catch (error) {
                return base_provider_logger.throwError("bad result from backend", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                  method: "getGasPrice",
                  result, error
                });
              }
            });
          }
          getBalance(addressOrName, blockTag) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              const params = yield resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
              });
              const result = yield this.perform("getBalance", params);
              try {
                return bignumber_BigNumber.from(result);
              }
              catch (error) {
                return base_provider_logger.throwError("bad result from backend", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                  method: "getBalance",
                  params, result, error
                });
              }
            });
          }
          getTransactionCount(addressOrName, blockTag) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              const params = yield resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
              });
              const result = yield this.perform("getTransactionCount", params);
              try {
                return bignumber_BigNumber.from(result).toNumber();
              }
              catch (error) {
                return base_provider_logger.throwError("bad result from backend", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                  method: "getTransactionCount",
                  params, result, error
                });
              }
            });
          }
          getCode(addressOrName, blockTag) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              const params = yield resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag)
              });
              const result = yield this.perform("getCode", params);
              try {
                return Object(lib_esm["i" /* hexlify */])(result);
              }
              catch (error) {
                return base_provider_logger.throwError("bad result from backend", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                  method: "getCode",
                  params, result, error
                });
              }
            });
          }
          getStorageAt(addressOrName, position, blockTag) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              const params = yield resolveProperties({
                address: this._getAddress(addressOrName),
                blockTag: this._getBlockTag(blockTag),
                position: Promise.resolve(position).then((p) => Object(lib_esm["g" /* hexValue */])(p))
              });
              const result = yield this.perform("getStorageAt", params);
              try {
                return Object(lib_esm["i" /* hexlify */])(result);
              }
              catch (error) {
                return base_provider_logger.throwError("bad result from backend", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                  method: "getStorageAt",
                  params, result, error
                });
              }
            });
          }
          // This should be called by any subclass wrapping a TransactionResponse
          _wrapTransaction(tx, hash, startBlock) {
            if (hash != null && Object(lib_esm["d" /* hexDataLength */])(hash) !== 32) {
              throw new Error("invalid response - sendTransaction");
            }
            const result = tx;
            // Check the hash we expect is the same as the hash the server reported
            if (hash != null && tx.hash !== hash) {
              base_provider_logger.throwError("Transaction hash mismatch from Provider.sendTransaction.", logger_lib_esm["b" /* Logger */].errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
            }
            result.wait = (confirms, timeout) => base_provider_awaiter(this, void 0, void 0, function* () {
              if (confirms == null) {
                confirms = 1;
              }
              if (timeout == null) {
                timeout = 0;
              }
              // Get the details to detect replacement
              let replacement = undefined;
              if (confirms !== 0 && startBlock != null) {
                replacement = {
                  data: tx.data,
                  from: tx.from,
                  nonce: tx.nonce,
                  to: tx.to,
                  value: tx.value,
                  startBlock
                };
              }
              const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
              if (receipt == null && confirms === 0) {
                return null;
              }
              // No longer pending, allow the polling loop to garbage collect this
              this._emitted["t:" + tx.hash] = receipt.blockNumber;
              if (receipt.status === 0) {
                base_provider_logger.throwError("transaction failed", logger_lib_esm["b" /* Logger */].errors.CALL_EXCEPTION, {
                  transactionHash: tx.hash,
                  transaction: tx,
                  receipt: receipt
                });
              }
              return receipt;
            });
            return result;
          }
          sendTransaction(signedTransaction) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              const hexTx = yield Promise.resolve(signedTransaction).then(t => Object(lib_esm["i" /* hexlify */])(t));
              const tx = this.formatter.transaction(signedTransaction);
              if (tx.confirmations == null) {
                tx.confirmations = 0;
              }
              const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              try {
                const hash = yield this.perform("sendTransaction", { signedTransaction: hexTx });
                return this._wrapTransaction(tx, hash, blockNumber);
              }
              catch (error) {
                error.transaction = tx;
                error.transactionHash = tx.hash;
                throw error;
              }
            });
          }
          _getTransactionRequest(transaction) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              const values = yield transaction;
              const tx = {};
              ["from", "to"].forEach((key) => {
                if (values[key] == null) {
                  return;
                }
                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));
              });
              ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key) => {
                if (values[key] == null) {
                  return;
                }
                tx[key] = Promise.resolve(values[key]).then((v) => (v ? bignumber_BigNumber.from(v) : null));
              });
              ["type"].forEach((key) => {
                if (values[key] == null) {
                  return;
                }
                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));
              });
              if (values.accessList) {
                tx.accessList = this.formatter.accessList(values.accessList);
              }
              ["data"].forEach((key) => {
                if (values[key] == null) {
                  return;
                }
                tx[key] = Promise.resolve(values[key]).then((v) => (v ? Object(lib_esm["i" /* hexlify */])(v) : null));
              });
              return this.formatter.transactionRequest(yield resolveProperties(tx));
            });
          }
          _getFilter(filter) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              filter = yield filter;
              const result = {};
              if (filter.address != null) {
                result.address = this._getAddress(filter.address);
              }
              ["blockHash", "topics"].forEach((key) => {
                if (filter[key] == null) {
                  return;
                }
                result[key] = filter[key];
              });
              ["fromBlock", "toBlock"].forEach((key) => {
                if (filter[key] == null) {
                  return;
                }
                result[key] = this._getBlockTag(filter[key]);
              });
              return this.formatter.filter(yield resolveProperties(result));
            });
          }
          call(transaction, blockTag) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              const params = yield resolveProperties({
                transaction: this._getTransactionRequest(transaction),
                blockTag: this._getBlockTag(blockTag)
              });
              const result = yield this.perform("call", params);
              try {
                return Object(lib_esm["i" /* hexlify */])(result);
              }
              catch (error) {
                return base_provider_logger.throwError("bad result from backend", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                  method: "call",
                  params, result, error
                });
              }
            });
          }
          estimateGas(transaction) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              const params = yield resolveProperties({
                transaction: this._getTransactionRequest(transaction)
              });
              const result = yield this.perform("estimateGas", params);
              try {
                return bignumber_BigNumber.from(result);
              }
              catch (error) {
                return base_provider_logger.throwError("bad result from backend", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                  method: "estimateGas",
                  params, result, error
                });
              }
            });
          }
          _getAddress(addressOrName) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              addressOrName = yield addressOrName;
              if (typeof (addressOrName) !== "string") {
                base_provider_logger.throwArgumentError("invalid address or ENS name", "name", addressOrName);
              }
              const address = yield this.resolveName(addressOrName);
              if (address == null) {
                base_provider_logger.throwError("ENS name not configured", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                  operation: `resolveName(${JSON.stringify(addressOrName)})`
                });
              }
              return address;
            });
          }
          _getBlock(blockHashOrBlockTag, includeTransactions) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              blockHashOrBlockTag = yield blockHashOrBlockTag;
              // If blockTag is a number (not "latest", etc), this is the block number
              let blockNumber = -128;
              const params = {
                includeTransactions: !!includeTransactions
              };
              if (Object(lib_esm["l" /* isHexString */])(blockHashOrBlockTag, 32)) {
                params.blockHash = blockHashOrBlockTag;
              }
              else {
                try {
                  params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
                  if (Object(lib_esm["l" /* isHexString */])(params.blockTag)) {
                    blockNumber = parseInt(params.blockTag.substring(2), 16);
                  }
                }
                catch (error) {
                  base_provider_logger.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                }
              }
              return poll(() => base_provider_awaiter(this, void 0, void 0, function* () {
                const block = yield this.perform("getBlock", params);
                // Block was not found
                if (block == null) {
                  // For blockhashes, if we didn't say it existed, that blockhash may
                  // not exist. If we did see it though, perhaps from a log, we know
                  // it exists, and this node is just not caught up yet.
                  if (params.blockHash != null) {
                    if (this._emitted["b:" + params.blockHash] == null) {
                      return null;
                    }
                  }
                  // For block tags, if we are asking for a future block, we return null
                  if (params.blockTag != null) {
                    if (blockNumber > this._emitted.block) {
                      return null;
                    }
                  }
                  // Retry on the next block
                  return undefined;
                }
                // Add transactions
                if (includeTransactions) {
                  let blockNumber = null;
                  for (let i = 0; i < block.transactions.length; i++) {
                    const tx = block.transactions[i];
                    if (tx.blockNumber == null) {
                      tx.confirmations = 0;
                    }
                    else if (tx.confirmations == null) {
                      if (blockNumber == null) {
                        blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                      }
                      // Add the confirmations using the fast block number (pessimistic)
                      let confirmations = (blockNumber - tx.blockNumber) + 1;
                      if (confirmations <= 0) {
                        confirmations = 1;
                      }
                      tx.confirmations = confirmations;
                    }
                  }
                  const blockWithTxs = this.formatter.blockWithTransactions(block);
                  blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
                  return blockWithTxs;
                }
                return this.formatter.block(block);
              }), { oncePoll: this });
            });
          }
          getBlock(blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, false));
          }
          getBlockWithTransactions(blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, true));
          }
          getTransaction(transactionHash) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              transactionHash = yield transactionHash;
              const params = { transactionHash: this.formatter.hash(transactionHash, true) };
              return poll(() => base_provider_awaiter(this, void 0, void 0, function* () {
                const result = yield this.perform("getTransaction", params);
                if (result == null) {
                  if (this._emitted["t:" + transactionHash] == null) {
                    return null;
                  }
                  return undefined;
                }
                const tx = this.formatter.transactionResponse(result);
                if (tx.blockNumber == null) {
                  tx.confirmations = 0;
                }
                else if (tx.confirmations == null) {
                  const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                  // Add the confirmations using the fast block number (pessimistic)
                  let confirmations = (blockNumber - tx.blockNumber) + 1;
                  if (confirmations <= 0) {
                    confirmations = 1;
                  }
                  tx.confirmations = confirmations;
                }
                return this._wrapTransaction(tx);
              }), { oncePoll: this });
            });
          }
          getTransactionReceipt(transactionHash) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              transactionHash = yield transactionHash;
              const params = { transactionHash: this.formatter.hash(transactionHash, true) };
              return poll(() => base_provider_awaiter(this, void 0, void 0, function* () {
                const result = yield this.perform("getTransactionReceipt", params);
                if (result == null) {
                  if (this._emitted["t:" + transactionHash] == null) {
                    return null;
                  }
                  return undefined;
                }
                // "geth-etc" returns receipts before they are ready
                if (result.blockHash == null) {
                  return undefined;
                }
                const receipt = this.formatter.receipt(result);
                if (receipt.blockNumber == null) {
                  receipt.confirmations = 0;
                }
                else if (receipt.confirmations == null) {
                  const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                  // Add the confirmations using the fast block number (pessimistic)
                  let confirmations = (blockNumber - receipt.blockNumber) + 1;
                  if (confirmations <= 0) {
                    confirmations = 1;
                  }
                  receipt.confirmations = confirmations;
                }
                return receipt;
              }), { oncePoll: this });
            });
          }
          getLogs(filter) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              const params = yield resolveProperties({ filter: this._getFilter(filter) });
              const logs = yield this.perform("getLogs", params);
              logs.forEach((log) => {
                if (log.removed == null) {
                  log.removed = false;
                }
              });
              return formatter_Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
            });
          }
          getEtherPrice() {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              yield this.getNetwork();
              return this.perform("getEtherPrice", {});
            });
          }
          _getBlockTag(blockTag) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              blockTag = yield blockTag;
              if (typeof (blockTag) === "number" && blockTag < 0) {
                if (blockTag % 1) {
                  base_provider_logger.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                }
                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                blockNumber += blockTag;
                if (blockNumber < 0) {
                  blockNumber = 0;
                }
                return this.formatter.blockTag(blockNumber);
              }
              return this.formatter.blockTag(blockTag);
            });
          }
          getResolver(name) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              try {
                const address = yield this._getResolver(name);
                if (address == null) {
                  return null;
                }
                return new base_provider_Resolver(this, address, name);
              }
              catch (error) {
                if (error.code === logger_lib_esm["b" /* Logger */].errors.CALL_EXCEPTION) {
                  return null;
                }
                return null;
              }
            });
          }
          _getResolver(name) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              // Get the resolver from the blockchain
              const network = yield this.getNetwork();
              // No ENS...
              if (!network.ensAddress) {
                base_provider_logger.throwError("network does not support ENS", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, { operation: "ENS", network: network.name });
              }
              // keccak256("resolver(bytes32)")
              const transaction = {
                to: network.ensAddress,
                data: ("0x0178b8bf" + namehash(name).substring(2))
              };
              try {
                return this.formatter.callAddress(yield this.call(transaction));
              }
              catch (error) {
                if (error.code === logger_lib_esm["b" /* Logger */].errors.CALL_EXCEPTION) {
                  return null;
                }
                throw error;
              }
            });
          }
          resolveName(name) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              name = yield name;
              // If it is already an address, nothing to resolve
              try {
                return Promise.resolve(this.formatter.address(name));
              }
              catch (error) {
                // If is is a hexstring, the address is bad (See #694)
                if (Object(lib_esm["l" /* isHexString */])(name)) {
                  throw error;
                }
              }
              if (typeof (name) !== "string") {
                base_provider_logger.throwArgumentError("invalid ENS name", "name", name);
              }
              // Get the addr from the resovler
              const resolver = yield this.getResolver(name);
              if (!resolver) {
                return null;
              }
              return yield resolver.getAddress();
            });
          }
          lookupAddress(address) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              address = yield address;
              address = this.formatter.address(address);
              const reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
              const resolverAddress = yield this._getResolver(reverseName);
              if (!resolverAddress) {
                return null;
              }
              // keccak("name(bytes32)")
              let bytes = Object(lib_esm["a" /* arrayify */])(yield this.call({
                to: resolverAddress,
                data: ("0x691f3431" + namehash(reverseName).substring(2))
              }));
              // Strip off the dynamic string pointer (0x20)
              if (bytes.length < 32 || !bignumber_BigNumber.from(bytes.slice(0, 32)).eq(32)) {
                return null;
              }
              bytes = bytes.slice(32);
              // Not a length-prefixed string
              if (bytes.length < 32) {
                return null;
              }
              // Get the length of the string (from the length-prefix)
              const length = bignumber_BigNumber.from(bytes.slice(0, 32)).toNumber();
              bytes = bytes.slice(32);
              // Length longer than available data
              if (length > bytes.length) {
                return null;
              }
              const name = toUtf8String(bytes.slice(0, length));
              // Make sure the reverse record matches the foward record
              const addr = yield this.resolveName(name);
              if (addr != address) {
                return null;
              }
              return name;
            });
          }
          getAvatar(nameOrAddress) {
            return base_provider_awaiter(this, void 0, void 0, function* () {
              let resolver = null;
              if (Object(lib_esm["l" /* isHexString */])(nameOrAddress)) {
                // Address; reverse lookup
                const address = this.formatter.address(nameOrAddress);
                const reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
                const resolverAddress = yield this._getResolver(reverseName);
                if (!resolverAddress) {
                  return null;
                }
                resolver = new base_provider_Resolver(this, resolverAddress, "_", address);
              }
              else {
                // ENS name; forward lookup
                resolver = yield this.getResolver(nameOrAddress);
                if (!resolver) {
                  return null;
                }
              }
              const avatar = yield resolver.getAvatar();
              if (avatar == null) {
                return null;
              }
              return avatar.url;
            });
          }
          perform(method, params) {
            return base_provider_logger.throwError(method + " not implemented", logger_lib_esm["b" /* Logger */].errors.NOT_IMPLEMENTED, { operation: method });
          }
          _startEvent(event) {
            this.polling = (this._events.filter((e) => e.pollable()).length > 0);
          }
          _stopEvent(event) {
            this.polling = (this._events.filter((e) => e.pollable()).length > 0);
          }
          _addEventListener(eventName, listener, once) {
            const event = new base_provider_Event(base_provider_getEventTag(eventName), listener, once);
            this._events.push(event);
            this._startEvent(event);
            return this;
          }
          on(eventName, listener) {
            return this._addEventListener(eventName, listener, false);
          }
          once(eventName, listener) {
            return this._addEventListener(eventName, listener, true);
          }
          emit(eventName, ...args) {
            let result = false;
            let stopped = [];
            let eventTag = base_provider_getEventTag(eventName);
            this._events = this._events.filter((event) => {
              if (event.tag !== eventTag) {
                return true;
              }
              setTimeout(() => {
                event.listener.apply(this, args);
              }, 0);
              result = true;
              if (event.once) {
                stopped.push(event);
                return false;
              }
              return true;
            });
            stopped.forEach((event) => { this._stopEvent(event); });
            return result;
          }
          listenerCount(eventName) {
            if (!eventName) {
              return this._events.length;
            }
            let eventTag = base_provider_getEventTag(eventName);
            return this._events.filter((event) => {
              return (event.tag === eventTag);
            }).length;
          }
          listeners(eventName) {
            if (eventName == null) {
              return this._events.map((event) => event.listener);
            }
            let eventTag = base_provider_getEventTag(eventName);
            return this._events
              .filter((event) => (event.tag === eventTag))
              .map((event) => event.listener);
          }
          off(eventName, listener) {
            if (listener == null) {
              return this.removeAllListeners(eventName);
            }
            const stopped = [];
            let found = false;
            let eventTag = base_provider_getEventTag(eventName);
            this._events = this._events.filter((event) => {
              if (event.tag !== eventTag || event.listener != listener) {
                return true;
              }
              if (found) {
                return true;
              }
              found = true;
              stopped.push(event);
              return false;
            });
            stopped.forEach((event) => { this._stopEvent(event); });
            return this;
          }
          removeAllListeners(eventName) {
            let stopped = [];
            if (eventName == null) {
              stopped = this._events;
              this._events = [];
            }
            else {
              const eventTag = base_provider_getEventTag(eventName);
              this._events = this._events.filter((event) => {
                if (event.tag !== eventTag) {
                  return true;
                }
                stopped.push(event);
                return false;
              });
            }
            stopped.forEach((event) => { this._stopEvent(event); });
            return this;
          }
        }
//# sourceMappingURL=base-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js

        var json_rpc_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };










        const json_rpc_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);

        const errorGas = ["call", "estimateGas"];
        function checkError(method, error, params) {
          // Undo the "convenience" some nodes are attempting to prevent backwards
          // incompatibility; maybe for v6 consider forwarding reverts as errors
          if (method === "call" && error.code === logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR) {
            const e = error.error;
            if (e && e.message.match("reverted") && Object(lib_esm["l" /* isHexString */])(e.data)) {
              return e.data;
            }
            json_rpc_provider_logger.throwError("missing revert data in call exception", logger_lib_esm["b" /* Logger */].errors.CALL_EXCEPTION, {
              error, data: "0x"
            });
          }
          let message = error.message;
          if (error.code === logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR && error.error && typeof (error.error.message) === "string") {
            message = error.error.message;
          }
          else if (typeof (error.body) === "string") {
            message = error.body;
          }
          else if (typeof (error.responseText) === "string") {
            message = error.responseText;
          }
          message = (message || "").toLowerCase();
          const transaction = params.transaction || params.signedTransaction;
          // "insufficient funds for gas * price + value + cost(data)"
          if (message.match(/insufficient funds|base fee exceeds gas limit/)) {
            json_rpc_provider_logger.throwError("insufficient funds for intrinsic transaction cost", logger_lib_esm["b" /* Logger */].errors.INSUFFICIENT_FUNDS, {
              error, method, transaction
            });
          }
          // "nonce too low"
          if (message.match(/nonce too low/)) {
            json_rpc_provider_logger.throwError("nonce has already been used", logger_lib_esm["b" /* Logger */].errors.NONCE_EXPIRED, {
              error, method, transaction
            });
          }
          // "replacement transaction underpriced"
          if (message.match(/replacement transaction underpriced/)) {
            json_rpc_provider_logger.throwError("replacement fee too low", logger_lib_esm["b" /* Logger */].errors.REPLACEMENT_UNDERPRICED, {
              error, method, transaction
            });
          }
          // "replacement transaction underpriced"
          if (message.match(/only replay-protected/)) {
            json_rpc_provider_logger.throwError("legacy pre-eip-155 transactions not supported", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
              error, method, transaction
            });
          }
          if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
            json_rpc_provider_logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_lib_esm["b" /* Logger */].errors.UNPREDICTABLE_GAS_LIMIT, {
              error, method, transaction
            });
          }
          throw error;
        }
        function json_rpc_provider_timer(timeout) {
          return new Promise(function (resolve) {
            setTimeout(resolve, timeout);
          });
        }
        function getResult(payload) {
          if (payload.error) {
            // @TODO: not any
            const error = new Error(payload.error.message);
            error.code = payload.error.code;
            error.data = payload.error.data;
            throw error;
          }
          return payload.result;
        }
        function getLowerCase(value) {
          if (value) {
            return value.toLowerCase();
          }
          return value;
        }
        const json_rpc_provider_constructorGuard = {};
        class json_rpc_provider_JsonRpcSigner extends lib_esm_Signer {
          constructor(constructorGuard, provider, addressOrIndex) {
            json_rpc_provider_logger.checkNew(new.target, json_rpc_provider_JsonRpcSigner);
            super();
            if (constructorGuard !== json_rpc_provider_constructorGuard) {
              throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
            }
            defineReadOnly(this, "provider", provider);
            if (addressOrIndex == null) {
              addressOrIndex = 0;
            }
            if (typeof (addressOrIndex) === "string") {
              defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
              defineReadOnly(this, "_index", null);
            }
            else if (typeof (addressOrIndex) === "number") {
              defineReadOnly(this, "_index", addressOrIndex);
              defineReadOnly(this, "_address", null);
            }
            else {
              json_rpc_provider_logger.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
            }
          }
          connect(provider) {
            return json_rpc_provider_logger.throwError("cannot alter JSON-RPC Signer connection", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
              operation: "connect"
            });
          }
          connectUnchecked() {
            return new UncheckedJsonRpcSigner(json_rpc_provider_constructorGuard, this.provider, this._address || this._index);
          }
          getAddress() {
            if (this._address) {
              return Promise.resolve(this._address);
            }
            return this.provider.send("eth_accounts", []).then((accounts) => {
              if (accounts.length <= this._index) {
                json_rpc_provider_logger.throwError("unknown account #" + this._index, logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                  operation: "getAddress"
                });
              }
              return this.provider.formatter.address(accounts[this._index]);
            });
          }
          sendUncheckedTransaction(transaction) {
            transaction = shallowCopy(transaction);
            const fromAddress = this.getAddress().then((address) => {
              if (address) {
                address = address.toLowerCase();
              }
              return address;
            });
            // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
            // wishes to use this, it is easy to specify explicitly, otherwise
            // we look it up for them.
            if (transaction.gasLimit == null) {
              const estimate = shallowCopy(transaction);
              estimate.from = fromAddress;
              transaction.gasLimit = this.provider.estimateGas(estimate);
            }
            if (transaction.to != null) {
              transaction.to = Promise.resolve(transaction.to).then((to) => json_rpc_provider_awaiter(this, void 0, void 0, function* () {
                if (to == null) {
                  return null;
                }
                const address = yield this.provider.resolveName(to);
                if (address == null) {
                  json_rpc_provider_logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                }
                return address;
              }));
            }
            return resolveProperties({
              tx: resolveProperties(transaction),
              sender: fromAddress
            }).then(({ tx, sender }) => {
              if (tx.from != null) {
                if (tx.from.toLowerCase() !== sender) {
                  json_rpc_provider_logger.throwArgumentError("from address mismatch", "transaction", transaction);
                }
              }
              else {
                tx.from = sender;
              }
              const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
              return this.provider.send("eth_sendTransaction", [hexTx]).then((hash) => {
                return hash;
              }, (error) => {
                return checkError("sendTransaction", error, hexTx);
              });
            });
          }
          signTransaction(transaction) {
            return json_rpc_provider_logger.throwError("signing transactions is unsupported", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
              operation: "signTransaction"
            });
          }
          sendTransaction(transaction) {
            return json_rpc_provider_awaiter(this, void 0, void 0, function* () {
              // This cannot be mined any earlier than any recent block
              const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
              // Send the transaction
              const hash = yield this.sendUncheckedTransaction(transaction);
              try {
                // Unfortunately, JSON-RPC only provides and opaque transaction hash
                // for a response, and we need the actual transaction, so we poll
                // for it; it should show up very quickly
                return yield poll(() => json_rpc_provider_awaiter(this, void 0, void 0, function* () {
                  const tx = yield this.provider.getTransaction(hash);
                  if (tx === null) {
                    return undefined;
                  }
                  return this.provider._wrapTransaction(tx, hash, blockNumber);
                }), { oncePoll: this.provider });
              }
              catch (error) {
                error.transactionHash = hash;
                throw error;
              }
            });
          }
          signMessage(message) {
            return json_rpc_provider_awaiter(this, void 0, void 0, function* () {
              const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
              const address = yield this.getAddress();
              return yield this.provider.send("personal_sign", [Object(lib_esm["i" /* hexlify */])(data), address.toLowerCase()]);
            });
          }
          _legacySignMessage(message) {
            return json_rpc_provider_awaiter(this, void 0, void 0, function* () {
              const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
              const address = yield this.getAddress();
              // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
              return yield this.provider.send("eth_sign", [address.toLowerCase(), Object(lib_esm["i" /* hexlify */])(data)]);
            });
          }
          _signTypedData(domain, types, value) {
            return json_rpc_provider_awaiter(this, void 0, void 0, function* () {
              // Populate any ENS names (in-place)
              const populated = yield typed_data_TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                return this.provider.resolveName(name);
              });
              const address = yield this.getAddress();
              return yield this.provider.send("eth_signTypedData_v4", [
                address.toLowerCase(),
                JSON.stringify(typed_data_TypedDataEncoder.getPayload(populated.domain, types, populated.value))
              ]);
            });
          }
          unlock(password) {
            return json_rpc_provider_awaiter(this, void 0, void 0, function* () {
              const provider = this.provider;
              const address = yield this.getAddress();
              return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
            });
          }
        }
        class UncheckedJsonRpcSigner extends json_rpc_provider_JsonRpcSigner {
          sendTransaction(transaction) {
            return this.sendUncheckedTransaction(transaction).then((hash) => {
              return {
                hash: hash,
                nonce: null,
                gasLimit: null,
                gasPrice: null,
                data: null,
                value: null,
                chainId: null,
                confirmations: 0,
                from: null,
                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }
              };
            });
          }
        }
        const json_rpc_provider_allowedTransactionKeys = {
          chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
          type: true, accessList: true,
          maxFeePerGas: true, maxPriorityFeePerGas: true
        };
        class json_rpc_provider_JsonRpcProvider extends base_provider_BaseProvider {
          constructor(url, network) {
            json_rpc_provider_logger.checkNew(new.target, json_rpc_provider_JsonRpcProvider);
            let networkOrReady = network;
            // The network is unknown, query the JSON-RPC for it
            if (networkOrReady == null) {
              networkOrReady = new Promise((resolve, reject) => {
                setTimeout(() => {
                  this.detectNetwork().then((network) => {
                    resolve(network);
                  }, (error) => {
                    reject(error);
                  });
                }, 0);
              });
            }
            super(networkOrReady);
            // Default URL
            if (!url) {
              url = getStatic(this.constructor, "defaultUrl")();
            }
            if (typeof (url) === "string") {
              defineReadOnly(this, "connection", Object.freeze({
                url: url
              }));
            }
            else {
              defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
            }
            this._nextId = 42;
          }
          get _cache() {
            if (this._eventLoopCache == null) {
              this._eventLoopCache = {};
            }
            return this._eventLoopCache;
          }
          static defaultUrl() {
            return "http:/\/localhost:8545";
          }
          detectNetwork() {
            if (!this._cache["detectNetwork"]) {
              this._cache["detectNetwork"] = this._uncachedDetectNetwork();
              // Clear this cache at the beginning of the next event loop
              setTimeout(() => {
                this._cache["detectNetwork"] = null;
              }, 0);
            }
            return this._cache["detectNetwork"];
          }
          _uncachedDetectNetwork() {
            return json_rpc_provider_awaiter(this, void 0, void 0, function* () {
              yield json_rpc_provider_timer(0);
              let chainId = null;
              try {
                chainId = yield this.send("eth_chainId", []);
              }
              catch (error) {
                try {
                  chainId = yield this.send("net_version", []);
                }
                catch (error) { }
              }
              if (chainId != null) {
                const getNetwork = getStatic(this.constructor, "getNetwork");
                try {
                  return getNetwork(bignumber_BigNumber.from(chainId).toNumber());
                }
                catch (error) {
                  return json_rpc_provider_logger.throwError("could not detect network", logger_lib_esm["b" /* Logger */].errors.NETWORK_ERROR, {
                    chainId: chainId,
                    event: "invalidNetwork",
                    serverError: error
                  });
                }
              }
              return json_rpc_provider_logger.throwError("could not detect network", logger_lib_esm["b" /* Logger */].errors.NETWORK_ERROR, {
                event: "noNetwork"
              });
            });
          }
          getSigner(addressOrIndex) {
            return new json_rpc_provider_JsonRpcSigner(json_rpc_provider_constructorGuard, this, addressOrIndex);
          }
          getUncheckedSigner(addressOrIndex) {
            return this.getSigner(addressOrIndex).connectUnchecked();
          }
          listAccounts() {
            return this.send("eth_accounts", []).then((accounts) => {
              return accounts.map((a) => this.formatter.address(a));
            });
          }
          send(method, params) {
            const request = {
              method: method,
              params: params,
              id: (this._nextId++),
              jsonrpc: "2.0"
            };
            this.emit("debug", {
              action: "request",
              request: deepCopy(request),
              provider: this
            });
            // We can expand this in the future to any call, but for now these
            // are the biggest wins and do not require any serializing parameters.
            const cache = (["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0);
            if (cache && this._cache[method]) {
              return this._cache[method];
            }
            const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {
              this.emit("debug", {
                action: "response",
                request: request,
                response: result,
                provider: this
              });
              return result;
            }, (error) => {
              this.emit("debug", {
                action: "response",
                error: error,
                request: request,
                provider: this
              });
              throw error;
            });
            // Cache the fetch, but clear it on the next event loop
            if (cache) {
              this._cache[method] = result;
              setTimeout(() => {
                this._cache[method] = null;
              }, 0);
            }
            return result;
          }
          prepareRequest(method, params) {
            switch (method) {
              case "getBlockNumber":
                return ["eth_blockNumber", []];
              case "getGasPrice":
                return ["eth_gasPrice", []];
              case "getBalance":
                return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
              case "getTransactionCount":
                return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
              case "getCode":
                return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
              case "getStorageAt":
                return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];
              case "sendTransaction":
                return ["eth_sendRawTransaction", [params.signedTransaction]];
              case "getBlock":
                if (params.blockTag) {
                  return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
                }
                else if (params.blockHash) {
                  return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
                }
                return null;
              case "getTransaction":
                return ["eth_getTransactionByHash", [params.transactionHash]];
              case "getTransactionReceipt":
                return ["eth_getTransactionReceipt", [params.transactionHash]];
              case "call": {
                const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
              }
              case "estimateGas": {
                const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
              }
              case "getLogs":
                if (params.filter && params.filter.address != null) {
                  params.filter.address = getLowerCase(params.filter.address);
                }
                return ["eth_getLogs", [params.filter]];
              default:
                break;
            }
            return null;
          }
          perform(method, params) {
            return json_rpc_provider_awaiter(this, void 0, void 0, function* () {
              // Legacy networks do not like the type field being passed along (which
              // is fair), so we delete type if it is 0 and a non-EIP-1559 network
              if (method === "call" || method === "estimateGas") {
                const tx = params.transaction;
                if (tx && tx.type != null && bignumber_BigNumber.from(tx.type).isZero()) {
                  // If there are no EIP-1559 properties, it might be non-EIP-a559
                  if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                    const feeData = yield this.getFeeData();
                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                      // Network doesn't know about EIP-1559 (and hence type)
                      params = shallowCopy(params);
                      params.transaction = shallowCopy(tx);
                      delete params.transaction.type;
                    }
                  }
                }
              }
              const args = this.prepareRequest(method, params);
              if (args == null) {
                json_rpc_provider_logger.throwError(method + " not implemented", logger_lib_esm["b" /* Logger */].errors.NOT_IMPLEMENTED, { operation: method });
              }
              try {
                return yield this.send(args[0], args[1]);
              }
              catch (error) {
                return checkError(method, error, params);
              }
            });
          }
          _startEvent(event) {
            if (event.tag === "pending") {
              this._startPending();
            }
            super._startEvent(event);
          }
          _startPending() {
            if (this._pendingFilter != null) {
              return;
            }
            const self = this;
            const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
            this._pendingFilter = pendingFilter;
            pendingFilter.then(function (filterId) {
              function poll() {
                self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
                  if (self._pendingFilter != pendingFilter) {
                    return null;
                  }
                  let seq = Promise.resolve();
                  hashes.forEach(function (hash) {
                    // @TODO: This should be garbage collected at some point... How? When?
                    self._emitted["t:" + hash.toLowerCase()] = "pending";
                    seq = seq.then(function () {
                      return self.getTransaction(hash).then(function (tx) {
                        self.emit("pending", tx);
                        return null;
                      });
                    });
                  });
                  return seq.then(function () {
                    return json_rpc_provider_timer(1000);
                  });
                }).then(function () {
                  if (self._pendingFilter != pendingFilter) {
                    self.send("eth_uninstallFilter", [filterId]);
                    return;
                  }
                  setTimeout(function () { poll(); }, 0);
                  return null;
                }).catch((error) => { });
              }
              poll();
              return filterId;
            }).catch((error) => { });
          }
          _stopEvent(event) {
            if (event.tag === "pending" && this.listenerCount("pending") === 0) {
              this._pendingFilter = null;
            }
            super._stopEvent(event);
          }
          // Convert an ethers.js transaction into a JSON-RPC transaction
          //  - gasLimit => gas
          //  - All values hexlified
          //  - All numeric values zero-striped
          //  - All addresses are lowercased
          // NOTE: This allows a TransactionRequest, but all values should be resolved
          //       before this is called
          // @TODO: This will likely be removed in future versions and prepareRequest
          //        will be the preferred method for this.
          static hexlifyTransaction(transaction, allowExtra) {
            // Check only allowed properties are given
            const allowed = shallowCopy(json_rpc_provider_allowedTransactionKeys);
            if (allowExtra) {
              for (const key in allowExtra) {
                if (allowExtra[key]) {
                  allowed[key] = true;
                }
              }
            }
            checkProperties(transaction, allowed);
            const result = {};
            // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.
            ["gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
              if (transaction[key] == null) {
                return;
              }
              const value = Object(lib_esm["g" /* hexValue */])(transaction[key]);
              if (key === "gasLimit") {
                key = "gas";
              }
              result[key] = value;
            });
            ["from", "to", "data"].forEach(function (key) {
              if (transaction[key] == null) {
                return;
              }
              result[key] = Object(lib_esm["i" /* hexlify */])(transaction[key]);
            });
            if (transaction.accessList) {
              result["accessList"] = accessListify(transaction.accessList);
            }
            return result;
          }
        }
//# sourceMappingURL=json-rpc-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/ws.js



        let WS = null;
        try {
          WS = WebSocket;
          if (WS == null) {
            throw new Error("inject please");
          }
        }
        catch (error) {
          const logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);
          WS = function () {
            logger.throwError("WebSockets not supported in this environment", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
              operation: "new WebSocket()"
            });
          };
        }
//export default WS;
//module.exports = WS;

//# sourceMappingURL=ws.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/websocket-provider.js

        var websocket_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };






        const websocket_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);
        /**
         *  Notes:
         *
         *  This provider differs a bit from the polling providers. One main
         *  difference is how it handles consistency. The polling providers
         *  will stall responses to ensure a consistent state, while this
         *  WebSocket provider assumes the connected backend will manage this.
         *
         *  For example, if a polling provider emits an event which indicates
         *  the event occurred in blockhash XXX, a call to fetch that block by
         *  its hash XXX, if not present will retry until it is present. This
         *  can occur when querying a pool of nodes that are mildly out of sync
         *  with each other.
         */
        let NextId = 1;
// For more info about the Real-time Event API see:
//   https://geth.ethereum.org/docs/rpc/pubsub
        class websocket_provider_WebSocketProvider extends json_rpc_provider_JsonRpcProvider {
          constructor(url, network) {
            // This will be added in the future; please open an issue to expedite
            if (network === "any") {
              websocket_provider_logger.throwError("WebSocketProvider does not support 'any' network yet", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "network:any"
              });
            }
            super(url, network);
            this._pollingInterval = -1;
            this._wsReady = false;
            defineReadOnly(this, "_websocket", new WS(this.connection.url));
            defineReadOnly(this, "_requests", {});
            defineReadOnly(this, "_subs", {});
            defineReadOnly(this, "_subIds", {});
            defineReadOnly(this, "_detectNetwork", super.detectNetwork());
            // Stall sending requests until the socket is open...
            this._websocket.onopen = () => {
              this._wsReady = true;
              Object.keys(this._requests).forEach((id) => {
                this._websocket.send(this._requests[id].payload);
              });
            };
            this._websocket.onmessage = (messageEvent) => {
              const data = messageEvent.data;
              const result = JSON.parse(data);
              if (result.id != null) {
                const id = String(result.id);
                const request = this._requests[id];
                delete this._requests[id];
                if (result.result !== undefined) {
                  request.callback(null, result.result);
                  this.emit("debug", {
                    action: "response",
                    request: JSON.parse(request.payload),
                    response: result.result,
                    provider: this
                  });
                }
                else {
                  let error = null;
                  if (result.error) {
                    error = new Error(result.error.message || "unknown error");
                    defineReadOnly(error, "code", result.error.code || null);
                    defineReadOnly(error, "response", data);
                  }
                  else {
                    error = new Error("unknown error");
                  }
                  request.callback(error, undefined);
                  this.emit("debug", {
                    action: "response",
                    error: error,
                    request: JSON.parse(request.payload),
                    provider: this
                  });
                }
              }
              else if (result.method === "eth_subscription") {
                // Subscription...
                const sub = this._subs[result.params.subscription];
                if (sub) {
                  //this.emit.apply(this,                  );
                  sub.processFunc(result.params.result);
                }
              }
              else {
                console.warn("this should not happen");
              }
            };
            // This Provider does not actually poll, but we want to trigger
            // poll events for things that depend on them (like stalling for
            // block and transaction lookups)
            const fauxPoll = setInterval(() => {
              this.emit("poll");
            }, 1000);
            if (fauxPoll.unref) {
              fauxPoll.unref();
            }
          }
          detectNetwork() {
            return this._detectNetwork;
          }
          get pollingInterval() {
            return 0;
          }
          resetEventsBlock(blockNumber) {
            websocket_provider_logger.throwError("cannot reset events block on WebSocketProvider", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
              operation: "resetEventBlock"
            });
          }
          set pollingInterval(value) {
            websocket_provider_logger.throwError("cannot set polling interval on WebSocketProvider", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
              operation: "setPollingInterval"
            });
          }
          poll() {
            return websocket_provider_awaiter(this, void 0, void 0, function* () {
              return null;
            });
          }
          set polling(value) {
            if (!value) {
              return;
            }
            websocket_provider_logger.throwError("cannot set polling on WebSocketProvider", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
              operation: "setPolling"
            });
          }
          send(method, params) {
            const rid = NextId++;
            return new Promise((resolve, reject) => {
              function callback(error, result) {
                if (error) {
                  return reject(error);
                }
                return resolve(result);
              }
              const payload = JSON.stringify({
                method: method,
                params: params,
                id: rid,
                jsonrpc: "2.0"
              });
              this.emit("debug", {
                action: "request",
                request: JSON.parse(payload),
                provider: this
              });
              this._requests[String(rid)] = { callback, payload };
              if (this._wsReady) {
                this._websocket.send(payload);
              }
            });
          }
          static defaultUrl() {
            return "ws:/\/localhost:8546";
          }
          _subscribe(tag, param, processFunc) {
            return websocket_provider_awaiter(this, void 0, void 0, function* () {
              let subIdPromise = this._subIds[tag];
              if (subIdPromise == null) {
                subIdPromise = Promise.all(param).then((param) => {
                  return this.send("eth_subscribe", param);
                });
                this._subIds[tag] = subIdPromise;
              }
              const subId = yield subIdPromise;
              this._subs[subId] = { tag, processFunc };
            });
          }
          _startEvent(event) {
            switch (event.type) {
              case "block":
                this._subscribe("block", ["newHeads"], (result) => {
                  const blockNumber = bignumber_BigNumber.from(result.number).toNumber();
                  this._emitted.block = blockNumber;
                  this.emit("block", blockNumber);
                });
                break;
              case "pending":
                this._subscribe("pending", ["newPendingTransactions"], (result) => {
                  this.emit("pending", result);
                });
                break;
              case "filter":
                this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
                  if (result.removed == null) {
                    result.removed = false;
                  }
                  this.emit(event.filter, this.formatter.filterLog(result));
                });
                break;
              case "tx": {
                const emitReceipt = (event) => {
                  const hash = event.hash;
                  this.getTransactionReceipt(hash).then((receipt) => {
                    if (!receipt) {
                      return;
                    }
                    this.emit(hash, receipt);
                  });
                };
                // In case it is already mined
                emitReceipt(event);
                // To keep things simple, we start up a single newHeads subscription
                // to keep an eye out for transactions we are watching for.
                // Starting a subscription for an event (i.e. "tx") that is already
                // running is (basically) a nop.
                this._subscribe("tx", ["newHeads"], (result) => {
                  this._events.filter((e) => (e.type === "tx")).forEach(emitReceipt);
                });
                break;
              }
              // Nothing is needed
              case "debug":
              case "poll":
              case "willPoll":
              case "didPoll":
              case "error":
                break;
              default:
                console.log("unhandled:", event);
                break;
            }
          }
          _stopEvent(event) {
            let tag = event.tag;
            if (event.type === "tx") {
              // There are remaining transaction event listeners
              if (this._events.filter((e) => (e.type === "tx")).length) {
                return;
              }
              tag = "tx";
            }
            else if (this.listenerCount(event.event)) {
              // There are remaining event listeners
              return;
            }
            const subId = this._subIds[tag];
            if (!subId) {
              return;
            }
            delete this._subIds[tag];
            subId.then((subId) => {
              if (!this._subs[subId]) {
                return;
              }
              delete this._subs[subId];
              this.send("eth_unsubscribe", [subId]);
            });
          }
          destroy() {
            return websocket_provider_awaiter(this, void 0, void 0, function* () {
              // Wait until we have connected before trying to disconnect
              if (this._websocket.readyState === WS.CONNECTING) {
                yield (new Promise((resolve) => {
                  this._websocket.onopen = function () {
                    resolve(true);
                  };
                  this._websocket.onerror = function () {
                    resolve(false);
                  };
                }));
              }
              // Hangup
              // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
              this._websocket.close(1000);
            });
          }
        }
//# sourceMappingURL=websocket-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js

        var url_json_rpc_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };



        const url_json_rpc_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);

// A StaticJsonRpcProvider is useful when you *know* for certain that
// the backend will never change, as it never calls eth_chainId to
// verify its backend. However, if the backend does change, the effects
// are undefined and may include:
// - inconsistent results
// - locking up the UI
// - block skew warnings
// - wrong results
// If the network is not explicit (i.e. auto-detection is expected), the
// node MUST be running and available to respond to requests BEFORE this
// is instantiated.
        class url_json_rpc_provider_StaticJsonRpcProvider extends json_rpc_provider_JsonRpcProvider {
          detectNetwork() {
            const _super = Object.create(null, {
              detectNetwork: { get: () => super.detectNetwork }
            });
            return url_json_rpc_provider_awaiter(this, void 0, void 0, function* () {
              let network = this.network;
              if (network == null) {
                network = yield _super.detectNetwork.call(this);
                if (!network) {
                  url_json_rpc_provider_logger.throwError("no network detected", logger_lib_esm["b" /* Logger */].errors.UNKNOWN_ERROR, {});
                }
                // If still not set, set it
                if (this._network == null) {
                  // A static network does not support "any"
                  defineReadOnly(this, "_network", network);
                  this.emit("network", network, null);
                }
              }
              return network;
            });
          }
        }
        class url_json_rpc_provider_UrlJsonRpcProvider extends url_json_rpc_provider_StaticJsonRpcProvider {
          constructor(network, apiKey) {
            url_json_rpc_provider_logger.checkAbstract(new.target, url_json_rpc_provider_UrlJsonRpcProvider);
            // Normalize the Network and API Key
            network = getStatic(new.target, "getNetwork")(network);
            apiKey = getStatic(new.target, "getApiKey")(apiKey);
            const connection = getStatic(new.target, "getUrl")(network, apiKey);
            super(connection, network);
            if (typeof (apiKey) === "string") {
              defineReadOnly(this, "apiKey", apiKey);
            }
            else if (apiKey != null) {
              Object.keys(apiKey).forEach((key) => {
                defineReadOnly(this, key, apiKey[key]);
              });
            }
          }
          _startPending() {
            url_json_rpc_provider_logger.warn("WARNING: API provider does not support pending filters");
          }
          isCommunityResource() {
            return false;
          }
          getSigner(address) {
            return url_json_rpc_provider_logger.throwError("API provider does not support signing", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
          }
          listAccounts() {
            return Promise.resolve([]);
          }
          // Return a defaultApiKey if null, otherwise validate the API key
          static getApiKey(apiKey) {
            return apiKey;
          }
          // Returns the url or connection for the given network and API key. The
          // API key will have been sanitized by the getApiKey first, so any validation
          // or transformations can be done there.
          static getUrl(network, apiKey) {
            return url_json_rpc_provider_logger.throwError("not implemented; sub-classes must override getUrl", logger_lib_esm["b" /* Logger */].errors.NOT_IMPLEMENTED, {
              operation: "getUrl"
            });
          }
        }
//# sourceMappingURL=url-json-rpc-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js






        const alchemy_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);

// This key was provided to ethers.js by Alchemy to be used by the
// default provider, but it is recommended that for your own
// production environments, that you acquire your own API key at:
//   https://dashboard.alchemyapi.io
        const defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
        class alchemy_provider_AlchemyWebSocketProvider extends websocket_provider_WebSocketProvider {
          constructor(network, apiKey) {
            const provider = new alchemy_provider_AlchemyProvider(network, apiKey);
            const url = provider.connection.url.replace(/^http/i, "ws")
              .replace(".alchemyapi.", ".ws.alchemyapi.");
            super(url, provider.network);
            defineReadOnly(this, "apiKey", provider.apiKey);
          }
          isCommunityResource() {
            return (this.apiKey === defaultApiKey);
          }
        }
        class alchemy_provider_AlchemyProvider extends url_json_rpc_provider_UrlJsonRpcProvider {
          static getWebSocketProvider(network, apiKey) {
            return new alchemy_provider_AlchemyWebSocketProvider(network, apiKey);
          }
          static getApiKey(apiKey) {
            if (apiKey == null) {
              return defaultApiKey;
            }
            if (apiKey && typeof (apiKey) !== "string") {
              alchemy_provider_logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey;
          }
          static getUrl(network, apiKey) {
            let host = null;
            switch (network.name) {
              case "homestead":
                host = "eth-mainnet.alchemyapi.io/v2/";
                break;
              case "ropsten":
                host = "eth-ropsten.alchemyapi.io/v2/";
                break;
              case "rinkeby":
                host = "eth-rinkeby.alchemyapi.io/v2/";
                break;
              case "goerli":
                host = "eth-goerli.alchemyapi.io/v2/";
                break;
              case "kovan":
                host = "eth-kovan.alchemyapi.io/v2/";
                break;
              case "matic":
                host = "polygon-mainnet.g.alchemy.com/v2/";
                break;
              case "maticmum":
                host = "polygon-mumbai.g.alchemy.com/v2/";
                break;
              case "arbitrum":
                host = "arb-mainnet.g.alchemy.com/v2/";
                break;
              case "arbitrum-rinkeby":
                host = "arb-rinkeby.g.alchemy.com/v2/";
                break;
              case "optimism":
                host = "opt-mainnet.g.alchemy.com/v2/";
                break;
              case "optimism-kovan":
                host = "opt-kovan.g.alchemy.com/v2/";
                break;
              default:
                alchemy_provider_logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return {
              allowGzip: true,
              url: ("https:/" + "/" + host + apiKey),
              throttleCallback: (attempt, url) => {
                if (apiKey === defaultApiKey) {
                  showThrottleMessage();
                }
                return Promise.resolve(true);
              }
            };
          }
          isCommunityResource() {
            return (this.apiKey === defaultApiKey);
          }
        }
//# sourceMappingURL=alchemy-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js

        var cloudflare_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };



        const cloudflare_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);
        class cloudflare_provider_CloudflareProvider extends url_json_rpc_provider_UrlJsonRpcProvider {
          static getApiKey(apiKey) {
            if (apiKey != null) {
              cloudflare_provider_logger.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
            }
            return null;
          }
          static getUrl(network, apiKey) {
            let host = null;
            switch (network.name) {
              case "homestead":
                host = "https://cloudflare-eth.com/";
                break;
              default:
                cloudflare_provider_logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return host;
          }
          perform(method, params) {
            const _super = Object.create(null, {
              perform: { get: () => super.perform }
            });
            return cloudflare_provider_awaiter(this, void 0, void 0, function* () {
              // The Cloudflare provider does not support eth_blockNumber,
              // so we get the latest block and pull it from that
              if (method === "getBlockNumber") {
                const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
                return block.number;
              }
              return _super.perform.call(this, method, params);
            });
          }
        }
//# sourceMappingURL=cloudflare-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js

        var etherscan_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };







        const etherscan_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);

// The transaction has already been sanitized by the calls in Provider
        function getTransactionPostData(transaction) {
          const result = {};
          for (let key in transaction) {
            if (transaction[key] == null) {
              continue;
            }
            let value = transaction[key];
            if (key === "type" && value === 0) {
              continue;
            }
            // Quantity-types require no leading zero, unless 0
            if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
              value = Object(lib_esm["g" /* hexValue */])(Object(lib_esm["i" /* hexlify */])(value));
            }
            else if (key === "accessList") {
              value = "[" + accessListify(value).map((set) => {
                return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
              }).join(",") + "]";
            }
            else {
              value = Object(lib_esm["i" /* hexlify */])(value);
            }
            result[key] = value;
          }
          return result;
        }
        function etherscan_provider_getResult(result) {
          // getLogs, getHistory have weird success responses
          if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            return result.result;
          }
          if (result.status != 1 || result.message != "OK") {
            const error = new Error("invalid response");
            error.result = JSON.stringify(result);
            if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
              error.throttleRetry = true;
            }
            throw error;
          }
          return result.result;
        }
        function getJsonResult(result) {
          // This response indicates we are being throttled
          if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
            const error = new Error("throttled response");
            error.result = JSON.stringify(result);
            error.throttleRetry = true;
            throw error;
          }
          if (result.jsonrpc != "2.0") {
            // @TODO: not any
            const error = new Error("invalid response");
            error.result = JSON.stringify(result);
            throw error;
          }
          if (result.error) {
            // @TODO: not any
            const error = new Error(result.error.message || "unknown error");
            if (result.error.code) {
              error.code = result.error.code;
            }
            if (result.error.data) {
              error.data = result.error.data;
            }
            throw error;
          }
          return result.result;
        }
// The blockTag was normalized as a string by the Provider pre-perform operations
        function checkLogTag(blockTag) {
          if (blockTag === "pending") {
            throw new Error("pending not supported");
          }
          if (blockTag === "latest") {
            return blockTag;
          }
          return parseInt(blockTag.substring(2), 16);
        }
        const etherscan_provider_defaultApiKey = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
        function etherscan_provider_checkError(method, error, transaction) {
          // Undo the "convenience" some nodes are attempting to prevent backwards
          // incompatibility; maybe for v6 consider forwarding reverts as errors
          if (method === "call" && error.code === logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR) {
            const e = error.error;
            // Etherscan keeps changing their string
            if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
              // Etherscan prefixes the data like "Reverted 0x1234"
              let data = e.data;
              if (data) {
                data = "0x" + data.replace(/^.*0x/i, "");
              }
              if (Object(lib_esm["l" /* isHexString */])(data)) {
                return data;
              }
              etherscan_provider_logger.throwError("missing revert data in call exception", logger_lib_esm["b" /* Logger */].errors.CALL_EXCEPTION, {
                error, data: "0x"
              });
            }
          }
          // Get the message from any nested error structure
          let message = error.message;
          if (error.code === logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR) {
            if (error.error && typeof (error.error.message) === "string") {
              message = error.error.message;
            }
            else if (typeof (error.body) === "string") {
              message = error.body;
            }
            else if (typeof (error.responseText) === "string") {
              message = error.responseText;
            }
          }
          message = (message || "").toLowerCase();
          // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
          if (message.match(/insufficient funds/)) {
            etherscan_provider_logger.throwError("insufficient funds for intrinsic transaction cost", logger_lib_esm["b" /* Logger */].errors.INSUFFICIENT_FUNDS, {
              error, method, transaction
            });
          }
          // "Transaction with the same hash was already imported."
          if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
            etherscan_provider_logger.throwError("nonce has already been used", logger_lib_esm["b" /* Logger */].errors.NONCE_EXPIRED, {
              error, method, transaction
            });
          }
          // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
          if (message.match(/another transaction with same nonce/)) {
            etherscan_provider_logger.throwError("replacement fee too low", logger_lib_esm["b" /* Logger */].errors.REPLACEMENT_UNDERPRICED, {
              error, method, transaction
            });
          }
          if (message.match(/execution failed due to an exception|execution reverted/)) {
            etherscan_provider_logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", logger_lib_esm["b" /* Logger */].errors.UNPREDICTABLE_GAS_LIMIT, {
              error, method, transaction
            });
          }
          throw error;
        }
        class etherscan_provider_EtherscanProvider extends base_provider_BaseProvider {
          constructor(network, apiKey) {
            etherscan_provider_logger.checkNew(new.target, etherscan_provider_EtherscanProvider);
            super(network);
            defineReadOnly(this, "baseUrl", this.getBaseUrl());
            defineReadOnly(this, "apiKey", apiKey || etherscan_provider_defaultApiKey);
          }
          getBaseUrl() {
            switch (this.network ? this.network.name : "invalid") {
              case "homestead":
                return "https:/\/api.etherscan.io";
              case "ropsten":
                return "https:/\/api-ropsten.etherscan.io";
              case "rinkeby":
                return "https:/\/api-rinkeby.etherscan.io";
              case "kovan":
                return "https:/\/api-kovan.etherscan.io";
              case "goerli":
                return "https:/\/api-goerli.etherscan.io";
              default:
            }
            return etherscan_provider_logger.throwArgumentError("unsupported network", "network", name);
          }
          getUrl(module, params) {
            const query = Object.keys(params).reduce((accum, key) => {
              const value = params[key];
              if (value != null) {
                accum += `&${key}=${value}`;
              }
              return accum;
            }, "");
            const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : "");
            return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
          }
          getPostUrl() {
            return `${this.baseUrl}/api`;
          }
          getPostData(module, params) {
            params.module = module;
            params.apikey = this.apiKey;
            return params;
          }
          fetch(module, params, post) {
            return etherscan_provider_awaiter(this, void 0, void 0, function* () {
              const url = (post ? this.getPostUrl() : this.getUrl(module, params));
              const payload = (post ? this.getPostData(module, params) : null);
              const procFunc = (module === "proxy") ? getJsonResult : etherscan_provider_getResult;
              this.emit("debug", {
                action: "request",
                request: url,
                provider: this
              });
              const connection = {
                url: url,
                throttleSlotInterval: 1000,
                throttleCallback: (attempt, url) => {
                  if (this.isCommunityResource()) {
                    showThrottleMessage();
                  }
                  return Promise.resolve(true);
                }
              };
              let payloadStr = null;
              if (payload) {
                connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
                payloadStr = Object.keys(payload).map((key) => {
                  return `${key}=${payload[key]}`;
                }).join("&");
              }
              const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
              this.emit("debug", {
                action: "response",
                request: url,
                response: deepCopy(result),
                provider: this
              });
              return result;
            });
          }
          detectNetwork() {
            return etherscan_provider_awaiter(this, void 0, void 0, function* () {
              return this.network;
            });
          }
          perform(method, params) {
            const _super = Object.create(null, {
              perform: { get: () => super.perform }
            });
            return etherscan_provider_awaiter(this, void 0, void 0, function* () {
              switch (method) {
                case "getBlockNumber":
                  return this.fetch("proxy", { action: "eth_blockNumber" });
                case "getGasPrice":
                  return this.fetch("proxy", { action: "eth_gasPrice" });
                case "getBalance":
                  // Returns base-10 result
                  return this.fetch("account", {
                    action: "balance",
                    address: params.address,
                    tag: params.blockTag
                  });
                case "getTransactionCount":
                  return this.fetch("proxy", {
                    action: "eth_getTransactionCount",
                    address: params.address,
                    tag: params.blockTag
                  });
                case "getCode":
                  return this.fetch("proxy", {
                    action: "eth_getCode",
                    address: params.address,
                    tag: params.blockTag
                  });
                case "getStorageAt":
                  return this.fetch("proxy", {
                    action: "eth_getStorageAt",
                    address: params.address,
                    position: params.position,
                    tag: params.blockTag
                  });
                case "sendTransaction":
                  return this.fetch("proxy", {
                    action: "eth_sendRawTransaction",
                    hex: params.signedTransaction
                  }, true).catch((error) => {
                    return etherscan_provider_checkError("sendTransaction", error, params.signedTransaction);
                  });
                case "getBlock":
                  if (params.blockTag) {
                    return this.fetch("proxy", {
                      action: "eth_getBlockByNumber",
                      tag: params.blockTag,
                      boolean: (params.includeTransactions ? "true" : "false")
                    });
                  }
                  throw new Error("getBlock by blockHash not implemented");
                case "getTransaction":
                  return this.fetch("proxy", {
                    action: "eth_getTransactionByHash",
                    txhash: params.transactionHash
                  });
                case "getTransactionReceipt":
                  return this.fetch("proxy", {
                    action: "eth_getTransactionReceipt",
                    txhash: params.transactionHash
                  });
                case "call": {
                  if (params.blockTag !== "latest") {
                    throw new Error("EtherscanProvider does not support blockTag for call");
                  }
                  const postData = getTransactionPostData(params.transaction);
                  postData.module = "proxy";
                  postData.action = "eth_call";
                  try {
                    return yield this.fetch("proxy", postData, true);
                  }
                  catch (error) {
                    return etherscan_provider_checkError("call", error, params.transaction);
                  }
                }
                case "estimateGas": {
                  const postData = getTransactionPostData(params.transaction);
                  postData.module = "proxy";
                  postData.action = "eth_estimateGas";
                  try {
                    return yield this.fetch("proxy", postData, true);
                  }
                  catch (error) {
                    return etherscan_provider_checkError("estimateGas", error, params.transaction);
                  }
                }
                case "getLogs": {
                  const args = { action: "getLogs" };
                  if (params.filter.fromBlock) {
                    args.fromBlock = checkLogTag(params.filter.fromBlock);
                  }
                  if (params.filter.toBlock) {
                    args.toBlock = checkLogTag(params.filter.toBlock);
                  }
                  if (params.filter.address) {
                    args.address = params.filter.address;
                  }
                  // @TODO: We can handle slightly more complicated logs using the logs API
                  if (params.filter.topics && params.filter.topics.length > 0) {
                    if (params.filter.topics.length > 1) {
                      etherscan_provider_logger.throwError("unsupported topic count", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                    }
                    if (params.filter.topics.length === 1) {
                      const topic0 = params.filter.topics[0];
                      if (typeof (topic0) !== "string" || topic0.length !== 66) {
                        etherscan_provider_logger.throwError("unsupported topic format", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
                      }
                      args.topic0 = topic0;
                    }
                  }
                  const logs = yield this.fetch("logs", args);
                  // Cache txHash => blockHash
                  let blocks = {};
                  // Add any missing blockHash to the logs
                  for (let i = 0; i < logs.length; i++) {
                    const log = logs[i];
                    if (log.blockHash != null) {
                      continue;
                    }
                    if (blocks[log.blockNumber] == null) {
                      const block = yield this.getBlock(log.blockNumber);
                      if (block) {
                        blocks[log.blockNumber] = block.hash;
                      }
                    }
                    log.blockHash = blocks[log.blockNumber];
                  }
                  return logs;
                }
                case "getEtherPrice":
                  if (this.network.name !== "homestead") {
                    return 0.0;
                  }
                  return parseFloat((yield this.fetch("stats", { action: "ethprice" })).ethusd);
                default:
                  break;
              }
              return _super.perform.call(this, method, params);
            });
          }
          // Note: The `page` page parameter only allows pagination within the
          //       10,000 window available without a page and offset parameter
          //       Error: Result window is too large, PageNo x Offset size must
          //              be less than or equal to 10000
          getHistory(addressOrName, startBlock, endBlock) {
            return etherscan_provider_awaiter(this, void 0, void 0, function* () {
              const params = {
                action: "txlist",
                address: (yield this.resolveName(addressOrName)),
                startblock: ((startBlock == null) ? 0 : startBlock),
                endblock: ((endBlock == null) ? 99999999 : endBlock),
                sort: "asc"
              };
              const result = yield this.fetch("account", params);
              return result.map((tx) => {
                ["contractAddress", "to"].forEach(function (key) {
                  if (tx[key] == "") {
                    delete tx[key];
                  }
                });
                if (tx.creates == null && tx.contractAddress != null) {
                  tx.creates = tx.contractAddress;
                }
                const item = this.formatter.transactionResponse(tx);
                if (tx.timeStamp) {
                  item.timestamp = parseInt(tx.timeStamp);
                }
                return item;
              });
            });
          }
          isCommunityResource() {
            return (this.apiKey === etherscan_provider_defaultApiKey);
          }
        }
//# sourceMappingURL=etherscan-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/random/lib.esm/shuffle.js

        function shuffled(array) {
          array = array.slice();
          for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            const tmp = array[i];
            array[i] = array[j];
            array[j] = tmp;
          }
          return array;
        }
//# sourceMappingURL=shuffle.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/fallback-provider.js

        var fallback_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };










        const fallback_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);
        function fallback_provider_now() { return (new Date()).getTime(); }
// Returns to network as long as all agree, or null if any is null.
// Throws an error if any two networks do not match.
        function checkNetworks(networks) {
          let result = null;
          for (let i = 0; i < networks.length; i++) {
            const network = networks[i];
            // Null! We do not know our network; bail.
            if (network == null) {
              return null;
            }
            if (result) {
              // Make sure the network matches the previous networks
              if (!(result.name === network.name && result.chainId === network.chainId &&
                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {
                fallback_provider_logger.throwArgumentError("provider mismatch", "networks", networks);
              }
            }
            else {
              result = network;
            }
          }
          return result;
        }
        function median(values, maxDelta) {
          values = values.slice().sort();
          const middle = Math.floor(values.length / 2);
          // Odd length; take the middle
          if (values.length % 2) {
            return values[middle];
          }
          // Even length; take the average of the two middle
          const a = values[middle - 1], b = values[middle];
          if (maxDelta != null && Math.abs(a - b) > maxDelta) {
            return null;
          }
          return (a + b) / 2;
        }
        function fallback_provider_serialize(value) {
          if (value === null) {
            return "null";
          }
          else if (typeof (value) === "number" || typeof (value) === "boolean") {
            return JSON.stringify(value);
          }
          else if (typeof (value) === "string") {
            return value;
          }
          else if (bignumber_BigNumber.isBigNumber(value)) {
            return value.toString();
          }
          else if (Array.isArray(value)) {
            return JSON.stringify(value.map((i) => fallback_provider_serialize(i)));
          }
          else if (typeof (value) === "object") {
            const keys = Object.keys(value);
            keys.sort();
            return "{" + keys.map((key) => {
              let v = value[key];
              if (typeof (v) === "function") {
                v = "[function]";
              }
              else {
                v = fallback_provider_serialize(v);
              }
              return JSON.stringify(key) + ":" + v;
            }).join(",") + "}";
          }
          throw new Error("unknown value type: " + typeof (value));
        }
// Next request ID to use for emitting debug info
        let nextRid = 1;
        ;
        function fallback_provider_stall(duration) {
          let cancel = null;
          let timer = null;
          let promise = (new Promise((resolve) => {
            cancel = function () {
              if (timer) {
                clearTimeout(timer);
                timer = null;
              }
              resolve();
            };
            timer = setTimeout(cancel, duration);
          }));
          const wait = (func) => {
            promise = promise.then(func);
            return promise;
          };
          function getPromise() {
            return promise;
          }
          return { cancel, getPromise, wait };
        }
        const ForwardErrors = [
          logger_lib_esm["b" /* Logger */].errors.CALL_EXCEPTION,
          logger_lib_esm["b" /* Logger */].errors.INSUFFICIENT_FUNDS,
          logger_lib_esm["b" /* Logger */].errors.NONCE_EXPIRED,
          logger_lib_esm["b" /* Logger */].errors.REPLACEMENT_UNDERPRICED,
          logger_lib_esm["b" /* Logger */].errors.UNPREDICTABLE_GAS_LIMIT
        ];
        const ForwardProperties = [
          "address",
          "args",
          "errorArgs",
          "errorSignature",
          "method",
          "transaction",
        ];
        ;
        function exposeDebugConfig(config, now) {
          const result = {
            weight: config.weight
          };
          Object.defineProperty(result, "provider", { get: () => config.provider });
          if (config.start) {
            result.start = config.start;
          }
          if (now) {
            result.duration = (now - config.start);
          }
          if (config.done) {
            if (config.error) {
              result.error = config.error;
            }
            else {
              result.result = config.result || null;
            }
          }
          return result;
        }
        function normalizedTally(normalize, quorum) {
          return function (configs) {
            // Count the votes for each result
            const tally = {};
            configs.forEach((c) => {
              const value = normalize(c.result);
              if (!tally[value]) {
                tally[value] = { count: 0, result: c.result };
              }
              tally[value].count++;
            });
            // Check for a quorum on any given result
            const keys = Object.keys(tally);
            for (let i = 0; i < keys.length; i++) {
              const check = tally[keys[i]];
              if (check.count >= quorum) {
                return check.result;
              }
            }
            // No quroum
            return undefined;
          };
        }
        function getProcessFunc(provider, method, params) {
          let normalize = fallback_provider_serialize;
          switch (method) {
            case "getBlockNumber":
              // Return the median value, unless there is (median + 1) is also
              // present, in which case that is probably true and the median
              // is going to be stale soon. In the event of a malicious node,
              // the lie will be true soon enough.
              return function (configs) {
                const values = configs.map((c) => c.result);
                // Get the median block number
                let blockNumber = median(configs.map((c) => c.result), 2);
                if (blockNumber == null) {
                  return undefined;
                }
                blockNumber = Math.ceil(blockNumber);
                // If the next block height is present, its prolly safe to use
                if (values.indexOf(blockNumber + 1) >= 0) {
                  blockNumber++;
                }
                // Don't ever roll back the blockNumber
                if (blockNumber >= provider._highestBlockNumber) {
                  provider._highestBlockNumber = blockNumber;
                }
                return provider._highestBlockNumber;
              };
            case "getGasPrice":
              // Return the middle (round index up) value, similar to median
              // but do not average even entries and choose the higher.
              // Malicious actors must compromise 50% of the nodes to lie.
              return function (configs) {
                const values = configs.map((c) => c.result);
                values.sort();
                return values[Math.floor(values.length / 2)];
              };
            case "getEtherPrice":
              // Returns the median price. Malicious actors must compromise at
              // least 50% of the nodes to lie (in a meaningful way).
              return function (configs) {
                return median(configs.map((c) => c.result));
              };
            // No additional normalizing required; serialize is enough
            case "getBalance":
            case "getTransactionCount":
            case "getCode":
            case "getStorageAt":
            case "call":
            case "estimateGas":
            case "getLogs":
              break;
            // We drop the confirmations from transactions as it is approximate
            case "getTransaction":
            case "getTransactionReceipt":
              normalize = function (tx) {
                if (tx == null) {
                  return null;
                }
                tx = shallowCopy(tx);
                tx.confirmations = -1;
                return fallback_provider_serialize(tx);
              };
              break;
            // We drop the confirmations from transactions as it is approximate
            case "getBlock":
              // We drop the confirmations from transactions as it is approximate
              if (params.includeTransactions) {
                normalize = function (block) {
                  if (block == null) {
                    return null;
                  }
                  block = shallowCopy(block);
                  block.transactions = block.transactions.map((tx) => {
                    tx = shallowCopy(tx);
                    tx.confirmations = -1;
                    return tx;
                  });
                  return fallback_provider_serialize(block);
                };
              }
              else {
                normalize = function (block) {
                  if (block == null) {
                    return null;
                  }
                  return fallback_provider_serialize(block);
                };
              }
              break;
            default:
              throw new Error("unknown method: " + method);
          }
          // Return the result if and only if the expected quorum is
          // satisfied and agreed upon for the final result.
          return normalizedTally(normalize, provider.quorum);
        }
// If we are doing a blockTag query, we need to make sure the backend is
// caught up to the FallbackProvider, before sending a request to it.
        function waitForSync(config, blockNumber) {
          return fallback_provider_awaiter(this, void 0, void 0, function* () {
            const provider = (config.provider);
            if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {
              return provider;
            }
            return poll(() => {
              return new Promise((resolve, reject) => {
                setTimeout(function () {
                  // We are synced
                  if (provider.blockNumber >= blockNumber) {
                    return resolve(provider);
                  }
                  // We're done; just quit
                  if (config.cancelled) {
                    return resolve(null);
                  }
                  // Try again, next block
                  return resolve(undefined);
                }, 0);
              });
            }, { oncePoll: provider });
          });
        }
        function getRunner(config, currentBlockNumber, method, params) {
          return fallback_provider_awaiter(this, void 0, void 0, function* () {
            let provider = config.provider;
            switch (method) {
              case "getBlockNumber":
              case "getGasPrice":
                return provider[method]();
              case "getEtherPrice":
                if (provider.getEtherPrice) {
                  return provider.getEtherPrice();
                }
                break;
              case "getBalance":
              case "getTransactionCount":
              case "getCode":
                if (params.blockTag && Object(lib_esm["l" /* isHexString */])(params.blockTag)) {
                  provider = yield waitForSync(config, currentBlockNumber);
                }
                return provider[method](params.address, params.blockTag || "latest");
              case "getStorageAt":
                if (params.blockTag && Object(lib_esm["l" /* isHexString */])(params.blockTag)) {
                  provider = yield waitForSync(config, currentBlockNumber);
                }
                return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
              case "getBlock":
                if (params.blockTag && Object(lib_esm["l" /* isHexString */])(params.blockTag)) {
                  provider = yield waitForSync(config, currentBlockNumber);
                }
                return provider[(params.includeTransactions ? "getBlockWithTransactions" : "getBlock")](params.blockTag || params.blockHash);
              case "call":
              case "estimateGas":
                if (params.blockTag && Object(lib_esm["l" /* isHexString */])(params.blockTag)) {
                  provider = yield waitForSync(config, currentBlockNumber);
                }
                return provider[method](params.transaction);
              case "getTransaction":
              case "getTransactionReceipt":
                return provider[method](params.transactionHash);
              case "getLogs": {
                let filter = params.filter;
                if ((filter.fromBlock && Object(lib_esm["l" /* isHexString */])(filter.fromBlock)) || (filter.toBlock && Object(lib_esm["l" /* isHexString */])(filter.toBlock))) {
                  provider = yield waitForSync(config, currentBlockNumber);
                }
                return provider.getLogs(filter);
              }
            }
            return fallback_provider_logger.throwError("unknown method error", logger_lib_esm["b" /* Logger */].errors.UNKNOWN_ERROR, {
              method: method,
              params: params
            });
          });
        }
        class fallback_provider_FallbackProvider extends base_provider_BaseProvider {
          constructor(providers, quorum) {
            fallback_provider_logger.checkNew(new.target, fallback_provider_FallbackProvider);
            if (providers.length === 0) {
              fallback_provider_logger.throwArgumentError("missing providers", "providers", providers);
            }
            const providerConfigs = providers.map((configOrProvider, index) => {
              if (lib_esm_Provider.isProvider(configOrProvider)) {
                const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;
                const priority = 1;
                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
              }
              const config = shallowCopy(configOrProvider);
              if (config.priority == null) {
                config.priority = 1;
              }
              if (config.stallTimeout == null) {
                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;
              }
              if (config.weight == null) {
                config.weight = 1;
              }
              const weight = config.weight;
              if (weight % 1 || weight > 512 || weight < 1) {
                fallback_provider_logger.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
              }
              return Object.freeze(config);
            });
            const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);
            if (quorum == null) {
              quorum = total / 2;
            }
            else if (quorum > total) {
              fallback_provider_logger.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
            }
            // Are all providers' networks are known
            let networkOrReady = checkNetworks(providerConfigs.map((c) => (c.provider).network));
            // Not all networks are known; we must stall
            if (networkOrReady == null) {
              networkOrReady = new Promise((resolve, reject) => {
                setTimeout(() => {
                  this.detectNetwork().then(resolve, reject);
                }, 0);
              });
            }
            super(networkOrReady);
            // Preserve a copy, so we do not get mutated
            defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
            defineReadOnly(this, "quorum", quorum);
            this._highestBlockNumber = -1;
          }
          detectNetwork() {
            return fallback_provider_awaiter(this, void 0, void 0, function* () {
              const networks = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));
              return checkNetworks(networks);
            });
          }
          perform(method, params) {
            return fallback_provider_awaiter(this, void 0, void 0, function* () {
              // Sending transactions is special; always broadcast it to all backends
              if (method === "sendTransaction") {
                const results = yield Promise.all(this.providerConfigs.map((c) => {
                  return c.provider.sendTransaction(params.signedTransaction).then((result) => {
                    return result.hash;
                  }, (error) => {
                    return error;
                  });
                }));
                // Any success is good enough (other errors are likely "already seen" errors
                for (let i = 0; i < results.length; i++) {
                  const result = results[i];
                  if (typeof (result) === "string") {
                    return result;
                  }
                }
                // They were all an error; pick the first error
                throw results[0];
              }
              // We need to make sure we are in sync with our backends, so we need
              // to know this before we can make a lot of calls
              if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
                yield this.getBlockNumber();
              }
              const processFunc = getProcessFunc(this, method, params);
              // Shuffle the providers and then sort them by their priority; we
              // shallowCopy them since we will store the result in them too
              const configs = shuffled(this.providerConfigs.map(shallowCopy));
              configs.sort((a, b) => (a.priority - b.priority));
              const currentBlockNumber = this._highestBlockNumber;
              let i = 0;
              let first = true;
              while (true) {
                const t0 = fallback_provider_now();
                // Compute the inflight weight (exclude anything past)
                let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))
                  .reduce((accum, c) => (accum + c.weight), 0);
                // Start running enough to meet quorum
                while (inflightWeight < this.quorum && i < configs.length) {
                  const config = configs[i++];
                  const rid = nextRid++;
                  config.start = fallback_provider_now();
                  config.staller = fallback_provider_stall(config.stallTimeout);
                  config.staller.wait(() => { config.staller = null; });
                  config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
                    config.done = true;
                    config.result = result;
                    if (this.listenerCount("debug")) {
                      this.emit("debug", {
                        action: "request",
                        rid: rid,
                        backend: exposeDebugConfig(config, fallback_provider_now()),
                        request: { method: method, params: deepCopy(params) },
                        provider: this
                      });
                    }
                  }, (error) => {
                    config.done = true;
                    config.error = error;
                    if (this.listenerCount("debug")) {
                      this.emit("debug", {
                        action: "request",
                        rid: rid,
                        backend: exposeDebugConfig(config, fallback_provider_now()),
                        request: { method: method, params: deepCopy(params) },
                        provider: this
                      });
                    }
                  });
                  if (this.listenerCount("debug")) {
                    this.emit("debug", {
                      action: "request",
                      rid: rid,
                      backend: exposeDebugConfig(config, null),
                      request: { method: method, params: deepCopy(params) },
                      provider: this
                    });
                  }
                  inflightWeight += config.weight;
                }
                // Wait for anything meaningful to finish or stall out
                const waiting = [];
                configs.forEach((c) => {
                  if (c.done || !c.runner) {
                    return;
                  }
                  waiting.push(c.runner);
                  if (c.staller) {
                    waiting.push(c.staller.getPromise());
                  }
                });
                if (waiting.length) {
                  yield Promise.race(waiting);
                }
                // Check the quorum and process the results; the process function
                // may additionally decide the quorum is not met
                const results = configs.filter((c) => (c.done && c.error == null));
                if (results.length >= this.quorum) {
                  const result = processFunc(results);
                  if (result !== undefined) {
                    // Shut down any stallers
                    configs.forEach(c => {
                      if (c.staller) {
                        c.staller.cancel();
                      }
                      c.cancelled = true;
                    });
                    return result;
                  }
                  if (!first) {
                    yield fallback_provider_stall(100).getPromise();
                  }
                  first = false;
                }
                // No result, check for errors that should be forwarded
                const errors = configs.reduce((accum, c) => {
                  if (!c.done || c.error == null) {
                    return accum;
                  }
                  const code = (c.error).code;
                  if (ForwardErrors.indexOf(code) >= 0) {
                    if (!accum[code]) {
                      accum[code] = { error: c.error, weight: 0 };
                    }
                    accum[code].weight += c.weight;
                  }
                  return accum;
                }, ({}));
                Object.keys(errors).forEach((errorCode) => {
                  const tally = errors[errorCode];
                  if (tally.weight < this.quorum) {
                    return;
                  }
                  // Shut down any stallers
                  configs.forEach(c => {
                    if (c.staller) {
                      c.staller.cancel();
                    }
                    c.cancelled = true;
                  });
                  const e = (tally.error);
                  const props = {};
                  ForwardProperties.forEach((name) => {
                    if (e[name] == null) {
                      return;
                    }
                    props[name] = e[name];
                  });
                  fallback_provider_logger.throwError(e.reason || e.message, errorCode, props);
                });
                // All configs have run to completion; we will never get more data
                if (configs.filter((c) => !c.done).length === 0) {
                  break;
                }
              }
              // Shut down any stallers; shouldn't be any
              configs.forEach(c => {
                if (c.staller) {
                  c.staller.cancel();
                }
                c.cancelled = true;
              });
              return fallback_provider_logger.throwError("failed to meet quorum", logger_lib_esm["b" /* Logger */].errors.SERVER_ERROR, {
                method: method,
                params: params,
                //results: configs.map((c) => c.result),
                //errors: configs.map((c) => c.error),
                results: configs.map((c) => exposeDebugConfig(c)),
                provider: this
              });
            });
          }
        }
//# sourceMappingURL=fallback-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/ipc-provider.js

        const IpcProvider = null;

//# sourceMappingURL=ipc-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/infura-provider.js






        const infura_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);

        const defaultProjectId = "84842078b09946638c03157f83405213";
        class infura_provider_InfuraWebSocketProvider extends websocket_provider_WebSocketProvider {
          constructor(network, apiKey) {
            const provider = new infura_provider_InfuraProvider(network, apiKey);
            const connection = provider.connection;
            if (connection.password) {
              infura_provider_logger.throwError("INFURA WebSocket project secrets unsupported", logger_lib_esm["b" /* Logger */].errors.UNSUPPORTED_OPERATION, {
                operation: "InfuraProvider.getWebSocketProvider()"
              });
            }
            const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
            super(url, network);
            defineReadOnly(this, "apiKey", provider.projectId);
            defineReadOnly(this, "projectId", provider.projectId);
            defineReadOnly(this, "projectSecret", provider.projectSecret);
          }
          isCommunityResource() {
            return (this.projectId === defaultProjectId);
          }
        }
        class infura_provider_InfuraProvider extends url_json_rpc_provider_UrlJsonRpcProvider {
          static getWebSocketProvider(network, apiKey) {
            return new infura_provider_InfuraWebSocketProvider(network, apiKey);
          }
          static getApiKey(apiKey) {
            const apiKeyObj = {
              apiKey: defaultProjectId,
              projectId: defaultProjectId,
              projectSecret: null
            };
            if (apiKey == null) {
              return apiKeyObj;
            }
            if (typeof (apiKey) === "string") {
              apiKeyObj.projectId = apiKey;
            }
            else if (apiKey.projectSecret != null) {
              infura_provider_logger.assertArgument((typeof (apiKey.projectId) === "string"), "projectSecret requires a projectId", "projectId", apiKey.projectId);
              infura_provider_logger.assertArgument((typeof (apiKey.projectSecret) === "string"), "invalid projectSecret", "projectSecret", "[REDACTED]");
              apiKeyObj.projectId = apiKey.projectId;
              apiKeyObj.projectSecret = apiKey.projectSecret;
            }
            else if (apiKey.projectId) {
              apiKeyObj.projectId = apiKey.projectId;
            }
            apiKeyObj.apiKey = apiKeyObj.projectId;
            return apiKeyObj;
          }
          static getUrl(network, apiKey) {
            let host = null;
            switch (network ? network.name : "unknown") {
              case "homestead":
                host = "mainnet.infura.io";
                break;
              case "ropsten":
                host = "ropsten.infura.io";
                break;
              case "rinkeby":
                host = "rinkeby.infura.io";
                break;
              case "kovan":
                host = "kovan.infura.io";
                break;
              case "goerli":
                host = "goerli.infura.io";
                break;
              case "matic":
                host = "polygon-mainnet.infura.io";
                break;
              case "maticmum":
                host = "polygon-mumbai.infura.io";
                break;
              case "optimism":
                host = "optimism-mainnet.infura.io";
                break;
              case "optimism-kovan":
                host = "optimism-kovan.infura.io";
                break;
              case "arbitrum":
                host = "arbitrum-mainnet.infura.io";
                break;
              case "arbitrum-rinkeby":
                host = "arbitrum-rinkeby.infura.io";
                break;
              default:
                infura_provider_logger.throwError("unsupported network", logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT, {
                  argument: "network",
                  value: network
                });
            }
            const connection = {
              allowGzip: true,
              url: ("https:/" + "/" + host + "/v3/" + apiKey.projectId),
              throttleCallback: (attempt, url) => {
                if (apiKey.projectId === defaultProjectId) {
                  showThrottleMessage();
                }
                return Promise.resolve(true);
              }
            };
            if (apiKey.projectSecret != null) {
              connection.user = "";
              connection.password = apiKey.projectSecret;
            }
            return connection;
          }
          isCommunityResource() {
            return (this.projectId === defaultProjectId);
          }
        }
//# sourceMappingURL=infura-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js



// Experimental
        class json_rpc_batch_provider_JsonRpcBatchProvider extends json_rpc_provider_JsonRpcProvider {
          send(method, params) {
            const request = {
              method: method,
              params: params,
              id: (this._nextId++),
              jsonrpc: "2.0"
            };
            if (this._pendingBatch == null) {
              this._pendingBatch = [];
            }
            const inflightRequest = { request, resolve: null, reject: null };
            const promise = new Promise((resolve, reject) => {
              inflightRequest.resolve = resolve;
              inflightRequest.reject = reject;
            });
            this._pendingBatch.push(inflightRequest);
            if (!this._pendingBatchAggregator) {
              // Schedule batch for next event loop + short duration
              this._pendingBatchAggregator = setTimeout(() => {
                // Get teh current batch and clear it, so new requests
                // go into the next batch
                const batch = this._pendingBatch;
                this._pendingBatch = null;
                this._pendingBatchAggregator = null;
                // Get the request as an array of requests
                const request = batch.map((inflight) => inflight.request);
                this.emit("debug", {
                  action: "requestBatch",
                  request: deepCopy(request),
                  provider: this
                });
                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {
                  this.emit("debug", {
                    action: "response",
                    request: request,
                    response: result,
                    provider: this
                  });
                  // For each result, feed it to the correct Promise, depending
                  // on whether it was a success or error
                  batch.forEach((inflightRequest, index) => {
                    const payload = result[index];
                    if (payload.error) {
                      const error = new Error(payload.error.message);
                      error.code = payload.error.code;
                      error.data = payload.error.data;
                      inflightRequest.reject(error);
                    }
                    else {
                      inflightRequest.resolve(payload.result);
                    }
                  });
                }, (error) => {
                  this.emit("debug", {
                    action: "response",
                    error: error,
                    request: request,
                    provider: this
                  });
                  batch.forEach((inflightRequest) => {
                    inflightRequest.reject(error);
                  });
                });
              }, 10);
            }
            return promise;
          }
        }
//# sourceMappingURL=json-rpc-batch-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js
        /* istanbul ignore file */




        const nodesmith_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);
// Special API key provided by Nodesmith for ethers.js
        const nodesmith_provider_defaultApiKey = "ETHERS_JS_SHARED";
        class nodesmith_provider_NodesmithProvider extends url_json_rpc_provider_UrlJsonRpcProvider {
          static getApiKey(apiKey) {
            if (apiKey && typeof (apiKey) !== "string") {
              nodesmith_provider_logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey || nodesmith_provider_defaultApiKey;
          }
          static getUrl(network, apiKey) {
            nodesmith_provider_logger.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
            let host = null;
            switch (network.name) {
              case "homestead":
                host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                break;
              case "ropsten":
                host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                break;
              case "rinkeby":
                host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                break;
              case "goerli":
                host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                break;
              case "kovan":
                host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                break;
              default:
                nodesmith_provider_logger.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return (host + "?apiKey=" + apiKey);
          }
        }
//# sourceMappingURL=nodesmith-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/pocket-provider.js




        const pocket_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);

// These are load-balancer-based application IDs
        const defaultApplicationIds = {
          homestead: "6004bcd10040261633ade990",
          ropsten: "6004bd4d0040261633ade991",
          rinkeby: "6004bda20040261633ade994",
          goerli: "6004bd860040261633ade992",
        };
        class pocket_provider_PocketProvider extends url_json_rpc_provider_UrlJsonRpcProvider {
          constructor(network, apiKey) {
            // We need a bit of creativity in the constructor because
            // Pocket uses different default API keys based on the network
            if (apiKey == null) {
              const n = getStatic(new.target, "getNetwork")(network);
              if (n) {
                const applicationId = defaultApplicationIds[n.name];
                if (applicationId) {
                  apiKey = {
                    applicationId: applicationId,
                    loadBalancer: true
                  };
                }
              }
              // If there was any issue above, we don't know this network
              if (apiKey == null) {
                pocket_provider_logger.throwError("unsupported network", logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT, {
                  argument: "network",
                  value: network
                });
              }
            }
            super(network, apiKey);
          }
          static getApiKey(apiKey) {
            // Most API Providers allow null to get the default configuration, but
            // Pocket requires the network to decide the default provider, so we
            // rely on hijacking the constructor to add a sensible default for us
            if (apiKey == null) {
              pocket_provider_logger.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
            }
            const apiKeyObj = {
              applicationId: null,
              loadBalancer: false,
              applicationSecretKey: null
            };
            // Parse applicationId and applicationSecretKey
            if (typeof (apiKey) === "string") {
              apiKeyObj.applicationId = apiKey;
            }
            else if (apiKey.applicationSecretKey != null) {
              pocket_provider_logger.assertArgument((typeof (apiKey.applicationId) === "string"), "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
              pocket_provider_logger.assertArgument((typeof (apiKey.applicationSecretKey) === "string"), "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
              apiKeyObj.applicationId = apiKey.applicationId;
              apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
              apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
            }
            else if (apiKey.applicationId) {
              pocket_provider_logger.assertArgument((typeof (apiKey.applicationId) === "string"), "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
              apiKeyObj.applicationId = apiKey.applicationId;
              apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
            }
            else {
              pocket_provider_logger.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
            }
            return apiKeyObj;
          }
          static getUrl(network, apiKey) {
            let host = null;
            switch (network ? network.name : "unknown") {
              case "homestead":
                host = "eth-mainnet.gateway.pokt.network";
                break;
              case "ropsten":
                host = "eth-ropsten.gateway.pokt.network";
                break;
              case "rinkeby":
                host = "eth-rinkeby.gateway.pokt.network";
                break;
              case "goerli":
                host = "eth-goerli.gateway.pokt.network";
                break;
              default:
                pocket_provider_logger.throwError("unsupported network", logger_lib_esm["b" /* Logger */].errors.INVALID_ARGUMENT, {
                  argument: "network",
                  value: network
                });
            }
            let url = null;
            if (apiKey.loadBalancer) {
              url = `https:/\/${host}/v1/lb/${apiKey.applicationId}`;
            }
            else {
              url = `https:/\/${host}/v1/${apiKey.applicationId}`;
            }
            const connection = { url };
            // Initialize empty headers
            connection.headers = {};
            // Apply application secret key
            if (apiKey.applicationSecretKey != null) {
              connection.user = "";
              connection.password = apiKey.applicationSecretKey;
            }
            return connection;
          }
          isCommunityResource() {
            return (this.applicationId === defaultApplicationIds[this.network.name]);
          }
        }
//# sourceMappingURL=pocket-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/web3-provider.js




        const web3_provider_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);

        let _nextId = 1;
        function buildWeb3LegacyFetcher(provider, sendFunc) {
          const fetcher = "Web3LegacyFetcher";
          return function (method, params) {
            const request = {
              method: method,
              params: params,
              id: (_nextId++),
              jsonrpc: "2.0"
            };
            return new Promise((resolve, reject) => {
              this.emit("debug", {
                action: "request",
                fetcher,
                request: deepCopy(request),
                provider: this
              });
              sendFunc(request, (error, response) => {
                if (error) {
                  this.emit("debug", {
                    action: "response",
                    fetcher,
                    error,
                    request,
                    provider: this
                  });
                  return reject(error);
                }
                this.emit("debug", {
                  action: "response",
                  fetcher,
                  request,
                  response,
                  provider: this
                });
                if (response.error) {
                  const error = new Error(response.error.message);
                  error.code = response.error.code;
                  error.data = response.error.data;
                  return reject(error);
                }
                resolve(response.result);
              });
            });
          };
        }
        function buildEip1193Fetcher(provider) {
          return function (method, params) {
            if (params == null) {
              params = [];
            }
            const request = { method, params };
            this.emit("debug", {
              action: "request",
              fetcher: "Eip1193Fetcher",
              request: deepCopy(request),
              provider: this
            });
            return provider.request(request).then((response) => {
              this.emit("debug", {
                action: "response",
                fetcher: "Eip1193Fetcher",
                request,
                response,
                provider: this
              });
              return response;
            }, (error) => {
              this.emit("debug", {
                action: "response",
                fetcher: "Eip1193Fetcher",
                request,
                error,
                provider: this
              });
              throw error;
            });
          };
        }
        class web3_provider_Web3Provider extends json_rpc_provider_JsonRpcProvider {
          constructor(provider, network) {
            web3_provider_logger.checkNew(new.target, web3_provider_Web3Provider);
            if (provider == null) {
              web3_provider_logger.throwArgumentError("missing provider", "provider", provider);
            }
            let path = null;
            let jsonRpcFetchFunc = null;
            let subprovider = null;
            if (typeof (provider) === "function") {
              path = "unknown:";
              jsonRpcFetchFunc = provider;
            }
            else {
              path = provider.host || provider.path || "";
              if (!path && provider.isMetaMask) {
                path = "metamask";
              }
              subprovider = provider;
              if (provider.request) {
                if (path === "") {
                  path = "eip-1193:";
                }
                jsonRpcFetchFunc = buildEip1193Fetcher(provider);
              }
              else if (provider.sendAsync) {
                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
              }
              else if (provider.send) {
                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
              }
              else {
                web3_provider_logger.throwArgumentError("unsupported provider", "provider", provider);
              }
              if (!path) {
                path = "unknown:";
              }
            }
            super(path, network);
            defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
            defineReadOnly(this, "provider", subprovider);
          }
          send(method, params) {
            return this.jsonRpcFetchFunc(method, params);
          }
        }
//# sourceMappingURL=web3-provider.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/index.js




















        const providers_lib_esm_logger = new logger_lib_esm["b" /* Logger */](providers_lib_esm_version_version);
////////////////////////
// Helper Functions
        function getDefaultProvider(network, options) {
          if (network == null) {
            network = "homestead";
          }
          // If passed a URL, figure out the right type of provider based on the scheme
          if (typeof (network) === "string") {
            // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
            // Handle http and ws (and their secure variants)
            const match = network.match(/^(ws|http)s?:/i);
            if (match) {
              switch (match[1]) {
                case "http":
                  return new json_rpc_provider_JsonRpcProvider(network);
                case "ws":
                  return new websocket_provider_WebSocketProvider(network);
                default:
                  providers_lib_esm_logger.throwArgumentError("unsupported URL scheme", "network", network);
              }
            }
          }
          const n = lib_esm_getNetwork(network);
          if (!n || !n._defaultProvider) {
            providers_lib_esm_logger.throwError("unsupported getDefaultProvider network", logger_lib_esm["b" /* Logger */].errors.NETWORK_ERROR, {
              operation: "getDefaultProvider",
              network: network
            });
          }
          return n._defaultProvider({
            FallbackProvider: fallback_provider_FallbackProvider,
            AlchemyProvider: alchemy_provider_AlchemyProvider,
            CloudflareProvider: cloudflare_provider_CloudflareProvider,
            EtherscanProvider: etherscan_provider_EtherscanProvider,
            InfuraProvider: infura_provider_InfuraProvider,
            JsonRpcProvider: json_rpc_provider_JsonRpcProvider,
            NodesmithProvider: nodesmith_provider_NodesmithProvider,
            PocketProvider: pocket_provider_PocketProvider,
            Web3Provider: web3_provider_Web3Provider,
            IpcProvider: IpcProvider,
          }, options);
        }
////////////////////////
// Exports

//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/base64/lib.esm/index.js


//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/solidity/lib.esm/_version.js
        const solidity_lib_esm_version_version = "solidity/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/solidity/lib.esm/index.js






        const regexBytes = new RegExp("^bytes([0-9]+)$");
        const regexNumber = new RegExp("^(u?int)([0-9]*)$");
        const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
        const lib_esm_Zeros = "0000000000000000000000000000000000000000000000000000000000000000";


        const solidity_lib_esm_logger = new logger_lib_esm["b" /* Logger */](solidity_lib_esm_version_version);
        function _pack(type, value, isArray) {
          switch (type) {
            case "address":
              if (isArray) {
                return Object(lib_esm["p" /* zeroPad */])(value, 32);
              }
              return Object(lib_esm["a" /* arrayify */])(value);
            case "string":
              return toUtf8Bytes(value);
            case "bytes":
              return Object(lib_esm["a" /* arrayify */])(value);
            case "bool":
              value = (value ? "0x01" : "0x00");
              if (isArray) {
                return Object(lib_esm["p" /* zeroPad */])(value, 32);
              }
              return Object(lib_esm["a" /* arrayify */])(value);
          }
          let match = type.match(regexNumber);
          if (match) {
            //let signed = (match[1] === "int")
            let size = parseInt(match[2] || "256");
            if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {
              solidity_lib_esm_logger.throwArgumentError("invalid number type", "type", type);
            }
            if (isArray) {
              size = 256;
            }
            value = bignumber_BigNumber.from(value).toTwos(size);
            return Object(lib_esm["p" /* zeroPad */])(value, size / 8);
          }
          match = type.match(regexBytes);
          if (match) {
            const size = parseInt(match[1]);
            if (String(size) !== match[1] || size === 0 || size > 32) {
              solidity_lib_esm_logger.throwArgumentError("invalid bytes type", "type", type);
            }
            if (Object(lib_esm["a" /* arrayify */])(value).byteLength !== size) {
              solidity_lib_esm_logger.throwArgumentError(`invalid value for ${type}`, "value", value);
            }
            if (isArray) {
              return Object(lib_esm["a" /* arrayify */])((value + lib_esm_Zeros).substring(0, 66));
            }
            return value;
          }
          match = type.match(regexArray);
          if (match && Array.isArray(value)) {
            const baseType = match[1];
            const count = parseInt(match[2] || String(value.length));
            if (count != value.length) {
              solidity_lib_esm_logger.throwArgumentError(`invalid array length for ${type}`, "value", value);
            }
            const result = [];
            value.forEach(function (value) {
              result.push(_pack(baseType, value, true));
            });
            return Object(lib_esm["b" /* concat */])(result);
          }
          return solidity_lib_esm_logger.throwArgumentError("invalid type", "type", type);
        }
// @TODO: Array Enum
        function lib_esm_pack(types, values) {
          if (types.length != values.length) {
            solidity_lib_esm_logger.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
          }
          const tight = [];
          types.forEach(function (type, index) {
            tight.push(_pack(type, values[index]));
          });
          return Object(lib_esm["i" /* hexlify */])(Object(lib_esm["b" /* concat */])(tight));
        }
        function lib_esm_keccak256(types, values) {
          return keccak256(lib_esm_pack(types, values));
        }
        function lib_esm_sha256(types, values) {
          return sha256(lib_esm_pack(types, values));
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/strings/lib.esm/bytes32.js




        function formatBytes32String(text) {
          // Get the bytes
          const bytes = toUtf8Bytes(text);
          // Check we have room for null-termination
          if (bytes.length > 31) {
            throw new Error("bytes32 string must be less than 32 bytes");
          }
          // Zero-pad (implicitly null-terminates)
          return Object(lib_esm["i" /* hexlify */])(Object(lib_esm["b" /* concat */])([bytes, HashZero]).slice(0, 32));
        }
        function parseBytes32String(bytes) {
          const data = Object(lib_esm["a" /* arrayify */])(bytes);
          // Must be 32 bytes with a null-termination
          if (data.length !== 32) {
            throw new Error("invalid bytes32 - not 32 bytes long");
          }
          if (data[31] !== 0) {
            throw new Error("invalid bytes32 string - no null terminator");
          }
          // Find the null termination
          let length = 31;
          while (data[length - 1] === 0) {
            length--;
          }
          // Determine the string value
          return toUtf8String(data.slice(0, length));
        }
//# sourceMappingURL=bytes32.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/units/lib.esm/_version.js
        const units_lib_esm_version_version = "units/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/units/lib.esm/index.js




        const units_lib_esm_logger = new logger_lib_esm["b" /* Logger */](units_lib_esm_version_version);
        const names = [
          "wei",
          "kwei",
          "mwei",
          "gwei",
          "szabo",
          "finney",
          "ether",
        ];
// Some environments have issues with RegEx that contain back-tracking, so we cannot
// use them.
        function commify(value) {
          const comps = String(value).split(".");
          if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === "." || value === "-.") {
            units_lib_esm_logger.throwArgumentError("invalid value", "value", value);
          }
          // Make sure we have at least one whole digit (0 if none)
          let whole = comps[0];
          let negative = "";
          if (whole.substring(0, 1) === "-") {
            negative = "-";
            whole = whole.substring(1);
          }
          // Make sure we have at least 1 whole digit with no leading zeros
          while (whole.substring(0, 1) === "0") {
            whole = whole.substring(1);
          }
          if (whole === "") {
            whole = "0";
          }
          let suffix = "";
          if (comps.length === 2) {
            suffix = "." + (comps[1] || "0");
          }
          while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
            suffix = suffix.substring(0, suffix.length - 1);
          }
          const formatted = [];
          while (whole.length) {
            if (whole.length <= 3) {
              formatted.unshift(whole);
              break;
            }
            else {
              const index = whole.length - 3;
              formatted.unshift(whole.substring(index));
              whole = whole.substring(0, index);
            }
          }
          return negative + formatted.join(",") + suffix;
        }
        function formatUnits(value, unitName) {
          if (typeof (unitName) === "string") {
            const index = names.indexOf(unitName);
            if (index !== -1) {
              unitName = 3 * index;
            }
          }
          return formatFixed(value, (unitName != null) ? unitName : 18);
        }
        function parseUnits(value, unitName) {
          if (typeof (value) !== "string") {
            units_lib_esm_logger.throwArgumentError("value must be a string", "value", value);
          }
          if (typeof (unitName) === "string") {
            const index = names.indexOf(unitName);
            if (index !== -1) {
              unitName = 3 * index;
            }
          }
          return parseFixed(value, (unitName != null) ? unitName : 18);
        }
        function formatEther(wei) {
          return formatUnits(wei, 18);
        }
        function parseEther(ether) {
          return parseUnits(ether, 18);
        }
//# sourceMappingURL=index.js.map
// CONCATENATED MODULE: ./node_modules/ethers/lib.esm/utils.js






















////////////////////////
// Enums


////////////////////////
// Exports

//# sourceMappingURL=utils.js.map
// CONCATENATED MODULE: ./node_modules/ethers/lib.esm/_version.js
        const ethers_lib_esm_version_version = "ethers/5.5.2";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/ethers/lib.esm/ethers.js











////////////////////////
// Compile-Time Constants
// This is generated by "npm run dist"

        const ethers_logger = new logger_lib_esm["b" /* Logger */](ethers_lib_esm_version_version);
////////////////////////
// Exports

//# sourceMappingURL=ethers.js.map
// CONCATENATED MODULE: ./node_modules/ethers/lib.esm/index.js

// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js

        try {
          const anyGlobal = window;
          if (anyGlobal._ethers == null) {
            anyGlobal._ethers = ethers_namespaceObject;
          }
        }
        catch (error) { }


//# sourceMappingURL=index.js.map

        /***/ }),

      /***/ "c04e":
      /***/ (function(module, exports, __webpack_require__) {

        var isObject = __webpack_require__("861d");
        var isSymbol = __webpack_require__("d9b5");
        var getMethod = __webpack_require__("dc4a");
        var ordinaryToPrimitive = __webpack_require__("485a");
        var wellKnownSymbol = __webpack_require__("b622");

        var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
        module.exports = function (input, pref) {
          if (!isObject(input) || isSymbol(input)) return input;
          var exoticToPrim = getMethod(input, TO_PRIMITIVE);
          var result;
          if (exoticToPrim) {
            if (pref === undefined) pref = 'default';
            result = exoticToPrim.call(input, pref);
            if (!isObject(result) || isSymbol(result)) return result;
            throw TypeError("Can't convert object to primitive value");
          }
          if (pref === undefined) pref = 'number';
          return ordinaryToPrimitive(input, pref);
        };


        /***/ }),

      /***/ "c24b":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EC$1; });
          /* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("399f");
          /* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);
          /* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("7d92");
          /* harmony import */ var hash_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(hash_js__WEBPACK_IMPORTED_MODULE_1__);



          var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

          function getDefaultExportFromCjs (x) {
            return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
          }

          function createCommonjsModule(fn, basedir, module) {
            return module = {
              path: basedir,
              exports: {},
              require: function (path, base) {
                return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
              }
            }, fn(module, module.exports), module.exports;
          }

          function getDefaultExportFromNamespaceIfPresent (n) {
            return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
          }

          function getDefaultExportFromNamespaceIfNotNamed (n) {
            return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
          }

          function getAugmentedNamespace(n) {
            if (n.__esModule) return n;
            var a = Object.defineProperty({}, '__esModule', {value: true});
            Object.keys(n).forEach(function (k) {
              var d = Object.getOwnPropertyDescriptor(n, k);
              Object.defineProperty(a, k, d.get ? d : {
                enumerable: true,
                get: function () {
                  return n[k];
                }
              });
            });
            return a;
          }

          function commonjsRequire () {
            throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
          }

          var minimalisticAssert = assert;

          function assert(val, msg) {
            if (!val)
              throw new Error(msg || 'Assertion failed');
          }

          assert.equal = function assertEqual(l, r, msg) {
            if (l != r)
              throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
          };

          var utils_1 = createCommonjsModule(function (module, exports) {
            'use strict';

            var utils = exports;

            function toArray(msg, enc) {
              if (Array.isArray(msg))
                return msg.slice();
              if (!msg)
                return [];
              var res = [];
              if (typeof msg !== 'string') {
                for (var i = 0; i < msg.length; i++)
                  res[i] = msg[i] | 0;
                return res;
              }
              if (enc === 'hex') {
                msg = msg.replace(/[^a-z0-9]+/ig, '');
                if (msg.length % 2 !== 0)
                  msg = '0' + msg;
                for (var i = 0; i < msg.length; i += 2)
                  res.push(parseInt(msg[i] + msg[i + 1], 16));
              } else {
                for (var i = 0; i < msg.length; i++) {
                  var c = msg.charCodeAt(i);
                  var hi = c >> 8;
                  var lo = c & 0xff;
                  if (hi)
                    res.push(hi, lo);
                  else
                    res.push(lo);
                }
              }
              return res;
            }
            utils.toArray = toArray;

            function zero2(word) {
              if (word.length === 1)
                return '0' + word;
              else
                return word;
            }
            utils.zero2 = zero2;

            function toHex(msg) {
              var res = '';
              for (var i = 0; i < msg.length; i++)
                res += zero2(msg[i].toString(16));
              return res;
            }
            utils.toHex = toHex;

            utils.encode = function encode(arr, enc) {
              if (enc === 'hex')
                return toHex(arr);
              else
                return arr;
            };
          });

          var utils_1$1 = createCommonjsModule(function (module, exports) {
            'use strict';

            var utils = exports;




            utils.assert = minimalisticAssert;
            utils.toArray = utils_1.toArray;
            utils.zero2 = utils_1.zero2;
            utils.toHex = utils_1.toHex;
            utils.encode = utils_1.encode;

// Represent num in a w-NAF form
            function getNAF(num, w, bits) {
              var naf = new Array(Math.max(num.bitLength(), bits) + 1);
              naf.fill(0);

              var ws = 1 << (w + 1);
              var k = num.clone();

              for (var i = 0; i < naf.length; i++) {
                var z;
                var mod = k.andln(ws - 1);
                if (k.isOdd()) {
                  if (mod > (ws >> 1) - 1)
                    z = (ws >> 1) - mod;
                  else
                    z = mod;
                  k.isubn(z);
                } else {
                  z = 0;
                }

                naf[i] = z;
                k.iushrn(1);
              }

              return naf;
            }
            utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
            function getJSF(k1, k2) {
              var jsf = [
                [],
                [],
              ];

              k1 = k1.clone();
              k2 = k2.clone();
              var d1 = 0;
              var d2 = 0;
              var m8;
              while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
                // First phase
                var m14 = (k1.andln(3) + d1) & 3;
                var m24 = (k2.andln(3) + d2) & 3;
                if (m14 === 3)
                  m14 = -1;
                if (m24 === 3)
                  m24 = -1;
                var u1;
                if ((m14 & 1) === 0) {
                  u1 = 0;
                } else {
                  m8 = (k1.andln(7) + d1) & 7;
                  if ((m8 === 3 || m8 === 5) && m24 === 2)
                    u1 = -m14;
                  else
                    u1 = m14;
                }
                jsf[0].push(u1);

                var u2;
                if ((m24 & 1) === 0) {
                  u2 = 0;
                } else {
                  m8 = (k2.andln(7) + d2) & 7;
                  if ((m8 === 3 || m8 === 5) && m14 === 2)
                    u2 = -m24;
                  else
                    u2 = m24;
                }
                jsf[1].push(u2);

                // Second phase
                if (2 * d1 === u1 + 1)
                  d1 = 1 - d1;
                if (2 * d2 === u2 + 1)
                  d2 = 1 - d2;
                k1.iushrn(1);
                k2.iushrn(1);
              }

              return jsf;
            }
            utils.getJSF = getJSF;

            function cachedProperty(obj, name, computer) {
              var key = '_' + name;
              obj.prototype[name] = function cachedProperty() {
                return this[key] !== undefined ? this[key] :
                  this[key] = computer.call(this);
              };
            }
            utils.cachedProperty = cachedProperty;

            function parseBytes(bytes) {
              return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                bytes;
            }
            utils.parseBytes = parseBytes;

            function intFromLE(bytes) {
              return new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(bytes, 'hex', 'le');
            }
            utils.intFromLE = intFromLE;
          });

          'use strict';



          var getNAF = utils_1$1.getNAF;
          var getJSF = utils_1$1.getJSF;
          var assert$1 = utils_1$1.assert;

          function BaseCurve(type, conf) {
            this.type = type;
            this.p = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(conf.p, 16);

            // Use Montgomery, when there is no fast reduction for the prime
            this.red = conf.prime ? bn_js__WEBPACK_IMPORTED_MODULE_0___default.a.red(conf.prime) : bn_js__WEBPACK_IMPORTED_MODULE_0___default.a.mont(this.p);

            // Useful for many curves
            this.zero = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(0).toRed(this.red);
            this.one = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(1).toRed(this.red);
            this.two = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(2).toRed(this.red);

            // Curve configuration, optional
            this.n = conf.n && new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(conf.n, 16);
            this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

            // Temporary arrays
            this._wnafT1 = new Array(4);
            this._wnafT2 = new Array(4);
            this._wnafT3 = new Array(4);
            this._wnafT4 = new Array(4);

            this._bitLength = this.n ? this.n.bitLength() : 0;

            // Generalized Greg Maxwell's trick
            var adjustCount = this.n && this.p.div(this.n);
            if (!adjustCount || adjustCount.cmpn(100) > 0) {
              this.redN = null;
            } else {
              this._maxwellTrick = true;
              this.redN = this.n.toRed(this.red);
            }
          }
          var base = BaseCurve;

          BaseCurve.prototype.point = function point() {
            throw new Error('Not implemented');
          };

          BaseCurve.prototype.validate = function validate() {
            throw new Error('Not implemented');
          };

          BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
            assert$1(p.precomputed);
            var doubles = p._getDoubles();

            var naf = getNAF(k, 1, this._bitLength);
            var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
            I /= 3;

            // Translate into more windowed form
            var repr = [];
            var j;
            var nafW;
            for (j = 0; j < naf.length; j += doubles.step) {
              nafW = 0;
              for (var l = j + doubles.step - 1; l >= j; l--)
                nafW = (nafW << 1) + naf[l];
              repr.push(nafW);
            }

            var a = this.jpoint(null, null, null);
            var b = this.jpoint(null, null, null);
            for (var i = I; i > 0; i--) {
              for (j = 0; j < repr.length; j++) {
                nafW = repr[j];
                if (nafW === i)
                  b = b.mixedAdd(doubles.points[j]);
                else if (nafW === -i)
                  b = b.mixedAdd(doubles.points[j].neg());
              }
              a = a.add(b);
            }
            return a.toP();
          };

          BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
            var w = 4;

            // Precompute window
            var nafPoints = p._getNAFPoints(w);
            w = nafPoints.wnd;
            var wnd = nafPoints.points;

            // Get NAF form
            var naf = getNAF(k, w, this._bitLength);

            // Add `this`*(N+1) for every w-NAF index
            var acc = this.jpoint(null, null, null);
            for (var i = naf.length - 1; i >= 0; i--) {
              // Count zeroes
              for (var l = 0; i >= 0 && naf[i] === 0; i--)
                l++;
              if (i >= 0)
                l++;
              acc = acc.dblp(l);

              if (i < 0)
                break;
              var z = naf[i];
              assert$1(z !== 0);
              if (p.type === 'affine') {
                // J +- P
                if (z > 0)
                  acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
                else
                  acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
              } else {
                // J +- J
                if (z > 0)
                  acc = acc.add(wnd[(z - 1) >> 1]);
                else
                  acc = acc.add(wnd[(-z - 1) >> 1].neg());
              }
            }
            return p.type === 'affine' ? acc.toP() : acc;
          };

          BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                                 points,
                                                                 coeffs,
                                                                 len,
                                                                 jacobianResult) {
            var wndWidth = this._wnafT1;
            var wnd = this._wnafT2;
            var naf = this._wnafT3;

            // Fill all arrays
            var max = 0;
            var i;
            var j;
            var p;
            for (i = 0; i < len; i++) {
              p = points[i];
              var nafPoints = p._getNAFPoints(defW);
              wndWidth[i] = nafPoints.wnd;
              wnd[i] = nafPoints.points;
            }

            // Comb small window NAFs
            for (i = len - 1; i >= 1; i -= 2) {
              var a = i - 1;
              var b = i;
              if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
                naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
                max = Math.max(naf[a].length, max);
                max = Math.max(naf[b].length, max);
                continue;
              }

              var comb = [
                points[a], /* 1 */
                null, /* 3 */
                null, /* 5 */
                points[b], /* 7 */
              ];

              // Try to avoid Projective points, if possible
              if (points[a].y.cmp(points[b].y) === 0) {
                comb[1] = points[a].add(points[b]);
                comb[2] = points[a].toJ().mixedAdd(points[b].neg());
              } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                comb[1] = points[a].toJ().mixedAdd(points[b]);
                comb[2] = points[a].add(points[b].neg());
              } else {
                comb[1] = points[a].toJ().mixedAdd(points[b]);
                comb[2] = points[a].toJ().mixedAdd(points[b].neg());
              }

              var index = [
                -3, /* -1 -1 */
                -1, /* -1 0 */
                -5, /* -1 1 */
                -7, /* 0 -1 */
                0, /* 0 0 */
                7, /* 0 1 */
                5, /* 1 -1 */
                1, /* 1 0 */
                3,  /* 1 1 */
              ];

              var jsf = getJSF(coeffs[a], coeffs[b]);
              max = Math.max(jsf[0].length, max);
              naf[a] = new Array(max);
              naf[b] = new Array(max);
              for (j = 0; j < max; j++) {
                var ja = jsf[0][j] | 0;
                var jb = jsf[1][j] | 0;

                naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                naf[b][j] = 0;
                wnd[a] = comb;
              }
            }

            var acc = this.jpoint(null, null, null);
            var tmp = this._wnafT4;
            for (i = max; i >= 0; i--) {
              var k = 0;

              while (i >= 0) {
                var zero = true;
                for (j = 0; j < len; j++) {
                  tmp[j] = naf[j][i] | 0;
                  if (tmp[j] !== 0)
                    zero = false;
                }
                if (!zero)
                  break;
                k++;
                i--;
              }
              if (i >= 0)
                k++;
              acc = acc.dblp(k);
              if (i < 0)
                break;

              for (j = 0; j < len; j++) {
                var z = tmp[j];
                p;
                if (z === 0)
                  continue;
                else if (z > 0)
                  p = wnd[j][(z - 1) >> 1];
                else if (z < 0)
                  p = wnd[j][(-z - 1) >> 1].neg();

                if (p.type === 'affine')
                  acc = acc.mixedAdd(p);
                else
                  acc = acc.add(p);
              }
            }
            // Zeroify references
            for (i = 0; i < len; i++)
              wnd[i] = null;

            if (jacobianResult)
              return acc;
            else
              return acc.toP();
          };

          function BasePoint(curve, type) {
            this.curve = curve;
            this.type = type;
            this.precomputed = null;
          }
          BaseCurve.BasePoint = BasePoint;

          BasePoint.prototype.eq = function eq(/*other*/) {
            throw new Error('Not implemented');
          };

          BasePoint.prototype.validate = function validate() {
            return this.curve.validate(this);
          };

          BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            bytes = utils_1$1.toArray(bytes, enc);

            var len = this.p.byteLength();

            // uncompressed, hybrid-odd, hybrid-even
            if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
              bytes.length - 1 === 2 * len) {
              if (bytes[0] === 0x06)
                assert$1(bytes[bytes.length - 1] % 2 === 0);
              else if (bytes[0] === 0x07)
                assert$1(bytes[bytes.length - 1] % 2 === 1);

              var res =  this.point(bytes.slice(1, 1 + len),
                bytes.slice(1 + len, 1 + 2 * len));

              return res;
            } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
              return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
            }
            throw new Error('Unknown point format');
          };

          BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
            return this.encode(enc, true);
          };

          BasePoint.prototype._encode = function _encode(compact) {
            var len = this.curve.p.byteLength();
            var x = this.getX().toArray('be', len);

            if (compact)
              return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

            return [ 0x04 ].concat(x, this.getY().toArray('be', len));
          };

          BasePoint.prototype.encode = function encode(enc, compact) {
            return utils_1$1.encode(this._encode(compact), enc);
          };

          BasePoint.prototype.precompute = function precompute(power) {
            if (this.precomputed)
              return this;

            var precomputed = {
              doubles: null,
              naf: null,
              beta: null,
            };
            precomputed.naf = this._getNAFPoints(8);
            precomputed.doubles = this._getDoubles(4, power);
            precomputed.beta = this._getBeta();
            this.precomputed = precomputed;

            return this;
          };

          BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
            if (!this.precomputed)
              return false;

            var doubles = this.precomputed.doubles;
            if (!doubles)
              return false;

            return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
          };

          BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
            if (this.precomputed && this.precomputed.doubles)
              return this.precomputed.doubles;

            var doubles = [ this ];
            var acc = this;
            for (var i = 0; i < power; i += step) {
              for (var j = 0; j < step; j++)
                acc = acc.dbl();
              doubles.push(acc);
            }
            return {
              step: step,
              points: doubles,
            };
          };

          BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
            if (this.precomputed && this.precomputed.naf)
              return this.precomputed.naf;

            var res = [ this ];
            var max = (1 << wnd) - 1;
            var dbl = max === 1 ? null : this.dbl();
            for (var i = 1; i < max; i++)
              res[i] = res[i - 1].add(dbl);
            return {
              wnd: wnd,
              points: res,
            };
          };

          BasePoint.prototype._getBeta = function _getBeta() {
            return null;
          };

          BasePoint.prototype.dblp = function dblp(k) {
            var r = this;
            for (var i = 0; i < k; i++)
              r = r.dbl();
            return r;
          };

          var inherits_browser = createCommonjsModule(function (module) {
            if (typeof Object.create === 'function') {
              // implementation from standard node.js 'util' module
              module.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                  ctor.super_ = superCtor;
                  ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                      value: ctor,
                      enumerable: false,
                      writable: true,
                      configurable: true
                    }
                  });
                }
              };
            } else {
              // old school shim for old browsers
              module.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                  ctor.super_ = superCtor;
                  var TempCtor = function () {};
                  TempCtor.prototype = superCtor.prototype;
                  ctor.prototype = new TempCtor();
                  ctor.prototype.constructor = ctor;
                }
              };
            }
          });

          'use strict';






          var assert$2 = utils_1$1.assert;

          function ShortCurve(conf) {
            base.call(this, 'short', conf);

            this.a = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(conf.a, 16).toRed(this.red);
            this.b = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(conf.b, 16).toRed(this.red);
            this.tinv = this.two.redInvm();

            this.zeroA = this.a.fromRed().cmpn(0) === 0;
            this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

            // If the curve is endomorphic, precalculate beta and lambda
            this.endo = this._getEndomorphism(conf);
            this._endoWnafT1 = new Array(4);
            this._endoWnafT2 = new Array(4);
          }
          inherits_browser(ShortCurve, base);
          var short_1 = ShortCurve;

          ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
            // No efficient endomorphism
            if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
              return;

            // Compute beta and lambda, that lambda * P = (beta * Px; Py)
            var beta;
            var lambda;
            if (conf.beta) {
              beta = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(conf.beta, 16).toRed(this.red);
            } else {
              var betas = this._getEndoRoots(this.p);
              // Choose the smallest beta
              beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
              beta = beta.toRed(this.red);
            }
            if (conf.lambda) {
              lambda = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(conf.lambda, 16);
            } else {
              // Choose the lambda that is matching selected beta
              var lambdas = this._getEndoRoots(this.n);
              if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
                lambda = lambdas[0];
              } else {
                lambda = lambdas[1];
                assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
              }
            }

            // Get basis vectors, used for balanced length-two representation
            var basis;
            if (conf.basis) {
              basis = conf.basis.map(function(vec) {
                return {
                  a: new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(vec.a, 16),
                  b: new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(vec.b, 16),
                };
              });
            } else {
              basis = this._getEndoBasis(lambda);
            }

            return {
              beta: beta,
              lambda: lambda,
              basis: basis,
            };
          };

          ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
            // Find roots of for x^2 + x + 1 in F
            // Root = (-1 +- Sqrt(-3)) / 2
            //
            var red = num === this.p ? this.red : bn_js__WEBPACK_IMPORTED_MODULE_0___default.a.mont(num);
            var tinv = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(2).toRed(red).redInvm();
            var ntinv = tinv.redNeg();

            var s = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(3).toRed(red).redNeg().redSqrt().redMul(tinv);

            var l1 = ntinv.redAdd(s).fromRed();
            var l2 = ntinv.redSub(s).fromRed();
            return [ l1, l2 ];
          };

          ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
            // aprxSqrt >= sqrt(this.n)
            var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

            // 3.74
            // Run EGCD, until r(L + 1) < aprxSqrt
            var u = lambda;
            var v = this.n.clone();
            var x1 = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(1);
            var y1 = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(0);
            var x2 = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(0);
            var y2 = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(1);

            // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
            var a0;
            var b0;
            // First vector
            var a1;
            var b1;
            // Second vector
            var a2;
            var b2;

            var prevR;
            var i = 0;
            var r;
            var x;
            while (u.cmpn(0) !== 0) {
              var q = v.div(u);
              r = v.sub(q.mul(u));
              x = x2.sub(q.mul(x1));
              var y = y2.sub(q.mul(y1));

              if (!a1 && r.cmp(aprxSqrt) < 0) {
                a0 = prevR.neg();
                b0 = x1;
                a1 = r.neg();
                b1 = x;
              } else if (a1 && ++i === 2) {
                break;
              }
              prevR = r;

              v = u;
              u = r;
              x2 = x1;
              x1 = x;
              y2 = y1;
              y1 = y;
            }
            a2 = r.neg();
            b2 = x;

            var len1 = a1.sqr().add(b1.sqr());
            var len2 = a2.sqr().add(b2.sqr());
            if (len2.cmp(len1) >= 0) {
              a2 = a0;
              b2 = b0;
            }

            // Normalize signs
            if (a1.negative) {
              a1 = a1.neg();
              b1 = b1.neg();
            }
            if (a2.negative) {
              a2 = a2.neg();
              b2 = b2.neg();
            }

            return [
              { a: a1, b: b1 },
              { a: a2, b: b2 },
            ];
          };

          ShortCurve.prototype._endoSplit = function _endoSplit(k) {
            var basis = this.endo.basis;
            var v1 = basis[0];
            var v2 = basis[1];

            var c1 = v2.b.mul(k).divRound(this.n);
            var c2 = v1.b.neg().mul(k).divRound(this.n);

            var p1 = c1.mul(v1.a);
            var p2 = c2.mul(v2.a);
            var q1 = c1.mul(v1.b);
            var q2 = c2.mul(v2.b);

            // Calculate answer
            var k1 = k.sub(p1).sub(p2);
            var k2 = q1.add(q2).neg();
            return { k1: k1, k2: k2 };
          };

          ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
            x = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(x, 16);
            if (!x.red)
              x = x.toRed(this.red);

            var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
            var y = y2.redSqrt();
            if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
              throw new Error('invalid point');

            // XXX Is there any way to tell if the number is odd without converting it
            // to non-red form?
            var isOdd = y.fromRed().isOdd();
            if (odd && !isOdd || !odd && isOdd)
              y = y.redNeg();

            return this.point(x, y);
          };

          ShortCurve.prototype.validate = function validate(point) {
            if (point.inf)
              return true;

            var x = point.x;
            var y = point.y;

            var ax = this.a.redMul(x);
            var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
            return y.redSqr().redISub(rhs).cmpn(0) === 0;
          };

          ShortCurve.prototype._endoWnafMulAdd =
            function _endoWnafMulAdd(points, coeffs, jacobianResult) {
              var npoints = this._endoWnafT1;
              var ncoeffs = this._endoWnafT2;
              for (var i = 0; i < points.length; i++) {
                var split = this._endoSplit(coeffs[i]);
                var p = points[i];
                var beta = p._getBeta();

                if (split.k1.negative) {
                  split.k1.ineg();
                  p = p.neg(true);
                }
                if (split.k2.negative) {
                  split.k2.ineg();
                  beta = beta.neg(true);
                }

                npoints[i * 2] = p;
                npoints[i * 2 + 1] = beta;
                ncoeffs[i * 2] = split.k1;
                ncoeffs[i * 2 + 1] = split.k2;
              }
              var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

              // Clean-up references to points and coefficients
              for (var j = 0; j < i * 2; j++) {
                npoints[j] = null;
                ncoeffs[j] = null;
              }
              return res;
            };

          function Point(curve, x, y, isRed) {
            base.BasePoint.call(this, curve, 'affine');
            if (x === null && y === null) {
              this.x = null;
              this.y = null;
              this.inf = true;
            } else {
              this.x = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(x, 16);
              this.y = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(y, 16);
              // Force redgomery representation when loading from JSON
              if (isRed) {
                this.x.forceRed(this.curve.red);
                this.y.forceRed(this.curve.red);
              }
              if (!this.x.red)
                this.x = this.x.toRed(this.curve.red);
              if (!this.y.red)
                this.y = this.y.toRed(this.curve.red);
              this.inf = false;
            }
          }
          inherits_browser(Point, base.BasePoint);

          ShortCurve.prototype.point = function point(x, y, isRed) {
            return new Point(this, x, y, isRed);
          };

          ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
            return Point.fromJSON(this, obj, red);
          };

          Point.prototype._getBeta = function _getBeta() {
            if (!this.curve.endo)
              return;

            var pre = this.precomputed;
            if (pre && pre.beta)
              return pre.beta;

            var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
            if (pre) {
              var curve = this.curve;
              var endoMul = function(p) {
                return curve.point(p.x.redMul(curve.endo.beta), p.y);
              };
              pre.beta = beta;
              beta.precomputed = {
                beta: null,
                naf: pre.naf && {
                  wnd: pre.naf.wnd,
                  points: pre.naf.points.map(endoMul),
                },
                doubles: pre.doubles && {
                  step: pre.doubles.step,
                  points: pre.doubles.points.map(endoMul),
                },
              };
            }
            return beta;
          };

          Point.prototype.toJSON = function toJSON() {
            if (!this.precomputed)
              return [ this.x, this.y ];

            return [ this.x, this.y, this.precomputed && {
              doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1),
              },
              naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1),
              },
            } ];
          };

          Point.fromJSON = function fromJSON(curve, obj, red) {
            if (typeof obj === 'string')
              obj = JSON.parse(obj);
            var res = curve.point(obj[0], obj[1], red);
            if (!obj[2])
              return res;

            function obj2point(obj) {
              return curve.point(obj[0], obj[1], red);
            }

            var pre = obj[2];
            res.precomputed = {
              beta: null,
              doubles: pre.doubles && {
                step: pre.doubles.step,
                points: [ res ].concat(pre.doubles.points.map(obj2point)),
              },
              naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: [ res ].concat(pre.naf.points.map(obj2point)),
              },
            };
            return res;
          };

          Point.prototype.inspect = function inspect() {
            if (this.isInfinity())
              return '<EC Point Infinity>';
            return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
              ' y: ' + this.y.fromRed().toString(16, 2) + '>';
          };

          Point.prototype.isInfinity = function isInfinity() {
            return this.inf;
          };

          Point.prototype.add = function add(p) {
            // O + P = P
            if (this.inf)
              return p;

            // P + O = P
            if (p.inf)
              return this;

            // P + P = 2P
            if (this.eq(p))
              return this.dbl();

            // P + (-P) = O
            if (this.neg().eq(p))
              return this.curve.point(null, null);

            // P + Q = O
            if (this.x.cmp(p.x) === 0)
              return this.curve.point(null, null);

            var c = this.y.redSub(p.y);
            if (c.cmpn(0) !== 0)
              c = c.redMul(this.x.redSub(p.x).redInvm());
            var nx = c.redSqr().redISub(this.x).redISub(p.x);
            var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            return this.curve.point(nx, ny);
          };

          Point.prototype.dbl = function dbl() {
            if (this.inf)
              return this;

            // 2P = O
            var ys1 = this.y.redAdd(this.y);
            if (ys1.cmpn(0) === 0)
              return this.curve.point(null, null);

            var a = this.curve.a;

            var x2 = this.x.redSqr();
            var dyinv = ys1.redInvm();
            var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

            var nx = c.redSqr().redISub(this.x.redAdd(this.x));
            var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            return this.curve.point(nx, ny);
          };

          Point.prototype.getX = function getX() {
            return this.x.fromRed();
          };

          Point.prototype.getY = function getY() {
            return this.y.fromRed();
          };

          Point.prototype.mul = function mul(k) {
            k = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(k, 16);
            if (this.isInfinity())
              return this;
            else if (this._hasDoubles(k))
              return this.curve._fixedNafMul(this, k);
            else if (this.curve.endo)
              return this.curve._endoWnafMulAdd([ this ], [ k ]);
            else
              return this.curve._wnafMul(this, k);
          };

          Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
            var points = [ this, p2 ];
            var coeffs = [ k1, k2 ];
            if (this.curve.endo)
              return this.curve._endoWnafMulAdd(points, coeffs);
            else
              return this.curve._wnafMulAdd(1, points, coeffs, 2);
          };

          Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
            var points = [ this, p2 ];
            var coeffs = [ k1, k2 ];
            if (this.curve.endo)
              return this.curve._endoWnafMulAdd(points, coeffs, true);
            else
              return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
          };

          Point.prototype.eq = function eq(p) {
            return this === p ||
              this.inf === p.inf &&
              (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
          };

          Point.prototype.neg = function neg(_precompute) {
            if (this.inf)
              return this;

            var res = this.curve.point(this.x, this.y.redNeg());
            if (_precompute && this.precomputed) {
              var pre = this.precomputed;
              var negate = function(p) {
                return p.neg();
              };
              res.precomputed = {
                naf: pre.naf && {
                  wnd: pre.naf.wnd,
                  points: pre.naf.points.map(negate),
                },
                doubles: pre.doubles && {
                  step: pre.doubles.step,
                  points: pre.doubles.points.map(negate),
                },
              };
            }
            return res;
          };

          Point.prototype.toJ = function toJ() {
            if (this.inf)
              return this.curve.jpoint(null, null, null);

            var res = this.curve.jpoint(this.x, this.y, this.curve.one);
            return res;
          };

          function JPoint(curve, x, y, z) {
            base.BasePoint.call(this, curve, 'jacobian');
            if (x === null && y === null && z === null) {
              this.x = this.curve.one;
              this.y = this.curve.one;
              this.z = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(0);
            } else {
              this.x = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(x, 16);
              this.y = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(y, 16);
              this.z = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(z, 16);
            }
            if (!this.x.red)
              this.x = this.x.toRed(this.curve.red);
            if (!this.y.red)
              this.y = this.y.toRed(this.curve.red);
            if (!this.z.red)
              this.z = this.z.toRed(this.curve.red);

            this.zOne = this.z === this.curve.one;
          }
          inherits_browser(JPoint, base.BasePoint);

          ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
            return new JPoint(this, x, y, z);
          };

          JPoint.prototype.toP = function toP() {
            if (this.isInfinity())
              return this.curve.point(null, null);

            var zinv = this.z.redInvm();
            var zinv2 = zinv.redSqr();
            var ax = this.x.redMul(zinv2);
            var ay = this.y.redMul(zinv2).redMul(zinv);

            return this.curve.point(ax, ay);
          };

          JPoint.prototype.neg = function neg() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
          };

          JPoint.prototype.add = function add(p) {
            // O + P = P
            if (this.isInfinity())
              return p;

            // P + O = P
            if (p.isInfinity())
              return this;

            // 12M + 4S + 7A
            var pz2 = p.z.redSqr();
            var z2 = this.z.redSqr();
            var u1 = this.x.redMul(pz2);
            var u2 = p.x.redMul(z2);
            var s1 = this.y.redMul(pz2.redMul(p.z));
            var s2 = p.y.redMul(z2.redMul(this.z));

            var h = u1.redSub(u2);
            var r = s1.redSub(s2);
            if (h.cmpn(0) === 0) {
              if (r.cmpn(0) !== 0)
                return this.curve.jpoint(null, null, null);
              else
                return this.dbl();
            }

            var h2 = h.redSqr();
            var h3 = h2.redMul(h);
            var v = u1.redMul(h2);

            var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
            var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
            var nz = this.z.redMul(p.z).redMul(h);

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.mixedAdd = function mixedAdd(p) {
            // O + P = P
            if (this.isInfinity())
              return p.toJ();

            // P + O = P
            if (p.isInfinity())
              return this;

            // 8M + 3S + 7A
            var z2 = this.z.redSqr();
            var u1 = this.x;
            var u2 = p.x.redMul(z2);
            var s1 = this.y;
            var s2 = p.y.redMul(z2).redMul(this.z);

            var h = u1.redSub(u2);
            var r = s1.redSub(s2);
            if (h.cmpn(0) === 0) {
              if (r.cmpn(0) !== 0)
                return this.curve.jpoint(null, null, null);
              else
                return this.dbl();
            }

            var h2 = h.redSqr();
            var h3 = h2.redMul(h);
            var v = u1.redMul(h2);

            var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
            var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
            var nz = this.z.redMul(h);

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.dblp = function dblp(pow) {
            if (pow === 0)
              return this;
            if (this.isInfinity())
              return this;
            if (!pow)
              return this.dbl();

            var i;
            if (this.curve.zeroA || this.curve.threeA) {
              var r = this;
              for (i = 0; i < pow; i++)
                r = r.dbl();
              return r;
            }

            // 1M + 2S + 1A + N * (4S + 5M + 8A)
            // N = 1 => 6M + 6S + 9A
            var a = this.curve.a;
            var tinv = this.curve.tinv;

            var jx = this.x;
            var jy = this.y;
            var jz = this.z;
            var jz4 = jz.redSqr().redSqr();

            // Reuse results
            var jyd = jy.redAdd(jy);
            for (i = 0; i < pow; i++) {
              var jx2 = jx.redSqr();
              var jyd2 = jyd.redSqr();
              var jyd4 = jyd2.redSqr();
              var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

              var t1 = jx.redMul(jyd2);
              var nx = c.redSqr().redISub(t1.redAdd(t1));
              var t2 = t1.redISub(nx);
              var dny = c.redMul(t2);
              dny = dny.redIAdd(dny).redISub(jyd4);
              var nz = jyd.redMul(jz);
              if (i + 1 < pow)
                jz4 = jz4.redMul(jyd4);

              jx = nx;
              jz = nz;
              jyd = dny;
            }

            return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
          };

          JPoint.prototype.dbl = function dbl() {
            if (this.isInfinity())
              return this;

            if (this.curve.zeroA)
              return this._zeroDbl();
            else if (this.curve.threeA)
              return this._threeDbl();
            else
              return this._dbl();
          };

          JPoint.prototype._zeroDbl = function _zeroDbl() {
            var nx;
            var ny;
            var nz;
            // Z = 1
            if (this.zOne) {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
              //     #doubling-mdbl-2007-bl
              // 1M + 5S + 14A

              // XX = X1^2
              var xx = this.x.redSqr();
              // YY = Y1^2
              var yy = this.y.redSqr();
              // YYYY = YY^2
              var yyyy = yy.redSqr();
              // S = 2 * ((X1 + YY)^2 - XX - YYYY)
              var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
              s = s.redIAdd(s);
              // M = 3 * XX + a; a = 0
              var m = xx.redAdd(xx).redIAdd(xx);
              // T = M ^ 2 - 2*S
              var t = m.redSqr().redISub(s).redISub(s);

              // 8 * YYYY
              var yyyy8 = yyyy.redIAdd(yyyy);
              yyyy8 = yyyy8.redIAdd(yyyy8);
              yyyy8 = yyyy8.redIAdd(yyyy8);

              // X3 = T
              nx = t;
              // Y3 = M * (S - T) - 8 * YYYY
              ny = m.redMul(s.redISub(t)).redISub(yyyy8);
              // Z3 = 2*Y1
              nz = this.y.redAdd(this.y);
            } else {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
              //     #doubling-dbl-2009-l
              // 2M + 5S + 13A

              // A = X1^2
              var a = this.x.redSqr();
              // B = Y1^2
              var b = this.y.redSqr();
              // C = B^2
              var c = b.redSqr();
              // D = 2 * ((X1 + B)^2 - A - C)
              var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
              d = d.redIAdd(d);
              // E = 3 * A
              var e = a.redAdd(a).redIAdd(a);
              // F = E^2
              var f = e.redSqr();

              // 8 * C
              var c8 = c.redIAdd(c);
              c8 = c8.redIAdd(c8);
              c8 = c8.redIAdd(c8);

              // X3 = F - 2 * D
              nx = f.redISub(d).redISub(d);
              // Y3 = E * (D - X3) - 8 * C
              ny = e.redMul(d.redISub(nx)).redISub(c8);
              // Z3 = 2 * Y1 * Z1
              nz = this.y.redMul(this.z);
              nz = nz.redIAdd(nz);
            }

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype._threeDbl = function _threeDbl() {
            var nx;
            var ny;
            var nz;
            // Z = 1
            if (this.zOne) {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
              //     #doubling-mdbl-2007-bl
              // 1M + 5S + 15A

              // XX = X1^2
              var xx = this.x.redSqr();
              // YY = Y1^2
              var yy = this.y.redSqr();
              // YYYY = YY^2
              var yyyy = yy.redSqr();
              // S = 2 * ((X1 + YY)^2 - XX - YYYY)
              var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
              s = s.redIAdd(s);
              // M = 3 * XX + a
              var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
              // T = M^2 - 2 * S
              var t = m.redSqr().redISub(s).redISub(s);
              // X3 = T
              nx = t;
              // Y3 = M * (S - T) - 8 * YYYY
              var yyyy8 = yyyy.redIAdd(yyyy);
              yyyy8 = yyyy8.redIAdd(yyyy8);
              yyyy8 = yyyy8.redIAdd(yyyy8);
              ny = m.redMul(s.redISub(t)).redISub(yyyy8);
              // Z3 = 2 * Y1
              nz = this.y.redAdd(this.y);
            } else {
              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
              // 3M + 5S

              // delta = Z1^2
              var delta = this.z.redSqr();
              // gamma = Y1^2
              var gamma = this.y.redSqr();
              // beta = X1 * gamma
              var beta = this.x.redMul(gamma);
              // alpha = 3 * (X1 - delta) * (X1 + delta)
              var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
              alpha = alpha.redAdd(alpha).redIAdd(alpha);
              // X3 = alpha^2 - 8 * beta
              var beta4 = beta.redIAdd(beta);
              beta4 = beta4.redIAdd(beta4);
              var beta8 = beta4.redAdd(beta4);
              nx = alpha.redSqr().redISub(beta8);
              // Z3 = (Y1 + Z1)^2 - gamma - delta
              nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
              // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
              var ggamma8 = gamma.redSqr();
              ggamma8 = ggamma8.redIAdd(ggamma8);
              ggamma8 = ggamma8.redIAdd(ggamma8);
              ggamma8 = ggamma8.redIAdd(ggamma8);
              ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
            }

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype._dbl = function _dbl() {
            var a = this.curve.a;

            // 4M + 6S + 10A
            var jx = this.x;
            var jy = this.y;
            var jz = this.z;
            var jz4 = jz.redSqr().redSqr();

            var jx2 = jx.redSqr();
            var jy2 = jy.redSqr();

            var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

            var jxd4 = jx.redAdd(jx);
            jxd4 = jxd4.redIAdd(jxd4);
            var t1 = jxd4.redMul(jy2);
            var nx = c.redSqr().redISub(t1.redAdd(t1));
            var t2 = t1.redISub(nx);

            var jyd8 = jy2.redSqr();
            jyd8 = jyd8.redIAdd(jyd8);
            jyd8 = jyd8.redIAdd(jyd8);
            jyd8 = jyd8.redIAdd(jyd8);
            var ny = c.redMul(t2).redISub(jyd8);
            var nz = jy.redAdd(jy).redMul(jz);

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.trpl = function trpl() {
            if (!this.curve.zeroA)
              return this.dbl().add(this);

            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
            // 5M + 10S + ...

            // XX = X1^2
            var xx = this.x.redSqr();
            // YY = Y1^2
            var yy = this.y.redSqr();
            // ZZ = Z1^2
            var zz = this.z.redSqr();
            // YYYY = YY^2
            var yyyy = yy.redSqr();
            // M = 3 * XX + a * ZZ2; a = 0
            var m = xx.redAdd(xx).redIAdd(xx);
            // MM = M^2
            var mm = m.redSqr();
            // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
            var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            e = e.redIAdd(e);
            e = e.redAdd(e).redIAdd(e);
            e = e.redISub(mm);
            // EE = E^2
            var ee = e.redSqr();
            // T = 16*YYYY
            var t = yyyy.redIAdd(yyyy);
            t = t.redIAdd(t);
            t = t.redIAdd(t);
            t = t.redIAdd(t);
            // U = (M + E)^2 - MM - EE - T
            var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
            // X3 = 4 * (X1 * EE - 4 * YY * U)
            var yyu4 = yy.redMul(u);
            yyu4 = yyu4.redIAdd(yyu4);
            yyu4 = yyu4.redIAdd(yyu4);
            var nx = this.x.redMul(ee).redISub(yyu4);
            nx = nx.redIAdd(nx);
            nx = nx.redIAdd(nx);
            // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
            var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
            ny = ny.redIAdd(ny);
            ny = ny.redIAdd(ny);
            ny = ny.redIAdd(ny);
            // Z3 = (Z1 + E)^2 - ZZ - EE
            var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

            return this.curve.jpoint(nx, ny, nz);
          };

          JPoint.prototype.mul = function mul(k, kbase) {
            k = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(k, kbase);

            return this.curve._wnafMul(this, k);
          };

          JPoint.prototype.eq = function eq(p) {
            if (p.type === 'affine')
              return this.eq(p.toJ());

            if (this === p)
              return true;

            // x1 * z2^2 == x2 * z1^2
            var z2 = this.z.redSqr();
            var pz2 = p.z.redSqr();
            if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
              return false;

            // y1 * z2^3 == y2 * z1^3
            var z3 = z2.redMul(this.z);
            var pz3 = pz2.redMul(p.z);
            return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
          };

          JPoint.prototype.eqXToP = function eqXToP(x) {
            var zs = this.z.redSqr();
            var rx = x.toRed(this.curve.red).redMul(zs);
            if (this.x.cmp(rx) === 0)
              return true;

            var xc = x.clone();
            var t = this.curve.redN.redMul(zs);
            for (;;) {
              xc.iadd(this.curve.n);
              if (xc.cmp(this.curve.p) >= 0)
                return false;

              rx.redIAdd(t);
              if (this.x.cmp(rx) === 0)
                return true;
            }
          };

          JPoint.prototype.inspect = function inspect() {
            if (this.isInfinity())
              return '<EC JPoint Infinity>';
            return '<EC JPoint x: ' + this.x.toString(16, 2) +
              ' y: ' + this.y.toString(16, 2) +
              ' z: ' + this.z.toString(16, 2) + '>';
          };

          JPoint.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.z.cmpn(0) === 0;
          };

          var curve_1 = createCommonjsModule(function (module, exports) {
            'use strict';

            var curve = exports;

            curve.base = base;
            curve.short = short_1;
            curve.mont = /*RicMoo:ethers:require(./mont)*/(null);
            curve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);
          });

          var curves_1 = createCommonjsModule(function (module, exports) {
            'use strict';

            var curves = exports;





            var assert = utils_1$1.assert;

            function PresetCurve(options) {
              if (options.type === 'short')
                this.curve = new curve_1.short(options);
              else if (options.type === 'edwards')
                this.curve = new curve_1.edwards(options);
              else
                this.curve = new curve_1.mont(options);
              this.g = this.curve.g;
              this.n = this.curve.n;
              this.hash = options.hash;

              assert(this.g.validate(), 'Invalid curve');
              assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
            }
            curves.PresetCurve = PresetCurve;

            function defineCurve(name, options) {
              Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                get: function() {
                  var curve = new PresetCurve(options);
                  Object.defineProperty(curves, name, {
                    configurable: true,
                    enumerable: true,
                    value: curve,
                  });
                  return curve;
                },
              });
            }

            defineCurve('p192', {
              type: 'short',
              prime: 'p192',
              p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
              a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
              b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
              n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
              hash: hash_js__WEBPACK_IMPORTED_MODULE_1___default.a.sha256,
              gRed: false,
              g: [
                '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
                '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
              ],
            });

            defineCurve('p224', {
              type: 'short',
              prime: 'p224',
              p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
              a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
              b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
              n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
              hash: hash_js__WEBPACK_IMPORTED_MODULE_1___default.a.sha256,
              gRed: false,
              g: [
                'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
                'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
              ],
            });

            defineCurve('p256', {
              type: 'short',
              prime: null,
              p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
              a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
              b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
              n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
              hash: hash_js__WEBPACK_IMPORTED_MODULE_1___default.a.sha256,
              gRed: false,
              g: [
                '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
                '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
              ],
            });

            defineCurve('p384', {
              type: 'short',
              prime: null,
              p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'fffffffe ffffffff 00000000 00000000 ffffffff',
              a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'fffffffe ffffffff 00000000 00000000 fffffffc',
              b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
                '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
              n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
                'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
              hash: hash_js__WEBPACK_IMPORTED_MODULE_1___default.a.sha384,
              gRed: false,
              g: [
                'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
                '5502f25d bf55296c 3a545e38 72760ab7',
                '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
                '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
              ],
            });

            defineCurve('p521', {
              type: 'short',
              prime: null,
              p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff',
              a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff fffffffc',
              b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
                '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
                '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
              n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
                'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
              hash: hash_js__WEBPACK_IMPORTED_MODULE_1___default.a.sha512,
              gRed: false,
              g: [
                '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
                '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
                'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
                '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
                '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
                '3fad0761 353c7086 a272c240 88be9476 9fd16650',
              ],
            });

            defineCurve('curve25519', {
              type: 'mont',
              prime: 'p25519',
              p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
              a: '76d06',
              b: '1',
              n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
              hash: hash_js__WEBPACK_IMPORTED_MODULE_1___default.a.sha256,
              gRed: false,
              g: [
                '9',
              ],
            });

            defineCurve('ed25519', {
              type: 'edwards',
              prime: 'p25519',
              p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
              a: '-1',
              c: '1',
              // -121665 * (121666^(-1)) (mod P)
              d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
              n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
              hash: hash_js__WEBPACK_IMPORTED_MODULE_1___default.a.sha256,
              gRed: false,
              g: [
                '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

                // 4/5
                '6666666666666666666666666666666666666666666666666666666666666658',
              ],
            });

            var pre;
            try {
              pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();
            } catch (e) {
              pre = undefined;
            }

            defineCurve('secp256k1', {
              type: 'short',
              prime: 'k256',
              p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
              a: '0',
              b: '7',
              n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
              h: '1',
              hash: hash_js__WEBPACK_IMPORTED_MODULE_1___default.a.sha256,

              // Precomputed endomorphism
              beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
              lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
              basis: [
                {
                  a: '3086d221a7d46bcde86c90e49284eb15',
                  b: '-e4437ed6010e88286f547fa90abfe4c3',
                },
                {
                  a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
                  b: '3086d221a7d46bcde86c90e49284eb15',
                },
              ],

              gRed: false,
              g: [
                '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
                '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
                pre,
              ],
            });
          });

          'use strict';





          function HmacDRBG(options) {
            if (!(this instanceof HmacDRBG))
              return new HmacDRBG(options);
            this.hash = options.hash;
            this.predResist = !!options.predResist;

            this.outLen = this.hash.outSize;
            this.minEntropy = options.minEntropy || this.hash.hmacStrength;

            this._reseed = null;
            this.reseedInterval = null;
            this.K = null;
            this.V = null;

            var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
            var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
            var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
            minimalisticAssert(entropy.length >= (this.minEntropy / 8),
              'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
            this._init(entropy, nonce, pers);
          }
          var hmacDrbg = HmacDRBG;

          HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
            var seed = entropy.concat(nonce).concat(pers);

            this.K = new Array(this.outLen / 8);
            this.V = new Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++) {
              this.K[i] = 0x00;
              this.V[i] = 0x01;
            }

            this._update(seed);
            this._reseed = 1;
            this.reseedInterval = 0x1000000000000;  // 2^48
          };

          HmacDRBG.prototype._hmac = function hmac() {
            return new hash_js__WEBPACK_IMPORTED_MODULE_1___default.a.hmac(this.hash, this.K);
          };

          HmacDRBG.prototype._update = function update(seed) {
            var kmac = this._hmac()
              .update(this.V)
              .update([ 0x00 ]);
            if (seed)
              kmac = kmac.update(seed);
            this.K = kmac.digest();
            this.V = this._hmac().update(this.V).digest();
            if (!seed)
              return;

            this.K = this._hmac()
              .update(this.V)
              .update([ 0x01 ])
              .update(seed)
              .digest();
            this.V = this._hmac().update(this.V).digest();
          };

          HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
            // Optional entropy enc
            if (typeof entropyEnc !== 'string') {
              addEnc = add;
              add = entropyEnc;
              entropyEnc = null;
            }

            entropy = utils_1.toArray(entropy, entropyEnc);
            add = utils_1.toArray(add, addEnc);

            minimalisticAssert(entropy.length >= (this.minEntropy / 8),
              'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

            this._update(entropy.concat(add || []));
            this._reseed = 1;
          };

          HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
            if (this._reseed > this.reseedInterval)
              throw new Error('Reseed is required');

            // Optional encoding
            if (typeof enc !== 'string') {
              addEnc = add;
              add = enc;
              enc = null;
            }

            // Optional additional data
            if (add) {
              add = utils_1.toArray(add, addEnc || 'hex');
              this._update(add);
            }

            var temp = [];
            while (temp.length < len) {
              this.V = this._hmac().update(this.V).digest();
              temp = temp.concat(this.V);
            }

            var res = temp.slice(0, len);
            this._update(add);
            this._reseed++;
            return utils_1.encode(res, enc);
          };

          'use strict';



          var assert$3 = utils_1$1.assert;

          function KeyPair(ec, options) {
            this.ec = ec;
            this.priv = null;
            this.pub = null;

            // KeyPair(ec, { priv: ..., pub: ... })
            if (options.priv)
              this._importPrivate(options.priv, options.privEnc);
            if (options.pub)
              this._importPublic(options.pub, options.pubEnc);
          }
          var key = KeyPair;

          KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
            if (pub instanceof KeyPair)
              return pub;

            return new KeyPair(ec, {
              pub: pub,
              pubEnc: enc,
            });
          };

          KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
            if (priv instanceof KeyPair)
              return priv;

            return new KeyPair(ec, {
              priv: priv,
              privEnc: enc,
            });
          };

          KeyPair.prototype.validate = function validate() {
            var pub = this.getPublic();

            if (pub.isInfinity())
              return { result: false, reason: 'Invalid public key' };
            if (!pub.validate())
              return { result: false, reason: 'Public key is not a point' };
            if (!pub.mul(this.ec.curve.n).isInfinity())
              return { result: false, reason: 'Public key * N != O' };

            return { result: true, reason: null };
          };

          KeyPair.prototype.getPublic = function getPublic(compact, enc) {
            // compact is optional argument
            if (typeof compact === 'string') {
              enc = compact;
              compact = null;
            }

            if (!this.pub)
              this.pub = this.ec.g.mul(this.priv);

            if (!enc)
              return this.pub;

            return this.pub.encode(enc, compact);
          };

          KeyPair.prototype.getPrivate = function getPrivate(enc) {
            if (enc === 'hex')
              return this.priv.toString(16, 2);
            else
              return this.priv;
          };

          KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
            this.priv = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(key, enc || 16);

            // Ensure that the priv won't be bigger than n, otherwise we may fail
            // in fixed multiplication method
            this.priv = this.priv.umod(this.ec.curve.n);
          };

          KeyPair.prototype._importPublic = function _importPublic(key, enc) {
            if (key.x || key.y) {
              // Montgomery points only have an `x` coordinate.
              // Weierstrass/Edwards points on the other hand have both `x` and
              // `y` coordinates.
              if (this.ec.curve.type === 'mont') {
                assert$3(key.x, 'Need x coordinate');
              } else if (this.ec.curve.type === 'short' ||
                this.ec.curve.type === 'edwards') {
                assert$3(key.x && key.y, 'Need both x and y coordinate');
              }
              this.pub = this.ec.curve.point(key.x, key.y);
              return;
            }
            this.pub = this.ec.curve.decodePoint(key, enc);
          };

// ECDH
          KeyPair.prototype.derive = function derive(pub) {
            if(!pub.validate()) {
              assert$3(pub.validate(), 'public point not validated');
            }
            return pub.mul(this.priv).getX();
          };

// ECDSA
          KeyPair.prototype.sign = function sign(msg, enc, options) {
            return this.ec.sign(msg, this, enc, options);
          };

          KeyPair.prototype.verify = function verify(msg, signature) {
            return this.ec.verify(msg, signature, this);
          };

          KeyPair.prototype.inspect = function inspect() {
            return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
              ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
          };

          'use strict';




          var assert$4 = utils_1$1.assert;

          function Signature(options, enc) {
            if (options instanceof Signature)
              return options;

            if (this._importDER(options, enc))
              return;

            assert$4(options.r && options.s, 'Signature without r or s');
            this.r = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(options.r, 16);
            this.s = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(options.s, 16);
            if (options.recoveryParam === undefined)
              this.recoveryParam = null;
            else
              this.recoveryParam = options.recoveryParam;
          }
          var signature = Signature;

          function Position() {
            this.place = 0;
          }

          function getLength(buf, p) {
            var initial = buf[p.place++];
            if (!(initial & 0x80)) {
              return initial;
            }
            var octetLen = initial & 0xf;

            // Indefinite length or overflow
            if (octetLen === 0 || octetLen > 4) {
              return false;
            }

            var val = 0;
            for (var i = 0, off = p.place; i < octetLen; i++, off++) {
              val <<= 8;
              val |= buf[off];
              val >>>= 0;
            }

            // Leading zeroes
            if (val <= 0x7f) {
              return false;
            }

            p.place = off;
            return val;
          }

          function rmPadding(buf) {
            var i = 0;
            var len = buf.length - 1;
            while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
              i++;
            }
            if (i === 0) {
              return buf;
            }
            return buf.slice(i);
          }

          Signature.prototype._importDER = function _importDER(data, enc) {
            data = utils_1$1.toArray(data, enc);
            var p = new Position();
            if (data[p.place++] !== 0x30) {
              return false;
            }
            var len = getLength(data, p);
            if (len === false) {
              return false;
            }
            if ((len + p.place) !== data.length) {
              return false;
            }
            if (data[p.place++] !== 0x02) {
              return false;
            }
            var rlen = getLength(data, p);
            if (rlen === false) {
              return false;
            }
            var r = data.slice(p.place, rlen + p.place);
            p.place += rlen;
            if (data[p.place++] !== 0x02) {
              return false;
            }
            var slen = getLength(data, p);
            if (slen === false) {
              return false;
            }
            if (data.length !== slen + p.place) {
              return false;
            }
            var s = data.slice(p.place, slen + p.place);
            if (r[0] === 0) {
              if (r[1] & 0x80) {
                r = r.slice(1);
              } else {
                // Leading zeroes
                return false;
              }
            }
            if (s[0] === 0) {
              if (s[1] & 0x80) {
                s = s.slice(1);
              } else {
                // Leading zeroes
                return false;
              }
            }

            this.r = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(r);
            this.s = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(s);
            this.recoveryParam = null;

            return true;
          };

          function constructLength(arr, len) {
            if (len < 0x80) {
              arr.push(len);
              return;
            }
            var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
            arr.push(octets | 0x80);
            while (--octets) {
              arr.push((len >>> (octets << 3)) & 0xff);
            }
            arr.push(len);
          }

          Signature.prototype.toDER = function toDER(enc) {
            var r = this.r.toArray();
            var s = this.s.toArray();

            // Pad values
            if (r[0] & 0x80)
              r = [ 0 ].concat(r);
            // Pad values
            if (s[0] & 0x80)
              s = [ 0 ].concat(s);

            r = rmPadding(r);
            s = rmPadding(s);

            while (!s[0] && !(s[1] & 0x80)) {
              s = s.slice(1);
            }
            var arr = [ 0x02 ];
            constructLength(arr, r.length);
            arr = arr.concat(r);
            arr.push(0x02);
            constructLength(arr, s.length);
            var backHalf = arr.concat(s);
            var res = [ 0x30 ];
            constructLength(res, backHalf.length);
            res = res.concat(backHalf);
            return utils_1$1.encode(res, enc);
          };

          'use strict';





          var rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
          var assert$5 = utils_1$1.assert;




          function EC(options) {
            if (!(this instanceof EC))
              return new EC(options);

            // Shortcut `elliptic.ec(curve-name)`
            if (typeof options === 'string') {
              assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),
                'Unknown curve ' + options);

              options = curves_1[options];
            }

            // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
            if (options instanceof curves_1.PresetCurve)
              options = { curve: options };

            this.curve = options.curve.curve;
            this.n = this.curve.n;
            this.nh = this.n.ushrn(1);
            this.g = this.curve.g;

            // Point on curve
            this.g = options.curve.g;
            this.g.precompute(options.curve.n.bitLength() + 1);

            // Hash for function for DRBG
            this.hash = options.hash || options.curve.hash;
          }
          var ec = EC;

          EC.prototype.keyPair = function keyPair(options) {
            return new key(this, options);
          };

          EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
            return key.fromPrivate(this, priv, enc);
          };

          EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
            return key.fromPublic(this, pub, enc);
          };

          EC.prototype.genKeyPair = function genKeyPair(options) {
            if (!options)
              options = {};

            // Instantiate Hmac_DRBG
            var drbg = new hmacDrbg({
              hash: this.hash,
              pers: options.pers,
              persEnc: options.persEnc || 'utf8',
              entropy: options.entropy || rand(this.hash.hmacStrength),
              entropyEnc: options.entropy && options.entropyEnc || 'utf8',
              nonce: this.n.toArray(),
            });

            var bytes = this.n.byteLength();
            var ns2 = this.n.sub(new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(2));
            for (;;) {
              var priv = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(drbg.generate(bytes));
              if (priv.cmp(ns2) > 0)
                continue;

              priv.iaddn(1);
              return this.keyFromPrivate(priv);
            }
          };

          EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
            var delta = msg.byteLength() * 8 - this.n.bitLength();
            if (delta > 0)
              msg = msg.ushrn(delta);
            if (!truncOnly && msg.cmp(this.n) >= 0)
              return msg.sub(this.n);
            else
              return msg;
          };

          EC.prototype.sign = function sign(msg, key, enc, options) {
            if (typeof enc === 'object') {
              options = enc;
              enc = null;
            }
            if (!options)
              options = {};

            key = this.keyFromPrivate(key, enc);
            msg = this._truncateToN(new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(msg, 16));

            // Zero-extend key to provide enough entropy
            var bytes = this.n.byteLength();
            var bkey = key.getPrivate().toArray('be', bytes);

            // Zero-extend nonce to have the same byte size as N
            var nonce = msg.toArray('be', bytes);

            // Instantiate Hmac_DRBG
            var drbg = new hmacDrbg({
              hash: this.hash,
              entropy: bkey,
              nonce: nonce,
              pers: options.pers,
              persEnc: options.persEnc || 'utf8',
            });

            // Number of bytes to generate
            var ns1 = this.n.sub(new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(1));

            for (var iter = 0; ; iter++) {
              var k = options.k ?
                options.k(iter) :
                new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(drbg.generate(this.n.byteLength()));
              k = this._truncateToN(k, true);
              if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
                continue;

              var kp = this.g.mul(k);
              if (kp.isInfinity())
                continue;

              var kpX = kp.getX();
              var r = kpX.umod(this.n);
              if (r.cmpn(0) === 0)
                continue;

              var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
              s = s.umod(this.n);
              if (s.cmpn(0) === 0)
                continue;

              var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                (kpX.cmp(r) !== 0 ? 2 : 0);

              // Use complement of `s`, if it is > `n / 2`
              if (options.canonical && s.cmp(this.nh) > 0) {
                s = this.n.sub(s);
                recoveryParam ^= 1;
              }

              return new signature({ r: r, s: s, recoveryParam: recoveryParam });
            }
          };

          EC.prototype.verify = function verify(msg, signature$1, key, enc) {
            msg = this._truncateToN(new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(msg, 16));
            key = this.keyFromPublic(key, enc);
            signature$1 = new signature(signature$1, 'hex');

            // Perform primitive values validation
            var r = signature$1.r;
            var s = signature$1.s;
            if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
              return false;
            if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
              return false;

            // Validate signature
            var sinv = s.invm(this.n);
            var u1 = sinv.mul(msg).umod(this.n);
            var u2 = sinv.mul(r).umod(this.n);
            var p;

            if (!this.curve._maxwellTrick) {
              p = this.g.mulAdd(u1, key.getPublic(), u2);
              if (p.isInfinity())
                return false;

              return p.getX().umod(this.n).cmp(r) === 0;
            }

            // NOTE: Greg Maxwell's trick, inspired by:
            // https://git.io/vad3K

            p = this.g.jmulAdd(u1, key.getPublic(), u2);
            if (p.isInfinity())
              return false;

            // Compare `p.x` of Jacobian point with `r`,
            // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
            // inverse of `p.z^2`
            return p.eqXToP(r);
          };

          EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
            assert$5((3 & j) === j, 'The recovery param is more than two bits');
            signature$1 = new signature(signature$1, enc);

            var n = this.n;
            var e = new bn_js__WEBPACK_IMPORTED_MODULE_0___default.a(msg);
            var r = signature$1.r;
            var s = signature$1.s;

            // A set LSB signifies that the y-coordinate is odd
            var isYOdd = j & 1;
            var isSecondKey = j >> 1;
            if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
              throw new Error('Unable to find sencond key candinate');

            // 1.1. Let x = r + jn.
            if (isSecondKey)
              r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
            else
              r = this.curve.pointFromX(r, isYOdd);

            var rInv = signature$1.r.invm(n);
            var s1 = n.sub(e).mul(rInv).umod(n);
            var s2 = s.mul(rInv).umod(n);

            // 1.6.1 Compute Q = r^-1 (sR -  eG)
            //               Q = r^-1 (sR + -eG)
            return this.g.mulAdd(s1, r, s2);
          };

          EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
            signature$1 = new signature(signature$1, enc);
            if (signature$1.recoveryParam !== null)
              return signature$1.recoveryParam;

            for (var i = 0; i < 4; i++) {
              var Qprime;
              try {
                Qprime = this.recoverPubKey(e, signature$1, i);
              } catch (e) {
                continue;
              }

              if (Qprime.eq(Q))
                return i;
            }
            throw new Error('Unable to find valid recovery factor');
          };

          var elliptic_1 = createCommonjsModule(function (module, exports) {
            'use strict';

            var elliptic = exports;

            elliptic.version = /*RicMoo:ethers*/{ version: "6.5.4" }.version;
            elliptic.utils = utils_1$1;
            elliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
            elliptic.curve = curve_1;
            elliptic.curves = curves_1;

// Protocols
            elliptic.ec = ec;
            elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);
          });

          var EC$1 = elliptic_1.ec;


//# sourceMappingURL=elliptic.js.map

          /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

        /***/ }),

      /***/ "c3c0":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var assert = __webpack_require__("da3e");
        var inherits = __webpack_require__("3fb5");

        exports.inherits = inherits;

        function isSurrogatePair(msg, i) {
          if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
            return false;
          }
          if (i < 0 || i + 1 >= msg.length) {
            return false;
          }
          return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
        }

        function toArray(msg, enc) {
          if (Array.isArray(msg))
            return msg.slice();
          if (!msg)
            return [];
          var res = [];
          if (typeof msg === 'string') {
            if (!enc) {
              // Inspired by stringToUtf8ByteArray() in closure-library by Google
              // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
              // Apache License 2.0
              // https://github.com/google/closure-library/blob/master/LICENSE
              var p = 0;
              for (var i = 0; i < msg.length; i++) {
                var c = msg.charCodeAt(i);
                if (c < 128) {
                  res[p++] = c;
                } else if (c < 2048) {
                  res[p++] = (c >> 6) | 192;
                  res[p++] = (c & 63) | 128;
                } else if (isSurrogatePair(msg, i)) {
                  c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                  res[p++] = (c >> 18) | 240;
                  res[p++] = ((c >> 12) & 63) | 128;
                  res[p++] = ((c >> 6) & 63) | 128;
                  res[p++] = (c & 63) | 128;
                } else {
                  res[p++] = (c >> 12) | 224;
                  res[p++] = ((c >> 6) & 63) | 128;
                  res[p++] = (c & 63) | 128;
                }
              }
            } else if (enc === 'hex') {
              msg = msg.replace(/[^a-z0-9]+/ig, '');
              if (msg.length % 2 !== 0)
                msg = '0' + msg;
              for (i = 0; i < msg.length; i += 2)
                res.push(parseInt(msg[i] + msg[i + 1], 16));
            }
          } else {
            for (i = 0; i < msg.length; i++)
              res[i] = msg[i] | 0;
          }
          return res;
        }
        exports.toArray = toArray;

        function toHex(msg) {
          var res = '';
          for (var i = 0; i < msg.length; i++)
            res += zero2(msg[i].toString(16));
          return res;
        }
        exports.toHex = toHex;

        function htonl(w) {
          var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
          return res >>> 0;
        }
        exports.htonl = htonl;

        function toHex32(msg, endian) {
          var res = '';
          for (var i = 0; i < msg.length; i++) {
            var w = msg[i];
            if (endian === 'little')
              w = htonl(w);
            res += zero8(w.toString(16));
          }
          return res;
        }
        exports.toHex32 = toHex32;

        function zero2(word) {
          if (word.length === 1)
            return '0' + word;
          else
            return word;
        }
        exports.zero2 = zero2;

        function zero8(word) {
          if (word.length === 7)
            return '0' + word;
          else if (word.length === 6)
            return '00' + word;
          else if (word.length === 5)
            return '000' + word;
          else if (word.length === 4)
            return '0000' + word;
          else if (word.length === 3)
            return '00000' + word;
          else if (word.length === 2)
            return '000000' + word;
          else if (word.length === 1)
            return '0000000' + word;
          else
            return word;
        }
        exports.zero8 = zero8;

        function join32(msg, start, end, endian) {
          var len = end - start;
          assert(len % 4 === 0);
          var res = new Array(len / 4);
          for (var i = 0, k = start; i < res.length; i++, k += 4) {
            var w;
            if (endian === 'big')
              w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
            else
              w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
            res[i] = w >>> 0;
          }
          return res;
        }
        exports.join32 = join32;

        function split32(msg, endian) {
          var res = new Array(msg.length * 4);
          for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
            var m = msg[i];
            if (endian === 'big') {
              res[k] = m >>> 24;
              res[k + 1] = (m >>> 16) & 0xff;
              res[k + 2] = (m >>> 8) & 0xff;
              res[k + 3] = m & 0xff;
            } else {
              res[k + 3] = m >>> 24;
              res[k + 2] = (m >>> 16) & 0xff;
              res[k + 1] = (m >>> 8) & 0xff;
              res[k] = m & 0xff;
            }
          }
          return res;
        }
        exports.split32 = split32;

        function rotr32(w, b) {
          return (w >>> b) | (w << (32 - b));
        }
        exports.rotr32 = rotr32;

        function rotl32(w, b) {
          return (w << b) | (w >>> (32 - b));
        }
        exports.rotl32 = rotl32;

        function sum32(a, b) {
          return (a + b) >>> 0;
        }
        exports.sum32 = sum32;

        function sum32_3(a, b, c) {
          return (a + b + c) >>> 0;
        }
        exports.sum32_3 = sum32_3;

        function sum32_4(a, b, c, d) {
          return (a + b + c + d) >>> 0;
        }
        exports.sum32_4 = sum32_4;

        function sum32_5(a, b, c, d, e) {
          return (a + b + c + d + e) >>> 0;
        }
        exports.sum32_5 = sum32_5;

        function sum64(buf, pos, ah, al) {
          var bh = buf[pos];
          var bl = buf[pos + 1];

          var lo = (al + bl) >>> 0;
          var hi = (lo < al ? 1 : 0) + ah + bh;
          buf[pos] = hi >>> 0;
          buf[pos + 1] = lo;
        }
        exports.sum64 = sum64;

        function sum64_hi(ah, al, bh, bl) {
          var lo = (al + bl) >>> 0;
          var hi = (lo < al ? 1 : 0) + ah + bh;
          return hi >>> 0;
        }
        exports.sum64_hi = sum64_hi;

        function sum64_lo(ah, al, bh, bl) {
          var lo = al + bl;
          return lo >>> 0;
        }
        exports.sum64_lo = sum64_lo;

        function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
          var carry = 0;
          var lo = al;
          lo = (lo + bl) >>> 0;
          carry += lo < al ? 1 : 0;
          lo = (lo + cl) >>> 0;
          carry += lo < cl ? 1 : 0;
          lo = (lo + dl) >>> 0;
          carry += lo < dl ? 1 : 0;

          var hi = ah + bh + ch + dh + carry;
          return hi >>> 0;
        }
        exports.sum64_4_hi = sum64_4_hi;

        function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
          var lo = al + bl + cl + dl;
          return lo >>> 0;
        }
        exports.sum64_4_lo = sum64_4_lo;

        function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
          var carry = 0;
          var lo = al;
          lo = (lo + bl) >>> 0;
          carry += lo < al ? 1 : 0;
          lo = (lo + cl) >>> 0;
          carry += lo < cl ? 1 : 0;
          lo = (lo + dl) >>> 0;
          carry += lo < dl ? 1 : 0;
          lo = (lo + el) >>> 0;
          carry += lo < el ? 1 : 0;

          var hi = ah + bh + ch + dh + eh + carry;
          return hi >>> 0;
        }
        exports.sum64_5_hi = sum64_5_hi;

        function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
          var lo = al + bl + cl + dl + el;

          return lo >>> 0;
        }
        exports.sum64_5_lo = sum64_5_lo;

        function rotr64_hi(ah, al, num) {
          var r = (al << (32 - num)) | (ah >>> num);
          return r >>> 0;
        }
        exports.rotr64_hi = rotr64_hi;

        function rotr64_lo(ah, al, num) {
          var r = (ah << (32 - num)) | (al >>> num);
          return r >>> 0;
        }
        exports.rotr64_lo = rotr64_lo;

        function shr64_hi(ah, al, num) {
          return ah >>> num;
        }
        exports.shr64_hi = shr64_hi;

        function shr64_lo(ah, al, num) {
          var r = (ah << (32 - num)) | (al >>> num);
          return r >>> 0;
        }
        exports.shr64_lo = shr64_lo;


        /***/ }),

      /***/ "c430":
      /***/ (function(module, exports) {

        module.exports = false;


        /***/ }),

      /***/ "c6b6":
      /***/ (function(module, exports) {

        var toString = {}.toString;

        module.exports = function (it) {
          return toString.call(it).slice(8, -1);
        };


        /***/ }),

      /***/ "c6cd":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var setGlobal = __webpack_require__("ce4e");

        var SHARED = '__core-js_shared__';
        var store = global[SHARED] || setGlobal(SHARED, {});

        module.exports = store;


        /***/ }),

      /***/ "c8ba":
      /***/ (function(module, exports) {

        var g;

// This works in non-strict mode
        g = (function() {
          return this;
        })();

        try {
          // This works if eval is allowed (see CSP)
          g = g || new Function("return this")();
        } catch (e) {
          // This works if the window reference is available
          if (typeof window === "object") g = window;
        }

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

        module.exports = g;


        /***/ }),

      /***/ "ca84":
      /***/ (function(module, exports, __webpack_require__) {

        var has = __webpack_require__("5135");
        var toIndexedObject = __webpack_require__("fc6a");
        var indexOf = __webpack_require__("4d64").indexOf;
        var hiddenKeys = __webpack_require__("d012");

        module.exports = function (object, names) {
          var O = toIndexedObject(object);
          var i = 0;
          var result = [];
          var key;
          for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
          // Don't enum bug & hidden keys
          while (names.length > i) if (has(O, key = names[i++])) {
            ~indexOf(result, key) || result.push(key);
          }
          return result;
        };


        /***/ }),

      /***/ "caad":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $ = __webpack_require__("23e7");
        var $includes = __webpack_require__("4d64").includes;
        var addToUnscopables = __webpack_require__("44d2");

// `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes
        $({ target: 'Array', proto: true }, {
          includes: function includes(el /* , fromIndex = 0 */) {
            return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
          }
        });

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
        addToUnscopables('includes');


        /***/ }),

      /***/ "cc12":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var isObject = __webpack_require__("861d");

        var document = global.document;
// typeof document.createElement is 'object' in old IE
        var EXISTS = isObject(document) && isObject(document.createElement);

        module.exports = function (it) {
          return EXISTS ? document.createElement(it) : {};
        };


        /***/ }),

      /***/ "cdf9":
      /***/ (function(module, exports, __webpack_require__) {

        var anObject = __webpack_require__("825a");
        var isObject = __webpack_require__("861d");
        var newPromiseCapability = __webpack_require__("f069");

        module.exports = function (C, x) {
          anObject(C);
          if (isObject(x) && x.constructor === C) return x;
          var promiseCapability = newPromiseCapability.f(C);
          var resolve = promiseCapability.resolve;
          resolve(x);
          return promiseCapability.promise;
        };


        /***/ }),

      /***/ "ce08":
      /***/ (function(module, exports, __webpack_require__) {

        module.exports = self.fetch || (self.fetch = __webpack_require__("b048").default || __webpack_require__("b048"));


        /***/ }),

      /***/ "ce4e":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");

        module.exports = function (key, value) {
          try {
            // eslint-disable-next-line es/no-object-defineproperty -- safe
            Object.defineProperty(global, key, { value: value, configurable: true, writable: true });
          } catch (error) {
            global[key] = value;
          } return value;
        };


        /***/ }),

      /***/ "d012":
      /***/ (function(module, exports) {

        module.exports = {};


        /***/ }),

      /***/ "d039":
      /***/ (function(module, exports) {

        module.exports = function (exec) {
          try {
            return !!exec();
          } catch (error) {
            return true;
          }
        };


        /***/ }),

      /***/ "d066":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var isCallable = __webpack_require__("1626");

        var aFunction = function (argument) {
          return isCallable(argument) ? argument : undefined;
        };

        module.exports = function (namespace, method) {
          return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
        };


        /***/ }),

      /***/ "d1e7":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
        var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
        exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
          var descriptor = getOwnPropertyDescriptor(this, V);
          return !!descriptor && descriptor.enumerable;
        } : $propertyIsEnumerable;


        /***/ }),

      /***/ "d28b":
      /***/ (function(module, exports, __webpack_require__) {

        var defineWellKnownSymbol = __webpack_require__("746f");

// `Symbol.iterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.iterator
        defineWellKnownSymbol('iterator');


        /***/ }),

      /***/ "d2bb":
      /***/ (function(module, exports, __webpack_require__) {

        /* eslint-disable no-proto -- safe */
        var anObject = __webpack_require__("825a");
        var aPossiblePrototype = __webpack_require__("3bbe");

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
        module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
          var CORRECT_SETTER = false;
          var test = {};
          var setter;
          try {
            // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
            setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
            setter.call(test, []);
            CORRECT_SETTER = test instanceof Array;
          } catch (error) { /* empty */ }
          return function setPrototypeOf(O, proto) {
            anObject(O);
            aPossiblePrototype(proto);
            if (CORRECT_SETTER) setter.call(O, proto);
            else O.__proto__ = proto;
            return O;
          };
        }() : undefined);


        /***/ }),

      /***/ "d3b7":
      /***/ (function(module, exports, __webpack_require__) {

        var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
        var redefine = __webpack_require__("6eeb");
        var toString = __webpack_require__("b041");

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
        if (!TO_STRING_TAG_SUPPORT) {
          redefine(Object.prototype, 'toString', toString, { unsafe: true });
        }


        /***/ }),

      /***/ "d44e":
      /***/ (function(module, exports, __webpack_require__) {

        var defineProperty = __webpack_require__("9bf2").f;
        var has = __webpack_require__("5135");
        var wellKnownSymbol = __webpack_require__("b622");

        var TO_STRING_TAG = wellKnownSymbol('toStringTag');

        module.exports = function (it, TAG, STATIC) {
          if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
            defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
          }
        };


        /***/ }),

      /***/ "d4c3":
      /***/ (function(module, exports, __webpack_require__) {

        var userAgent = __webpack_require__("342f");
        var global = __webpack_require__("da84");

        module.exports = /ipad|iphone|ipod/i.test(userAgent) && global.Pebble !== undefined;


        /***/ }),

      /***/ "d784":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
        __webpack_require__("ac1f");
        var redefine = __webpack_require__("6eeb");
        var regexpExec = __webpack_require__("9263");
        var fails = __webpack_require__("d039");
        var wellKnownSymbol = __webpack_require__("b622");
        var createNonEnumerableProperty = __webpack_require__("9112");

        var SPECIES = wellKnownSymbol('species');
        var RegExpPrototype = RegExp.prototype;

        module.exports = function (KEY, exec, FORCED, SHAM) {
          var SYMBOL = wellKnownSymbol(KEY);

          var DELEGATES_TO_SYMBOL = !fails(function () {
            // String methods call symbol-named RegEp methods
            var O = {};
            O[SYMBOL] = function () { return 7; };
            return ''[KEY](O) != 7;
          });

          var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
            // Symbol-named RegExp methods call .exec
            var execCalled = false;
            var re = /a/;

            if (KEY === 'split') {
              // We can't use real regex here since it causes deoptimization
              // and serious performance degradation in V8
              // https://github.com/zloirock/core-js/issues/306
              re = {};
              // RegExp[@@split] doesn't call the regex's exec method, but first creates
              // a new one. We need to return the patched regex when creating the new one.
              re.constructor = {};
              re.constructor[SPECIES] = function () { return re; };
              re.flags = '';
              re[SYMBOL] = /./[SYMBOL];
            }

            re.exec = function () { execCalled = true; return null; };

            re[SYMBOL]('');
            return !execCalled;
          });

          if (
            !DELEGATES_TO_SYMBOL ||
            !DELEGATES_TO_EXEC ||
            FORCED
          ) {
            var nativeRegExpMethod = /./[SYMBOL];
            var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
              var $exec = regexp.exec;
              if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
                if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                  // The native String method already delegates to @@method (this
                  // polyfilled function), leasing to infinite recursion.
                  // We avoid it by directly calling the native @@method method.
                  return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
                }
                return { done: true, value: nativeMethod.call(str, regexp, arg2) };
              }
              return { done: false };
            });

            redefine(String.prototype, KEY, methods[0]);
            redefine(RegExpPrototype, SYMBOL, methods[1]);
          }

          if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
        };


        /***/ }),

      /***/ "d81d":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $ = __webpack_require__("23e7");
        var $map = __webpack_require__("b727").map;
        var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');

// `Array.prototype.map` method
// https://tc39.es/ecma262/#sec-array.prototype.map
// with adding support of @@species
        $({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
          map: function map(callbackfn /* , thisArg */) {
            return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
          }
        });


        /***/ }),

      /***/ "d9b5":
      /***/ (function(module, exports, __webpack_require__) {

        var isCallable = __webpack_require__("1626");
        var getBuiltIn = __webpack_require__("d066");
        var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");

        module.exports = USE_SYMBOL_AS_UID ? function (it) {
          return typeof it == 'symbol';
        } : function (it) {
          var $Symbol = getBuiltIn('Symbol');
          return isCallable($Symbol) && Object(it) instanceof $Symbol;
        };


        /***/ }),

      /***/ "da3e":
      /***/ (function(module, exports) {

        module.exports = assert;

        function assert(val, msg) {
          if (!val)
            throw new Error(msg || 'Assertion failed');
        }

        assert.equal = function assertEqual(l, r, msg) {
          if (l != r)
            throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
        };


        /***/ }),

      /***/ "da84":
      /***/ (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {
          return it && it.Math == Math && it;
        };

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
          module.exports =
            // eslint-disable-next-line es/no-global-this -- safe
            check(typeof globalThis == 'object' && globalThis) ||
            check(typeof window == 'object' && window) ||
            // eslint-disable-next-line no-restricted-globals -- safe
            check(typeof self == 'object' && self) ||
            check(typeof global == 'object' && global) ||
            // eslint-disable-next-line no-new-func -- fallback
            (function () { return this; })() || Function('return this')();

          /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("c8ba")))

        /***/ }),

      /***/ "dc4a":
      /***/ (function(module, exports, __webpack_require__) {

        var aCallable = __webpack_require__("59ed");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
        module.exports = function (V, P) {
          var func = V[P];
          return func == null ? undefined : aCallable(func);
        };


        /***/ }),

      /***/ "ddb0":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");
        var DOMIterables = __webpack_require__("fdbc");
        var DOMTokenListPrototype = __webpack_require__("785a");
        var ArrayIteratorMethods = __webpack_require__("e260");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var wellKnownSymbol = __webpack_require__("b622");

        var ITERATOR = wellKnownSymbol('iterator');
        var TO_STRING_TAG = wellKnownSymbol('toStringTag');
        var ArrayValues = ArrayIteratorMethods.values;

        var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
          if (CollectionPrototype) {
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
              createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
            } catch (error) {
              CollectionPrototype[ITERATOR] = ArrayValues;
            }
            if (!CollectionPrototype[TO_STRING_TAG]) {
              createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
            }
            if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
              // some Chrome versions have non-configurable methods on DOMTokenList
              if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
                createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
              } catch (error) {
                CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
              }
            }
          }
        };

        for (var COLLECTION_NAME in DOMIterables) {
          handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype, COLLECTION_NAME);
        }

        handlePrototype(DOMTokenListPrototype, 'DOMTokenList');


        /***/ }),

      /***/ "df75":
      /***/ (function(module, exports, __webpack_require__) {

        var internalObjectKeys = __webpack_require__("ca84");
        var enumBugKeys = __webpack_require__("7839");

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
        module.exports = Object.keys || function keys(O) {
          return internalObjectKeys(O, enumBugKeys);
        };


        /***/ }),

      /***/ "df7c":
      /***/ (function(module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
          function normalizeArray(parts, allowAboveRoot) {
            // if the path tries to go above the root, `up` ends up > 0
            var up = 0;
            for (var i = parts.length - 1; i >= 0; i--) {
              var last = parts[i];
              if (last === '.') {
                parts.splice(i, 1);
              } else if (last === '..') {
                parts.splice(i, 1);
                up++;
              } else if (up) {
                parts.splice(i, 1);
                up--;
              }
            }

            // if the path is allowed to go above the root, restore leading ..s
            if (allowAboveRoot) {
              for (; up--; up) {
                parts.unshift('..');
              }
            }

            return parts;
          }

// path.resolve([from ...], to)
// posix version
          exports.resolve = function() {
            var resolvedPath = '',
              resolvedAbsolute = false;

            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
              var path = (i >= 0) ? arguments[i] : process.cwd();

              // Skip empty and invalid entries
              if (typeof path !== 'string') {
                throw new TypeError('Arguments to path.resolve must be strings');
              } else if (!path) {
                continue;
              }

              resolvedPath = path + '/' + resolvedPath;
              resolvedAbsolute = path.charAt(0) === '/';
            }

            // At this point the path should be resolved to a full absolute path, but
            // handle relative paths to be safe (might happen when process.cwd() fails)

            // Normalize the path
            resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
              return !!p;
            }), !resolvedAbsolute).join('/');

            return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
          };

// path.normalize(path)
// posix version
          exports.normalize = function(path) {
            var isAbsolute = exports.isAbsolute(path),
              trailingSlash = substr(path, -1) === '/';

            // Normalize the path
            path = normalizeArray(filter(path.split('/'), function(p) {
              return !!p;
            }), !isAbsolute).join('/');

            if (!path && !isAbsolute) {
              path = '.';
            }
            if (path && trailingSlash) {
              path += '/';
            }

            return (isAbsolute ? '/' : '') + path;
          };

// posix version
          exports.isAbsolute = function(path) {
            return path.charAt(0) === '/';
          };

// posix version
          exports.join = function() {
            var paths = Array.prototype.slice.call(arguments, 0);
            return exports.normalize(filter(paths, function(p, index) {
              if (typeof p !== 'string') {
                throw new TypeError('Arguments to path.join must be strings');
              }
              return p;
            }).join('/'));
          };


// path.relative(from, to)
// posix version
          exports.relative = function(from, to) {
            from = exports.resolve(from).substr(1);
            to = exports.resolve(to).substr(1);

            function trim(arr) {
              var start = 0;
              for (; start < arr.length; start++) {
                if (arr[start] !== '') break;
              }

              var end = arr.length - 1;
              for (; end >= 0; end--) {
                if (arr[end] !== '') break;
              }

              if (start > end) return [];
              return arr.slice(start, end - start + 1);
            }

            var fromParts = trim(from.split('/'));
            var toParts = trim(to.split('/'));

            var length = Math.min(fromParts.length, toParts.length);
            var samePartsLength = length;
            for (var i = 0; i < length; i++) {
              if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
              }
            }

            var outputParts = [];
            for (var i = samePartsLength; i < fromParts.length; i++) {
              outputParts.push('..');
            }

            outputParts = outputParts.concat(toParts.slice(samePartsLength));

            return outputParts.join('/');
          };

          exports.sep = '/';
          exports.delimiter = ':';

          exports.dirname = function (path) {
            if (typeof path !== 'string') path = path + '';
            if (path.length === 0) return '.';
            var code = path.charCodeAt(0);
            var hasRoot = code === 47 /*/*/;
            var end = -1;
            var matchedSlash = true;
            for (var i = path.length - 1; i >= 1; --i) {
              code = path.charCodeAt(i);
              if (code === 47 /*/*/) {
                if (!matchedSlash) {
                  end = i;
                  break;
                }
              } else {
                // We saw the first non-path separator
                matchedSlash = false;
              }
            }

            if (end === -1) return hasRoot ? '/' : '.';
            if (hasRoot && end === 1) {
              // return '//';
              // Backwards-compat fix:
              return '/';
            }
            return path.slice(0, end);
          };

          function basename(path) {
            if (typeof path !== 'string') path = path + '';

            var start = 0;
            var end = -1;
            var matchedSlash = true;
            var i;

            for (i = path.length - 1; i >= 0; --i) {
              if (path.charCodeAt(i) === 47 /*/*/) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                  start = i + 1;
                  break;
                }
              } else if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // path component
                matchedSlash = false;
                end = i + 1;
              }
            }

            if (end === -1) return '';
            return path.slice(start, end);
          }

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
          exports.basename = function (path, ext) {
            var f = basename(path);
            if (ext && f.substr(-1 * ext.length) === ext) {
              f = f.substr(0, f.length - ext.length);
            }
            return f;
          };

          exports.extname = function (path) {
            if (typeof path !== 'string') path = path + '';
            var startDot = -1;
            var startPart = 0;
            var end = -1;
            var matchedSlash = true;
            // Track the state of characters (if any) we see before our first dot and
            // after any path separator we find
            var preDotState = 0;
            for (var i = path.length - 1; i >= 0; --i) {
              var code = path.charCodeAt(i);
              if (code === 47 /*/*/) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                  startPart = i + 1;
                  break;
                }
                continue;
              }
              if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
              }
              if (code === 46 /*.*/) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1)
                  startDot = i;
                else if (preDotState !== 1)
                  preDotState = 1;
              } else if (startDot !== -1) {
                // We saw a non-dot and non-path separator before our dot, so we should
                // have a good chance at having a non-empty extension
                preDotState = -1;
              }
            }

            if (startDot === -1 || end === -1 ||
              // We saw a non-dot character immediately before the dot
              preDotState === 0 ||
              // The (right-most) trimmed path component is exactly '..'
              preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
              return '';
            }
            return path.slice(startDot, end);
          };

          function filter (xs, f) {
            if (xs.filter) return xs.filter(f);
            var res = [];
            for (var i = 0; i < xs.length; i++) {
              if (f(xs[i], i, xs)) res.push(xs[i]);
            }
            return res;
          }

// String.prototype.substr - negative index don't work in IE8
          var substr = 'ab'.substr(-1) === 'b'
            ? function (str, start, len) { return str.substr(start, len) }
            : function (str, start, len) {
              if (start < 0) start = str.length + start;
              return str.substr(start, len);
            }
          ;

          /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

        /***/ }),

      /***/ "e01a":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";
// `Symbol.prototype.description` getter
// https://tc39.es/ecma262/#sec-symbol.prototype.description

        var $ = __webpack_require__("23e7");
        var DESCRIPTORS = __webpack_require__("83ab");
        var global = __webpack_require__("da84");
        var has = __webpack_require__("5135");
        var isCallable = __webpack_require__("1626");
        var isObject = __webpack_require__("861d");
        var defineProperty = __webpack_require__("9bf2").f;
        var copyConstructorProperties = __webpack_require__("e893");

        var NativeSymbol = global.Symbol;

        if (DESCRIPTORS && isCallable(NativeSymbol) && (!('description' in NativeSymbol.prototype) ||
          // Safari 12 bug
          NativeSymbol().description !== undefined
        )) {
          var EmptyStringDescriptionStore = {};
          // wrap Symbol constructor for correct work with undefined description
          var SymbolWrapper = function Symbol() {
            var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
            var result = this instanceof SymbolWrapper
              ? new NativeSymbol(description)
              // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
              : description === undefined ? NativeSymbol() : NativeSymbol(description);
            if (description === '') EmptyStringDescriptionStore[result] = true;
            return result;
          };
          copyConstructorProperties(SymbolWrapper, NativeSymbol);
          var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
          symbolPrototype.constructor = SymbolWrapper;

          var symbolToString = symbolPrototype.toString;
          var nativeSymbol = String(NativeSymbol('test')) == 'Symbol(test)';
          var regexp = /^Symbol\((.*)\)[^)]+$/;
          defineProperty(symbolPrototype, 'description', {
            configurable: true,
            get: function description() {
              var symbol = isObject(this) ? this.valueOf() : this;
              var string = symbolToString.call(symbol);
              if (has(EmptyStringDescriptionStore, symbol)) return '';
              var desc = nativeSymbol ? string.slice(7, -1) : string.replace(regexp, '$1');
              return desc === '' ? undefined : desc;
            }
          });

          $({ global: true, forced: true }, {
            Symbol: SymbolWrapper
          });
        }


        /***/ }),

      /***/ "e163":
      /***/ (function(module, exports, __webpack_require__) {

        var has = __webpack_require__("5135");
        var isCallable = __webpack_require__("1626");
        var toObject = __webpack_require__("7b0b");
        var sharedKey = __webpack_require__("f772");
        var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");

        var IE_PROTO = sharedKey('IE_PROTO');
        var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es/no-object-getprototypeof -- safe
        module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
          var object = toObject(O);
          if (has(object, IE_PROTO)) return object[IE_PROTO];
          var constructor = object.constructor;
          if (isCallable(constructor) && object instanceof constructor) {
            return constructor.prototype;
          } return object instanceof Object ? ObjectPrototype : null;
        };


        /***/ }),

      /***/ "e177":
      /***/ (function(module, exports, __webpack_require__) {

        var fails = __webpack_require__("d039");

        module.exports = !fails(function () {
          function F() { /* empty */ }
          F.prototype.constructor = null;
          // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
          return Object.getPrototypeOf(new F()) !== F.prototype;
        });


        /***/ }),

      /***/ "e260":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var toIndexedObject = __webpack_require__("fc6a");
        var addToUnscopables = __webpack_require__("44d2");
        var Iterators = __webpack_require__("3f8c");
        var InternalStateModule = __webpack_require__("69f3");
        var defineIterator = __webpack_require__("7dd0");

        var ARRAY_ITERATOR = 'Array Iterator';
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
        module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
          setInternalState(this, {
            type: ARRAY_ITERATOR,
            target: toIndexedObject(iterated), // target
            index: 0,                          // next index
            kind: kind                         // kind
          });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
        }, function () {
          var state = getInternalState(this);
          var target = state.target;
          var kind = state.kind;
          var index = state.index++;
          if (!target || index >= target.length) {
            state.target = undefined;
            return { value: undefined, done: true };
          }
          if (kind == 'keys') return { value: index, done: false };
          if (kind == 'values') return { value: target[index], done: false };
          return { value: [index, target[index]], done: false };
        }, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
        Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
        addToUnscopables('keys');
        addToUnscopables('values');
        addToUnscopables('entries');


        /***/ }),

      /***/ "e2cc":
      /***/ (function(module, exports, __webpack_require__) {

        var redefine = __webpack_require__("6eeb");

        module.exports = function (target, src, options) {
          for (var key in src) redefine(target, key, src[key], options);
          return target;
        };


        /***/ }),

      /***/ "e39c":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var __extends = (this && this.__extends) || (function () {
          var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
            return extendStatics(d, b);
          };
          return function (d, b) {
            if (typeof b !== "function" && b !== null)
              throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        })();
        var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        var __generator = (this && this.__generator) || function (thisArg, body) {
          var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
          function verb(n) { return function (v) { return step([n, v]); }; }
          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        var __importDefault = (this && this.__importDefault) || function (mod) {
          return (mod && mod.__esModule) ? mod : { "default": mod };
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.WindowEthereumConnectionError = exports.EthereumProvider = exports.EthereumProviderErrorName = exports.EthereumNetwork = void 0;
        var detect_provider_1 = __importDefault(__webpack_require__("4c41"));
        var ethers_1 = __webpack_require__("c030");
        var storage_1 = __webpack_require__("6415");
        var EthereumNetwork;
        (function (EthereumNetwork) {
          EthereumNetwork[EthereumNetwork["MAINNET"] = 1] = "MAINNET";
          EthereumNetwork[EthereumNetwork["RINKEBY"] = 4] = "RINKEBY";
        })(EthereumNetwork = exports.EthereumNetwork || (exports.EthereumNetwork = {}));
        var EthereumProviderErrorName;
        (function (EthereumProviderErrorName) {
          EthereumProviderErrorName["EthereumProviderMultipleChains"] = "EthereumProviderMultipleChains";
          EthereumProviderErrorName["WindowEthereumConnectionError"] = "WindowEthereumConnectionError";
        })(EthereumProviderErrorName = exports.EthereumProviderErrorName || (exports.EthereumProviderErrorName = {}));
        var JWTServer = "https://auth.manifoldxyz.dev";
        var OAuthServer = "https://oauth2.manifoldxyz.dev";
        var EthereumProviderMultipleChains = /** @class */ (function (_super) {
          __extends(EthereumProviderMultipleChains, _super);
          function EthereumProviderMultipleChains(message) {
            if (message === void 0) { message = undefined; }
            var _this = _super.call(this, message) || this;
            _this.name = EthereumProviderErrorName.EthereumProviderMultipleChains;
            return _this;
          }
          return EthereumProviderMultipleChains;
        }(Error));
        var WindowEthereumConnectionError = /** @class */ (function (_super) {
          __extends(WindowEthereumConnectionError, _super);
          function WindowEthereumConnectionError(message) {
            if (message === void 0) { message = undefined; }
            var _this = _super.call(this, message) || this;
            _this.name = EthereumProviderErrorName.WindowEthereumConnectionError;
            return _this;
          }
          return WindowEthereumConnectionError;
        }(Error));
        exports.WindowEthereumConnectionError = WindowEthereumConnectionError;
        /**
         * @dev EthereumProvider is a singleton that allows all apps to interact with the ethereum chain
         *
         * ALL COMPONENTS MUST USE THE SAME NETWORK!!!
         *
         * Every application/component that wishes to call web3 functions or access the wallet should
         * first subscribe to the ADDRESS_CHANGED and PROVIDER_CHANGED events, then call initialize.
         *
         * Every application/component MUST call initialize first.
         *
         * When you wish to perform any write operations, the application/component must call connect. This
         * will either result in an ADDRESS_CHANGED (and optionally PROVIDER_CHANGED) on success, OR it will
         * throw an EthereumProviderNotConnected failure (if metamask is not installed, if the network is defined without a
         * fallbackProvider and the wallet network is on the wrong chain, or if the user rejects the connection request.)
         *
         * After calling initialize, you will have a provider to the correct network (and usage of web3 to the right network).
         * However, this does NOT mean that the installed wallet is on the right network.  To check that, use the
         * chainIsCorrect function.
         *
         * CATCHING ERRORS
         * ---------------
         * If you are trying to catch an error thrown by the EthereumProvider, you must NOT use instanceof, because
         * class bindings are lost during compilation. To see if a specific error type is thrown, use error name comparison
         * against the EthereumProviderErrorName enum values.  e.g.
         *   try {
         *     ...
         *   } catch (e) {
         *     if (e.name == EthereumProviderErrorName.WindowEthereumConnectionError) {
         *       // Do something
         *     } else {
         *       throw e
         *     }
         *   }
         *
         */
        var _EthereumProvider = /** @class */ (function () {
          function _EthereumProvider() {
          }
          // Authentication configuration
          /**
           * Every class that uses EthereumProvider should call initialize
           *
           * If you pass in network and fallbackWebsockethost, we assume that the fallbackWebsocketHost is
           * on the same network as the one desired
           *
           * @param network               - The network you wish to run on.  If false, there is no preference
           * @param fallbackWebsockethost - The fallbackWebsocketHost for a provider (useful for browsers with no metamask)
           * @param signingProviderr      - Initialize with a signing provider. Network must match the network parameter
           */
          _EthereumProvider.initialize = function (network, fallbackWebsockethost, signingProvider) {
            return __awaiter(this, void 0, void 0, function () {
              var _a;
              return __generator(this, function (_b) {
                switch (_b.label) {
                  case 0:
                    // Configure network
                    if (network) {
                      // Even though we type network, someone might accidentally pass in a string
                      network = parseInt(network.toString());
                      if (isNaN(network))
                        throw new Error("Invalid network provided");
                    }
                    // If network was already set, all networks must be the same
                    if (this._network && this._network != network)
                      throw new EthereumProviderMultipleChains("Only one chain can be used at a time.");
                    this._network = network;
                    if (!signingProvider) return [3 /*break*/, 3];
                    _a = !network;
                    if (_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, signingProvider.getNetwork()];
                  case 1:
                    _a = (_b.sent()).chainId != network;
                    _b.label = 2;
                  case 2:
                    if (_a)
                      throw new Error("Signing provider mismatched network");
                    this._signingProvider = signingProvider;
                    _b.label = 3;
                  case 3:
                    if (!(!fallbackWebsockethost && !signingProvider)) return [3 /*break*/, 5];
                    // No fallback provider so we want to wait for ethereum provider
                    // The reason we don't call detectEthereumProvider when a fallback provider is given is because we want fast loading
                    return [4 /*yield*/, (0, detect_provider_1.default)({ mustBeMetaMask: false, silent: true })];
                  case 4:
                    // No fallback provider so we want to wait for ethereum provider
                    // The reason we don't call detectEthereumProvider when a fallback provider is given is because we want fast loading
                    _b.sent();
                    _b.label = 5;
                  case 5:
                    // Already initialzied, return.  Everything beyond this point can only execute once
                    if (this._intialized)
                      return [2 /*return*/];
                    this._intialized = true;
                    // Setup fallback host
                    if (fallbackWebsockethost !== undefined) {
                      try {
                        // Use fallback websocket host if provided
                        if (network) {
                          //@ts-ignore
                          this._fallbackProvider = new ethers_1.ethers.providers.WebSocketProvider(fallbackWebsockethost, parseInt(network));
                        }
                        else {
                          this._fallbackProvider = new ethers_1.ethers.providers.WebSocketProvider(fallbackWebsockethost);
                        }
                      }
                      catch (_c) {
                        console.warn('Fallback Provider has invalid URL');
                      }
                    }
                    // Setup browser provider
                    return [4 /*yield*/, this._initializeBrowserProvider()
                      // Set provider
                    ];
                  case 6:
                    // Setup browser provider
                    _b.sent();
                    // Set provider
                    this._setProvider();
                    return [2 /*return*/];
                }
              });
            });
          };
          /**
           * Initialize the browser provider
           */
          _EthereumProvider._initializeBrowserProvider = function () {
            return __awaiter(this, void 0, void 0, function () {
              var _this = this;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    if (!!this._browserProviderInitialized) return [3 /*break*/, 3];
                    // Only configure once
                    this._browserProviderInitialized = true;
                    if (!window.ethereum) return [3 /*break*/, 2];
                    // Have browser provider, try to configure
                    return [4 /*yield*/, this._setupBrowserProvider()];
                  case 1:
                    // Have browser provider, try to configure
                    _a.sent();
                    return [3 /*break*/, 3];
                  case 2:
                    // No browser provider yet, configure once complete
                    (0, detect_provider_1.default)({ mustBeMetaMask: false, silent: true }).then(function () { return __awaiter(_this, void 0, void 0, function () {
                      return __generator(this, function (_a) {
                        switch (_a.label) {
                          case 0:
                            if (!window.ethereum) return [3 /*break*/, 2];
                            return [4 /*yield*/, this._setupBrowserProvider()];
                          case 1:
                            _a.sent();
                            _a.label = 2;
                          case 2: return [2 /*return*/];
                        }
                      });
                    }); });
                    _a.label = 3;
                  case 3: return [2 /*return*/];
                }
              });
            });
          };
          /**
           * Setup a browser provider
           */
          _EthereumProvider._setupBrowserProvider = function () {
            return __awaiter(this, void 0, void 0, function () {
              var _a;
              var _this = this;
              return __generator(this, function (_b) {
                switch (_b.label) {
                  case 0:
                    // Have browser provider, try to configure
                    // Add listeners
                    //@ts-ignore
                    window.ethereum.on("accountsChanged", function () { return __awaiter(_this, void 0, void 0, function () {
                      return __generator(this, function (_a) {
                        switch (_a.label) {
                          case 0: return [4 /*yield*/, this._handleEthereumAccountChange()];
                          case 1:
                            _a.sent();
                            return [2 /*return*/];
                        }
                      });
                    }); });
                    //@ts-ignore
                    window.ethereum.on("chainChanged", function (chainId) {
                      _this._handleEthereumChainChange(parseInt(chainId));
                    });
                    //@ts-ignore
                    window.ethereum.on("disconnect", function () { return __awaiter(_this, void 0, void 0, function () {
                      return __generator(this, function (_a) {
                        this._browserSelectedAddress = undefined;
                        this._browserSelectedENSName = undefined;
                        window.dispatchEvent(new Event(this.ADDRESS_CHANGED));
                        return [2 /*return*/];
                      });
                    }); });
                    if (!(window.ethereum && this._isBrowserProviderConnected() && (!this._browserProvider || (this._browserProvider.provider != window.ethereum)))) return [3 /*break*/, 3];
                    // Use the browser provider if it is connected
                    this._browserProvider = new ethers_1.ethers.providers.Web3Provider(window.ethereum, "any");
                    _a = this;
                    return [4 /*yield*/, this._browserProvider.getNetwork()];
                  case 1: return [4 /*yield*/, (_b.sent()).chainId];
                  case 2:
                    _a._browserChainId = _b.sent();
                    return [3 /*break*/, 4];
                  case 3:
                    if (window.ethereum && !this._isBrowserProviderConnected()) {
                      // Browser provider not connected, listen for connection
                      //@ts-ignore
                      window.ethereum.on("connect", function (connectInfo) {
                        _this._handleEthereumConnect(connectInfo);
                      });
                    }
                    _b.label = 4;
                  case 4: return [2 /*return*/];
                }
              });
            });
          };
          /**
           * Helper to check if browser provider is connected
           */
          _EthereumProvider._isBrowserProviderConnected = function () {
            if (window.ethereum) {
              // Basic metamask handling
              if (window.ethereum.connected === true || (window.ethereum.isConnected && window.ethereum.isConnected()))
                return true;
              // Coinbase wrapped metamask handling
              if (window.ethereum.providers) {
                if (window.ethereum.providers.length) {
                  for (var i = 0; i < window.ethereum.providers.length; i++) {
                    var provider = window.ethereum.providers[i];
                    if (provider.connected === true || (provider.isConnected && provider.isConnected()))
                      return true;
                  }
                }
              }
              // Unknown window.ethereum handling (assume connected)
              if (window.ethereum.connected === undefined && window.ethereum.isConnected === undefined && window.ethereum.providers === undefined)
                return true;
            }
            return false;
          };
          // Set provider based on configured chain
          _EthereumProvider._setProvider = function () {
            var providerChanged = false;
            if (this._browserProvider && (!this._network || this._browserChainId == this._network)) {
              // We can use the browserProvider because it is on the correct network
              if (this._provider != this._browserProvider) {
                this._provider = this._browserProvider;
                providerChanged = true;
              }
            }
            else {
              // We cannot use the browser provider to sign as we are not on the right network
              if (this._signingProvider == this._browserProvider) {
                // If signing provider was the browser provider, set it to undefined as it is no longer connected
                this._signingProvider = undefined;
              }
              if (this._fallbackProvider || this._signingProvider) {
                // Use the fallback or signing provider if available
                var newProvider = this._fallbackProvider || this._signingProvider;
                if (this._provider != newProvider) {
                  this._provider = this._fallbackProvider;
                  providerChanged = true;
                }
              }
              else {
                // No provider available
                if (this._provider) {
                  providerChanged = true;
                  this._provider = undefined;
                }
                this._provider = undefined;
              }
            }
            // Dispatch event if provider changed
            if (providerChanged) {
              window.dispatchEvent(new Event(this.PROVIDER_CHANGED));
            }
          };
          /**
           * Handle ethereum connection
           */
          _EthereumProvider._handleEthereumConnect = function (connectInfo) {
            // Ethereum connection
            if (!this._browserProvider) {
              this._browserProvider = new ethers_1.ethers.providers.Web3Provider(window.ethereum, "any");
            }
            this._handleEthereumChainChange(parseInt(connectInfo.chainId));
          };
          /**
           * Handle ethereum chain changes
           */
          _EthereumProvider._handleEthereumChainChange = function (chainId) {
            // Chain change, you want to set up to use the right provider
            this._browserChainId = chainId;
            this._setProvider();
            window.dispatchEvent(new CustomEvent(this.CHAIN_CHANGED));
          };
          /**
           * Handle Ethereum account changes
           */
          _EthereumProvider._handleEthereumAccountChange = function () {
            return __awaiter(this, void 0, void 0, function () {
              var newSelectedAddress, newSelectedENSName, accounts, error_1;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    newSelectedAddress = undefined;
                    newSelectedENSName = undefined;
                    if (!(this._browserProvider && !this._userDisconnected)) return [3 /*break*/, 5];
                    return [4 /*yield*/, this._browserProvider.listAccounts()];
                  case 1:
                    accounts = _a.sent();
                    if (!(!accounts.length && this._browserProvider.provider.isMetaMask)) return [3 /*break*/, 4];
                    // If this is MetaMask we need to enable it by making a request
                    // @ts-ignore
                    return [4 /*yield*/, this._browserProvider.provider.request({
                      method: 'eth_requestAccounts'
                    })];
                  case 2:
                    // If this is MetaMask we need to enable it by making a request
                    // @ts-ignore
                    _a.sent();
                    return [4 /*yield*/, this._browserProvider.listAccounts()];
                  case 3:
                    accounts = _a.sent();
                    _a.label = 4;
                  case 4:
                    if (accounts.length) {
                      newSelectedAddress = accounts[0].toLowerCase();
                    }
                    _a.label = 5;
                  case 5:
                    if (!(newSelectedAddress != this._browserSelectedAddress)) return [3 /*break*/, 10];
                    this._browserSelectedENSName = undefined;
                    if (!(newSelectedAddress && this._provider)) return [3 /*break*/, 9];
                    _a.label = 6;
                  case 6:
                    _a.trys.push([6, 8, , 9]);
                    return [4 /*yield*/, this._provider.lookupAddress(newSelectedAddress)];
                  case 7:
                    newSelectedENSName = _a.sent();
                    return [3 /*break*/, 9];
                  case 8:
                    error_1 = _a.sent();
                    return [3 /*break*/, 9];
                  case 9:
                    this._browserSelectedAddress = newSelectedAddress;
                    if (newSelectedENSName) {
                      this._browserSelectedENSName = newSelectedENSName;
                    }
                    window.dispatchEvent(new Event(this.ADDRESS_CHANGED));
                    _a.label = 10;
                  case 10: return [2 /*return*/];
                }
              });
            });
          };
          /**
           * Whether or not a browser provider has been set
           */
          _EthereumProvider.hasBrowserProvider = function () {
            if (this._browserProvider)
              return true;
            return false;
          };
          /**
           * Set a browser provider (e.g. walletconnect or any others)
           */
          _EthereumProvider.setSigningProvider = function (provider) {
            return __awaiter(this, void 0, void 0, function () {
              var _a, newSigningProviderAddress, newSelectedENSName, error_2;
              return __generator(this, function (_b) {
                switch (_b.label) {
                  case 0:
                    _a = !this._network;
                    if (_a) return [3 /*break*/, 2];
                    return [4 /*yield*/, provider.getNetwork()];
                  case 1:
                    _a = (_b.sent()).chainId != this._network;
                    _b.label = 2;
                  case 2:
                    if (_a)
                      throw new Error("Signing provider mismatched network");
                    this._signingProvider = provider;
                    return [4 /*yield*/, provider.getSigner().getAddress()];
                  case 3:
                    newSigningProviderAddress = _b.sent();
                    if (!(newSigningProviderAddress != this._signingProviderAddress)) return [3 /*break*/, 8];
                    this._signingProviderENSName = undefined;
                    newSelectedENSName = undefined;
                    _b.label = 4;
                  case 4:
                    _b.trys.push([4, 6, , 7]);
                    return [4 /*yield*/, provider.lookupAddress(newSigningProviderAddress)];
                  case 5:
                    newSelectedENSName = _b.sent();
                    return [3 /*break*/, 7];
                  case 6:
                    error_2 = _b.sent();
                    return [3 /*break*/, 7];
                  case 7:
                    this._signingProviderAddress = newSigningProviderAddress;
                    if (newSelectedENSName)
                      this._signingProviderENSName = newSelectedENSName;
                    window.dispatchEvent(new Event(this.ADDRESS_CHANGED));
                    _b.label = 8;
                  case 8: return [2 /*return*/];
                }
              });
            });
          };
          /**
           * Call to request login (for browser provider)
           */
          _EthereumProvider.connect = function () {
            return __awaiter(this, void 0, void 0, function () {
              var error_3;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    // Cannot connect if there is no active browser connection
                    if (!this._browserProvider || !this._isBrowserProviderConnected()) {
                      throw new WindowEthereumConnectionError();
                    }
                    if (!(!this._browserSelectedAddress && !this._connecting)) return [3 /*break*/, 4];
                    this._connecting = true;
                    this._userDisconnected = false;
                    _a.label = 1;
                  case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, this._handleEthereumAccountChange()];
                  case 2:
                    _a.sent();
                    this._connecting = false; // we have fully connected
                    return [3 /*break*/, 4];
                  case 3:
                    error_3 = _a.sent();
                    this._connecting = false;
                    throw error_3; // allow client to handle the error (usually rejection)
                  case 4: return [2 /*return*/];
                }
              });
            });
          };
          /**
           * Call to logout
           */
          _EthereumProvider.disconnect = function (strictAuth) {
            if (strictAuth === void 0) { strictAuth = true; }
            return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                if (this._browserSelectedAddress) {
                  (0, storage_1.deleteJWT)(this._browserSelectedAddress, strictAuth);
                  (0, storage_1.deleteOAuth)(this._browserSelectedAddress, strictAuth);
                }
                if (this._signingProviderAddress) {
                  (0, storage_1.deleteJWT)(this._signingProviderAddress, strictAuth);
                  (0, storage_1.deleteOAuth)(this._signingProviderAddress, strictAuth);
                }
                this._browserSelectedAddress = undefined;
                this._signingProviderAddress = undefined;
                this._signingProvider = undefined;
                this._userDisconnected = true;
                window.dispatchEvent(new Event(this.ADDRESS_CHANGED));
                return [2 /*return*/];
              });
            });
          };
          /**
           * @returns ethers provider instance
           */
          _EthereumProvider.provider = function (withSigner) {
            if (withSigner === void 0) { withSigner = false; }
            if (withSigner) {
              // Use signging provider if configured
              if (this._signingProvider)
                return this._signingProvider;
              // Use browser provider if connected
              if (this._browserSelectedAddress)
                return this._browserProvider;
              // No signing provider available
              return undefined;
            }
            return this._provider;
          };
          /**
           * @returns ethers Contract instance
           */
          _EthereumProvider.contractInstance = function (address, abi, withSigner) {
            if (withSigner === void 0) { withSigner = false; }
            var provider = this.provider(withSigner);
            if (provider === undefined)
              return undefined;
            var contract = new ethers_1.ethers.Contract(address, abi, this._provider);
            // Attach the signer if the provider is the browser provider
            if (withSigner) {
              contract = contract.connect(provider.getSigner());
            }
            return contract;
          };
          /**
           * @returns ethers ContractFactory instance
           */
          _EthereumProvider.contractFactoryInstance = function (abi, bytecode) {
            var provider = this.provider(true);
            if (provider === undefined)
              return undefined;
            return new ethers_1.ethers.ContractFactory(abi, bytecode, provider.getSigner());
          };
          /**
           * @returns selected address (undefined if not logged in)
           */
          _EthereumProvider.selectedAddress = function () {
            return this._signingProviderAddress || this._browserSelectedAddress;
          };
          /**
           * @returns selected ENS name (undefined if not logged in)
           */
          _EthereumProvider.selectedENSName = function () {
            return this._signingProviderENSName || this._browserSelectedENSName;
          };
          /**
           * @returns the configured network if any
           */
          _EthereumProvider.network = function () {
            return this._network;
          };
          /**
           * @returns the chain ID of the connected network
           */
          _EthereumProvider.chainId = function () {
            if (this._provider) {
              if (this._provider === this._browserProvider) {
                return this._browserChainId;
              }
              else {
                return this._provider._network.chainId;
              }
            }
            return undefined;
          };
          /**
           * Returns true if:
           *    You specified a signing provider
           *    There is no detected browser chain
           *    There is no network specified
           *    You are connected and your browser provider is using the same chain as the network
           *
           * Primarily use this after you connect.
           * Use this to check a user is on the right chain for WRITE functions.
           * Use this to show a warning if they're on the wrong chain AND connected
           *
           * @returns chainIsCorrect: bool
           */
          _EthereumProvider.chainIsCorrect = function () {
            return this._signingProvider !== undefined || this._browserChainId === undefined || this._network === undefined || this._browserChainId == this._network;
          };
          /**
           * Gets a token for the Implicit Grant flow for OAuth. Similar
           * to the other JWT method, this immediately gets a token
           * with which you can query our APIs.
           */
          _EthereumProvider.getOAuth = function (appName, redirectUri, clientId, strictAuth, delayAuth) {
            if (strictAuth === void 0) { strictAuth = true; }
            if (delayAuth === void 0) { delayAuth = false; }
            return __awaiter(this, void 0, void 0, function () {
              var account, oauth, url, challenge, provider, signature, res, resJson;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    account = this.selectedAddress();
                    if (!account)
                      throw new Error("Must connect before getting OAuth token");
                    oauth = (0, storage_1.getOAuth)(account, strictAuth);
                    if (!(!oauth && !delayAuth)) return [3 /*break*/, 4];
                    url = OAuthServer + "/token";
                    challenge = "Please sign this to allow " + appName + " access to view your NFTs.";
                    provider = this.provider(true);
                    if (!provider)
                      throw new Error("Not connected");
                    return [4 /*yield*/, provider.getSigner().signMessage(challenge)];
                  case 1:
                    signature = _a.sent();
                    return [4 /*yield*/, fetch(url, {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                      },
                      body: JSON.stringify({
                        signature: signature,
                        appName: appName,
                        redirectUri: redirectUri,
                        clientId: clientId,
                        grantType: 'token'
                      })
                    })];
                  case 2:
                    res = _a.sent();
                    if (res.status != 200)
                      throw new Error("Could not verify");
                    return [4 /*yield*/, res.json()];
                  case 3:
                    resJson = _a.sent();
                    if (!resJson.access_token)
                      throw new Error("Could not verify");
                    (0, storage_1.setOAuth)(account, strictAuth, resJson.access_token);
                    oauth = resJson.access_token;
                    _a.label = 4;
                  case 4: return [2 /*return*/, oauth];
                }
              });
            });
          };
          /**
           * Gets token for JWT Authentication. Retrieves the challenge and waits
           * for the user to sign it, then retrieves and returns the JWT from server.
           * It also stores the JWT as a  and dispatches an event on the
           * window to let the client know it's updated.
           */
          _EthereumProvider.getJWT = function (message, strictAuth, delayAuth) {
            if (message === void 0) { message = ""; }
            if (strictAuth === void 0) { strictAuth = true; }
            if (delayAuth === void 0) { delayAuth = false; }
            return __awaiter(this, void 0, void 0, function () {
              var account, jwt, url, queryParam, challengeRes, challenge, challengeHex, n, provider, signature, res, resJson;
              return __generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    account = this.selectedAddress();
                    if (!account)
                      throw new Error("Must connect before getting JWT token");
                    jwt = (0, storage_1.getJWT)(account, strictAuth);
                    if (!(!jwt && !delayAuth)) return [3 /*break*/, 6];
                    url = JWTServer + "/auth-personal/" + account;
                    if (message.length) {
                      queryParam = "?message=" + encodeURIComponent(message);
                      url = "" + url + queryParam;
                    }
                    return [4 /*yield*/, fetch(url, {
                      method: 'GET',
                      mode: 'cors',
                      headers: {
                        "Access-Control-Allow-Origin": "*"
                      }
                    })];
                  case 1:
                    challengeRes = _a.sent();
                    challenge = '';
                    return [4 /*yield*/, challengeRes.text()];
                  case 2:
                    challengeHex = _a.sent();
                    for (n = 0; n < challengeHex.length; n += 2) {
                      challenge += String.fromCharCode(parseInt(challengeHex.substr(n, 2), 16));
                    }
                    provider = this.provider(true);
                    if (!provider)
                      throw new Error("Not connected");
                    return [4 /*yield*/, provider.getSigner().signMessage(challenge)];
                  case 3:
                    signature = _a.sent();
                    return [4 /*yield*/, fetch(JWTServer + "/jwt-personal/" + account + "/" + signature, {
                      method: 'GET',
                      mode: 'cors',
                      headers: {
                        "Access-Control-Allow-Origin": "*"
                      }
                    })];
                  case 4:
                    res = _a.sent();
                    if (res.status != 200)
                      throw new Error("Could not verify");
                    return [4 /*yield*/, res.json()];
                  case 5:
                    resJson = _a.sent();
                    if (!resJson.jwt)
                      throw new Error("Could not verify");
                    (0, storage_1.setJWT)(account, strictAuth, resJson.jwt);
                    jwt = resJson.jwt;
                    _a.label = 6;
                  case 6: return [2 /*return*/, jwt];
                }
              });
            });
          };
          _EthereumProvider.ADDRESS_CHANGED = "ethereum-address-changed";
          _EthereumProvider.PROVIDER_CHANGED = "ethereum-provider-changed";
          _EthereumProvider.CHAIN_CHANGED = "ethereum-provider-chain-changed";
          _EthereumProvider._provider = undefined;
          _EthereumProvider._intialized = false;
          _EthereumProvider._browserProviderInitialized = false;
          _EthereumProvider._browserProvider = undefined;
          _EthereumProvider._browserChainId = undefined;
          _EthereumProvider._browserSelectedAddress = undefined;
          _EthereumProvider._browserSelectedENSName = undefined;
          _EthereumProvider._signingProvider = undefined;
          _EthereumProvider._signingProviderAddress = undefined;
          _EthereumProvider._signingProviderENSName = undefined;
          _EthereumProvider._fallbackProvider = undefined;
          _EthereumProvider._connecting = false;
          // This variable is used to track user website disconnections and prevent auto reconnection when a user disconnects via the interface
          // then triggers a metamask disconnection (which would subsequently trigger a accountsChanged event)
          _EthereumProvider._userDisconnected = false;
          return _EthereumProvider;
        }());
// Singleton instance
        var EthereumProvider = _EthereumProviderSingleton();
        exports.EthereumProvider = EthereumProvider;
// Instantiate EthereumProvider singleton
        function _EthereumProviderSingleton() {
          if (!window.ManifoldEthereumProvider) {
            window.ManifoldEthereumProvider = _EthereumProvider;
          }
          return window.ManifoldEthereumProvider;
        }


        /***/ }),

      /***/ "e538":
      /***/ (function(module, exports, __webpack_require__) {

        var wellKnownSymbol = __webpack_require__("b622");

        exports.f = wellKnownSymbol;


        /***/ }),

      /***/ "e667":
      /***/ (function(module, exports) {

        module.exports = function (exec) {
          try {
            return { error: false, value: exec() };
          } catch (error) {
            return { error: true, value: error };
          }
        };


        /***/ }),

      /***/ "e6cf":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $ = __webpack_require__("23e7");
        var IS_PURE = __webpack_require__("c430");
        var global = __webpack_require__("da84");
        var getBuiltIn = __webpack_require__("d066");
        var NativePromise = __webpack_require__("fea9");
        var redefine = __webpack_require__("6eeb");
        var redefineAll = __webpack_require__("e2cc");
        var setPrototypeOf = __webpack_require__("d2bb");
        var setToStringTag = __webpack_require__("d44e");
        var setSpecies = __webpack_require__("2626");
        var aCallable = __webpack_require__("59ed");
        var isCallable = __webpack_require__("1626");
        var isObject = __webpack_require__("861d");
        var anInstance = __webpack_require__("19aa");
        var inspectSource = __webpack_require__("8925");
        var iterate = __webpack_require__("2266");
        var checkCorrectnessOfIteration = __webpack_require__("1c7e");
        var speciesConstructor = __webpack_require__("4840");
        var task = __webpack_require__("2cf4").set;
        var microtask = __webpack_require__("b575");
        var promiseResolve = __webpack_require__("cdf9");
        var hostReportErrors = __webpack_require__("44de");
        var newPromiseCapabilityModule = __webpack_require__("f069");
        var perform = __webpack_require__("e667");
        var InternalStateModule = __webpack_require__("69f3");
        var isForced = __webpack_require__("94ca");
        var wellKnownSymbol = __webpack_require__("b622");
        var IS_BROWSER = __webpack_require__("6069");
        var IS_NODE = __webpack_require__("605d");
        var V8_VERSION = __webpack_require__("2d00");

        var SPECIES = wellKnownSymbol('species');
        var PROMISE = 'Promise';
        var getInternalState = InternalStateModule.get;
        var setInternalState = InternalStateModule.set;
        var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
        var NativePromisePrototype = NativePromise && NativePromise.prototype;
        var PromiseConstructor = NativePromise;
        var PromiseConstructorPrototype = NativePromisePrototype;
        var TypeError = global.TypeError;
        var document = global.document;
        var process = global.process;
        var newPromiseCapability = newPromiseCapabilityModule.f;
        var newGenericPromiseCapability = newPromiseCapability;
        var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
        var NATIVE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);
        var UNHANDLED_REJECTION = 'unhandledrejection';
        var REJECTION_HANDLED = 'rejectionhandled';
        var PENDING = 0;
        var FULFILLED = 1;
        var REJECTED = 2;
        var HANDLED = 1;
        var UNHANDLED = 2;
        var SUBCLASSING = false;
        var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

        var FORCED = isForced(PROMISE, function () {
          var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
          var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
          // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
          // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
          // We can't detect it synchronously, so just check versions
          if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
          // We need Promise#finally in the pure version for preventing prototype pollution
          if (IS_PURE && !PromiseConstructorPrototype['finally']) return true;
          // We can't use @@species feature detection in V8 since it causes
          // deoptimization and performance degradation
          // https://github.com/zloirock/core-js/issues/679
          if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
          // Detect correctness of subclassing with @@species support
          var promise = new PromiseConstructor(function (resolve) { resolve(1); });
          var FakePromise = function (exec) {
            exec(function () { /* empty */ }, function () { /* empty */ });
          };
          var constructor = promise.constructor = {};
          constructor[SPECIES] = FakePromise;
          SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
          if (!SUBCLASSING) return true;
          // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
          return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
        });

        var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
          PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
        });

// helpers
        var isThenable = function (it) {
          var then;
          return isObject(it) && isCallable(then = it.then) ? then : false;
        };

        var notify = function (state, isReject) {
          if (state.notified) return;
          state.notified = true;
          var chain = state.reactions;
          microtask(function () {
            var value = state.value;
            var ok = state.state == FULFILLED;
            var index = 0;
            // variable length - can't use forEach
            while (chain.length > index) {
              var reaction = chain[index++];
              var handler = ok ? reaction.ok : reaction.fail;
              var resolve = reaction.resolve;
              var reject = reaction.reject;
              var domain = reaction.domain;
              var result, then, exited;
              try {
                if (handler) {
                  if (!ok) {
                    if (state.rejection === UNHANDLED) onHandleUnhandled(state);
                    state.rejection = HANDLED;
                  }
                  if (handler === true) result = value;
                  else {
                    if (domain) domain.enter();
                    result = handler(value); // can throw
                    if (domain) {
                      domain.exit();
                      exited = true;
                    }
                  }
                  if (result === reaction.promise) {
                    reject(TypeError('Promise-chain cycle'));
                  } else if (then = isThenable(result)) {
                    then.call(result, resolve, reject);
                  } else resolve(result);
                } else reject(value);
              } catch (error) {
                if (domain && !exited) domain.exit();
                reject(error);
              }
            }
            state.reactions = [];
            state.notified = false;
            if (isReject && !state.rejection) onUnhandled(state);
          });
        };

        var dispatchEvent = function (name, promise, reason) {
          var event, handler;
          if (DISPATCH_EVENT) {
            event = document.createEvent('Event');
            event.promise = promise;
            event.reason = reason;
            event.initEvent(name, false, true);
            global.dispatchEvent(event);
          } else event = { promise: promise, reason: reason };
          if (!NATIVE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
          else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
        };

        var onUnhandled = function (state) {
          task.call(global, function () {
            var promise = state.facade;
            var value = state.value;
            var IS_UNHANDLED = isUnhandled(state);
            var result;
            if (IS_UNHANDLED) {
              result = perform(function () {
                if (IS_NODE) {
                  process.emit('unhandledRejection', value, promise);
                } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
              });
              // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
              state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
              if (result.error) throw result.value;
            }
          });
        };

        var isUnhandled = function (state) {
          return state.rejection !== HANDLED && !state.parent;
        };

        var onHandleUnhandled = function (state) {
          task.call(global, function () {
            var promise = state.facade;
            if (IS_NODE) {
              process.emit('rejectionHandled', promise);
            } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
          });
        };

        var bind = function (fn, state, unwrap) {
          return function (value) {
            fn(state, value, unwrap);
          };
        };

        var internalReject = function (state, value, unwrap) {
          if (state.done) return;
          state.done = true;
          if (unwrap) state = unwrap;
          state.value = value;
          state.state = REJECTED;
          notify(state, true);
        };

        var internalResolve = function (state, value, unwrap) {
          if (state.done) return;
          state.done = true;
          if (unwrap) state = unwrap;
          try {
            if (state.facade === value) throw TypeError("Promise can't be resolved itself");
            var then = isThenable(value);
            if (then) {
              microtask(function () {
                var wrapper = { done: false };
                try {
                  then.call(value,
                    bind(internalResolve, wrapper, state),
                    bind(internalReject, wrapper, state)
                  );
                } catch (error) {
                  internalReject(wrapper, error, state);
                }
              });
            } else {
              state.value = value;
              state.state = FULFILLED;
              notify(state, false);
            }
          } catch (error) {
            internalReject({ done: false }, error, state);
          }
        };

// constructor polyfill
        if (FORCED) {
          // 25.4.3.1 Promise(executor)
          PromiseConstructor = function Promise(executor) {
            anInstance(this, PromiseConstructor, PROMISE);
            aCallable(executor);
            Internal.call(this);
            var state = getInternalState(this);
            try {
              executor(bind(internalResolve, state), bind(internalReject, state));
            } catch (error) {
              internalReject(state, error);
            }
          };
          PromiseConstructorPrototype = PromiseConstructor.prototype;
          // eslint-disable-next-line no-unused-vars -- required for `.length`
          Internal = function Promise(executor) {
            setInternalState(this, {
              type: PROMISE,
              done: false,
              notified: false,
              parent: false,
              reactions: [],
              rejection: false,
              state: PENDING,
              value: undefined
            });
          };
          Internal.prototype = redefineAll(PromiseConstructorPrototype, {
            // `Promise.prototype.then` method
            // https://tc39.es/ecma262/#sec-promise.prototype.then
            then: function then(onFulfilled, onRejected) {
              var state = getInternalPromiseState(this);
              var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
              reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
              reaction.fail = isCallable(onRejected) && onRejected;
              reaction.domain = IS_NODE ? process.domain : undefined;
              state.parent = true;
              state.reactions.push(reaction);
              if (state.state != PENDING) notify(state, false);
              return reaction.promise;
            },
            // `Promise.prototype.catch` method
            // https://tc39.es/ecma262/#sec-promise.prototype.catch
            'catch': function (onRejected) {
              return this.then(undefined, onRejected);
            }
          });
          OwnPromiseCapability = function () {
            var promise = new Internal();
            var state = getInternalState(promise);
            this.promise = promise;
            this.resolve = bind(internalResolve, state);
            this.reject = bind(internalReject, state);
          };
          newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
            return C === PromiseConstructor || C === PromiseWrapper
              ? new OwnPromiseCapability(C)
              : newGenericPromiseCapability(C);
          };

          if (!IS_PURE && isCallable(NativePromise) && NativePromisePrototype !== Object.prototype) {
            nativeThen = NativePromisePrototype.then;

            if (!SUBCLASSING) {
              // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
              redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
                var that = this;
                return new PromiseConstructor(function (resolve, reject) {
                  nativeThen.call(that, resolve, reject);
                }).then(onFulfilled, onRejected);
                // https://github.com/zloirock/core-js/issues/640
              }, { unsafe: true });

              // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
              redefine(NativePromisePrototype, 'catch', PromiseConstructorPrototype['catch'], { unsafe: true });
            }

            // make `.constructor === Promise` work for native promise-based APIs
            try {
              delete NativePromisePrototype.constructor;
            } catch (error) { /* empty */ }

            // make `instanceof Promise` work for native promise-based APIs
            if (setPrototypeOf) {
              setPrototypeOf(NativePromisePrototype, PromiseConstructorPrototype);
            }
          }
        }

        $({ global: true, wrap: true, forced: FORCED }, {
          Promise: PromiseConstructor
        });

        setToStringTag(PromiseConstructor, PROMISE, false, true);
        setSpecies(PROMISE);

        PromiseWrapper = getBuiltIn(PROMISE);

// statics
        $({ target: PROMISE, stat: true, forced: FORCED }, {
          // `Promise.reject` method
          // https://tc39.es/ecma262/#sec-promise.reject
          reject: function reject(r) {
            var capability = newPromiseCapability(this);
            capability.reject.call(undefined, r);
            return capability.promise;
          }
        });

        $({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
          // `Promise.resolve` method
          // https://tc39.es/ecma262/#sec-promise.resolve
          resolve: function resolve(x) {
            return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
          }
        });

        $({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
          // `Promise.all` method
          // https://tc39.es/ecma262/#sec-promise.all
          all: function all(iterable) {
            var C = this;
            var capability = newPromiseCapability(C);
            var resolve = capability.resolve;
            var reject = capability.reject;
            var result = perform(function () {
              var $promiseResolve = aCallable(C.resolve);
              var values = [];
              var counter = 0;
              var remaining = 1;
              iterate(iterable, function (promise) {
                var index = counter++;
                var alreadyCalled = false;
                values.push(undefined);
                remaining++;
                $promiseResolve.call(C, promise).then(function (value) {
                  if (alreadyCalled) return;
                  alreadyCalled = true;
                  values[index] = value;
                  --remaining || resolve(values);
                }, reject);
              });
              --remaining || resolve(values);
            });
            if (result.error) reject(result.value);
            return capability.promise;
          },
          // `Promise.race` method
          // https://tc39.es/ecma262/#sec-promise.race
          race: function race(iterable) {
            var C = this;
            var capability = newPromiseCapability(C);
            var reject = capability.reject;
            var result = perform(function () {
              var $promiseResolve = aCallable(C.resolve);
              iterate(iterable, function (promise) {
                $promiseResolve.call(C, promise).then(capability.resolve, reject);
              });
            });
            if (result.error) reject(result.value);
            return capability.promise;
          }
        });


        /***/ }),

      /***/ "e893":
      /***/ (function(module, exports, __webpack_require__) {

        var has = __webpack_require__("5135");
        var ownKeys = __webpack_require__("56ef");
        var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
        var definePropertyModule = __webpack_require__("9bf2");

        module.exports = function (target, source) {
          var keys = ownKeys(source);
          var defineProperty = definePropertyModule.f;
          var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
          }
        };


        /***/ }),

      /***/ "e8b5":
      /***/ (function(module, exports, __webpack_require__) {

        var classof = __webpack_require__("c6b6");

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
        module.exports = Array.isArray || function isArray(argument) {
          return classof(argument) == 'Array';
        };


        /***/ }),

      /***/ "e95a":
      /***/ (function(module, exports, __webpack_require__) {

        var wellKnownSymbol = __webpack_require__("b622");
        var Iterators = __webpack_require__("3f8c");

        var ITERATOR = wellKnownSymbol('iterator');
        var ArrayPrototype = Array.prototype;

// check on default Array iterator
        module.exports = function (it) {
          return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
        };


        /***/ }),

      /***/ "edc9":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__("c3c0");
        var assert = __webpack_require__("da3e");

        function BlockHash() {
          this.pending = null;
          this.pendingTotal = 0;
          this.blockSize = this.constructor.blockSize;
          this.outSize = this.constructor.outSize;
          this.hmacStrength = this.constructor.hmacStrength;
          this.padLength = this.constructor.padLength / 8;
          this.endian = 'big';

          this._delta8 = this.blockSize / 8;
          this._delta32 = this.blockSize / 32;
        }
        exports.BlockHash = BlockHash;

        BlockHash.prototype.update = function update(msg, enc) {
          // Convert message to array, pad it, and join into 32bit blocks
          msg = utils.toArray(msg, enc);
          if (!this.pending)
            this.pending = msg;
          else
            this.pending = this.pending.concat(msg);
          this.pendingTotal += msg.length;

          // Enough data, try updating
          if (this.pending.length >= this._delta8) {
            msg = this.pending;

            // Process pending data in blocks
            var r = msg.length % this._delta8;
            this.pending = msg.slice(msg.length - r, msg.length);
            if (this.pending.length === 0)
              this.pending = null;

            msg = utils.join32(msg, 0, msg.length - r, this.endian);
            for (var i = 0; i < msg.length; i += this._delta32)
              this._update(msg, i, i + this._delta32);
          }

          return this;
        };

        BlockHash.prototype.digest = function digest(enc) {
          this.update(this._pad());
          assert(this.pending === null);

          return this._digest(enc);
        };

        BlockHash.prototype._pad = function pad() {
          var len = this.pendingTotal;
          var bytes = this._delta8;
          var k = bytes - ((len + this.padLength) % bytes);
          var res = new Array(k + this.padLength);
          res[0] = 0x80;
          for (var i = 1; i < k; i++)
            res[i] = 0;

          // Append length
          len <<= 3;
          if (this.endian === 'big') {
            for (var t = 8; t < this.padLength; t++)
              res[i++] = 0;

            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = (len >>> 24) & 0xff;
            res[i++] = (len >>> 16) & 0xff;
            res[i++] = (len >>> 8) & 0xff;
            res[i++] = len & 0xff;
          } else {
            res[i++] = len & 0xff;
            res[i++] = (len >>> 8) & 0xff;
            res[i++] = (len >>> 16) & 0xff;
            res[i++] = (len >>> 24) & 0xff;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;
            res[i++] = 0;

            for (t = 8; t < this.padLength; t++)
              res[i++] = 0;
          }

          return res;
        };


        /***/ }),

      /***/ "f069":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var aCallable = __webpack_require__("59ed");

        var PromiseCapability = function (C) {
          var resolve, reject;
          this.promise = new C(function ($$resolve, $$reject) {
            if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
            resolve = $$resolve;
            reject = $$reject;
          });
          this.resolve = aCallable(resolve);
          this.reject = aCallable(reject);
        };

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
        module.exports.f = function (C) {
          return new PromiseCapability(C);
        };


        /***/ }),

      /***/ "f5df":
      /***/ (function(module, exports, __webpack_require__) {

        var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
        var isCallable = __webpack_require__("1626");
        var classofRaw = __webpack_require__("c6b6");
        var wellKnownSymbol = __webpack_require__("b622");

        var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
        var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
        var tryGet = function (it, key) {
          try {
            return it[key];
          } catch (error) { /* empty */ }
        };

// getting tag from ES6+ `Object.prototype.toString`
        module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
          var O, tag, result;
          return it === undefined ? 'Undefined' : it === null ? 'Null'
            // @@toStringTag case
            : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
              // builtinTag case
              : CORRECT_ARGUMENTS ? classofRaw(O)
                // ES3 arguments fallback
                : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
        };


        /***/ }),

      /***/ "f772":
      /***/ (function(module, exports, __webpack_require__) {

        var shared = __webpack_require__("5692");
        var uid = __webpack_require__("90e3");

        var keys = shared('keys');

        module.exports = function (key) {
          return keys[key] || (keys[key] = uid(key));
        };


        /***/ }),

      /***/ "fb15":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
// ESM COMPAT FLAG
        __webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js
// This file is imported into lib/wc client bundles.

        if (typeof window !== 'undefined') {
          var currentScript = window.document.currentScript
          if (true) {
            var getCurrentScript = __webpack_require__("8875")
            currentScript = getCurrentScript()

            // for backward compatibility, because previously we directly included the polyfill
            if (!('currentScript' in document)) {
              Object.defineProperty(document, 'currentScript', { get: getCurrentScript })
            }
          }

          var src = currentScript && currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/)
          if (src) {
            __webpack_require__.p = src[1] // eslint-disable-line
          }
        }

// Indicate to webpack that this file can be concatenated
        /* harmony default export */ var setPublicPath = (null);

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length) len = arr.length;

          for (var i = 0, arr2 = new Array(len); i < len; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        }
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) return _arrayLikeToArray(arr);
        }
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.js
        var es_symbol = __webpack_require__("a4d3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.description.js
        var es_symbol_description = __webpack_require__("e01a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js
        var es_object_to_string = __webpack_require__("d3b7");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.symbol.iterator.js
        var es_symbol_iterator = __webpack_require__("d28b");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.iterator.js
        var es_array_iterator = __webpack_require__("e260");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.iterator.js
        var es_string_iterator = __webpack_require__("3ca3");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.iterator.js
        var web_dom_collections_iterator = __webpack_require__("ddb0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.from.js
        var es_array_from = __webpack_require__("a630");

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js








        function _iterableToArray(iter) {
          if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
        }
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.slice.js
        var es_array_slice = __webpack_require__("fb6a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.function.name.js
        var es_function_name = __webpack_require__("b0c0");

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js






        function _unsupportedIterableToArray(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js




        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
        }
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js
        var es_array_map = __webpack_require__("d81d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom-collections.for-each.js
        var web_dom_collections_for_each = __webpack_require__("159b");

// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm.js
        var vue_esm = __webpack_require__("a026");

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"060f7087-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/widgets/OAuthConnect.vue?vue&type=template&id=dc9416e0&scoped=true&
        var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"manifold",class:{connected: _vm.oauthToken, menu: _vm.showMenu},attrs:{"id":"m-connection"}},[(!_vm.walletAvailable)?[_c('button',{staticClass:"m-connection-install-wallet",on:{"click":function($event){_vm.showInstallPopup = true}}},[_vm._v(" Install Wallet ")])]:[(_vm.badConfiguration)?[_c('button',[_vm._v(_vm._s(_vm.badConfiguration))])]:[(_vm.oauthToken)?_c('div',[_c('button',{on:{"click":function($event){_vm.showMenu = !_vm.showMenu}}},[(_vm.avatar)?_c('span',{staticClass:"m-connection-avatar"},[_c('img',{staticClass:"m-connection-avatar-img",attrs:{"src":_vm.avatar}})]):_vm._e(),(!_vm.wrongChain && _vm.showBalance)?_c('span',{staticClass:"m-connection-balance"},[_vm._v(_vm._s(_vm.walletBalance)+" ETH")]):_vm._e(),(!_vm.wrongChain && _vm.showChain && _vm.chainInfo)?_c('span',{staticClass:"m-connection-chain-id",style:({'background-color': _vm.chainInfo.color})}):_vm._e(),(_vm.wrongChain)?_c('span',{staticClass:"m-connection-wrong-network"},[_vm._v("Wrong network")]):_vm._e(),_c('span',{staticClass:"m-connection-wallet"},[_vm._v(_vm._s(_vm.walletENS ? _vm.walletENS : _vm.walletAddressShort))])]),(_vm.showMenu)?_c('div',{staticClass:"m-connection-dropdown"},[_vm._t("dropdown"),_c('button',{staticClass:"m-connection-disconnect-wallet",on:{"click":_vm.disconnect}},[_vm._v(" Disconnect ")])],2):_vm._e()]):_c('button',{staticClass:"m-connection-connect-wallet",attrs:{"disabled":_vm.isLoading},on:{"click":_vm.connectWallet}},[_vm._v(" "+_vm._s(_vm.buttonText)+" ")])]],(_vm.showInstallPopup)?_c('m-install-wallet',{on:{"close":function($event){_vm.showInstallPopup = false}}}):_vm._e()],2)}
        var staticRenderFns = []


// CONCATENATED MODULE: ./src/widgets/OAuthConnect.vue?vue&type=template&id=dc9416e0&scoped=true&

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return self;
        }
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
        function _setPrototypeOf(o, p) {
          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
          };

          return _setPrototypeOf(o, p);
        }
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true
            }
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.reflect.construct.js
        var es_reflect_construct = __webpack_require__("4ae1");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.get-prototype-of.js
        var es_object_get_prototype_of = __webpack_require__("3410");

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
          };
          return _getPrototypeOf(o);
        }
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js

        function _isNativeReflectConstruct() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;

          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js
        var helpers_typeof = __webpack_require__("7037");
        var typeof_default = /*#__PURE__*/__webpack_require__.n(helpers_typeof);

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js


        function _possibleConstructorReturn(self, call) {
          if (call && (typeof_default()(call) === "object" || typeof call === "function")) {
            return call;
          } else if (call !== void 0) {
            throw new TypeError("Derived constructors may only return object or undefined");
          }

          return _assertThisInitialized(self);
        }
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js




        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();
          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;

            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;
              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }

            return _possibleConstructorReturn(this, result);
          };
        }
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.concat.js
        var es_array_concat = __webpack_require__("99af");

// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js
        /*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
        /* global Reflect, Promise */

        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
        };

        function __extends(d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        }

        var __assign = function() {
          __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
          }
          return __assign.apply(this, arguments);
        }

        function __rest(s, e) {
          var t = {};
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        }

        function __decorate(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
          else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        }

        function __param(paramIndex, decorator) {
          return function (target, key) { decorator(target, key, paramIndex); }
        }

        function __metadata(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
        }

        function __awaiter(thisArg, _arguments, P, generator) {
          function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        }

        function __generator(thisArg, body) {
          var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
          function verb(n) { return function (v) { return step([n, v]); }; }
          function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
          }
        }

        function __createBinding(o, m, k, k2) {
          if (k2 === undefined) k2 = k;
          o[k2] = m[k];
        }

        function __exportStar(m, exports) {
          for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
        }

        function __values(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m) return m.call(o);
          if (o && typeof o.length === "number") return {
            next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }

        function __read(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m) return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
          }
          catch (error) { e = { error: error }; }
          finally {
            try {
              if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
          }
          return ar;
        }

        function __spread() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
          return ar;
        }

        function __spreadArrays() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };

        function __await(v) {
          return this instanceof __await ? (this.v = v, this) : new __await(v);
        }

        function __asyncGenerator(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
          function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
          function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
          function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
          function fulfill(value) { resume("next", value); }
          function reject(value) { resume("throw", value); }
          function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
        }

        function __asyncDelegator(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
          function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
        }

        function __asyncValues(o) {
          if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
          function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
          function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
        }

        function __makeTemplateObject(cooked, raw) {
          if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
          return cooked;
        };

        function __importStar(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
          result.default = mod;
          return result;
        }

        function __importDefault(mod) {
          return (mod && mod.__esModule) ? mod : { default: mod };
        }

        function __classPrivateFieldGet(receiver, privateMap) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
          }
          return privateMap.get(receiver);
        }

        function __classPrivateFieldSet(receiver, privateMap, value) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
          }
          privateMap.set(receiver, value);
          return value;
        }

// CONCATENATED MODULE: ./node_modules/vue-class-component/dist/vue-class-component.esm.js
        /**
         * vue-class-component v7.2.6
         * (c) 2015-present Evan You
         * @license MIT
         */


        function _typeof(obj) {
          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function (obj) {
              return typeof obj;
            };
          } else {
            _typeof = function (obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function vue_class_component_esm_defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        function vue_class_component_esm_toConsumableArray(arr) {
          return vue_class_component_esm_arrayWithoutHoles(arr) || vue_class_component_esm_iterableToArray(arr) || vue_class_component_esm_nonIterableSpread();
        }

        function vue_class_component_esm_arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

            return arr2;
          }
        }

        function vue_class_component_esm_iterableToArray(iter) {
          if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
        }

        function vue_class_component_esm_nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }

// The rational behind the verbose Reflect-feature check below is the fact that there are polyfills
// which add an implementation for Reflect.defineMetadata but not for Reflect.getOwnMetadataKeys.
// Without this check consumers will encounter hard to track down runtime errors.
        function reflectionIsSupported() {
          return typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.getOwnMetadataKeys;
        }
        function copyReflectionMetadata(to, from) {
          forwardMetadata(to, from);
          Object.getOwnPropertyNames(from.prototype).forEach(function (key) {
            forwardMetadata(to.prototype, from.prototype, key);
          });
          Object.getOwnPropertyNames(from).forEach(function (key) {
            forwardMetadata(to, from, key);
          });
        }

        function forwardMetadata(to, from, propertyKey) {
          var metaKeys = propertyKey ? Reflect.getOwnMetadataKeys(from, propertyKey) : Reflect.getOwnMetadataKeys(from);
          metaKeys.forEach(function (metaKey) {
            var metadata = propertyKey ? Reflect.getOwnMetadata(metaKey, from, propertyKey) : Reflect.getOwnMetadata(metaKey, from);

            if (propertyKey) {
              Reflect.defineMetadata(metaKey, metadata, to, propertyKey);
            } else {
              Reflect.defineMetadata(metaKey, metadata, to);
            }
          });
        }

        var fakeArray = {
          __proto__: []
        };
        var hasProto = fakeArray instanceof Array;
        function createDecorator(factory) {
          return function (target, key, index) {
            var Ctor = typeof target === 'function' ? target : target.constructor;

            if (!Ctor.__decorators__) {
              Ctor.__decorators__ = [];
            }

            if (typeof index !== 'number') {
              index = undefined;
            }

            Ctor.__decorators__.push(function (options) {
              return factory(options, key, index);
            });
          };
        }
        function mixins() {
          for (var _len = arguments.length, Ctors = new Array(_len), _key = 0; _key < _len; _key++) {
            Ctors[_key] = arguments[_key];
          }

          return vue_esm["a" /* default */].extend({
            mixins: Ctors
          });
        }
        function isPrimitive(value) {
          var type = _typeof(value);

          return value == null || type !== 'object' && type !== 'function';
        }
        function warn(message) {
          if (typeof console !== 'undefined') {
            console.warn('[vue-class-component] ' + message);
          }
        }

        function collectDataFromConstructor(vm, Component) {
          // override _init to prevent to init as Vue instance
          var originalInit = Component.prototype._init;

          Component.prototype._init = function () {
            var _this = this;

            // proxy to actual vm
            var keys = Object.getOwnPropertyNames(vm); // 2.2.0 compat (props are no longer exposed as self properties)

            if (vm.$options.props) {
              for (var key in vm.$options.props) {
                if (!vm.hasOwnProperty(key)) {
                  keys.push(key);
                }
              }
            }

            keys.forEach(function (key) {
              Object.defineProperty(_this, key, {
                get: function get() {
                  return vm[key];
                },
                set: function set(value) {
                  vm[key] = value;
                },
                configurable: true
              });
            });
          }; // should be acquired class property values


          var data = new Component(); // restore original _init to avoid memory leak (#209)

          Component.prototype._init = originalInit; // create plain data object

          var plainData = {};
          Object.keys(data).forEach(function (key) {
            if (data[key] !== undefined) {
              plainData[key] = data[key];
            }
          });

          if (false) {}

          return plainData;
        }

        var $internalHooks = ['data', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeDestroy', 'destroyed', 'beforeUpdate', 'updated', 'activated', 'deactivated', 'render', 'errorCaptured', 'serverPrefetch' // 2.6
        ];
        function componentFactory(Component) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          options.name = options.name || Component._componentTag || Component.name; // prototype props.

          var proto = Component.prototype;
          Object.getOwnPropertyNames(proto).forEach(function (key) {
            if (key === 'constructor') {
              return;
            } // hooks


            if ($internalHooks.indexOf(key) > -1) {
              options[key] = proto[key];
              return;
            }

            var descriptor = Object.getOwnPropertyDescriptor(proto, key);

            if (descriptor.value !== void 0) {
              // methods
              if (typeof descriptor.value === 'function') {
                (options.methods || (options.methods = {}))[key] = descriptor.value;
              } else {
                // typescript decorated data
                (options.mixins || (options.mixins = [])).push({
                  data: function data() {
                    return vue_class_component_esm_defineProperty({}, key, descriptor.value);
                  }
                });
              }
            } else if (descriptor.get || descriptor.set) {
              // computed properties
              (options.computed || (options.computed = {}))[key] = {
                get: descriptor.get,
                set: descriptor.set
              };
            }
          });
          (options.mixins || (options.mixins = [])).push({
            data: function data() {
              return collectDataFromConstructor(this, Component);
            }
          }); // decorate options

          var decorators = Component.__decorators__;

          if (decorators) {
            decorators.forEach(function (fn) {
              return fn(options);
            });
            delete Component.__decorators__;
          } // find super


          var superProto = Object.getPrototypeOf(Component.prototype);
          var Super = superProto instanceof vue_esm["a" /* default */] ? superProto.constructor : vue_esm["a" /* default */];
          var Extended = Super.extend(options);
          forwardStaticMembers(Extended, Component, Super);

          if (reflectionIsSupported()) {
            copyReflectionMetadata(Extended, Component);
          }

          return Extended;
        }
        var reservedPropertyNames = [// Unique id
          'cid', // Super Vue constructor
          'super', // Component options that will be used by the component
          'options', 'superOptions', 'extendOptions', 'sealedOptions', // Private assets
          'component', 'directive', 'filter'];
        var shouldIgnore = {
          prototype: true,
          arguments: true,
          callee: true,
          caller: true
        };

        function forwardStaticMembers(Extended, Original, Super) {
          // We have to use getOwnPropertyNames since Babel registers methods as non-enumerable
          Object.getOwnPropertyNames(Original).forEach(function (key) {
            // Skip the properties that should not be overwritten
            if (shouldIgnore[key]) {
              return;
            } // Some browsers does not allow reconfigure built-in properties


            var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);

            if (extendedDescriptor && !extendedDescriptor.configurable) {
              return;
            }

            var descriptor = Object.getOwnPropertyDescriptor(Original, key); // If the user agent does not support `__proto__` or its family (IE <= 10),
            // the sub class properties may be inherited properties from the super class in TypeScript.
            // We need to exclude such properties to prevent to overwrite
            // the component options object which stored on the extended constructor (See #192).
            // If the value is a referenced value (object or function),
            // we can check equality of them and exclude it if they have the same reference.
            // If it is a primitive value, it will be forwarded for safety.

            if (!hasProto) {
              // Only `cid` is explicitly exluded from property forwarding
              // because we cannot detect whether it is a inherited property or not
              // on the no `__proto__` environment even though the property is reserved.
              if (key === 'cid') {
                return;
              }

              var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);

              if (!isPrimitive(descriptor.value) && superDescriptor && superDescriptor.value === descriptor.value) {
                return;
              }
            } // Warn if the users manually declare reserved properties


            if (false) {}

            Object.defineProperty(Extended, key, descriptor);
          });
        }

        function vue_class_component_esm_Component(options) {
          if (typeof options === 'function') {
            return componentFactory(options);
          }

          return function (Component) {
            return componentFactory(Component, options);
          };
        }

        vue_class_component_esm_Component.registerHooks = function registerHooks(keys) {
          $internalHooks.push.apply($internalHooks, vue_class_component_esm_toConsumableArray(keys));
        };

        /* harmony default export */ var vue_class_component_esm = (vue_class_component_esm_Component);


// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/Emit.js
        var Emit_spreadArrays = (undefined && undefined.__spreadArrays) || function () {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
// Code copied from Vue/src/shared/util.js
        var hyphenateRE = /\B([A-Z])/g;
        var hyphenate = function (str) { return str.replace(hyphenateRE, '-$1').toLowerCase(); };
        /**
         * decorator of an event-emitter function
         * @param  event The name of the event
         * @return MethodDecorator
         */
        function Emit(event) {
          return function (_target, propertyKey, descriptor) {
            var key = hyphenate(propertyKey);
            var original = descriptor.value;
            descriptor.value = function emitter() {
              var _this = this;
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              var emit = function (returnValue) {
                var emitName = event || key;
                if (returnValue === undefined) {
                  if (args.length === 0) {
                    _this.$emit(emitName);
                  }
                  else if (args.length === 1) {
                    _this.$emit(emitName, args[0]);
                  }
                  else {
                    _this.$emit.apply(_this, Emit_spreadArrays([emitName], args));
                  }
                }
                else {
                  args.unshift(returnValue);
                  _this.$emit.apply(_this, Emit_spreadArrays([emitName], args));
                }
              };
              var returnValue = original.apply(this, args);
              if (isPromise(returnValue)) {
                returnValue.then(emit);
              }
              else {
                emit(returnValue);
              }
              return returnValue;
            };
          };
        }
        function isPromise(obj) {
          return obj instanceof Promise || (obj && typeof obj.then === 'function');
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/Inject.js

        /**
         * decorator of an inject
         * @param from key
         * @return PropertyDecorator
         */
        function Inject(options) {
          return createDecorator(function (componentOptions, key) {
            if (typeof componentOptions.inject === 'undefined') {
              componentOptions.inject = {};
            }
            if (!Array.isArray(componentOptions.inject)) {
              componentOptions.inject[key] = options || key;
            }
          });
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/helpers/provideInject.js
        function needToProduceProvide(original) {
          return (typeof original !== 'function' ||
            (!original.managed && !original.managedReactive));
        }
        function produceProvide(original) {
          var provide = function () {
            var _this = this;
            var rv = typeof original === 'function' ? original.call(this) : original;
            rv = Object.create(rv || null);
            // set reactive services (propagates previous services if necessary)
            rv[reactiveInjectKey] = Object.create(this[reactiveInjectKey] || {});
            for (var i in provide.managed) {
              rv[provide.managed[i]] = this[i];
            }
            var _loop_1 = function (i) {
              rv[provide.managedReactive[i]] = this_1[i]; // Duplicates the behavior of `@Provide`
              Object.defineProperty(rv[reactiveInjectKey], provide.managedReactive[i], {
                enumerable: true,
                configurable: true,
                get: function () { return _this[i]; },
              });
            };
            var this_1 = this;
            for (var i in provide.managedReactive) {
              _loop_1(i);
            }
            return rv;
          };
          provide.managed = {};
          provide.managedReactive = {};
          return provide;
        }
        /** Used for keying reactive provide/inject properties */
        var reactiveInjectKey = '__reactiveInject__';
        function inheritInjected(componentOptions) {
          // inject parent reactive services (if any)
          if (!Array.isArray(componentOptions.inject)) {
            componentOptions.inject = componentOptions.inject || {};
            componentOptions.inject[reactiveInjectKey] = {
              from: reactiveInjectKey,
              default: {},
            };
          }
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/InjectReactive.js


        /**
         * decorator of a reactive inject
         * @param from key
         * @return PropertyDecorator
         */
        function InjectReactive(options) {
          return createDecorator(function (componentOptions, key) {
            if (typeof componentOptions.inject === 'undefined') {
              componentOptions.inject = {};
            }
            if (!Array.isArray(componentOptions.inject)) {
              var fromKey_1 = !!options ? options.from || options : key;
              var defaultVal_1 = (!!options && options.default) || undefined;
              if (!componentOptions.computed)
                componentOptions.computed = {};
              componentOptions.computed[key] = function () {
                var obj = this[reactiveInjectKey];
                return obj ? obj[fromKey_1] : defaultVal_1;
              };
              componentOptions.inject[reactiveInjectKey] = reactiveInjectKey;
            }
          });
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/helpers/metadata.js
        /** @see {@link https://github.com/vuejs/vue-class-component/blob/master/src/reflect.ts} */
        var reflectMetadataIsSupported = typeof Reflect !== 'undefined' && typeof Reflect.getMetadata !== 'undefined';
        function applyMetadata(options, target, key) {
          if (reflectMetadataIsSupported) {
            if (!Array.isArray(options) &&
              typeof options !== 'function' &&
              !options.hasOwnProperty('type') &&
              typeof options.type === 'undefined') {
              var type = Reflect.getMetadata('design:type', target, key);
              if (type !== Object) {
                options.type = type;
              }
            }
          }
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/Model.js


        /**
         * decorator of model
         * @param  event event name
         * @param options options
         * @return PropertyDecorator
         */
        function Model(event, options) {
          if (options === void 0) { options = {}; }
          return function (target, key) {
            applyMetadata(options, target, key);
            createDecorator(function (componentOptions, k) {
              ;
              (componentOptions.props || (componentOptions.props = {}))[k] = options;
              componentOptions.model = { prop: k, event: event || k };
            })(target, key);
          };
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/ModelSync.js


        /**
         * decorator of synced model and prop
         * @param propName the name to interface with from outside, must be different from decorated property
         * @param  event event name
         * @param options options
         * @return PropertyDecorator
         */
        function ModelSync(propName, event, options) {
          if (options === void 0) { options = {}; }
          return function (target, key) {
            applyMetadata(options, target, key);
            createDecorator(function (componentOptions, k) {
              ;
              (componentOptions.props || (componentOptions.props = {}))[propName] = options;
              componentOptions.model = { prop: propName, event: event || k };
              (componentOptions.computed || (componentOptions.computed = {}))[k] = {
                get: function () {
                  return this[propName];
                },
                set: function (value) {
                  // @ts-ignore
                  this.$emit(event, value);
                },
              };
            })(target, key);
          };
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/Prop.js


        /**
         * decorator of a prop
         * @param  options the options for the prop
         * @return PropertyDecorator | void
         */
        function Prop(options) {
          if (options === void 0) { options = {}; }
          return function (target, key) {
            applyMetadata(options, target, key);
            createDecorator(function (componentOptions, k) {
              ;
              (componentOptions.props || (componentOptions.props = {}))[k] = options;
            })(target, key);
          };
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/PropSync.js


        /**
         * decorator of a synced prop
         * @param propName the name to interface with from outside, must be different from decorated property
         * @param options the options for the synced prop
         * @return PropertyDecorator | void
         */
        function PropSync(propName, options) {
          if (options === void 0) { options = {}; }
          return function (target, key) {
            applyMetadata(options, target, key);
            createDecorator(function (componentOptions, k) {
              ;
              (componentOptions.props || (componentOptions.props = {}))[propName] = options;
              (componentOptions.computed || (componentOptions.computed = {}))[k] = {
                get: function () {
                  return this[propName];
                },
                set: function (value) {
                  this.$emit("update:" + propName, value);
                },
              };
            })(target, key);
          };
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/Provide.js


        /**
         * decorator of a provide
         * @param key key
         * @return PropertyDecorator | void
         */
        function Provide(key) {
          return createDecorator(function (componentOptions, k) {
            var provide = componentOptions.provide;
            inheritInjected(componentOptions);
            if (needToProduceProvide(provide)) {
              provide = componentOptions.provide = produceProvide(provide);
            }
            provide.managed[k] = key || k;
          });
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/ProvideReactive.js


        /**
         * decorator of a reactive provide
         * @param key key
         * @return PropertyDecorator | void
         */
        function ProvideReactive(key) {
          return createDecorator(function (componentOptions, k) {
            var provide = componentOptions.provide;
            inheritInjected(componentOptions);
            if (needToProduceProvide(provide)) {
              provide = componentOptions.provide = produceProvide(provide);
            }
            provide.managedReactive[k] = key || k;
          });
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/Ref.js

        /**
         * decorator of a ref prop
         * @param refKey the ref key defined in template
         */
        function Ref(refKey) {
          return createDecorator(function (options, key) {
            options.computed = options.computed || {};
            options.computed[key] = {
              cache: false,
              get: function () {
                return this.$refs[refKey || key];
              },
            };
          });
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/VModel.js

        /**
         * decorator for capturings v-model binding to component
         * @param options the options for the prop
         */
        function VModel(options) {
          if (options === void 0) { options = {}; }
          var valueKey = 'value';
          return createDecorator(function (componentOptions, key) {
            ;
            (componentOptions.props || (componentOptions.props = {}))[valueKey] = options;
            (componentOptions.computed || (componentOptions.computed = {}))[key] = {
              get: function () {
                return this[valueKey];
              },
              set: function (value) {
                this.$emit('input', value);
              },
            };
          });
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/decorators/Watch.js

        /**
         * decorator of a watch function
         * @param  path the path or the expression to observe
         * @param  WatchOption
         * @return MethodDecorator
         */
        function Watch(path, options) {
          if (options === void 0) { options = {}; }
          var _a = options.deep, deep = _a === void 0 ? false : _a, _b = options.immediate, immediate = _b === void 0 ? false : _b;
          return createDecorator(function (componentOptions, handler) {
            if (typeof componentOptions.watch !== 'object') {
              componentOptions.watch = Object.create(null);
            }
            var watch = componentOptions.watch;
            if (typeof watch[path] === 'object' && !Array.isArray(watch[path])) {
              watch[path] = [watch[path]];
            }
            else if (typeof watch[path] === 'undefined') {
              watch[path] = [];
            }
            watch[path].push({ handler: handler, deep: deep, immediate: immediate });
          });
        }

// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/index.js
        /** vue-property-decorator verson 9.1.2 MIT LICENSE copyright 2020 kaorun343 */
/// <reference types='reflect-metadata'/>
















// EXTERNAL MODULE: ./node_modules/core-js/modules/es.promise.js
        var es_promise = __webpack_require__("e6cf");

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js



        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg);
            var value = info.value;
          } catch (error) {
            reject(error);
            return;
          }

          if (info.done) {
            resolve(value);
          } else {
            Promise.resolve(value).then(_next, _throw);
          }
        }

        function _asyncToGenerator(fn) {
          return function () {
            var self = this,
              args = arguments;
            return new Promise(function (resolve, reject) {
              var gen = fn.apply(self, args);

              function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
              }

              function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
              }

              _next(undefined);
            });
          };
        }
// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }
// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js
        var runtime = __webpack_require__("96cf");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.includes.js
        var es_array_includes = __webpack_require__("caad");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.includes.js
        var es_string_includes = __webpack_require__("2532");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.to-string.js
        var es_regexp_to_string = __webpack_require__("25f0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.regexp.exec.js
        var es_regexp_exec = __webpack_require__("ac1f");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.string.split.js
        var es_string_split = __webpack_require__("1276");

// EXTERNAL MODULE: ./node_modules/@manifoldxyz/manifold-sdk/dist/index.js
        var dist = __webpack_require__("576b");

// CONCATENATED MODULE: ./src/common/constants.ts
        var AUTHENTICATED = 'm-authenticated';
        var UNAUTHENTICATED = 'm-unauthenticated';
        var ETHEREUM_NETWORK_COLORS = {
          1: "#59B3AE",
          3: "#EC5A8C",
          4: "#EFC45B",
          42: "#886BF6",
          6284: "#4D99EB"
        };
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"060f7087-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/MInstallWallet.vue?vue&type=template&id=4fdc4747&
        var MInstallWalletvue_type_template_id_4fdc4747_render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"manifold",attrs:{"id":"m-install-wallet-container"}},[_c('div',{class:_vm.classNames,attrs:{"id":"m-install-wallet"}},[_c('div',{staticClass:"metamask"},[_c('svg',{staticStyle:{"enable-background":"new 0 0 318.6 318.6"},attrs:{"id":"metamask-logo","xmlns:ev":"http://www.w3.org/2001/xml-events","xmlns":"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink","version":"1.1","x":"0px","y":"0px","viewBox":"0 0 318.6 318.6","xml:space":"preserve"}},[_c('polygon',{attrs:{"fill":"#E2761B","stroke":"#E2761B","stroke-linecap":"round","stroke-linejoin":"round","points":"274.1,35.5 174.6,109.4 193,65.8 "}}),_c('g',[_c('polygon',{attrs:{"fill":"#E4761B","stroke":"#E4761B","stroke-linecap":"round","stroke-linejoin":"round","points":"44.4,35.5 143.1,110.1 125.6,65.8  "}}),_c('polygon',{attrs:{"fill":"#E4761B","stroke":"#E4761B","stroke-linecap":"round","stroke-linejoin":"round","points":"238.3,206.8 211.8,247.4 268.5,263 284.8,207.7  "}}),_c('polygon',{attrs:{"fill":"#E4761B","stroke":"#E4761B","stroke-linecap":"round","stroke-linejoin":"round","points":"33.9,207.7 50.1,263 106.8,247.4 80.3,206.8  "}}),_c('polygon',{attrs:{"fill":"#E4761B","stroke":"#E4761B","stroke-linecap":"round","stroke-linejoin":"round","points":"103.6,138.2 87.8,162.1 144.1,164.6 142.1,104.1  "}}),_c('polygon',{attrs:{"fill":"#E4761B","stroke":"#E4761B","stroke-linecap":"round","stroke-linejoin":"round","points":"214.9,138.2 175.9,103.4 174.6,164.6 230.8,162.1  "}}),_c('polygon',{attrs:{"fill":"#E4761B","stroke":"#E4761B","stroke-linecap":"round","stroke-linejoin":"round","points":"106.8,247.4 140.6,230.9 111.4,208.1  "}}),_c('polygon',{attrs:{"fill":"#E4761B","stroke":"#E4761B","stroke-linecap":"round","stroke-linejoin":"round","points":"177.9,230.9 211.8,247.4 207.1,208.1  "}})]),_c('g',[_c('polygon',{attrs:{"fill":"#D7C1B3","stroke":"#D7C1B3","stroke-linecap":"round","stroke-linejoin":"round","points":"211.8,247.4 177.9,230.9 180.6,253 180.3,262.3  "}}),_c('polygon',{attrs:{"fill":"#D7C1B3","stroke":"#D7C1B3","stroke-linecap":"round","stroke-linejoin":"round","points":"106.8,247.4 138.3,262.3 138.1,253 140.6,230.9  "}})]),_c('polygon',{attrs:{"fill":"#233447","stroke":"#233447","stroke-linecap":"round","stroke-linejoin":"round","points":"138.8,193.5 110.6,185.2 130.5,176.1 "}}),_c('polygon',{attrs:{"fill":"#233447","stroke":"#233447","stroke-linecap":"round","stroke-linejoin":"round","points":"179.7,193.5 188,176.1 208,185.2 "}}),_c('g',[_c('polygon',{attrs:{"fill":"#CD6116","stroke":"#CD6116","stroke-linecap":"round","stroke-linejoin":"round","points":"106.8,247.4 111.6,206.8 80.3,207.7  "}}),_c('polygon',{attrs:{"fill":"#CD6116","stroke":"#CD6116","stroke-linecap":"round","stroke-linejoin":"round","points":"207,206.8 211.8,247.4 238.3,207.7  "}}),_c('polygon',{attrs:{"fill":"#CD6116","stroke":"#CD6116","stroke-linecap":"round","stroke-linejoin":"round","points":"230.8,162.1 174.6,164.6 179.8,193.5 188.1,176.1 208.1,185.2  "}}),_c('polygon',{attrs:{"fill":"#CD6116","stroke":"#CD6116","stroke-linecap":"round","stroke-linejoin":"round","points":"110.6,185.2 130.6,176.1 138.8,193.5 144.1,164.6 87.8,162.1  "}})]),_c('g',[_c('polygon',{attrs:{"fill":"#E4751F","stroke":"#E4751F","stroke-linecap":"round","stroke-linejoin":"round","points":"87.8,162.1 111.4,208.1 110.6,185.2  "}}),_c('polygon',{attrs:{"fill":"#E4751F","stroke":"#E4751F","stroke-linecap":"round","stroke-linejoin":"round","points":"208.1,185.2 207.1,208.1 230.8,162.1  "}}),_c('polygon',{attrs:{"fill":"#E4751F","stroke":"#E4751F","stroke-linecap":"round","stroke-linejoin":"round","points":"144.1,164.6 138.8,193.5 145.4,227.6 146.9,182.7  "}}),_c('polygon',{attrs:{"fill":"#E4751F","stroke":"#E4751F","stroke-linecap":"round","stroke-linejoin":"round","points":"174.6,164.6 171.9,182.6 173.1,227.6 179.8,193.5  "}})]),_c('polygon',{attrs:{"fill":"#F6851B","stroke":"#F6851B","stroke-linecap":"round","stroke-linejoin":"round","points":"179.8,193.5 173.1,227.6 177.9,230.9 207.1,208.1 208.1,185.2 "}}),_c('polygon',{attrs:{"fill":"#F6851B","stroke":"#F6851B","stroke-linecap":"round","stroke-linejoin":"round","points":"110.6,185.2 111.4,208.1 140.6,230.9 145.4,227.6 138.8,193.5 "}}),_c('polygon',{attrs:{"fill":"#C0AD9E","stroke":"#C0AD9E","stroke-linecap":"round","stroke-linejoin":"round","points":"180.3,262.3 180.6,253 178.1,250.8 140.4,250.8 138.1,253 138.3,262.3 106.8,247.4 117.8,256.4   140.1,271.9 178.4,271.9 200.8,256.4 211.8,247.4 "}}),_c('polygon',{attrs:{"fill":"#161616","stroke":"#161616","stroke-linecap":"round","stroke-linejoin":"round","points":"177.9,230.9 173.1,227.6 145.4,227.6 140.6,230.9 138.1,253 140.4,250.8 178.1,250.8 180.6,253 "}}),_c('g',[_c('polygon',{attrs:{"fill":"#763D16","stroke":"#763D16","stroke-linecap":"round","stroke-linejoin":"round","points":"278.3,114.2 286.8,73.4 274.1,35.5 177.9,106.9 214.9,138.2 267.2,153.5 278.8,140 273.8,136.4    281.8,129.1 275.6,124.3 283.6,118.2  "}}),_c('polygon',{attrs:{"fill":"#763D16","stroke":"#763D16","stroke-linecap":"round","stroke-linejoin":"round","points":"31.8,73.4 40.3,114.2 34.9,118.2 42.9,124.3 36.8,129.1 44.8,136.4 39.8,140 51.3,153.5 103.6,138.2    140.6,106.9 44.4,35.5  "}})]),_c('polygon',{attrs:{"fill":"#F6851B","stroke":"#F6851B","stroke-linecap":"round","stroke-linejoin":"round","points":"267.2,153.5 214.9,138.2 230.8,162.1 207.1,208.1 238.3,207.7 284.8,207.7 "}}),_c('polygon',{attrs:{"fill":"#F6851B","stroke":"#F6851B","stroke-linecap":"round","stroke-linejoin":"round","points":"103.6,138.2 51.3,153.5 33.9,207.7 80.3,207.7 111.4,208.1 87.8,162.1 "}}),_c('polygon',{attrs:{"fill":"#F6851B","stroke":"#F6851B","stroke-linecap":"round","stroke-linejoin":"round","points":"174.6,164.6 177.9,106.9 193.1,65.8 125.6,65.8 140.6,106.9 144.1,164.6 145.3,182.8 145.4,227.6   173.1,227.6 173.3,182.8 "}})]),_c('h1',[_vm._v("Please install the MetaMask wallet extension.")]),_c('a',{attrs:{"href":"https://metamask.io","target":"_blank"}},[_vm._v("Go to MetaMask.io")])]),_c('div',{staticClass:"browsers"},[_c('div',{staticClass:"browsers-logos"},[_c('svg',{attrs:{"id":"brave-logo","width":"67","height":"78","viewBox":"0 0 67 78","fill":"none","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M63.8566 18.615L65.6827 14.138C65.6827 14.138 63.3853 11.6638 60.5577 8.83624C57.7301 6.00864 51.7804 7.65807 51.7804 7.65807L45.0059 0H21.207L14.3736 7.71698C14.3736 7.71698 8.42388 6.06755 5.59629 8.89515C2.76869 11.7227 0.471266 14.1969 0.471266 14.1969L2.29742 18.6739L0 25.2716C0 25.2716 6.83336 51.0735 7.59917 54.2545C9.18969 60.4399 10.25 62.8551 14.7271 66.0362C19.2041 69.2172 27.2745 74.6368 28.6294 75.4615C29.9254 76.2862 31.6337 77.7 33.1064 77.7C34.5792 77.7 36.2286 76.2862 37.5835 75.4615C38.8795 74.6368 47.0088 69.1583 51.4858 66.0362C55.9629 62.914 57.0232 60.4988 58.6137 54.2545C59.4384 51.0735 66.2129 25.2716 66.2129 25.2716L63.8566 18.615V18.615Z","fill":"url(#paint0_linear_brave)"}}),_c('path',{attrs:{"d":"M49.8953 12.6064C49.8953 12.6064 58.6137 23.151 58.6137 25.4484C58.6137 27.7458 57.4944 28.276 56.3752 29.4541C55.2559 30.6323 50.4255 35.7573 49.8364 36.4053C49.1884 37.0533 47.9513 38.0547 48.6582 39.8809C49.424 41.6481 50.5433 43.9456 49.3062 46.3019C48.0691 48.5993 45.9484 50.1898 44.5935 49.8953C43.2386 49.6597 39.9987 47.9513 38.8205 47.1855C37.6424 46.4197 33.9311 43.3565 33.9311 42.1783C33.9311 41.0002 37.8191 38.8795 38.526 38.4082C39.2329 37.9369 42.4728 36.0519 42.5317 35.345C42.5907 34.6381 42.5907 34.4024 41.5892 32.5763C40.6467 30.7501 38.8794 28.3349 39.174 26.7444C39.4685 25.1538 42.2372 24.3291 44.2401 23.5633C46.243 22.7975 50.072 21.3837 50.5433 21.1481C51.0145 20.9124 50.8967 20.7357 49.424 20.559C47.9513 20.4412 43.8866 19.8521 42.0016 20.3823C40.1165 20.9124 36.9944 21.6782 36.6998 22.0906C36.4642 22.503 36.2286 22.503 36.4642 23.9757C36.6998 25.3895 38.1136 32.3406 38.2314 33.5777C38.3493 34.8148 38.6438 35.6395 37.2889 35.934C35.9929 36.2286 33.7544 36.7588 32.9886 36.7588C32.2228 36.7588 29.9843 36.2286 28.6883 35.934C27.3923 35.6395 27.628 34.8148 27.7458 33.5777C27.8636 32.3406 29.2185 25.4484 29.513 23.9757C29.7487 22.5619 29.5719 22.503 29.2774 22.0906C29.0418 21.6782 25.8607 20.9124 23.9756 20.3823C22.0906 19.8521 18.0259 20.3823 16.5532 20.559C15.0805 20.6768 14.9627 20.9124 15.4339 21.1481C15.9052 21.3837 19.7342 22.7975 21.7371 23.5633C23.74 24.3291 26.5087 25.1538 26.8032 26.7444C27.0978 28.3349 25.3894 30.7501 24.388 32.5763C23.4455 34.4024 23.3866 34.5792 23.4455 35.345C23.5044 36.0519 26.7443 37.9369 27.4512 38.4082C28.1581 38.8795 32.0461 41.0002 32.0461 42.1783C32.0461 43.3565 28.3349 46.4197 27.1567 47.1855C25.9785 47.9513 22.7975 49.6008 21.3837 49.8953C20.0288 50.1309 17.9081 48.5993 16.671 46.3019C15.4339 44.0045 16.5532 41.7071 17.319 39.8809C18.0848 38.1136 16.7888 37.1122 16.1408 36.4053C15.4929 35.7573 10.7213 30.6323 9.60203 29.4541C8.48277 28.276 7.42242 27.6869 7.42242 25.4484C7.42242 23.2099 16.1408 12.6064 16.1408 12.6064C16.1408 12.6064 23.5044 14.0202 24.5058 14.0202C25.5073 14.0202 27.628 13.1955 29.6308 12.5475C31.6337 11.8995 32.9297 11.8995 32.9297 11.8995C32.9297 11.8995 34.2257 11.8995 36.2286 12.5475C38.2314 13.1955 40.3521 14.0202 41.3536 14.0202C42.355 14.0202 49.8953 12.6064 49.8953 12.6064ZM43.3565 52.9585C43.8866 53.312 43.5921 53.96 43.0619 54.2545C42.5907 54.608 35.934 59.733 35.3449 60.3221C34.6969 60.9111 33.7544 61.7948 33.1064 61.7948C32.4584 61.7948 31.5159 60.8522 30.8679 60.3221C30.2199 59.733 23.6222 54.608 23.1509 54.2545C22.6797 53.9011 22.3262 53.2531 22.8564 52.9585C23.3866 52.6051 25.0949 51.7804 27.3923 50.5433C29.7487 49.3062 32.6352 48.3048 33.1064 48.3048C33.5777 48.3048 36.4642 49.3062 38.8205 50.5433C41.1179 51.7804 42.8263 52.664 43.3565 52.9585Z","fill":"white"}}),_c('path',{attrs:{"d":"M51.7804 7.71698L45.0059 0H21.207L14.3736 7.71698C14.3736 7.71698 8.42388 6.06755 5.59628 8.89515C5.59628 8.89515 13.5489 8.18825 16.2587 12.6064C16.2587 12.6064 23.6222 14.0202 24.6237 14.0202C25.6251 14.0202 27.7458 13.1955 29.7487 12.5475C31.7516 11.8995 33.0475 11.8995 33.0475 11.8995C33.0475 11.8995 34.3435 11.8995 36.3464 12.5475C38.3493 13.1955 40.47 14.0202 41.4714 14.0202C42.4729 14.0202 49.8364 12.6064 49.8364 12.6064C52.5462 8.18825 60.4988 8.89515 60.4988 8.89515C57.7301 6.06755 51.7804 7.71698 51.7804 7.71698","fill":"url(#paint1_linear_brave)"}}),_c('defs',[_c('linearGradient',{attrs:{"id":"paint0_linear_brave","x1":"0.0387812","y1":"38.8327","x2":"66.2","y2":"38.8327","gradientUnits":"userSpaceOnUse"}},[_c('stop',{attrs:{"stop-color":"#FF5500"}}),_c('stop',{attrs:{"offset":"0.41","stop-color":"#FF5500"}}),_c('stop',{attrs:{"offset":"0.582","stop-color":"#FF2000"}}),_c('stop',{attrs:{"offset":"1","stop-color":"#FF2000"}})],1),_c('linearGradient',{attrs:{"id":"paint1_linear_brave","x1":"6.82326","y1":"6.98623","x2":"60.5839","y2":"6.98623","gradientUnits":"userSpaceOnUse"}},[_c('stop',{attrs:{"stop-color":"#FF452A"}}),_c('stop',{attrs:{"offset":"1","stop-color":"#FF2000"}})],1)],1)]),_c('svg',{attrs:{"id":"firefox-logo","width":"78","height":"80","viewBox":"0 0 78 80","fill":"none","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M74.616 26.8479C72.932 22.7959 69.516 18.4209 66.841 17.0379C68.7485 20.7318 70.0725 24.6988 70.766 28.7979L70.773 28.8629C66.391 17.9429 58.963 13.5329 52.893 3.94291C52.586 3.45791 52.279 2.97191 51.98 2.45891C51.809 2.16591 51.672 1.90191 51.553 1.65891C51.3013 1.17147 51.1073 0.656318 50.975 0.123914C50.9752 0.0993458 50.9663 0.0755724 50.9501 0.0571285C50.9338 0.0386846 50.9114 0.0268612 50.887 0.0239136C50.8631 0.0173609 50.8379 0.0173609 50.814 0.0239136C50.809 0.0239136 50.801 0.0329136 50.795 0.0349136C50.789 0.0369136 50.776 0.0459136 50.767 0.0499136L50.782 0.0239136C41.047 5.72391 37.742 16.2739 37.442 21.5539C33.553 21.8205 29.8346 23.2532 26.772 25.6649C26.4526 25.3944 26.1188 25.1413 25.772 24.9069C24.889 21.8158 24.8513 18.5445 25.663 15.4339C22.0879 17.1657 18.9112 19.6208 16.334 22.6439H16.316C14.78 20.6969 14.888 14.2769 14.976 12.9359C14.5216 13.1185 14.0878 13.3488 13.682 13.6229C12.326 14.5907 11.0584 15.6766 9.894 16.8679C8.56709 18.2132 7.35518 19.6673 6.271 21.2149V21.2209V21.2139C3.77953 24.7455 2.0122 28.7356 1.071 32.9539L1.019 33.2099C0.946 33.5509 0.683 35.2589 0.638 35.6299C0.638 35.6589 0.632 35.6859 0.629 35.7149C0.289748 37.4783 0.0795243 39.264 0 41.0579V41.2579C0.0171284 50.9565 3.66959 60.2962 10.2364 67.4334C16.8031 74.5706 25.807 78.9866 35.4706 79.8096C45.1341 80.6327 54.7551 77.803 62.4344 71.8792C70.1136 65.9554 75.2929 57.3679 76.95 47.8119C77.015 47.3119 77.068 46.8169 77.126 46.3119C77.9243 39.7138 77.0601 33.0208 74.612 26.8419L74.616 26.8479ZM29.946 57.1879C30.127 57.2749 30.297 57.3689 30.483 57.4519L30.51 57.4689C30.322 57.3789 30.134 57.2852 29.946 57.1879V57.1879ZM70.774 28.8739V28.8369L70.781 28.8779L70.774 28.8739Z","fill":"url(#paint0_linear_firefox)"}}),_c('path',{attrs:{"d":"M74.616 26.8479C72.932 22.7959 69.516 18.4209 66.841 17.0379C68.7485 20.7318 70.0725 24.6988 70.766 28.7979V28.8349L70.773 28.8759C73.7608 37.425 73.3287 46.798 69.567 55.0359C65.125 64.5669 54.377 74.3359 37.547 73.8559C19.367 73.3409 3.347 59.8459 0.356996 42.1759C-0.188004 39.3889 0.356996 37.9759 0.630996 35.7109C0.257246 37.4703 0.0486733 39.2607 0.00799561 41.0589V41.2589C0.025124 50.9575 3.67758 60.2972 10.2444 67.4344C16.8111 74.5716 25.815 78.9876 35.4786 79.8106C45.1421 80.6337 54.7631 77.804 62.4424 71.8802C70.1216 65.9564 75.3009 57.3689 76.958 47.8129C77.023 47.3129 77.076 46.8179 77.134 46.3129C77.9323 39.7148 77.0681 33.0218 74.62 26.8429L74.616 26.8479Z","fill":"url(#paint1_radial_firefox)"}}),_c('path',{attrs:{"d":"M74.616 26.8479C72.932 22.7959 69.516 18.4209 66.841 17.0379C68.7485 20.7318 70.0725 24.6988 70.766 28.7979V28.8349L70.773 28.8759C73.7608 37.425 73.3287 46.798 69.567 55.0359C65.125 64.5669 54.377 74.3359 37.547 73.8559C19.367 73.3409 3.347 59.8459 0.356996 42.1759C-0.188004 39.3889 0.356996 37.9759 0.630996 35.7109C0.257246 37.4703 0.0486733 39.2607 0.00799561 41.0589V41.2589C0.025124 50.9575 3.67758 60.2972 10.2444 67.4344C16.8111 74.5716 25.815 78.9876 35.4786 79.8106C45.1421 80.6337 54.7631 77.804 62.4424 71.8802C70.1216 65.9564 75.3009 57.3689 76.958 47.8129C77.023 47.3129 77.076 46.8179 77.134 46.3129C77.9323 39.7148 77.0681 33.0218 74.62 26.8429L74.616 26.8479Z","fill":"url(#paint2_radial_firefox)"}}),_c('path',{attrs:{"d":"M55.776 31.3979C55.86 31.4569 55.938 31.5159 56.017 31.5749C55.0435 29.8486 53.8316 28.2681 52.417 26.8799C40.367 14.8299 49.26 0.759914 50.759 0.0399138L50.774 0.0179138C41.039 5.71791 37.734 16.2679 37.434 21.5479C37.886 21.5169 38.334 21.4789 38.796 21.4789C42.2499 21.4856 45.6404 22.4067 48.6228 24.1486C51.6052 25.8904 54.0733 28.391 55.776 31.3959V31.3979Z","fill":"url(#paint3_radial_firefox)"}}),_c('path',{attrs:{"d":"M38.816 33.8079C38.752 34.7719 35.346 38.0969 34.155 38.0969C23.135 38.0969 21.345 44.7639 21.345 44.7639C21.833 50.3779 25.745 55.0039 30.474 57.4439C30.69 57.5559 30.909 57.6569 31.128 57.7559C31.5073 57.9239 31.8867 58.0792 32.266 58.2219C33.889 58.7962 35.5888 59.1242 37.309 59.1949C56.629 60.1009 60.369 36.0949 46.428 29.1249C49.7165 28.697 53.0468 29.5056 55.773 31.3939C54.0703 28.3889 51.6022 25.8884 48.6198 24.1466C45.6373 22.4047 42.2468 21.4836 38.793 21.4769C38.333 21.4769 37.883 21.5149 37.431 21.5459C33.542 21.8125 29.8236 23.2452 26.761 25.6569C27.352 26.1569 28.019 26.8249 29.424 28.2099C32.054 30.8009 38.799 33.4849 38.814 33.7999L38.816 33.8079Z","fill":"url(#paint4_radial_firefox)"}}),_c('path',{attrs:{"d":"M38.816 33.8079C38.752 34.7719 35.346 38.0969 34.155 38.0969C23.135 38.0969 21.345 44.7639 21.345 44.7639C21.833 50.3779 25.745 55.0039 30.474 57.4439C30.69 57.5559 30.909 57.6569 31.128 57.7559C31.5073 57.9239 31.8867 58.0792 32.266 58.2219C33.889 58.7962 35.5888 59.1242 37.309 59.1949C56.629 60.1009 60.369 36.0949 46.428 29.1249C49.7165 28.697 53.0468 29.5056 55.773 31.3939C54.0703 28.3889 51.6022 25.8884 48.6198 24.1466C45.6373 22.4047 42.2468 21.4836 38.793 21.4769C38.333 21.4769 37.883 21.5149 37.431 21.5459C33.542 21.8125 29.8236 23.2452 26.761 25.6569C27.352 26.1569 28.019 26.8249 29.424 28.2099C32.054 30.8009 38.799 33.4849 38.814 33.7999L38.816 33.8079Z","fill":"url(#paint5_radial_firefox)"}}),_c('path',{attrs:{"d":"M24.956 24.3779C25.27 24.5779 25.529 24.7519 25.756 24.9089C24.873 21.8178 24.8353 18.5465 25.647 15.4359C22.0719 17.1677 18.8952 19.6228 16.318 22.6459C16.507 22.6409 22.129 22.5399 24.956 24.3779V24.3779Z","fill":"url(#paint6_radial_firefox)"}}),_c('path',{attrs:{"d":"M0.349986 42.1779C3.34099 59.8479 19.36 73.3479 37.54 73.8579C54.37 74.3339 65.12 64.5639 69.56 55.0379C73.3217 46.8 73.7538 37.427 70.766 28.8779V28.8409C70.766 28.8119 70.76 28.7949 70.766 28.8039L70.773 28.8689C72.148 37.8459 67.582 46.5389 60.443 52.4289L60.421 52.4789C46.511 63.8089 33.201 59.3129 30.511 57.4789C30.323 57.3889 30.135 57.2952 29.947 57.1979C21.838 53.3219 18.487 45.9379 19.207 39.5979C17.2821 39.6263 15.3903 39.0959 13.7607 38.0709C12.1312 37.0459 10.8339 35.5703 10.026 33.8229C12.1548 32.5189 14.5821 31.7816 17.0765 31.6815C19.571 31.5814 22.0495 32.1217 24.276 33.2509C28.8653 35.334 34.0873 35.5393 38.826 33.8229C38.811 33.5079 32.066 30.8229 29.436 28.2329C28.031 26.8479 27.364 26.1809 26.773 25.6799C26.4536 25.4094 26.1198 25.1563 25.773 24.9219C25.543 24.7649 25.284 24.5949 24.973 24.3909C22.146 22.5529 16.524 22.6539 16.338 22.6589H16.32C14.784 20.7119 14.892 14.2919 14.98 12.9509C14.5256 13.1335 14.0918 13.3638 13.686 13.6379C12.33 14.6057 11.0624 15.6916 9.89799 16.8829C8.56632 18.2244 7.3494 19.6752 6.25999 21.2199V21.2259V21.2189C3.76852 24.7505 2.00118 28.7406 1.05999 32.9589C1.04099 33.0379 -0.336014 39.0579 0.342986 42.1799L0.349986 42.1779Z","fill":"url(#paint7_radial_firefox)"}}),_c('path',{attrs:{"d":"M52.416 26.8779C53.8309 28.2676 55.0428 29.8498 56.016 31.5779C56.229 31.7389 56.428 31.8989 56.597 32.0539C65.384 40.1539 60.78 51.6039 60.437 52.4139C67.575 46.5329 72.137 37.8339 70.767 28.8539C66.383 17.9239 58.947 13.5139 52.887 3.92391C52.58 3.43891 52.273 2.95291 51.974 2.43991C51.803 2.14691 51.666 1.88291 51.547 1.63991C51.2953 1.15247 51.1013 0.637319 50.969 0.104915C50.9692 0.0803467 50.9603 0.0565733 50.9441 0.0381294C50.9278 0.0196855 50.9054 0.00786207 50.881 0.0049145C50.8571 -0.00163817 50.8319 -0.00163817 50.808 0.0049145C50.803 0.0049145 50.795 0.0139145 50.789 0.0159145C50.783 0.0179145 50.77 0.0269145 50.761 0.0309145C49.262 0.741915 40.371 14.8209 52.421 26.8609L52.416 26.8779Z","fill":"url(#paint8_radial_firefox)"}}),_c('path',{attrs:{"d":"M56.596 32.0579C56.427 31.9029 56.228 31.7429 56.015 31.5819C55.936 31.5229 55.858 31.4639 55.774 31.4049C53.0478 29.5166 49.7176 28.708 46.429 29.1359C60.369 36.1059 56.629 60.1059 37.31 59.2059C35.5899 59.1352 33.89 58.8072 32.267 58.2329C31.8877 58.0909 31.5083 57.9356 31.129 57.7669C30.91 57.6669 30.691 57.5669 30.475 57.4549L30.502 57.4719C33.196 59.3109 46.502 63.8039 60.412 52.4719L60.434 52.4219C60.781 51.6119 65.385 40.1619 56.594 32.0619L56.596 32.0579Z","fill":"url(#paint9_radial_firefox)"}}),_c('path',{attrs:{"d":"M21.346 44.7579C21.346 44.7579 23.135 38.0909 34.156 38.0909C35.347 38.0909 38.756 34.7659 38.817 33.8019C34.0783 35.5183 28.8563 35.313 24.267 33.2299C22.0405 32.1007 19.562 31.5604 17.0675 31.6605C14.5731 31.7606 12.1458 32.4979 10.017 33.8019C10.8249 35.5493 12.1222 37.0249 13.7517 38.0499C15.3813 39.0749 17.2731 39.6053 19.198 39.5769C18.48 45.9139 21.83 53.2969 29.938 57.1769C30.119 57.2639 30.289 57.3579 30.475 57.4409C25.742 54.9959 21.834 50.3719 21.346 44.7609V44.7579Z","fill":"url(#paint10_radial_firefox)"}}),_c('path',{attrs:{"d":"M74.616 26.8479C72.932 22.7959 69.516 18.4209 66.841 17.0379C68.7485 20.7318 70.0726 24.6988 70.766 28.7979L70.773 28.8629C66.391 17.9429 58.963 13.5329 52.893 3.94291C52.586 3.45791 52.279 2.97191 51.98 2.45891C51.809 2.16591 51.672 1.90191 51.553 1.65891C51.3013 1.17147 51.1073 0.656318 50.975 0.123914C50.9752 0.0993458 50.9663 0.0755724 50.9501 0.0571285C50.9339 0.0386846 50.9114 0.0268612 50.887 0.0239136C50.8631 0.0173609 50.8379 0.0173609 50.814 0.0239136C50.809 0.0239136 50.801 0.0329136 50.795 0.0349136C50.789 0.0369136 50.776 0.0459136 50.767 0.0499136L50.782 0.0239136C41.047 5.72391 37.742 16.2739 37.442 21.5539C37.894 21.5229 38.342 21.4849 38.804 21.4849C42.2579 21.4916 45.6483 22.4127 48.6308 24.1546C51.6132 25.8964 54.0813 28.397 55.784 31.4019C53.0578 29.5136 49.7276 28.705 46.439 29.1329C60.379 36.1029 56.639 60.1029 37.32 59.2029C35.5999 59.1322 33.9 58.8042 32.277 58.2299C31.8977 58.0879 31.5183 57.9326 31.139 57.7639C30.92 57.6639 30.701 57.5639 30.485 57.4519L30.512 57.4689C30.324 57.3789 30.136 57.2852 29.948 57.1879C30.129 57.2749 30.299 57.3689 30.485 57.4519C25.752 55.0059 21.844 50.3819 21.356 44.7719C21.356 44.7719 23.145 38.1049 34.166 38.1049C35.357 38.1049 38.766 34.7799 38.827 33.8159C38.812 33.5009 32.067 30.8159 29.437 28.2259C28.032 26.8409 27.365 26.1739 26.774 25.6729C26.4546 25.4024 26.1208 25.1493 25.774 24.9149C24.891 21.8238 24.8534 18.5525 25.665 15.4419C22.0899 17.1737 18.9132 19.6288 16.336 22.6519H16.318C14.782 20.7049 14.89 14.2849 14.978 12.9439C14.5236 13.1265 14.0899 13.3568 13.684 13.6309C12.328 14.5987 11.0604 15.6846 9.89601 16.8759C8.5691 18.2212 7.3572 19.6753 6.27301 21.2229V21.2289V21.2219C3.78155 24.7535 2.01421 28.7436 1.07301 32.9619L1.02101 33.2179C0.948014 33.5589 0.621014 35.2909 0.574014 35.6629C0.274915 37.4508 0.0839016 39.2551 0.00201416 41.0659V41.2659C0.0191425 50.9645 3.6716 60.3042 10.2384 67.4414C16.8051 74.5786 25.809 78.9946 35.4726 79.8176C45.1362 80.6407 54.7572 77.811 62.4364 71.8872C70.1156 65.9634 75.2949 57.3759 76.952 47.8199C77.017 47.3199 77.07 46.8249 77.128 46.3199C77.9263 39.7218 77.0621 33.0288 74.614 26.8499L74.616 26.8479ZM70.771 28.8389L70.778 28.8799L70.771 28.8389Z","fill":"url(#paint11_linear_firefox)"}}),_c('defs',[_c('linearGradient',{attrs:{"id":"paint0_linear_firefox","x1":"69.486","y1":"12.4038","x2":"5.14301","y2":"74.4838","gradientUnits":"userSpaceOnUse"}},[_c('stop',{attrs:{"offset":"0.048","stop-color":"#FFF44F"}}),_c('stop',{attrs:{"offset":"0.111","stop-color":"#FFE847"}}),_c('stop',{attrs:{"offset":"0.225","stop-color":"#FFC830"}}),_c('stop',{attrs:{"offset":"0.368","stop-color":"#FF980E"}}),_c('stop',{attrs:{"offset":"0.401","stop-color":"#FF8B16"}}),_c('stop',{attrs:{"offset":"0.462","stop-color":"#FF672A"}}),_c('stop',{attrs:{"offset":"0.534","stop-color":"#FF3647"}}),_c('stop',{attrs:{"offset":"0.705","stop-color":"#E31587"}})],1),_c('radialGradient',{attrs:{"id":"paint1_radial_firefox","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(66.996 9.01791) scale(80.8)"}},[_c('stop',{attrs:{"offset":"0.129","stop-color":"#FFBD4F"}}),_c('stop',{attrs:{"offset":"0.186","stop-color":"#FFAC31"}}),_c('stop',{attrs:{"offset":"0.247","stop-color":"#FF9D17"}}),_c('stop',{attrs:{"offset":"0.283","stop-color":"#FF980E"}}),_c('stop',{attrs:{"offset":"0.403","stop-color":"#FF563B"}}),_c('stop',{attrs:{"offset":"0.467","stop-color":"#FF3750"}}),_c('stop',{attrs:{"offset":"0.71","stop-color":"#F5156C"}}),_c('stop',{attrs:{"offset":"0.782","stop-color":"#EB0878"}}),_c('stop',{attrs:{"offset":"0.86","stop-color":"#E50080"}})],1),_c('radialGradient',{attrs:{"id":"paint2_radial_firefox","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(36.996 42.0179) scale(80.8)"}},[_c('stop',{attrs:{"offset":"0.3","stop-color":"#960E18"}}),_c('stop',{attrs:{"offset":"0.351","stop-color":"#B11927","stop-opacity":"0.74"}}),_c('stop',{attrs:{"offset":"0.435","stop-color":"#DB293D","stop-opacity":"0.343"}}),_c('stop',{attrs:{"offset":"0.497","stop-color":"#F5334B","stop-opacity":"0.094"}}),_c('stop',{attrs:{"offset":"0.53","stop-color":"#FF3750","stop-opacity":"0"}})],1),_c('radialGradient',{attrs:{"id":"paint3_radial_firefox","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(46.996 -8.98209) scale(58.53)"}},[_c('stop',{attrs:{"offset":"0.132","stop-color":"#FFF44F"}}),_c('stop',{attrs:{"offset":"0.252","stop-color":"#FFDC3E"}}),_c('stop',{attrs:{"offset":"0.506","stop-color":"#FF9D12"}}),_c('stop',{attrs:{"offset":"0.526","stop-color":"#FF980E"}})],1),_c('radialGradient',{attrs:{"id":"paint4_radial_firefox","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(27.996 63.0179) scale(38.47)"}},[_c('stop',{attrs:{"offset":"0.353","stop-color":"#3A8EE6"}}),_c('stop',{attrs:{"offset":"0.472","stop-color":"#5C79F0"}}),_c('stop',{attrs:{"offset":"0.669","stop-color":"#9059FF"}}),_c('stop',{attrs:{"offset":"1","stop-color":"#C139E6"}})],1),_c('radialGradient',{attrs:{"id":"paint5_radial_firefox","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(40.904 35.0819) rotate(-13.5916) scale(20.4001 23.8834)"}},[_c('stop',{attrs:{"offset":"0.206","stop-color":"#9059FF","stop-opacity":"0"}}),_c('stop',{attrs:{"offset":"0.278","stop-color":"#8C4FF3","stop-opacity":"0.064"}}),_c('stop',{attrs:{"offset":"0.747","stop-color":"#7716A8","stop-opacity":"0.45"}}),_c('stop',{attrs:{"offset":"0.975","stop-color":"#6E008B","stop-opacity":"0.6"}})],1),_c('radialGradient',{attrs:{"id":"paint6_radial_firefox","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(35.996 6.01791) scale(27.68)"}},[_c('stop',{attrs:{"stop-color":"#FFE226"}}),_c('stop',{attrs:{"offset":"0.121","stop-color":"#FFDB27"}}),_c('stop',{attrs:{"offset":"0.295","stop-color":"#FFC82A"}}),_c('stop',{attrs:{"offset":"0.502","stop-color":"#FFA930"}}),_c('stop',{attrs:{"offset":"0.732","stop-color":"#FF7E37"}}),_c('stop',{attrs:{"offset":"0.792","stop-color":"#FF7139"}})],1),_c('radialGradient',{attrs:{"id":"paint7_radial_firefox","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(57.996 -11.9821) scale(118.1)"}},[_c('stop',{attrs:{"offset":"0.113","stop-color":"#FFF44F"}}),_c('stop',{attrs:{"offset":"0.456","stop-color":"#FF980E"}}),_c('stop',{attrs:{"offset":"0.622","stop-color":"#FF5634"}}),_c('stop',{attrs:{"offset":"0.716","stop-color":"#FF3647"}}),_c('stop',{attrs:{"offset":"0.904","stop-color":"#E31587"}})],1),_c('radialGradient',{attrs:{"id":"paint8_radial_firefox","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(48.18 -5.43408) rotate(83.976) scale(86.5454 56.799)"}},[_c('stop',{attrs:{"stop-color":"#FFF44F"}}),_c('stop',{attrs:{"offset":"0.06","stop-color":"#FFE847"}}),_c('stop',{attrs:{"offset":"0.168","stop-color":"#FFC830"}}),_c('stop',{attrs:{"offset":"0.304","stop-color":"#FF980E"}}),_c('stop',{attrs:{"offset":"0.356","stop-color":"#FF8B16"}}),_c('stop',{attrs:{"offset":"0.455","stop-color":"#FF672A"}}),_c('stop',{attrs:{"offset":"0.57","stop-color":"#FF3647"}}),_c('stop',{attrs:{"offset":"0.737","stop-color":"#E31587"}})],1),_c('radialGradient',{attrs:{"id":"paint9_radial_firefox","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(35.996 16.0179) scale(73.72)"}},[_c('stop',{attrs:{"offset":"0.137","stop-color":"#FFF44F"}}),_c('stop',{attrs:{"offset":"0.48","stop-color":"#FF980E"}}),_c('stop',{attrs:{"offset":"0.592","stop-color":"#FF5634"}}),_c('stop',{attrs:{"offset":"0.655","stop-color":"#FF3647"}}),_c('stop',{attrs:{"offset":"0.904","stop-color":"#E31587"}})],1),_c('radialGradient',{attrs:{"id":"paint10_radial_firefox","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(54.996 20.0179) scale(80.69)"}},[_c('stop',{attrs:{"offset":"0.094","stop-color":"#FFF44F"}}),_c('stop',{attrs:{"offset":"0.231","stop-color":"#FFE141"}}),_c('stop',{attrs:{"offset":"0.509","stop-color":"#FFAF1E"}}),_c('stop',{attrs:{"offset":"0.626","stop-color":"#FF980E"}})],1),_c('linearGradient',{attrs:{"id":"paint11_linear_firefox","x1":"68.706","y1":"12.0738","x2":"13.966","y2":"66.8238","gradientUnits":"userSpaceOnUse"}},[_c('stop',{attrs:{"offset":"0.167","stop-color":"#FFF44F","stop-opacity":"0.8"}}),_c('stop',{attrs:{"offset":"0.266","stop-color":"#FFF44F","stop-opacity":"0.634"}}),_c('stop',{attrs:{"offset":"0.489","stop-color":"#FFF44F","stop-opacity":"0.217"}}),_c('stop',{attrs:{"offset":"0.6","stop-color":"#FFF44F","stop-opacity":"0"}})],1)],1)]),_c('svg',{attrs:{"id":"chrome-logo","width":"78","height":"78","viewBox":"0 0 78 78","fill":"none","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M38.6114 0.00688269C38.6114 0.00688269 61.429 -1.01719 73.5258 21.9177H36.6699C36.6699 21.9177 29.7147 21.6937 23.773 30.1316C22.0662 33.6732 20.2314 37.3215 22.2902 44.5113C19.3247 39.487 6.54514 17.2347 6.54514 17.2347C6.54514 17.2347 15.5591 0.913612 38.6114 0.00688269Z","fill":"#EF3F36"}}),_c('path',{attrs:{"d":"M72.3417 58.2296C72.3417 58.2296 61.8129 78.5083 35.9125 77.5056C39.1127 71.9692 54.3458 45.5887 54.3458 45.5887C54.3458 45.5887 58.026 39.679 53.6844 30.313C51.4762 27.0594 49.2254 23.6565 41.9716 21.8431C47.8066 21.7897 73.4618 21.8431 73.4618 21.8431C73.4618 21.8431 83.0731 37.8122 72.3417 58.2296Z","fill":"#FCD900"}}),_c('path',{attrs:{"d":"M5.04103 58.3896C5.04103 58.3896 -7.25849 39.1349 6.56647 17.2027C9.75603 22.7391 24.9891 49.1196 24.9891 49.1196C24.9891 49.1196 28.2746 55.2641 38.5474 56.1815C42.4623 55.8934 46.5372 55.6481 51.7429 50.2824C48.8734 55.3601 35.9978 77.5483 35.9978 77.5483C35.9978 77.5483 17.3512 77.8896 5.04103 58.3896Z","fill":"#61BC5B"}}),_c('path',{attrs:{"d":"M35.9019 77.6976L41.0862 56.0641C41.0862 56.0641 46.7826 55.6161 51.5616 50.3784C48.5961 55.5948 35.9019 77.6976 35.9019 77.6976Z","fill":"#5AB055"}}),_c('path',{attrs:{"d":"M21.2448 39.0923C21.2448 29.5556 28.9787 21.8217 38.5153 21.8217C48.052 21.8217 55.7859 29.5556 55.7859 39.0923C55.7859 48.6289 48.052 56.3628 38.5153 56.3628C28.9787 56.3521 21.2448 48.6289 21.2448 39.0923Z","fill":"white"}}),_c('path',{attrs:{"d":"M24.1357 39.0923C24.1357 31.1557 30.5681 24.7126 38.5153 24.7126C46.4519 24.7126 52.895 31.145 52.895 39.0923C52.895 47.0288 46.4626 53.4719 38.5153 53.4719C30.5788 53.4719 24.1357 47.0288 24.1357 39.0923Z","fill":"url(#paint0_linear_chrome)"}}),_c('path',{attrs:{"d":"M73.4511 21.8537L52.1056 28.1155C52.1056 28.1155 48.8841 23.3898 41.9609 21.8537C47.9667 21.8217 73.4511 21.8537 73.4511 21.8537Z","fill":"#EACA05"}}),_c('path',{attrs:{"d":"M21.8742 43.7219C18.8767 38.5269 6.54514 17.2347 6.54514 17.2347L22.3542 32.8732C22.3542 32.8732 20.7328 36.2121 21.3408 40.9911L21.8742 43.7219Z","fill":"#DF3A32"}}),_c('defs',[_c('linearGradient',{attrs:{"id":"paint0_linear_chrome","x1":"38.5147","y1":"24.9156","x2":"38.5147","y2":"52.6062","gradientUnits":"userSpaceOnUse"}},[_c('stop',{attrs:{"stop-color":"#86BBE5"}}),_c('stop',{attrs:{"offset":"1","stop-color":"#1072BA"}})],1)],1)]),_c('svg',{attrs:{"id":"edge-logo","width":"78","height":"78","viewBox":"0 0 78 78","fill":"none","xmlns":"http://www.w3.org/2000/svg"}},[_c('path',{attrs:{"d":"M69.8763 57.6199C68.8441 58.1597 67.7797 58.6354 66.689 59.0442C63.2172 60.3432 59.5395 61.005 55.8327 60.9977C41.523 60.9977 29.0579 51.1545 29.0579 38.5231C29.0763 36.8289 29.5464 35.1704 30.4198 33.7186C31.2932 32.2668 32.5383 31.0744 34.0264 30.2645C21.0836 30.8088 17.7571 44.296 17.7571 52.1978C17.7571 74.5393 38.3478 76.8043 42.784 76.8043C45.176 76.8043 48.7837 76.1088 50.9489 75.4254L51.345 75.2923C59.677 72.4119 66.78 66.7806 71.4851 59.3254C71.6292 59.0984 71.6935 58.8298 71.6679 58.5621C71.6423 58.2944 71.5283 58.0428 71.3437 57.8472C71.1592 57.6516 70.9148 57.523 70.649 57.4819C70.3833 57.4407 70.1114 57.4893 69.8763 57.6199Z","fill":"url(#paint0_linear_edge)"}}),_c('path',{attrs:{"opacity":"0.35","d":"M69.8763 57.6199C68.8441 58.1597 67.7797 58.6354 66.689 59.0442C63.2172 60.3432 59.5395 61.005 55.8327 60.9977C41.523 60.9977 29.0579 51.1545 29.0579 38.5231C29.0763 36.8289 29.5464 35.1704 30.4198 33.7186C31.2932 32.2668 32.5383 31.0744 34.0264 30.2645C21.0836 30.8088 17.7571 44.296 17.7571 52.1978C17.7571 74.5393 38.3478 76.8043 42.784 76.8043C45.176 76.8043 48.7837 76.1088 50.9489 75.4254L51.345 75.2923C59.677 72.4119 66.78 66.7806 71.4851 59.3254C71.6292 59.0984 71.6935 58.8298 71.6679 58.5621C71.6423 58.2944 71.5283 58.0428 71.3437 57.8472C71.1592 57.6516 70.9148 57.523 70.649 57.4819C70.3833 57.4407 70.1114 57.4893 69.8763 57.6199Z","fill":"url(#paint1_radial_edgew)"}}),_c('path',{attrs:{"d":"M31.9731 73.0061C29.2758 71.332 26.9383 69.1384 25.0964 66.5528C22.9971 63.6766 21.5525 60.376 20.8639 56.8823C20.1752 53.3887 20.2593 49.7867 21.1102 46.329C21.9611 42.8713 23.5582 39.6416 25.7894 36.8665C28.0207 34.0914 30.832 31.838 34.0264 30.2645C34.9699 29.82 36.5817 29.0156 38.7257 29.0549C40.2362 29.0659 41.7237 29.4265 43.0715 30.1086C44.4194 30.7906 45.5909 31.7755 46.4944 32.9861C47.7156 34.6166 48.3889 36.5921 48.4177 38.629C48.4177 38.5655 55.8145 14.5577 24.2255 14.5577C10.95 14.5577 0.0332558 27.1558 0.0332558 38.2086C-0.0191085 44.0554 1.2319 49.8404 3.69536 55.1432C7.72133 63.7332 14.7617 70.5456 23.4794 74.2868C32.1972 78.028 41.9853 78.4375 50.9851 75.4375C47.834 76.431 44.5048 76.7292 41.2272 76.3116C37.9496 75.8939 34.8016 74.7703 32.0003 73.0182L31.9731 73.0061Z","fill":"url(#paint2_linear_edge)"}}),_c('path',{attrs:{"opacity":"0.41","d":"M31.9731 73.0061C29.2758 71.332 26.9383 69.1384 25.0964 66.5528C22.9971 63.6766 21.5525 60.376 20.8639 56.8823C20.1752 53.3887 20.2593 49.7867 21.1102 46.329C21.9611 42.8713 23.5582 39.6416 25.7894 36.8665C28.0207 34.0914 30.832 31.838 34.0264 30.2645C34.9699 29.82 36.5817 29.0156 38.7257 29.0549C40.2362 29.0659 41.7237 29.4265 43.0715 30.1086C44.4194 30.7906 45.5909 31.7755 46.4944 32.9861C47.7156 34.6166 48.3889 36.5921 48.4177 38.629C48.4177 38.5655 55.8145 14.5577 24.2255 14.5577C10.95 14.5577 0.0332558 27.1558 0.0332558 38.2086C-0.0191085 44.0554 1.2319 49.8404 3.69536 55.1432C7.72133 63.7332 14.7617 70.5456 23.4794 74.2868C32.1972 78.028 41.9853 78.4375 50.9851 75.4375C47.834 76.431 44.5048 76.7292 41.2272 76.3116C37.9496 75.8939 34.8016 74.7703 32.0003 73.0182L31.9731 73.0061Z","fill":"url(#paint3_radial_edge)"}}),_c('path',{attrs:{"d":"M46.065 45.0157C45.8201 45.3332 45.0671 45.7717 45.0671 46.7273C45.0671 47.5166 45.5812 48.2756 46.4945 48.9137C50.843 51.9377 59.0412 51.5385 59.0623 51.5385C62.2845 51.5308 65.4456 50.6588 68.2161 49.0135C71.0109 47.3816 73.3305 45.0473 74.9446 42.2422C76.5588 39.4372 77.4116 36.2588 77.4182 33.0224C77.4968 26.2456 74.999 21.7397 73.9889 19.7439C67.581 7.20929 53.7491 1.89499e-07 38.7076 1.89499e-07C28.5353 -0.00100566 18.7715 4.0023 11.5279 11.1441C4.28422 18.2858 0.143048 27.992 0 38.1633C0.145153 27.1134 11.1284 18.1895 24.1922 18.1895C25.2506 18.1895 31.2866 18.2924 36.8932 21.2347C41.8344 23.8294 44.423 26.9622 46.2223 30.0679C48.0911 33.2946 48.4238 37.371 48.4238 38.9949C48.4238 40.6188 47.5952 43.0259 46.065 45.0157Z","fill":"url(#paint4_radial_edge)"}}),_c('path',{attrs:{"d":"M46.065 45.0157C45.8201 45.3332 45.0671 45.7717 45.0671 46.7273C45.0671 47.5166 45.5812 48.2756 46.4945 48.9137C50.843 51.9377 59.0412 51.5385 59.0623 51.5385C62.2845 51.5308 65.4456 50.6588 68.2161 49.0135C71.0109 47.3816 73.3305 45.0473 74.9446 42.2422C76.5588 39.4372 77.4116 36.2588 77.4182 33.0224C77.4968 26.2456 74.999 21.7397 73.9889 19.7439C67.581 7.20929 53.7491 1.89499e-07 38.7076 1.89499e-07C28.5353 -0.00100566 18.7715 4.0023 11.5279 11.1441C4.28422 18.2858 0.143048 27.992 0 38.1633C0.145153 27.1134 11.1284 18.1895 24.1922 18.1895C25.2506 18.1895 31.2866 18.2924 36.8932 21.2347C41.8344 23.8294 44.423 26.9622 46.2223 30.0679C48.0911 33.2946 48.4238 37.371 48.4238 38.9949C48.4238 40.6188 47.5952 43.0259 46.065 45.0157Z","fill":"url(#paint5_radial_edge)"}}),_c('defs',[_c('linearGradient',{attrs:{"id":"paint0_linear_edge","x1":"17.7571","y1":"53.5404","x2":"71.6877","y2":"53.5404","gradientUnits":"userSpaceOnUse"}},[_c('stop',{attrs:{"stop-color":"#0C59A4"}}),_c('stop',{attrs:{"offset":"1","stop-color":"#114A8B"}})],1),_c('radialGradient',{attrs:{"id":"paint1_radial_edgew","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(47.5438 53.9655) scale(28.8432 27.401)"}},[_c('stop',{attrs:{"offset":"0.72","stop-opacity":"0"}}),_c('stop',{attrs:{"offset":"0.95","stop-opacity":"0.53"}}),_c('stop',{attrs:{"offset":"1"}})],1),_c('linearGradient',{attrs:{"id":"paint2_linear_edge","x1":"46.189","y1":"30.1466","x2":"12.5044","y2":"66.8371","gradientUnits":"userSpaceOnUse"}},[_c('stop',{attrs:{"stop-color":"#1B9DE2"}}),_c('stop',{attrs:{"offset":"0.16","stop-color":"#1595DF"}}),_c('stop',{attrs:{"offset":"0.67","stop-color":"#0680D7"}}),_c('stop',{attrs:{"offset":"1","stop-color":"#0078D4"}})],1),_c('radialGradient',{attrs:{"id":"paint3_radial_edge","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(21.348 60.1807) rotate(-81.3844) scale(43.3725 35.0406)"}},[_c('stop',{attrs:{"offset":"0.76","stop-opacity":"0"}}),_c('stop',{attrs:{"offset":"0.95","stop-opacity":"0.5"}}),_c('stop',{attrs:{"offset":"1"}})],1),_c('radialGradient',{attrs:{"id":"paint4_radial_edge","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(7.82089 14.3269) rotate(92.2906) scale(61.2644 130.48)"}},[_c('stop',{attrs:{"stop-color":"#35C1F1"}}),_c('stop',{attrs:{"offset":"0.11","stop-color":"#34C1ED"}}),_c('stop',{attrs:{"offset":"0.23","stop-color":"#2FC2DF"}}),_c('stop',{attrs:{"offset":"0.31","stop-color":"#2BC3D2"}}),_c('stop',{attrs:{"offset":"0.67","stop-color":"#36C752"}})],1),_c('radialGradient',{attrs:{"id":"paint5_radial_edge","cx":"0","cy":"0","r":"1","gradientUnits":"userSpaceOnUse","gradientTransform":"translate(72.5985 23.4078) rotate(73.7398) scale(29.4359 23.9373)"}},[_c('stop',{attrs:{"stop-color":"#66EB6E"}}),_c('stop',{attrs:{"offset":"1","stop-color":"#66EB6E","stop-opacity":"0"}})],1)],1)])]),_c('h2',[_vm._v("Supported Browsers")])]),_c('button',{staticClass:"close",on:{"click":_vm.close}},[_vm._v(" Ã— ")])])])}
        var MInstallWalletvue_type_template_id_4fdc4747_staticRenderFns = []


// CONCATENATED MODULE: ./src/components/MInstallWallet.vue?vue&type=template&id=4fdc4747&

// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/MInstallWallet.vue?vue&type=script&lang=ts&












        var MInstallWalletvue_type_script_lang_ts_MInstallWallet = /*#__PURE__*/function (_Vue) {
          _inherits(MInstallWallet, _Vue);

          var _super = _createSuper(MInstallWallet);

          function MInstallWallet() {
            var _this;

            _classCallCheck(this, MInstallWallet);

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this = _super.call.apply(_super, [this].concat(args));

            _defineProperty(_assertThisInitialized(_this), "fallbackProvider", void 0);

            _defineProperty(_assertThisInitialized(_this), "classNames", []);

            return _this;
          }

          _createClass(MInstallWallet, [{
            key: "created",
            value: function created() {
              this.$nextTick(function () {
                // @ts-ignore
                document.body.appendChild(this.$el); // @ts-ignore

                this.classNames.push("show"); // @ts-ignore

                this.$el.focus();
              }.bind(this));
            }
          }, {
            key: "mounted",
            value: function mounted() {
              window.addEventListener('keyup', this.keyClose, false);
            }
          }, {
            key: "beforeDestroy",
            value: function beforeDestroy() {
              window.removeEventListener('keyup', this.keyClose);
            }
          }, {
            key: "close",
            value: function close() {
              this.$emit('close');
            }
          }, {
            key: "keyClose",
            value: function keyClose(e) {
              if (e.key == "Escape") {
                this.$emit('close');
              }
            }
          }]);

          return MInstallWallet;
        }(vue_esm["a" /* default */]);

        __decorate([Prop()], MInstallWalletvue_type_script_lang_ts_MInstallWallet.prototype, "fallbackProvider", void 0);

        MInstallWalletvue_type_script_lang_ts_MInstallWallet = __decorate([vue_class_component_esm], MInstallWalletvue_type_script_lang_ts_MInstallWallet);
        /* harmony default export */ var MInstallWalletvue_type_script_lang_ts_ = (MInstallWalletvue_type_script_lang_ts_MInstallWallet);
// CONCATENATED MODULE: ./src/components/MInstallWallet.vue?vue&type=script&lang=ts&
        /* harmony default export */ var components_MInstallWalletvue_type_script_lang_ts_ = (MInstallWalletvue_type_script_lang_ts_);
// EXTERNAL MODULE: ./src/components/MInstallWallet.vue?vue&type=style&index=0&lang=scss&
        var MInstallWalletvue_type_style_index_0_lang_scss_ = __webpack_require__("0bc1");

// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
        /* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

        function normalizeComponent (
          scriptExports,
          render,
          staticRenderFns,
          functionalTemplate,
          injectStyles,
          scopeId,
          moduleIdentifier, /* server only */
          shadowMode /* vue-cli only */
        ) {
          // Vue.extend constructor export interop
          var options = typeof scriptExports === 'function'
            ? scriptExports.options
            : scriptExports

          // render functions
          if (render) {
            options.render = render
            options.staticRenderFns = staticRenderFns
            options._compiled = true
          }

          // functional template
          if (functionalTemplate) {
            options.functional = true
          }

          // scopedId
          if (scopeId) {
            options._scopeId = 'data-v-' + scopeId
          }

          var hook
          if (moduleIdentifier) { // server build
            hook = function (context) {
              // 2.3 injection
              context =
                context || // cached call
                (this.$vnode && this.$vnode.ssrContext) || // stateful
                (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
              // 2.2 with runInNewContext: true
              if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__
              }
              // inject component styles
              if (injectStyles) {
                injectStyles.call(this, context)
              }
              // register component module identifier for async chunk inferrence
              if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier)
              }
            }
            // used by ssr in case component is cached and beforeCreate
            // never gets called
            options._ssrRegister = hook
          } else if (injectStyles) {
            hook = shadowMode
              ? function () {
                injectStyles.call(
                  this,
                  (options.functional ? this.parent : this).$root.$options.shadowRoot
                )
              }
              : injectStyles
          }

          if (hook) {
            if (options.functional) {
              // for template-only hot-reload because in that case the render fn doesn't
              // go through the normalizer
              options._injectStyles = hook
              // register for functional component in vue file
              var originalRender = options.render
              options.render = function renderWithStyleInjection (h, context) {
                hook.call(context)
                return originalRender(h, context)
              }
            } else {
              // inject component registration as beforeCreate hook
              var existing = options.beforeCreate
              options.beforeCreate = existing
                ? [].concat(existing, hook)
                : [hook]
            }
          }

          return {
            exports: scriptExports,
            options: options
          }
        }

// CONCATENATED MODULE: ./src/components/MInstallWallet.vue






        /* normalize component */

        var component = normalizeComponent(
          components_MInstallWalletvue_type_script_lang_ts_,
          MInstallWalletvue_type_template_id_4fdc4747_render,
          MInstallWalletvue_type_template_id_4fdc4747_staticRenderFns,
          false,
          null,
          null,
          null

        )

        /* harmony default export */ var components_MInstallWallet = (component.exports);
// EXTERNAL MODULE: ./node_modules/isomorphic-unfetch/browser.js
        var browser = __webpack_require__("ce08");

// CONCATENATED MODULE: ./node_modules/@manifoldxyz/manifold-data-client/dist/index.m.js
        function t(){return t=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},t.apply(this,arguments)}function e(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,r(t,e)}function r(t,e){return r=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},r(t,e)}var index_m_n,index_m_o=/*#__PURE__*/function(){function e(t){this.token=void 0,this.network=void 0,this.token=t.token,this.network=t.network||1}return e.prototype.request=function(e,r){var n=(1===this.network?"https://resource.api.manifoldxyz.dev":"https://rinkeby.resource.api.manifoldxyz.dev")+"/"+e,o=t({},r,{headers:{Authorization:"Bearer "+this.token,"Content-Type":"application/json"}});return fetch(n,o).then(function(t){if(t.ok)return t.json();throw new Error(t.statusText)})},e}(),i=/*#__PURE__*/function(t){function r(){return t.apply(this,arguments)||this}e(r,t);var n=r.prototype;return n.getNFT=function(t){return this.request("nft/"+t.contractAddress.toLocaleLowerCase()+"/"+t.tokenId)},n.ownerHasNFT=function(t){for(var e=0;e<t.filters.length;e++)if(t.filters[e].contractAddress=t.filters[e].contractAddress.toLocaleLowerCase(),t.filters[e].tokenId&&(t.filters[e].tokenId=t.filters[e].tokenId.toString()),t.filters[e].minTokenId&&(t.filters[e].minTokenId=t.filters[e].minTokenId.toString()),t.filters[e].maxTokenId&&(t.filters[e].maxTokenId=t.filters[e].maxTokenId.toString()),t.filters[e].tokenIds&&t.filters[e].tokenIds.length>0)for(var r=0;r<t.filters[e].tokenIds.length;r++)t.filters[e].tokenIds[r]=t.filters[e].tokenIds[r].toString();return this.request("check/nfts/",{method:"POST",body:JSON.stringify({filters:t.filters})})},n.getNFTsOfOwner=function(t){if(t){if(t.filters)for(var e=0;e<t.filters.length;e++)if(t.filters[e].contractAddress=t.filters[e].contractAddress.toLocaleLowerCase(),t.filters[e].tokenId&&(t.filters[e].tokenId=t.filters[e].tokenId.toString()),t.filters[e].minTokenId&&(t.filters[e].minTokenId=t.filters[e].minTokenId.toString()),t.filters[e].maxTokenId&&(t.filters[e].maxTokenId=t.filters[e].maxTokenId.toString()),t.filters[e].tokenIds&&t.filters[e].tokenIds.length>0)for(var r=0;r<t.filters[e].tokenIds.length;r++)t.filters[e].tokenIds[r]=t.filters[e].tokenIds[r].toString();return this.request("nfts/",{method:"POST",body:JSON.stringify({filters:t.filters})})}return this.request("nfts/",{method:"POST"})},r}(index_m_o),s=/*#__PURE__*/function(t){function r(){return t.apply(this,arguments)||this}return e(r,t),r.prototype.getAddress=function(){return this.request("address")},r}(index_m_o),f=/*#__PURE__*/function(t){function r(){return t.apply(this,arguments)||this}return e(r,t),r}(index_m_o);index_m_n=f,[i,s].forEach(function(t){Object.getOwnPropertyNames(t.prototype).forEach(function(e){Object.defineProperty(index_m_n.prototype,e,Object.getOwnPropertyDescriptor(t.prototype,e))})});
//# sourceMappingURL=index.m.js.map

// CONCATENATED MODULE: ./src/api/auto-detect.ts




        var backendURL = 'https://kygy4d4nc3.execute-api.us-east-1.amazonaws.com/prod/app/public?redirectURI=';
        var getDetails = /*#__PURE__*/function () {
          var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(siteURI) {
            var appDetails;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return fetch("".concat(backendURL).concat(siteURI));

                  case 2:
                    appDetails = _context.sent;
                    _context.next = 5;
                    return appDetails.json();

                  case 5:
                    return _context.abrupt("return", _context.sent);

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function getDetails(_x) {
            return _ref.apply(this, arguments);
          };
        }();
// CONCATENATED MODULE: ./src/mixins/wallet.ts


























        var wallet_WalletMixin = /*#__PURE__*/function (_Vue) {
          _inherits(WalletMixin, _Vue);

          var _super = _createSuper(WalletMixin);

          function WalletMixin() {
            var _this;

            _classCallCheck(this, WalletMixin);

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this = _super.call.apply(_super, [this].concat(args));

            _defineProperty(_assertThisInitialized(_this), "fallbackProvider", void 0);

            _defineProperty(_assertThisInitialized(_this), "network", void 0);

            _defineProperty(_assertThisInitialized(_this), "autoReconnect", void 0);

            _defineProperty(_assertThisInitialized(_this), "clientId", void 0);

            _defineProperty(_assertThisInitialized(_this), "appName", void 0);

            _defineProperty(_assertThisInitialized(_this), "overrideConnectText", void 0);

            _defineProperty(_assertThisInitialized(_this), "badConfiguration", null);

            _defineProperty(_assertThisInitialized(_this), "providerAvailable", false);

            _defineProperty(_assertThisInitialized(_this), "walletAddressFull", '');

            _defineProperty(_assertThisInitialized(_this), "walletAddressShort", '');

            _defineProperty(_assertThisInitialized(_this), "walletENS", '');

            _defineProperty(_assertThisInitialized(_this), "walletAvailable", !!(window && window.ethereum));

            _defineProperty(_assertThisInitialized(_this), "walletBalance", '');

            _defineProperty(_assertThisInitialized(_this), "walletConnected", false);

            _defineProperty(_assertThisInitialized(_this), "oauthToken", null);

            _defineProperty(_assertThisInitialized(_this), "signatureAddress", null);

            _defineProperty(_assertThisInitialized(_this), "wrongChain", false);

            _defineProperty(_assertThisInitialized(_this), "chainInfo", null);

            _defineProperty(_assertThisInitialized(_this), "showInstallPopup", false);

            _defineProperty(_assertThisInitialized(_this), "isLoading", false);

            return _this;
          }

          _createClass(WalletMixin, [{
            key: "buttonText",
            get: function get() {
              return this.isLoading ? "Logging in..." : this.overrideConnectText ? this.overrideConnectText : "Connect Wallet";
            }
          }, {
            key: "created",
            value: function () {
              var _created = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                var address;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        // @ts-ignore
                        window.manifold = {}; // Get address by pulling information from EthereumProvider, because the widget may be created
                        // AFTER the event is fired

                        address = dist["EthereumProvider"].selectedAddress();

                        if (!address) {
                          _context.next = 9;
                          break;
                        }

                        // It means we connected before creating this widget
                        this.providerAvailable = true;
                        localStorage.setItem("connectedAddress", address); // Set up the wallet address state

                        _context.next = 7;
                        return this.onAddressChanged();

                      case 7:
                        _context.next = 9;
                        return this.updateBalance();

                      case 9:
                        window.addEventListener(dist["EthereumProvider"].ADDRESS_CHANGED, this.onAddressChanged); // We set up the provider and chain listeners afterwards to avoid
                        // situations where a provider change can trigger a
                        // concurrent auto-reconnect with the above.

                        window.addEventListener(dist["EthereumProvider"].PROVIDER_CHANGED, this.onProviderChanged);
                        window.addEventListener(dist["EthereumProvider"].CHAIN_CHANGED, this.onChainChanged);
                        _context.next = 14;
                        return this.updateChainInfo();

                      case 14:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, this);
              }));

              function created() {
                return _created.apply(this, arguments);
              }

              return created;
            }()
          }, {
            key: "onWalletAddressFullChanged",
            value: function () {
              var _onWalletAddressFullChanged = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return this.updateBalance();

                      case 2:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, this);
              }));

              function onWalletAddressFullChanged() {
                return _onWalletAddressFullChanged.apply(this, arguments);
              }

              return onWalletAddressFullChanged;
            }()
          }, {
            key: "destroyed",
            value: function destroyed() {
              window.removeEventListener(dist["EthereumProvider"].PROVIDER_CHANGED, this.onProviderChanged);
              window.removeEventListener(dist["EthereumProvider"].ADDRESS_CHANGED, this.onAddressChanged);
              window.removeEventListener(dist["EthereumProvider"].CHAIN_CHANGED, this.onChainChanged);
            }
          }, {
            key: "mounted",
            value: function () {
              var _mounted = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                var _this2 = this;

                var provider;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (!(!this.network && this.fallbackProvider)) {
                          _context4.next = 5;
                          break;
                        }

                        this.badConfiguration = "Config Error";
                        throw new Error('fallbackProvider should not be configured on network agnostic connections.');

                      case 5:
                        if (!!dist["EthereumProvider"].network() && this.network != dist["EthereumProvider"].network()) {
                          console.warn('An older EthereumProvider was initialized with different inputs, your input for the current connect-widget will be ignored');
                        }

                        _context4.next = 8;
                        return dist["EthereumProvider"].initialize(this.network, this.fallbackProvider);

                      case 8:
                        provider = dist["EthereumProvider"].provider();

                        if (!provider) {
                          _context4.next = 13;
                          break;
                        }

                        if (dist["EthereumProvider"].selectedAddress()) {
                          _context4.next = 13;
                          break;
                        }

                        _context4.next = 13;
                        return this._automaticallyReconnect();

                      case 13:
                        this.updateChainInfo();
                        window.addEventListener('transactions-confirmed-event', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                          return regeneratorRuntime.wrap(function _callee3$(_context3) {
                            while (1) {
                              switch (_context3.prev = _context3.next) {
                                case 0:
                                  _context3.next = 2;
                                  return _this2.updateBalance();

                                case 2:
                                case "end":
                                  return _context3.stop();
                              }
                            }
                          }, _callee3);
                        })));

                      case 15:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, this);
              }));

              function mounted() {
                return _mounted.apply(this, arguments);
              }

              return mounted;
            }()
            /**
             * Handles button triggered connect
             */

          }, {
            key: "connectWallet",
            value: function () {
              var _connectWallet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(event) {
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        _context5.prev = 0;
                        this.isLoading = true;
                        _context5.next = 4;
                        return this.connect();

                      case 4:
                        _context5.next = 11;
                        break;

                      case 6:
                        _context5.prev = 6;
                        _context5.t0 = _context5["catch"](0);
                        _context5.next = 10;
                        return this.disconnect();

                      case 10:
                        this.isLoading = false;

                      case 11:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5, this, [[0, 6]]);
              }));

              function connectWallet(_x) {
                return _connectWallet.apply(this, arguments);
              }

              return connectWallet;
            }()
            /**
             * Connects to web3 and updates all chain/wallet related info upon success.
             */

          }, {
            key: "connect",
            value: function () {
              var _connect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
                var autoReconnect,
                  _args6 = arguments;
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        autoReconnect = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : false;
                        _context6.prev = 1;
                        _context6.next = 4;
                        return dist["EthereumProvider"].connect();

                      case 4:
                        _context6.next = 11;
                        break;

                      case 6:
                        _context6.prev = 6;
                        _context6.t0 = _context6["catch"](1);

                        if (autoReconnect) {
                          _context6.next = 11;
                          break;
                        }

                        if (_context6.t0.code == -32002 && _context6.t0.message && _context6.t0.message.includes('pending')) {
                          alert("Please open MetaMask to continue.");
                        } else if (_context6.t0.code == 4001) {// error.code = 4001 means user reject challenge
                        } else {
                          console.warn(_context6.t0);
                          alert("Could not connect to MetaMask, please try refreshing your page. If you continue to have issues, try closing your browser and re-opening it.");
                        }

                        throw _context6.t0;

                      case 11:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6, null, [[1, 6]]);
              }));

              function connect() {
                return _connect.apply(this, arguments);
              }

              return connect;
            }()
            /**
             * Disonnects from web3 and deletes our Oauth cookie for the JSON API.
             */

          }, {
            key: "disconnect",
            value: function () {
              var _disconnect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
                var event;
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                  while (1) {
                    switch (_context7.prev = _context7.next) {
                      case 0:
                        // @ts-ignore
                        this.showMenu = false; // only appears in ConnetMenu

                        if (!this.walletAddressFull) {
                          _context7.next = 6;
                          break;
                        }

                        localStorage.removeItem("connectedAddress");
                        _context7.next = 5;
                        return dist["EthereumProvider"].disconnect(true);

                      case 5:
                        this.isLoading = false;

                      case 6:
                        event = new CustomEvent(UNAUTHENTICATED, {
                          detail: {
                            address: this.walletAddressFull
                          }
                        });
                        window.dispatchEvent(event);

                      case 8:
                      case "end":
                        return _context7.stop();
                    }
                  }
                }, _callee7, this);
              }));

              function disconnect() {
                return _disconnect.apply(this, arguments);
              }

              return disconnect;
            }()
            /**
             * Connects to web3 only if this.automaticallyReconnect is set and we
             * are already connected with a valid wallet address.
             */

          }, {
            key: "_automaticallyReconnect",
            value: function () {
              var _automaticallyReconnect2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        if (!this.autoReconnect) {
                          _context8.next = 4;
                          break;
                        }

                        if (!localStorage.getItem("connectedAddress")) {
                          _context8.next = 4;
                          break;
                        }

                        _context8.next = 4;
                        return this.connect(true);

                      case 4:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8, this);
              }));

              function _automaticallyReconnect() {
                return _automaticallyReconnect2.apply(this, arguments);
              }

              return _automaticallyReconnect;
            }()
            /**
             * Updates the current eth balance of the wallet being displayed.
             * Call this whenever the adddress, chain, or provider is changed.
             */

          }, {
            key: "updateBalance",
            value: function () {
              var _updateBalance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
                var provider, balanceString, balanceParts;
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                  while (1) {
                    switch (_context9.prev = _context9.next) {
                      case 0:
                        provider = dist["EthereumProvider"].provider();

                        if (!(this.walletAddressFull && provider)) {
                          _context9.next = 10;
                          break;
                        }

                        _context9.next = 4;
                        return provider.getBalance(this.walletAddressFull);

                      case 4:
                        balanceString = _context9.sent.toString();
                        balanceParts = balanceString.split('.');

                        if (balanceParts.length == 2 && balanceParts[1].length > 2) {
                          balanceString = "".concat(balanceParts[0], ".").concat(balanceParts[1].slice(0, 2));
                        }

                        this.walletBalance = balanceString;
                        _context9.next = 11;
                        break;

                      case 10:
                        this.walletBalance = undefined;

                      case 11:
                      case "end":
                        return _context9.stop();
                    }
                  }
                }, _callee9, this);
              }));

              function updateBalance() {
                return _updateBalance.apply(this, arguments);
              }

              return updateBalance;
            }()
            /**
             * Updates the name and corresponding color for chainInfo. Call this
             * whenever the chain information may have updated.
             */

          }, {
            key: "updateChainInfo",
            value: function updateChainInfo() {
              /* NOTE possibility that there is duplicate functionality here
       * between this method and badConfiguration variable.
       */
              var chainId = dist["EthereumProvider"].chainId();

              if (chainId) {
                this.chainInfo = {
                  name: dist["EthereumNetwork"][chainId],
                  color: ETHEREUM_NETWORK_COLORS[chainId]
                };

                if (dist["EthereumProvider"].chainIsCorrect()) {
                  this.wrongChain = false;
                } else {
                  this.wrongChain = true;
                }
              } else {
                // No network provider or valid provider for specified network.
                // See if reason is due to browser chain being on the wrong network
                if (!dist["EthereumProvider"].chainIsCorrect()) {
                  this.badConfiguration = "Wrong Network";
                  this.providerAvailable = false;
                }
              }
            }
            /**
             * Fires when the address is changed
             *
             * First it updates all chainInfo.
             * Then it updates everything related to the wallet adddress and ens name
             * if possible. Finally it stores the wallet address as "connectAddress"
             * inside of local storage. If ther ewas an issue or the address is now
             * undefined/null, we clear all wallet related vlaues and clear localStorage
             * of the "connectedAddress" itme.
             */

          }, {
            key: "onAddressChanged",
            value: function () {
              var _onAddressChanged = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
                var address, ens, currentPage, appDetails, event, addressLength, retval, _event;

                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                  while (1) {
                    switch (_context10.prev = _context10.next) {
                      case 0:
                        this.badConfiguration = null;
                        this.updateChainInfo();
                        address = dist["EthereumProvider"].selectedAddress();
                        ens = dist["EthereumProvider"].selectedENSName();

                        if (!(address != this.walletAddressFull || ens != this.walletENS)) {
                          _context10.next = 54;
                          break;
                        }

                        // Only change if address has changed
                        // @ts-ignore
                        window.manifold.isAuthenticated = false; // @ts-ignore

                        window.manifold.connectedAddress = '';
                        this.walletAddressFull = address;
                        this.walletENS = ens;

                        if (!address) {
                          _context10.next = 45;
                          break;
                        }

                        _context10.prev = 10;
                        this.signatureAddress = this.walletAddressFull;

                        if (!(!this.clientId || !this.appName)) {
                          _context10.next = 22;
                          break;
                        }

                        currentPage = window.location.origin;
                        _context10.next = 16;
                        return getDetails(currentPage);

                      case 16:
                        appDetails = _context10.sent;
                        this.clientId = appDetails.clientId;
                        this.appName = appDetails.app;

                        if (!(!this.clientId || !this.appName)) {
                          _context10.next = 22;
                          break;
                        }

                        this.badConfiguration = "Config Error";
                        throw new Error('Must include clientId and appName.');

                      case 22:
                        _context10.next = 24;
                        return dist["EthereumProvider"].getOAuth(this.appName, '', this.clientId, true, false);

                      case 24:
                        this.oauthToken = _context10.sent;

                        if (this.oauthToken) {
                          // @ts-ignore
                          window.manifold.isAuthenticated = true; // @ts-ignore

                          window.manifold.connectedAddress = this.signatureAddress;
                          event = new CustomEvent(AUTHENTICATED, {
                            detail: {
                              address: this.signatureAddress,
                              accessToken: this.oauthToken,
                              client: new f({
                                token: this.oauthToken || ''
                              })
                            }
                          });
                          window.dispatchEvent(event);
                        }

                        _context10.next = 38;
                        break;

                      case 28:
                        _context10.prev = 28;
                        _context10.t0 = _context10["catch"](10);
                        console.warn(_context10.t0); // error.code = 4001 means user reject challenge

                        if (!(_context10.t0.code == 4001)) {
                          _context10.next = 37;
                          break;
                        }

                        _context10.next = 34;
                        return this.disconnect();

                      case 34:
                        this.oauthToken = undefined;
                        _context10.next = 38;
                        break;

                      case 37:
                        if (_context10.t0.code == -32002 && _context10.t0.message && _context10.t0.message.includes('pending')) {
                          alert("Please open MetaMask to continue.");
                        }

                      case 38:
                        addressLength = address.length;
                        retval = address.slice(0, 6) + '...' + address.slice(addressLength - 4, addressLength);
                        this.walletAddressShort = retval;
                        this.walletConnected = true;
                        localStorage.setItem("connectedAddress", address);
                        _context10.next = 53;
                        break;

                      case 45:
                        this.walletAddressShort = undefined;
                        this.walletConnected = false;
                        this.oauthToken = undefined;
                        localStorage.removeItem("connectedAddress"); // @ts-ignore

                        window.manifold.isAuthenticated = false; // @ts-ignore

                        window.manifold.connectedAddress = '';
                        _event = new CustomEvent(UNAUTHENTICATED, {
                          detail: {
                            address: this.walletAddressFull
                          }
                        });
                        window.dispatchEvent(_event);

                      case 53:
                        this.isLoading = false;

                      case 54:
                      case "end":
                        return _context10.stop();
                    }
                  }
                }, _callee10, this, [[10, 28]]);
              }));

              function onAddressChanged() {
                return _onAddressChanged.apply(this, arguments);
              }

              return onAddressChanged;
            }()
            /**
             * Fires when the chain is changed
             * Ensures the chainInfo is updated then updates the balance we see.
             */

          }, {
            key: "onChainChanged",
            value: function () {
              var _onChainChanged = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
                return regeneratorRuntime.wrap(function _callee11$(_context11) {
                  while (1) {
                    switch (_context11.prev = _context11.next) {
                      case 0:
                        this.badConfiguration = null; // There is a case where the auto-reconnect didn't work on initialization
                        // because the provider was not available yet.  This will cause a chain change
                        // event once it becomes available, so try auto-connection when this happens

                        if (dist["EthereumProvider"].selectedAddress()) {
                          _context11.next = 4;
                          break;
                        }

                        _context11.next = 4;
                        return this._automaticallyReconnect();

                      case 4:
                        this.updateChainInfo();
                        _context11.next = 7;
                        return this.updateBalance();

                      case 7:
                      case "end":
                        return _context11.stop();
                    }
                  }
                }, _callee11, this);
              }));

              function onChainChanged() {
                return _onChainChanged.apply(this, arguments);
              }

              return onChainChanged;
            }()
            /**
             * Fires when the provider is changed
             * Ensures that the chainInfo is updated then automatically reconnnects.
             */

          }, {
            key: "onProviderChanged",
            value: function () {
              var _onProviderChanged = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                  while (1) {
                    switch (_context12.prev = _context12.next) {
                      case 0:
                        this.badConfiguration = null;
                        this.updateChainInfo(); // TODO: This is not guaranteed. If (EP._network && !EP._fallbackProvider)
                        //       and the wallet is on the wrong network it will fail.

                        this.providerAvailable = true;
                        _context12.next = 5;
                        return this._automaticallyReconnect();

                      case 5:
                      case "end":
                        return _context12.stop();
                    }
                  }
                }, _callee12, this);
              }));

              function onProviderChanged() {
                return _onProviderChanged.apply(this, arguments);
              }

              return onProviderChanged;
            }()
          }]);

          return WalletMixin;
        }(vue_esm["a" /* default */]);

        __decorate([Prop()], wallet_WalletMixin.prototype, "fallbackProvider", void 0);

        __decorate([Prop()], wallet_WalletMixin.prototype, "network", void 0);

        __decorate([Prop({
          default: true
        })], wallet_WalletMixin.prototype, "autoReconnect", void 0);

        __decorate([Prop({
          default: ''
        })], wallet_WalletMixin.prototype, "clientId", void 0);

        __decorate([Prop({
          default: ''
        })], wallet_WalletMixin.prototype, "appName", void 0);

        __decorate([Prop({
          default: ''
        })], wallet_WalletMixin.prototype, "overrideConnectText", void 0);

        __decorate([Watch('walletAddressFull')], wallet_WalletMixin.prototype, "onWalletAddressFullChanged", null);

        wallet_WalletMixin = __decorate([vue_class_component_esm({
          components: {
            MInstallWallet: components_MInstallWallet
          }
        })], wallet_WalletMixin);
        /* harmony default export */ var wallet = (wallet_WalletMixin);
// CONCATENATED MODULE: ./node_modules/cache-loader/dist/cjs.js??ref--14-0!./node_modules/thread-loader/dist/cjs.js!./node_modules/babel-loader/lib!./node_modules/ts-loader??ref--14-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/widgets/OAuthConnect.vue?vue&type=script&lang=ts&











        var OAuthConnectvue_type_script_lang_ts_OAuthConnectMenu = /*#__PURE__*/function (_Mixins) {
          _inherits(OAuthConnectMenu, _Mixins);

          var _super = _createSuper(OAuthConnectMenu);

          function OAuthConnectMenu() {
            var _this;

            _classCallCheck(this, OAuthConnectMenu);

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this = _super.call.apply(_super, [this].concat(args));

            _defineProperty(_assertThisInitialized(_this), "showBalance", void 0);

            _defineProperty(_assertThisInitialized(_this), "showChain", void 0);

            _defineProperty(_assertThisInitialized(_this), "avatar", void 0);

            _defineProperty(_assertThisInitialized(_this), "showMenu", false);

            return _this;
          }

          return OAuthConnectMenu;
        }(mixins(wallet));

        __decorate([Prop({
          default: true
        })], OAuthConnectvue_type_script_lang_ts_OAuthConnectMenu.prototype, "showBalance", void 0);

        __decorate([Prop({
          default: true
        })], OAuthConnectvue_type_script_lang_ts_OAuthConnectMenu.prototype, "showChain", void 0);

        __decorate([Prop({
          default: ''
        })], OAuthConnectvue_type_script_lang_ts_OAuthConnectMenu.prototype, "avatar", void 0);

        OAuthConnectvue_type_script_lang_ts_OAuthConnectMenu = __decorate([vue_class_component_esm], OAuthConnectvue_type_script_lang_ts_OAuthConnectMenu);
        /* harmony default export */ var OAuthConnectvue_type_script_lang_ts_ = (OAuthConnectvue_type_script_lang_ts_OAuthConnectMenu);
// CONCATENATED MODULE: ./src/widgets/OAuthConnect.vue?vue&type=script&lang=ts&
        /* harmony default export */ var widgets_OAuthConnectvue_type_script_lang_ts_ = (OAuthConnectvue_type_script_lang_ts_);
// EXTERNAL MODULE: ./src/widgets/OAuthConnect.vue?vue&type=style&index=0&id=dc9416e0&scoped=true&lang=scss&
        var OAuthConnectvue_type_style_index_0_id_dc9416e0_scoped_true_lang_scss_ = __webpack_require__("4968");

// CONCATENATED MODULE: ./src/widgets/OAuthConnect.vue






        /* normalize component */

        var OAuthConnect_component = normalizeComponent(
          widgets_OAuthConnectvue_type_script_lang_ts_,
          render,
          staticRenderFns,
          false,
          null,
          "dc9416e0",
          null

        )

        /* harmony default export */ var OAuthConnect = (OAuthConnect_component.exports);
// CONCATENATED MODULE: ./src/main.ts






        vue_esm["a" /* default */].config.productionTip = false;
        var mConnectionInterval = null;

        if (window) {
          window.addEventListener('load', function () {
            var timeout = 10;

            if (!mConnectionInterval) {
              mConnectionInterval = setInterval(function () {
                timeout--; // each one of these are a bonafied VueComponent

                var widget = {
                  'OAuthConnect': OAuthConnect
                };

                var elements = _toConsumableArray(_toConsumableArray(document.querySelectorAll("[data-widget='m-oauth-connect']")).map(function (e) {
                  return {
                    el: e,
                    type: 'OAuthConnect'
                  };
                }));

                if (elements.length || timeout === 0) {
                  clearInterval(mConnectionInterval);

                  if (timeout === 0) {
                    console.warn("Connection widgets mount timed out.");
                  }

                  elements.forEach(function (_ref) {
                    var el = _ref.el,
                      type = _ref.type;
                    // @ts-ignore
                    var data = el.dataset;
                    new widget[type]({
                      el: el,
                      propsData: {
                        fallbackProvider: 'fallbackProvider' in data ? data['fallbackProvider'] : undefined,
                        network: 'network' in data ? data['network'] : undefined,
                        avatar: 'avatar' in data ? data['avatar'] : undefined,
                        autoReconnect: 'autoReconnect' in data ? data['autoReconnect'] : true,
                        strictAuth: 'strictAuth' in data ? data['strictAuth'] : undefined,
                        message: 'message' in data ? data['message'] : undefined,
                        showChain: 'showChain' in data ? true : false,
                        showBalance: 'showBalance' in data ? true : false,
                        clientId: 'clientId' in data ? data['clientId'] : undefined,
                        appName: 'appName' in data ? data['appName'] : undefined,
                        redirectUri: 'redirectUri' in data ? data['redirectUri'] : undefined,
                        overrideConnectText: 'overrideConnectText' in data ? data['overrideConnectText'] : undefined
                      }
                    });
                  });
                }
              }, 1000);
            }
          });
        }

        function prepareExportable(Component, componentTag) {
          return {
            install: function install(Vue) {
              clearInterval(mConnectionInterval);
              mConnectionInterval = true;
              Vue.component(componentTag, Component);
            }
          };
        }

        /* harmony default export */ var main = ({
          'OAuthConnect': prepareExportable(OAuthConnect, 'm-oauth-connect'),
          'AUTHENTICATED': AUTHENTICATED,
          'UNAUTHENTICATED': UNAUTHENTICATED
        });
// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js


        /* harmony default export */ var entry_lib = __webpack_exports__["default"] = (main);



        /***/ }),

      /***/ "fb6a":
      /***/ (function(module, exports, __webpack_require__) {

        "use strict";

        var $ = __webpack_require__("23e7");
        var isArray = __webpack_require__("e8b5");
        var isConstructor = __webpack_require__("68ee");
        var isObject = __webpack_require__("861d");
        var toAbsoluteIndex = __webpack_require__("23cb");
        var toLength = __webpack_require__("50c4");
        var toIndexedObject = __webpack_require__("fc6a");
        var createProperty = __webpack_require__("8418");
        var wellKnownSymbol = __webpack_require__("b622");
        var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");

        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');

        var SPECIES = wellKnownSymbol('species');
        var nativeSlice = [].slice;
        var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
        $({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
          slice: function slice(start, end) {
            var O = toIndexedObject(this);
            var length = toLength(O.length);
            var k = toAbsoluteIndex(start, length);
            var fin = toAbsoluteIndex(end === undefined ? length : end, length);
            // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
            var Constructor, result, n;
            if (isArray(O)) {
              Constructor = O.constructor;
              // cross-realm fallback
              if (isConstructor(Constructor) && (Constructor === Array || isArray(Constructor.prototype))) {
                Constructor = undefined;
              } else if (isObject(Constructor)) {
                Constructor = Constructor[SPECIES];
                if (Constructor === null) Constructor = undefined;
              }
              if (Constructor === Array || Constructor === undefined) {
                return nativeSlice.call(O, k, fin);
              }
            }
            result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
            for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
            result.length = n;
            return result;
          }
        });


        /***/ }),

      /***/ "fc6a":
      /***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
        var IndexedObject = __webpack_require__("44ad");
        var requireObjectCoercible = __webpack_require__("1d80");

        module.exports = function (it) {
          return IndexedObject(requireObjectCoercible(it));
        };


        /***/ }),

      /***/ "fce3":
      /***/ (function(module, exports, __webpack_require__) {

        var fails = __webpack_require__("d039");
        var global = __webpack_require__("da84");

// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
        var $RegExp = global.RegExp;

        module.exports = fails(function () {
          var re = $RegExp('.', 's');
          return !(re.dotAll && re.exec('\n') && re.flags === 's');
        });


        /***/ }),

      /***/ "fdbc":
      /***/ (function(module, exports) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
        module.exports = {
          CSSRuleList: 0,
          CSSStyleDeclaration: 0,
          CSSValueList: 0,
          ClientRectList: 0,
          DOMRectList: 0,
          DOMStringList: 0,
          DOMTokenList: 1,
          DataTransferItemList: 0,
          FileList: 0,
          HTMLAllCollection: 0,
          HTMLCollection: 0,
          HTMLFormElement: 0,
          HTMLSelectElement: 0,
          MediaList: 0,
          MimeTypeArray: 0,
          NamedNodeMap: 0,
          NodeList: 1,
          PaintRequestList: 0,
          Plugin: 0,
          PluginArray: 0,
          SVGLengthList: 0,
          SVGNumberList: 0,
          SVGPathSegList: 0,
          SVGPointList: 0,
          SVGStringList: 0,
          SVGTransformList: 0,
          SourceBufferList: 0,
          StyleSheetList: 0,
          TextTrackCueList: 0,
          TextTrackList: 0,
          TouchList: 0
        };


        /***/ }),

      /***/ "fdbf":
      /***/ (function(module, exports, __webpack_require__) {

        /* eslint-disable es/no-symbol -- required for testing */
        var NATIVE_SYMBOL = __webpack_require__("4930");

        module.exports = NATIVE_SYMBOL
          && !Symbol.sham
          && typeof Symbol.iterator == 'symbol';


        /***/ }),

      /***/ "fea9":
      /***/ (function(module, exports, __webpack_require__) {

        var global = __webpack_require__("da84");

        module.exports = global.Promise;


        /***/ }),

      /***/ "ff09":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return version; });
        const version = "random/5.5.0";
//# sourceMappingURL=_version.js.map

        /***/ }),

      /***/ "ffb2":
      /***/ (function(module, __webpack_exports__, __webpack_require__) {

        "use strict";

// EXPORTS
        __webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ ErrorCode; });
        __webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ lib_esm_Logger; });

// UNUSED EXPORTS: LogLevel

// CONCATENATED MODULE: ./node_modules/@ethersproject/logger/lib.esm/_version.js
        const version = "logger/5.5.0";
//# sourceMappingURL=_version.js.map
// CONCATENATED MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js

        let _permanentCensorErrors = false;
        let _censorErrors = false;
        const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
        let _logLevel = LogLevels["default"];

        let _globalLogger = null;
        function _checkNormalize() {
          try {
            const missing = [];
            // Make sure all forms of normalization are supported
            ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
              try {
                if ("test".normalize(form) !== "test") {
                  throw new Error("bad normalize");
                }
                ;
              }
              catch (error) {
                missing.push(form);
              }
            });
            if (missing.length) {
              throw new Error("missing " + missing.join(", "));
            }
            if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
              throw new Error("broken implementation");
            }
          }
          catch (error) {
            return error.message;
          }
          return null;
        }
        const _normalizeError = _checkNormalize();
        var LogLevel;
        (function (LogLevel) {
          LogLevel["DEBUG"] = "DEBUG";
          LogLevel["INFO"] = "INFO";
          LogLevel["WARNING"] = "WARNING";
          LogLevel["ERROR"] = "ERROR";
          LogLevel["OFF"] = "OFF";
        })(LogLevel || (LogLevel = {}));
        var ErrorCode;
        (function (ErrorCode) {
          ///////////////////
          // Generic Errors
          // Unknown Error
          ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
          // Not Implemented
          ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
          // Unsupported Operation
          //   - operation
          ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
          // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
          //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
          ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
          // Some sort of bad response from the server
          ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
          // Timeout
          ErrorCode["TIMEOUT"] = "TIMEOUT";
          ///////////////////
          // Operational  Errors
          // Buffer Overrun
          ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
          // Numeric Fault
          //   - operation: the operation being executed
          //   - fault: the reason this faulted
          ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
          ///////////////////
          // Argument Errors
          // Missing new operator to an object
          //  - name: The name of the class
          ErrorCode["MISSING_NEW"] = "MISSING_NEW";
          // Invalid argument (e.g. value is incompatible with type) to a function:
          //   - argument: The argument name that was invalid
          //   - value: The value of the argument
          ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
          // Missing argument to a function:
          //   - count: The number of arguments received
          //   - expectedCount: The number of arguments expected
          ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
          // Too many arguments
          //   - count: The number of arguments received
          //   - expectedCount: The number of arguments expected
          ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
          ///////////////////
          // Blockchain Errors
          // Call exception
          //  - transaction: the transaction
          //  - address?: the contract address
          //  - args?: The arguments passed into the function
          //  - method?: The Solidity method signature
          //  - errorSignature?: The EIP848 error signature
          //  - errorArgs?: The EIP848 error parameters
          //  - reason: The reason (only for EIP848 "Error(string)")
          ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
          // Insufficient funds (< value + gasLimit * gasPrice)
          //   - transaction: the transaction attempted
          ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
          // Nonce has already been used
          //   - transaction: the transaction attempted
          ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
          // The replacement fee for the transaction is too low
          //   - transaction: the transaction attempted
          ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
          // The gas limit could not be estimated
          //   - transaction: the transaction passed to estimateGas
          ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
          // The transaction was replaced by one with a higher gas price
          //   - reason: "cancelled", "replaced" or "repriced"
          //   - cancelled: true if reason == "cancelled" or reason == "replaced")
          //   - hash: original transaction hash
          //   - replacement: the full TransactionsResponse for the replacement
          //   - receipt: the receipt of the replacement
          ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
        })(ErrorCode || (ErrorCode = {}));
        ;
        const HEX = "0123456789abcdef";
        class lib_esm_Logger {
          constructor(version) {
            Object.defineProperty(this, "version", {
              enumerable: true,
              value: version,
              writable: false
            });
          }
          _log(logLevel, args) {
            const level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
              this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
              return;
            }
            console.log.apply(console, args);
          }
          debug(...args) {
            this._log(lib_esm_Logger.levels.DEBUG, args);
          }
          info(...args) {
            this._log(lib_esm_Logger.levels.INFO, args);
          }
          warn(...args) {
            this._log(lib_esm_Logger.levels.WARNING, args);
          }
          makeError(message, code, params) {
            // Errors are being censored
            if (_censorErrors) {
              return this.makeError("censored error", code, {});
            }
            if (!code) {
              code = lib_esm_Logger.errors.UNKNOWN_ERROR;
            }
            if (!params) {
              params = {};
            }
            const messageDetails = [];
            Object.keys(params).forEach((key) => {
              const value = params[key];
              try {
                if (value instanceof Uint8Array) {
                  let hex = "";
                  for (let i = 0; i < value.length; i++) {
                    hex += HEX[value[i] >> 4];
                    hex += HEX[value[i] & 0x0f];
                  }
                  messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                }
                else {
                  messageDetails.push(key + "=" + JSON.stringify(value));
                }
              }
              catch (error) {
                messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
              }
            });
            messageDetails.push(`code=${code}`);
            messageDetails.push(`version=${this.version}`);
            const reason = message;
            if (messageDetails.length) {
              message += " (" + messageDetails.join(", ") + ")";
            }
            // @TODO: Any??
            const error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function (key) {
              error[key] = params[key];
            });
            return error;
          }
          throwError(message, code, params) {
            throw this.makeError(message, code, params);
          }
          throwArgumentError(message, name, value) {
            return this.throwError(message, lib_esm_Logger.errors.INVALID_ARGUMENT, {
              argument: name,
              value: value
            });
          }
          assert(condition, message, code, params) {
            if (!!condition) {
              return;
            }
            this.throwError(message, code, params);
          }
          assertArgument(condition, message, name, value) {
            if (!!condition) {
              return;
            }
            this.throwArgumentError(message, name, value);
          }
          checkNormalize(message) {
            if (message == null) {
              message = "platform missing String.prototype.normalize";
            }
            if (_normalizeError) {
              this.throwError("platform missing String.prototype.normalize", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "String.prototype.normalize", form: _normalizeError
              });
            }
          }
          checkSafeUint53(value, message) {
            if (typeof (value) !== "number") {
              return;
            }
            if (message == null) {
              message = "value not safe";
            }
            if (value < 0 || value >= 0x1fffffffffffff) {
              this.throwError(message, lib_esm_Logger.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "out-of-safe-range",
                value: value
              });
            }
            if (value % 1) {
              this.throwError(message, lib_esm_Logger.errors.NUMERIC_FAULT, {
                operation: "checkSafeInteger",
                fault: "non-integer",
                value: value
              });
            }
          }
          checkArgumentCount(count, expectedCount, message) {
            if (message) {
              message = ": " + message;
            }
            else {
              message = "";
            }
            if (count < expectedCount) {
              this.throwError("missing argument" + message, lib_esm_Logger.errors.MISSING_ARGUMENT, {
                count: count,
                expectedCount: expectedCount
              });
            }
            if (count > expectedCount) {
              this.throwError("too many arguments" + message, lib_esm_Logger.errors.UNEXPECTED_ARGUMENT, {
                count: count,
                expectedCount: expectedCount
              });
            }
          }
          checkNew(target, kind) {
            if (target === Object || target == null) {
              this.throwError("missing new", lib_esm_Logger.errors.MISSING_NEW, { name: kind.name });
            }
          }
          checkAbstract(target, kind) {
            if (target === kind) {
              this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
            }
            else if (target === Object || target == null) {
              this.throwError("missing new", lib_esm_Logger.errors.MISSING_NEW, { name: kind.name });
            }
          }
          static globalLogger() {
            if (!_globalLogger) {
              _globalLogger = new lib_esm_Logger(version);
            }
            return _globalLogger;
          }
          static setCensorship(censorship, permanent) {
            if (!censorship && permanent) {
              this.globalLogger().throwError("cannot permanently disable censorship", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
              });
            }
            if (_permanentCensorErrors) {
              if (!censorship) {
                return;
              }
              this.globalLogger().throwError("error censorship permanent", lib_esm_Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setCensorship"
              });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
          }
          static setLogLevel(logLevel) {
            const level = LogLevels[logLevel.toLowerCase()];
            if (level == null) {
              lib_esm_Logger.globalLogger().warn("invalid log level - " + logLevel);
              return;
            }
            _logLevel = level;
          }
          static from(version) {
            return new lib_esm_Logger(version);
          }
        }
        lib_esm_Logger.errors = ErrorCode;
        lib_esm_Logger.levels = LogLevel;
//# sourceMappingURL=index.js.map

        /***/ })

      /******/ });
});
